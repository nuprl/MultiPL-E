name: HumanEval_157_right_angle_triangle
language: jl
results:
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"Returns true if a, b, c form a right-angled\
    \ triangle, false otherwise\"\"\"\n    if c > a && c > b\n        return a^2 +\
    \ b^2 == c^2\n    elseif b > a && b > c\n        return a^2 + c^2 == b^2\n   \
    \ else\n        return c^2 + b^2 == a^2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    c^2 == a^2 + b^2\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0nnsw5n.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0nnsw5n.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0nnsw5n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0nnsw5n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your Code Here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpocad5lhw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpocad5lhw.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocad5lhw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocad5lhw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpocad5lhw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpocad5lhw.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocad5lhw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpocad5lhw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  pythagorean_triple(a, b, c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6wq7b7ph.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: pythagorean_triple\
    \ not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wq7b7ph.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a > 0 && b > 0 && c > 0 && (a^2 + b^2\
    \ == c^2 || a^2 + c^2 == b^2 || c^2 + b^2 == a^2)\nend\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "truefalseTest Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c # a must be hypotenuse\n \
    \       if b^2 + c^2 == a^2\n            return true\n        end\n    elseif\
    \ b > a && b > c # b must be hypotenuse\n        if a^2 + c^2 == b^2\n       \
    \     return true\n        end\n    elseif c > a && c > b # c must be hypotenuse\n\
    \        if a^2 + b^2 == c^2\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a+b > c) & (a+c > b) & (b+c > a)\n     \
    \   if (a^2 + b^2 == c^2) | (a^2 + c^2 == b^2) | (b^2 + c^2 == a^2)\n        \
    \    return true\n        else \n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ### BEGIN SOLUTION\n    if a == b == c\n   \
    \     return false\n    end\n    if a*a + b*b == c*c\n        return true\n  \
    \  end\n    if a*a + c*c == b*b\n        return true\n    end\n    if b*b + c*c\
    \ == a*a\n        return true\n    end\n    return false\n    ### END SOLUTION\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Write your code here.\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp727wtp2a.jl:21\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:23\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:25\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:27\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:28\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp727wtp2a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    return\
    \ a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    #a^2 + b^2 = c^2\n    if a^2 + b^2 ==\
    \ c^2:\n        return true\n    else:\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptveroab9.jl:16\nin expression starting at\
    \ /tmp/tmptveroab9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzsidmv9c.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsidmv9c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsidmv9c.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzsidmv9c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a==0 || b==0 || c==0\n        return false\n\
    \    end\n    if (a+b <= c) || (a+c <= b) || (b+c <= a)\n        return false\n\
    \    end\n    if (a*a+b*b == c*c) || (a*a+c*c == b*b) || (b*b+c*c == a*a)\n  \
    \      return true\n    end\n    return false\nend\n    \n    \n\"\"\"\n    You\
    \ are required to write a function that takes in an integer as an \n    argument\
    \ and returns the square of that integer.\n    Example:\n    >>> square(5)\n \
    \   25\n    >>> square(10)\n    100\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpl7zrjdzc.jl:26\nin expression starting at /tmp/tmpl7zrjdzc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if is_right_angle_triangle(a, b, c) || is_right_angle_triangle(a,\
    \ c, b) || is_right_angle_triangle(b, c, a)\n        return true\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf2xof19t.jl:24\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: is_right_angle_triangle\
    \ not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2xof19t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
