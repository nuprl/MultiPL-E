language: jl
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"Returns true if a, b, c form a right-angled\
    \ triangle, false otherwise\"\"\"\n    if c > a && c > b\n        return a^2 +\
    \ b^2 == c^2\n    elseif b > a && b > c\n        return a^2 + c^2 == b^2\n   \
    \ else\n        return c^2 + b^2 == a^2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    c^2 == a^2 + b^2\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_0nnsw5n.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_0nnsw5n.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_0nnsw5n.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_0nnsw5n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your Code Here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpocad5lhw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpocad5lhw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpocad5lhw.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocad5lhw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocad5lhw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpocad5lhw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpocad5lhw.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocad5lhw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  pythagorean_triple(a, b, c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp6wq7b7ph.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp6wq7b7ph.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: pythagorean_triple\
    \ not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp6wq7b7ph.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wq7b7ph.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wq7b7ph.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6wq7b7ph.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: pythagorean_triple not defined\n\
    \  Stacktrace:\n   [1] right_angl"
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a > 0 && b > 0 && c > 0 && (a^2 + b^2\
    \ == c^2 || a^2 + c^2 == b^2 || c^2 + b^2 == a^2)\nend\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'truefalseTest Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c # a must be hypotenuse\n \
    \       if b^2 + c^2 == a^2\n            return true\n        end\n    elseif\
    \ b > a && b > c # b must be hypotenuse\n        if a^2 + c^2 == b^2\n       \
    \     return true\n        end\n    elseif c > a && c > b # c must be hypotenuse\n\
    \        if a^2 + b^2 == c^2\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a+b > c) & (a+c > b) & (b+c > a)\n     \
    \   if (a^2 + b^2 == c^2) | (a^2 + c^2 == b^2) | (b^2 + c^2 == a^2)\n        \
    \    return true\n        else \n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ### BEGIN SOLUTION\n    if a == b == c\n   \
    \     return false\n    end\n    if a*a + b*b == c*c\n        return true\n  \
    \  end\n    if a*a + c*c == b*b\n        return true\n    end\n    if b*b + c*c\
    \ == a*a\n        return true\n    end\n    return false\n    ### END SOLUTION\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Write your code here.\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp727wtp2a.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp727wtp2a.jl:21\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:23\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:25\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:27\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp727wtp2a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp727wtp2a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp727wtp2a.jl:28\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    return\
    \ a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    #a^2 + b^2 = c^2\n    if a^2 + b^2 ==\
    \ c^2:\n        return true\n    else:\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptveroab9.jl:16\nin expression starting at\
    \ /tmp/tmptveroab9.jl:16\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzsidmv9c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzsidmv9c.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsidmv9c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsidmv9c.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a==0 || b==0 || c==0\n        return false\n\
    \    end\n    if (a+b <= c) || (a+c <= b) || (b+c <= a)\n        return false\n\
    \    end\n    if (a*a+b*b == c*c) || (a*a+c*c == b*b) || (b*b+c*c == a*a)\n  \
    \      return true\n    end\n    return false\nend\n    \n    \n\"\"\"\n    You\
    \ are required to write a function that takes in an integer as an \n    argument\
    \ and returns the square of that integer.\n    Example:\n    >>> square(5)\n \
    \   25\n    >>> square(10)\n    100\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpl7zrjdzc.jl:26\nin expression starting at /tmp/tmpl7zrjdzc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if is_right_angle_triangle(a, b, c) || is_right_angle_triangle(a,\
    \ c, b) || is_right_angle_triangle(b, c, a)\n        return true\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpf2xof19t.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpf2xof19t.jl:24\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: is_right_angle_triangle\
    \ not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpf2xof19t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2xof19t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2xof19t.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf2xof19t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: is_right_angle_triangle not defined\n\
    \  Stacktrac"
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # check if a^2 + b^2 = c^2\n    return (a^2\
    \ + b^2 == c^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpidamek1y.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpidamek1y.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidamek1y.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpidamek1y.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a > 0) && (b > 0) && (c > 0) && ((a^2\
    \ + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a>b && a>c)\n        return a*a == b*b +\
    \ c*c\n    elseif (b>a && b>c)\n        return b*b == a*a + c*c\n    else\n  \
    \      return c*c == a*a + b*b\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (c^2 == a^2 + b^2) || (a^2 == b^2 + c^2)\
    \ || (b^2 == a^2 + c^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    a2, b2, c2 = a^2, b^2, c^2\n    \n   \
    \ return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n    \nend\nright_angle_triangle(3,\
    \ 4, 5)\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a*a+b*b == c*c) || (a*a+c*c == b*b)\
    \ || (b*b+c*c == a*a)\nend\nright_angle_triangle(3, 4, 5)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 ==\
    \ b^2) || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > 0 && b > 0 && c > 0\n        if a^2 +\
    \ b^2 == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a*a\n    b2 = b*b\n    c2 = c*c\n    return\
    \ (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    pythagoras = a^2 + b^2\n    if pythagoras ==\
    \ c^2\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpujn4cg_3.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpujn4cg_3.jl:27\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpujn4cg_3.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpujn4cg_3.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2) + (b^2) == (c^2)\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4gjjn22j.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp4gjjn22j.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4gjjn22j.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4gjjn22j.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\n \n \n \n \n    \n    \n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) \n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoqf_99is.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpoqf_99is.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoqf_99is.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpoqf_99is.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = maximum([a, b, c])\n    cathetus\
    \ = sum([a, b, c]) - hypotenuse\n    return hypotenuse^2 == cathetus^2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpane0jad6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpane0jad6.jl:22\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpane0jad6.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpane0jad6.jl:21\ntest set: Test Failed at /tmp/tmpane0jad6.jl:23\n\
    \  Expression: candidate(1, 2, 3) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpane0jad6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpane0jad6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpane0jad6.jl:24\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpane0jad6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpane0jad6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpane0jad6.jl:26\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpane0jad6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpane0jad6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpane0jad6.jl:28\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
  timestamp: 1659978410
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a*a + b*b == c*c)\n        return true\n\
    \    elseif (a*a + c*c == b*b)\n        return true\n    elseif (b*b + c*c ==\
    \ a*a)\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        return\
    \ false\n    end\n    if a^2 + b^2 == c^2\n        return true\n    elseif b^2\
    \ + c^2 == a^2\n        return true\n    elseif a^2 + c^2 == b^2\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   elseif a^2 + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    pythagorean_triple = [3, 4, 5], [5, 12, 13],\
    \ [8, 15, 17], [7, 24, 25], [20, 21, 29], [12, 35, 37], [9, 40, 41], [28, 45,\
    \ 53], [11, 60, 61], [16, 63, 65], [33, 56, 65], [48, 55, 73], [13, 84, 85], [36,\
    \ 77, 85], [39, 80, 89], [65, 72, 97]\n    for i in pythagorean_triple\n     \
    \   if sort([a, b, c]) == sort(i)\n            return true\n        end\n    end\n\
    \    return false\nend\n \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp02pz5q7w.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp02pz5q7w.jl:29\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp02pz5q7w.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp02pz5q7w.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # The sum of any two sides of a triangle is\
    \ greater than the measure of the third side.\n    if (a^2 + b^2 == c^2) || (a^2\
    \ + c^2 == b^2) || (b^2 + c^2 == a^2)\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a > b) && (a > c)\n        return b^2 +\
    \ c^2 == a^2\n    elseif (b > a) && (b > c)\n        return a^2 + c^2 == b^2\n\
    \    else\n        return a^2 + b^2 == c^2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    return (a ^ 2 + b ^ 2 == c ^ 2) || (a ^ 2 + c ^ 2 == b ^ 2) || (b ^ 2 +\
    \ c ^ 2 == a ^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2, b2, c2 = a*a, b*b, c*c\n    return a2 +\
    \ b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c_sqr = c^2\n    a_sqr = a^2\n    b_sqr = b^2\n\
    \    a_sqr+b_sqr == c_sqr || a_sqr+c_sqr == b_sqr || b_sqr+c_sqr == a_sqr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a < b and a < c\n        return a^2 + b^2\
    \ == c^2\n    elseif b < a and b < c\n        return a^2 + b^2 == c^2\n    elseif\
    \ c < a and c < b\n        return a^2 + b^2 == c^2\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4boviapw.jl:13\nin expression starting at /tmp/tmp4boviapw.jl:13\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    if\
    \ a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a = [a, b, c]\n    order!(a)\n    # a is the\
    \ longest side\n    return a[3]^2 == a[1]^2 + a[2]^2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmphyuxjspz.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmphyuxjspz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: order! not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmphyuxjspz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyuxjspz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyuxjspz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphyuxjspz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: order! not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmphyuxjspz.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyuxjspz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyuxjspz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphyuxjspz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: order! not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmphyuxjspz.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyuxjspz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyuxjspz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphyuxjspz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: order! not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmphyuxjspz.jl:14\n\
    \  "
  timestamp: 1659978412
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    # check if one of the 3 sides is equal\
    \ to zero or if one side is greater than the sum of the other 2 sides\n    if\
    \ (a == 0 || b == 0 || c == 0) || (a > b + c || b > a + c || c > a + b)\n    \
    \    return false\n    end\n    \n    \"\"\"\n    because the problem is to check\
    \ if the three sides form a right-angled triangle,\n    then the sum of squares\
    \ of two sides of the triangle is equal to the square of the\n    third side for\
    \ a right-angled triangle.\n    \"\"\"\n    return (a^2 + b^2 == c^2) || (a^2\
    \ + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b\n        is_triangle = a*a < b*b +\
    \ c*c\n    else\n        is_triangle = b*b < a*a + c*c\n    end\n    \n    return\
    \ is_triangle\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_jaopa3h.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp_jaopa3h.jl:27\n  Expression: candidate(1,\
    \ 2, 3) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_jaopa3h.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_jaopa3h.jl:25\ntest set: Test Failed at /tmp/tmp_jaopa3h.jl:28\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_jaopa3h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_jaopa3h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_jaopa3h.jl:29\n  Expression: candidate(2, 2, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_jaopa3h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_jaopa3h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_jaopa3h.jl:35\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_jaopa3h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_jaopa3h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_jaopa3h.jl:36\n  Expression: candidate(2, 2, 10) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sq = a^2\n    b_sq = b^2\n    c_sq = c^2\n\
    \    if a_sq + b_sq == c_sq || a_sq + c_sq == b_sq || b_sq + c_sq == a_sq\n  \
    \      return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > 0 && b > 0 && c > 0 && (a^2 + b^2 ==\
    \ c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2+b^2==c^2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgi9yxg_k.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpgi9yxg_k.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgi9yxg_k.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgi9yxg_k.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978410
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n     if a^2 == b^2 + c^2 || b^2 == a^2 + c^2 ||\
    \ c^2 == a^2 + b^2\n        return true\n    else\n        return false\n    end\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) ||\
    \ (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Return true if the three sides form a right-angled\
    \ triangle, false otherwise.\n    # i.e. if the three sides of the triangle form\
    \ a Pythagorean triplet.\n    if(a^2 + b^2 == c^2)\n        return true\n    elseif(a^2\
    \ + c^2 == b^2)\n        return true\n    elseif(b^2 + c^2 == a^2)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # suppose a, b, c are the lengths of the three\
    \ sides of a triangle,\n    # and a is the largest one\n    a_sqr = a^2\n    b_sqr\
    \ = b^2\n    c_sqr = c^2\n    if a_sqr == b_sqr + c_sqr\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd56bigho.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpd56bigho.jl:29\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd56bigho.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd56bigho.jl:28\ntest set: Test Failed at /tmp/tmpd56bigho.jl:33\n\
    \  Expression: candidate(7, 24, 25) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd56bigho.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd56bigho.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd56bigho.jl:35\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd56bigho.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd56bigho.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd56bigho.jl:36\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd56bigho.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd56bigho.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd56bigho.jl:37\n  Expression: candidate(48, 55, 73) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (a^2 + c^2 == b^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        return a^2 == b^2\
    \ + c^2\n    elseif b > a && b > c\n        return b^2 == a^2 + c^2\n    elseif\
    \ c > a && c > b\n        return c^2 == a^2 + b^2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpslugtz2t.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpslugtz2t.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2, 2, 2) == false\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpslugtz2t.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslugtz2t.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslugtz2t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpslugtz2t.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(1, 1, 1) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpslugtz2t.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslugtz2t.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslugtz2t.jl:25\nTest Summary:\
    \ | Pass  Error  Tot"
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = max(a, b, c)\n    side1 = min(a,\
    \ b, c)\n    side2 = [i for i in [a, b, c] if i != hypotenuse && i != side1][1]\n\
    \    return hypotenuse ^ 2 == side1 ^ 2 + side2 ^ 2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7lp85wp7.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp7lp85wp7.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2, 2, 2) == false\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @\
    \ Main /tmp/tmp7lp85wp7.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7lp85wp7.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7lp85wp7.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7lp85wp7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(1, 1, 1) == false\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp7lp85wp7.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7lp85wp7.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7lp85wp7.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7lp85wp7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 10) == false\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp7lp85wp7.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7lp85wp7.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7lp85wp7.jl:22\nTest Summary:\
    \ | "
  timestamp: 1659978412
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzsidmv9c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzsidmv9c.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsidmv9c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsidmv9c.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c ^ 2 == a ^ 2 + b ^ 2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqoyh293e.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpqoyh293e.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqoyh293e.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqoyh293e.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        return a^2 == b^2\
    \ + c^2\n    elseif b > a && b > c\n        return b^2 == a^2 + c^2\n    else\n\
    \        return c^2 == a^2 + b^2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    for side in [a, b, c]\n        if side == 0\n\
    \            return false\n        end\n    end\n    if a >= b\n        a, b =\
    \ b, a\n    end\n    if b >= c\n        b, c = c, b\n    end\n    if a >= b\n\
    \        a, b = b, a\n    end\n    return c^2 == a^2 + b^2\nend\nright_angle_triangle(a,\
    \ b, c) = right_angle_triangle(Int64(a), Int64(b), Int64(c))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == hypot(b, c)\n        return true\n \
    \   elseif b == hypot(a, c)\n        return true\n    elseif c == hypot(a, b)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        if a^2 == b^2 + c^2\n\
    \            return true\n        else\n            return false\n        end\n\
    \    elseif b > a && b > c\n        if b^2 == a^2 + c^2\n            return true\n\
    \        else\n            return false\n        end\n    else\n        if c^2\
    \ == a^2 + b^2\n            return true\n        else\n            return false\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a < b && a < c\n        return (a^2) + (b^2)\
    \ == (c^2)\n    elseif b < a && b < c\n        return (a^2) + (b^2) == (c^2)\n\
    \    else\n        return (a^2) + (b^2) == (c^2)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdaink_2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpwdaink_2.jl:28\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwdaink_2.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwdaink_2.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a^2 + b^2 == c^2 ? true : false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpke7_dvor.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpke7_dvor.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpke7_dvor.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpke7_dvor.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: -1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpj23wz2jw.jl:20\n  Test threw
    exception\n  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpj23wz2jw.jl:14\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj23wz2jw.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj23wz2jw.jl:19\ntest set: Error
    During Test at /tmp/tmpj23wz2jw.jl:21\n  Test threw exception\n  Expression: candidate(1,
    2, 3) == false\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpj23wz2jw.jl:14\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj23wz2jw.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj23wz2j'
  timestamp: 1659978414
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a > 0 && b > 0 && c > 0 && a * a + b\
    \ * b == c * c\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1mxcff97.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp1mxcff97.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1mxcff97.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1mxcff97.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a == round(sqrt(b^2 + c^2)) || b == round(sqrt(a^2\
    \ + c^2)) || c == round(sqrt(a^2 + b^2))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps_gqae4j.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmps_gqae4j.jl:29\n  Expression: candidate(1,\
    \ 1, 1) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps_gqae4j.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps_gqae4j.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978412
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        a * a == b * b +\
    \ c * c ? true : false\n    elseif b > a && b > c\n        b * b == a * a + c\
    \ * c ? true : false\n    else\n        c * c == a * a + b * b ? true : false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978410
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a*a + b*b == c*c\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzuw6ass5.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzuw6ass5.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzuw6ass5.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzuw6ass5.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978412
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((c^2 == a^2 + b^2)|(a^2 == b^2 + c^2)|(b^2\
    \ == a^2 + c^2))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978410
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a < b+c) && (b < a+c) && (c < a+b) &&\
    \ (a^2 + b^2 == c^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjo3fm896.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpjo3fm896.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjo3fm896.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjo3fm896.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978412
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return true if (c > b) & (c > a) & ((b^2 + a^2)\
    \ == c^2) else false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpw_xoz0__.jl:12 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw_xoz0__.jl:13\n\
    in expression starting at /tmp/tmpw_xoz0__.jl:13\n"
  stdout: ''
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ## Your code goes here. \n    return 0\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0_zy0176.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp0_zy0176.jl:22\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0_zy0176.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0_zy0176.jl:21\ntest set: Test Failed at /tmp/tmp0_zy0176.jl:24\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_zy0176.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_zy0176.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0_zy0176.jl:26\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_zy0176.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_zy0176.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0_zy0176.jl:28\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_zy0176.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_zy0176.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0_zy0176.jl:29\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978412
- exit_code: -1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ac = a * a + c * c\n    if a == 0 || c == 0\n\
    \        return false\n    end\n    if ac == b * b\n        return true\n    end\n\
    \    if a > c\n        right_angle_triangle(c, b, a)\n    else\n        right_angle_triangle(a,\
    \ b, c)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978415
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    max = maximum([a, b, c])\n    if max > sum([a,\
    \ b, c]) - max\n        return false\n    end\n    return a^2 + b^2 == c^2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmh5604os.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpmh5604os.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmh5604os.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmh5604os.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Check if the triangle is right-angled\n\
    \    \"\"\"\n    @assert a > 0 && b > 0 && c > 0\n    # YOUR CODE HERE\n    if\
    \ a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sq = a^2\n    b_sq = b^2\n    c_sq = c^2\n\
    \    if a_sq + b_sq == c_sq || a_sq + c_sq == b_sq || b_sq + c_sq == a_sq\n  \
    \      return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) ||\
    \ (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a < b) \n        temp = a\n        a = b\n\
    \        b = temp\n    end\n    return (a^2 == b^2 + c^2)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp68g47xr6.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp68g47xr6.jl:25\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp68g47xr6.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp68g47xr6.jl:24\ntest set: Test Failed at /tmp/tmp68g47xr6.jl:29\n\
    \  Expression: candidate(7, 24, 25) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp68g47xr6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp68g47xr6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp68g47xr6.jl:31\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp68g47xr6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp68g47xr6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp68g47xr6.jl:32\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp68g47xr6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp68g47xr6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp68g47xr6.jl:33\n  Expression: candidate(48, 55, 73) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2)\n        return true\n\
    \    elseif (b^2 + c^2 == a^2)\n        return true\n    elseif (c^2 + a^2 ==\
    \ b^2)\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: -1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    if(a^2+b^2==c^2 || a^2+c^2==b^2 || b^2+c^2==a^2)\n\
    \        print(\"True\")\n    else\n        print(\"False\")\n    end\n    \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''Truetest set: Error During Test at /tmp/tmpo_vl1g2t.jl:26\n  Test threw
    exception\n  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpo_vl1g2t.jl:15\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_vl1g2t.jl:26 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_vl1g2t.jl:25\nFalsetest set:
    Error During Test at /tmp/tmpo_vl1g2t.jl:27\n  Test threw exception\n  Expression:
    candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type
    Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpo_vl1g2t.jl:17\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_vl1g2t.jl:27 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/t'
  timestamp: 1659978416
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzsidmv9c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzsidmv9c.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsidmv9c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsidmv9c.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if c < b\n        b, c = c, b\n    end\n   \
    \ if b < a\n        a, b = b, a\n    end\n    if c < b\n        b, c = c, b\n\
    \    end\n    a^2 + b^2 == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c>a && c>b && c==(a^2+b^2)^0.5 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpynkcqyxp.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpynkcqyxp.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpynkcqyxp.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpynkcqyxp.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    a, b, c the lengths of the three\
    \ sides of a triangle.\n    \"\"\"\n    h = hypot(a, b)\n    return h == c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc57w_spc.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpc57w_spc.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc57w_spc.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc57w_spc.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 # wow I can just write\
    \ like this\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw9z9jd83.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpw9z9jd83.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw9z9jd83.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw9z9jd83.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"Check the 3 sides a, b, c form a right-angled\
    \ triangle.\"\"\"\n    if (a^2 + b^2 == c^2) | (a^2 + c^2 == b^2) | (b^2 + c^2\
    \ == a^2)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = maximum([a, b, c])\n    if hypotenuse\
    \ == a\n        if a == b + c \n            return true\n        end\n    elseif\
    \ hypotenuse == b\n        if b == a + c \n            return true\n        end\n\
    \    elseif hypotenuse == c\n        if c == a + b \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0r321zr6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0r321zr6.jl:34\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0r321zr6.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0r321zr6.jl:33\ntest set: Test Failed at /tmp/tmp0r321zr6.jl:35\n\
    \  Expression: candidate(1, 2, 3) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r321zr6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r321zr6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0r321zr6.jl:36\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r321zr6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r321zr6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0r321zr6.jl:38\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r321zr6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r321zr6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0r321zr6.jl:40\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @"
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        return\
    \ false\n    end\n    if a < 0 || b < 0 || c < 0\n        return false\n    end\n\
    \    if (a ^ 2 + b ^ 2 == c ^ 2) || (b ^ 2 + c ^ 2 == a ^ 2) || (a ^ 2 + c ^ 2\
    \ == b ^ 2)\n        return true\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  if a == b == c == 0\n    return false\n  end\n\
    \  if (a == 0 && b == 0) || (a == 0 && c == 0) || (b == 0 && c == 0)\n    return\
    \ false\n  end\n  if (a == 0 && b == c) || (a == b && c == 0) || (a == c && b\
    \ == 0)\n    return true\n  end\n  if (a < 0 && b < 0 && c < 0) || (a < 0 && b\
    \ < 0) || (a < 0 && c < 0) || (b < 0 && c < 0)\n    return false\n  end\n  if\
    \ a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2\n    return true\n\
    \  end\n  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if abs(a*a + b*b - c*c) <=0.0001\n        return\
    \ true\n    elseif abs(a*a + c*c - b*b) <=0.0001\n        return true\n    elseif\
    \ abs(b*b + c*c - a*a) <=0.0001\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978412
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a*a + b*b == c*c\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpao1vl0sb.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpao1vl0sb.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpao1vl0sb.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpao1vl0sb.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    #@assert a > 0 && b > 0 && c > 0 \n    max_side\
    \ = max(a, b, c)\n    return (max_side ^ 2) == (a ^ 2 + b ^ 2 + c ^ 2 - max_side\
    \ ^ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978412
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) return true \n    else\
    \ \n        return false \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkp5xrgop.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpkp5xrgop.jl:25\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkp5xrgop.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkp5xrgop.jl:22\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978414
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if \n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp_22_504g.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_22_504g.jl:14\nin expression\
    \ starting at /tmp/tmp_22_504g.jl:14\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n    A right-angled triangle is a\
    \ triangle in which one angle is right angle or \n    90 degree.\n    \"\"\"\n\
    \    if (a>b) && (a>c)\n        return a*a == b*b + c*c\n    elseif (b>a) && (b>c)\n\
    \        return b*b == a*a + c*c\n    elseif (c>a) && (c>b)\n        return c*c\
    \ == a*a + b*b\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\n\"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return true if the three\n   \
    \ sides form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8cyg5jek.jl:15\nin expression starting at /tmp/tmp8cyg5jek.jl:15\n"
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sqa = a^2\n    sqb = b^2\n    sqc = c^2\n  \
    \  if sqa + sqb == sqc || sqa + sqc == sqb || sqb + sqc == sqa\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzsidmv9c.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzsidmv9c.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsidmv9c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsidmv9c.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # code here\n    return (a^2 + b^2 == c^2) ||\
    \ (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = maximum([a, b, c])\n    x = hypotenuse^2\n\
    \    z = (a^2 + b^2 + c^2) - x\n    if hypotenuse == x + z\n        return true\n\
    \    else\n        return false\n    end\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf56svhx8.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpf56svhx8.jl:28\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf56svhx8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf56svhx8.jl:27\ntest set: Test Failed at /tmp/tmpf56svhx8.jl:30\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56svhx8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56svhx8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf56svhx8.jl:32\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56svhx8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56svhx8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf56svhx8.jl:34\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56svhx8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56svhx8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf56svhx8.jl:35\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    aa = a*a\n    bb = b*b\n    cc = c*c\n    return\
    \ ((aa+bb) == cc) || ((aa+cc) == bb) || ((bb+cc) == aa)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sqrt(a^2 + b^2) == c ? true : false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4hfu9t5m.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp4hfu9t5m.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4hfu9t5m.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4hfu9t5m.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hyp = maximum([a, b, c])\n    if (a == hyp)\n\
    \        if (b^2 + c^2 == hyp^2)\n            return true\n        else\n    \
    \        return false\n        end\n    elseif (b == hyp)\n        if (a^2 + c^2\
    \ == hyp^2)\n            return true\n        else\n            return false\n\
    \        end\n    else\n        if (a^2 + b^2 == hyp^2)\n            return true\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ab = a*a + b*b\n    bc = b*b + c*c\n    ac =\
    \ a*a + c*c\n    if ab == c*c || bc == a*a || ac == b*b\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # TODO\n    return false\nend\nright_angle_triangle(3,\
    \ 4, 5)\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_7gcp6kg.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_7gcp6kg.jl:22\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_7gcp6kg.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_7gcp6kg.jl:21\ntest set: Test Failed at /tmp/tmp_7gcp6kg.jl:24\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7gcp6kg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7gcp6kg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_7gcp6kg.jl:26\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7gcp6kg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7gcp6kg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_7gcp6kg.jl:28\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7gcp6kg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7gcp6kg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_7gcp6kg.jl:29\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978415
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code\nend\n\"\"\"\n    Given the lengths\
    \ of the three sides of a triangle. Return \n    -1 if the three sides form a\
    \ right-angled triangle\n    -2 if the triangle is an isosceles triangle\n   \
    \ -3 if the triangle is equilateral\n    -4 if the triangle is a scalene triangle.\n\
    \    Example:\n    >>> triangle_type(3, 4, 5)\n    -1\n    >>> triangle_type(1,\
    \ 2, 3)\n    -4\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdbh0ibiq.jl:15\nin expression starting at /tmp/tmpdbh0ibiq.jl:15\n"
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 == b^2 + c^2 || b^2 == a^2 + c^2 || c^2\
    \ == a^2 + b^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a >= b && a >= c && a^2 == b^2 + c^2 ||\n  \
    \  b >= a && b >= c && b^2 == a^2 + c^2 ||\n    c >= a && c >= b && c^2 == a^2\
    \ + b^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Check if a is the right angle\n    if a^2\
    \ == b^2 + c^2\n        return true\n    end\n    # Check if b is the right angle\n\
    \    if b^2 == a^2 + c^2\n        return true\n    end\n    # Check if c is the\
    \ right angle\n    if c^2 == a^2 + b^2\n        return true\n    end\n    # otherwise\
    \ it is not a right-angled triangle\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        a^2 == b^2 + c^2\n\
    \    elseif b > a && b > c\n        b^2 == a^2 + c^2\n    else\n        c^2 ==\
    \ a^2 + b^2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Use Pythagorean theorem to check if a^2 +\
    \ b^2 = c^2\n    # a^2 + b^2 = c^2\n    # (a^2 + b^2)^0.5 = c\n    # a^2 + b^2\
    \ - c^2 = 0\n    # a^2 + b^2 - c^2 >= 0\n    # Discriminant\n    \u0394 = (a^2\
    \ + b^2 - c^2) >= 0\n    # Use Pythagorean theorem to check if a^2 + b^2 = c^2\n\
    \    # (a^2 + b^2)^0.5 = c\n    # Use Pythagorean theorem to check if a^2 + c^2\
    \ = b^2\n    # (a^2 + c^2)^0.5 = b\n    # Use Pythagorean theorem to check if\
    \ b^2 + c^2 = a^2\n    # (b^2 + c^2)^0.5 = a\n    # Check if a, b, c are positive\n\
    \    return (a>0) & (b>0) & (c>0) & (((a^2 + b^2)^0.5 == c) | ((a^2 + c^2)^0.5\
    \ == b) | ((b^2 + c^2)^0.5 == a)) & \u0394\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypot(a, b) == c || hypot(a, c) == b || hypot(b,\
    \ c) == a\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a < b\n        a, b = b, a\n    end\n   \
    \ if a < c\n        a, c = c, a\n    end\n    if b < c\n        b, c = c, b\n\
    \    end\n    return (a^2) == (b^2 + c^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (a^2 + c^2 == b^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a*a\n    b2 = b*b\n    c2 = c*c\n    if\
    \ ((a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2))\n        return true\n\
    \    else\n        return false\n    end\nend\n\"\"\"\n    Given an array of integers\
    \ A. Return an array B where B[i] = A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1].\n\
    \    Example:\n    >>> left_right_products([1, 2, 3, 4, 5])\n    [120, 60, 40,\
    \ 30, 24]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv_ghdsdt.jl:22\nin expression starting at /tmp/tmpv_ghdsdt.jl:22\n"
  stdout: ''
  timestamp: 1659978415
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # return true if a triangle with edges of length\
    \ a, b, c forms a right-angled triangle, false otherwise. \n    return a^2 + b^2\
    \ == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_7ed_n18.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp_7ed_n18.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_7ed_n18.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_7ed_n18.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    const max_value = maximum([a, b, c])\n    const\
    \ others = [v for v in [a, b, c] if v != max_value]\n    return others[1]^2 +\
    \ others[2]^2 == max_value^2\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmpsbi5p8f5.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbi5p8f5.jl:1\n\
    in expression starting at /tmp/tmpsbi5p8f5.jl:1\n"
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    # YOUR CODE HERE\n    \n    \n    if (a*a)+(b*b)==(c*c) || (a*a)+(c*c)==(b*b)\
    \ || (b*b)+(c*c)==(a*a)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a+b)>c && (a+c)>b && (b+c)>a)\n       \
    \ return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2) || (a^2 + c^2 == b^2)\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a < b && a < c\n        return a*a + b*b\
    \ == c*c\n    elseif b < a && b < c\n        return a*a + b*b == c*c\n    elseif\
    \ c < a && c < b\n        return a*a + b*b == c*c\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_om4en7w.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp_om4en7w.jl:30\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_om4en7w.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_om4en7w.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    m = maximum([a, b, c])\n    others = [a, b,\
    \ c]\n    deleteat!(others, findall(x->x==m, others)[1])\n    return m == sqrt(sum(x^2\
    \ for x in others))\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a + b > c) & (a + c > b) & (b + c > a)\n\
    \        if ((a^2 + b^2 == c^2) | (a^2 + c^2 == b^2) | (b^2 + c^2 == a^2))\n \
    \           return true\n        else \n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        hypotenuse = a\n\
    \        side_a = b\n        side_b = c\n    elseif b > a && b > c\n        hypotenuse\
    \ = b\n        side_a = a\n        side_b = c\n    else\n        hypotenuse =\
    \ c\n        side_a = a\n        side_b = b\n    end\n    return hypotenuse ==\
    \ sqrt(side_a^2 + side_b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0 return false end\n\
    \    if a == b && b == c return false end\n    if a > b && a > c\n        if a\
    \ > b+c return false end\n        return right_angle_triangle(b, c, a)\n    elseif\
    \ b > a && b > c\n        if b > a+c return false end\n        return right_angle_triangle(a,\
    \ c, b)\n    else\n        if c > a+b return false end\n        return right_angle_triangle(a,\
    \ b, c)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978419
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    aa = a*a\n    bb = b*b\n    cc = c*c\n    if\
    \ (aa+bb == cc) || (aa+cc == bb) || (bb+cc == aa)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    square_a = a^2\n    square_b = b^2\n    square_c\
    \ = c^2\n    if square_a + square_b == square_c\n        return true\n    elseif\
    \ square_a + square_c == square_b\n        return true\n    elseif square_b +\
    \ square_c == square_a\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if  a < b \n        if a < c\n            if\
    \ b * b + c * c == a * a\n                return true\n            end\n     \
    \   else\n            if b * b + a * a == c * c\n                return true\n\
    \            end\n        end\n    else\n        if b < c\n            if a *\
    \ a + c * c == b * b\n                return true\n            end\n        else\n\
    \            if a * a + b * b == c * c\n                return true\n        \
    \    end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp77j3ne49.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp77j3ne49.jl:41\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp77j3ne49.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp77j3ne49.jl:40\ntest set: Test Failed at /tmp/tmp77j3ne49.jl:43\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77j3ne49.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77j3ne49.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp77j3ne49.jl:45\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77j3ne49.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77j3ne49.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp77j3ne49.jl:47\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp77j3ne49.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp77j3ne49.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp77j3ne49.jl:48\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a*a == b*b + c*c) || (b*b == a*a + c*c)\
    \ || (c*c == a*a + b*b)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a < b  && b < c && (a^2 + b^2 == c^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa2zrrbwt.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpa2zrrbwt.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa2zrrbwt.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa2zrrbwt.jl:19\ntest set: Test Failed at /tmp/tmpa2zrrbwt.jl:27\n\
    \  Expression: candidate(15, 8, 17) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2zrrbwt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2zrrbwt.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sorted_tuple = sort([a, b, c])\n    return sorted_tuple[1]^2\
    \ + sorted_tuple[2]^2 == sorted_tuple[3]^2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a*a\n    b2 = b*b\n    c2 = c*c\n    return\
    \ (b2+c2 == a2) || (a2+c2 == b2) || (a2+b2 == c2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Write your code here\n    if (a>b && a>c)\n\
    \        return (a*a==b*b+c*c)\n    elseif (b>a && b>c)\n        return (b*b==a*a+c*c)\n\
    \    else\n        return (c*c==a*a+b*b)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (c^2 == a^2 + b^2) || (a^2 == b^2 + c^2)\
    \ || (b^2 == a^2 + c^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return  a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978415
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpciaohxdi.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpciaohxdi.jl:20\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test Failed at /tmp/tmpciaohxdi.jl:22\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:24\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:26\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:27\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        true\n    else\n\
    \        false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7gxhm4ko.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp7gxhm4ko.jl:26\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7gxhm4ko.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7gxhm4ko.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978418
- exit_code: -1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpaumw44zi.jl:20\n  Test threw
    exception\n  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpaumw44zi.jl:14\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaumw44zi.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaumw44zi.jl:19\ntest set: Error
    During Test at /tmp/tmpaumw44zi.jl:21\n  Test threw exception\n  Expression: candidate(1,
    2, 3) == false\n  MethodError: Cannot `convert` an object of type Nothing to an
    object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpaumw44zi.jl:14\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaumw44zi.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaumw44z'
  timestamp: 1659978420
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 \n        return true\n\
    \    elseif a^2 + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        hypotenuse = a\n\
    \        side_one = b\n        side_two = c\n    elseif b > a && b > c\n     \
    \   hypotenuse = b\n        side_one = a\n        side_two = c\n    elseif c >\
    \ a && c > b\n        hypotenuse = c\n        side_one = a\n        side_two =\
    \ b\n    end\n    hypotenuse^2 == side_one^2 + side_two^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpf5i3_ous.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpf5i3_ous.jl:36\n  Test threw exception\n\
    \  Expression: candidate(2, 2, 2) == false\n  UndefVarError: hypotenuse not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpf5i3_ous.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5i3_ous.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5i3_ous.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf5i3_ous.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(1, 1, 1) == false\n  UndefVarError: hypotenuse not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpf5i3_ous.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5i3_ous.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5i3_ous.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    9      2     11\n"
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a == b == c) return false end\n   \n   \
    \ # sort the sides\n    sorted_sides = sort([a, b, c])\n    # check the side relation\n\
    \    if (sorted_sides[1]^2 + sorted_sides[2]^2 == sorted_sides[3]^2) return true\
    \ end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = [a, b, c]\n    hypotenuse = sort(hypotenuse)\n\
    \    a, b, c = hypotenuse[1], hypotenuse[2], hypotenuse[3]\n    if(a^2 + b^2 ==\
    \ c^2)\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c = maximum([a, b, c])\n    return a^2 + b^2\
    \ == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi4dyxsgm.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpi4dyxsgm.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi4dyxsgm.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi4dyxsgm.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\"\n    a, b, c: length of each side\n\
    \    \"\"\"\n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 ==\
    \ a^2)\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a > 0 && b > 0 && c > 0 && a^2 + b^2\
    \ == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdc5tuiqy.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpdc5tuiqy.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdc5tuiqy.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdc5tuiqy.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a*a + b*b == c*c || b*b + c*c == a*a || c*c\
    \ + a*a == b*b\n        return true\n    else\n        return false\n    end\n\
    end\n \nif right_angle_triangle(3, 4, 5) == true\n    println(\"It is a right\
    \ angle triangle.\")\nelse\n    println(\"It is not a right angle triangle.\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'It is a right angle triangle.

    Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > 0 && b > 0 && c > 0\n        if a * a\
    \ + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a\n     \
    \       return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2; b2 = b^2; c2 = c^2\n    if (a2 + b2\
    \ == c2) || (a2 + c2 == b2) || (b2 + c2 == a2)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a>b) & (a>c)\n        return (a^2 == b^2\
    \ + c^2)\n    elseif (b>a) & (b>c)\n        return (b^2 == a^2 + c^2)\n    elseif\
    \ (c>a) & (c>b)\n        return (c^2 == a^2 + b^2)\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    side_lengths = [a, b, c]\n    side_lengths =\
    \ sort(side_lengths)\n    return (side_lengths[1]^2 + side_lengths[2]^2) == side_lengths[3]^2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if  a > b && a > c \n        return  a^2 ==\
    \ b^2 + c^2\n    elseif b > a && b > c\n        return b^2 == a^2 + c^2\n    else\n\
    \        return c^2 == a^2 + b^2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c\
    \ &gt; 0\n        x = [a, b, c]\n        x = sort(x)\n        if x[1]^2 + x[2]^2\
    \ == x[3]^2\n            return true\n        else \n            return false\n\
    \        end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &amp around /tmp/tmphg0v8xb4.jl:13\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmphg0v8xb4.jl:1\nin expression starting\
    \ at /tmp/tmphg0v8xb4.jl:1\n"
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a^2+b^2 == c^2) || (a^2+c^2 == b^2) ||\
    \ (b^2+c^2 == a^2))\n        return true\n    else\n        return false\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    return a*a + b*b == c*c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc53ykmsf.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpc53ykmsf.jl:33\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc53ykmsf.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc53ykmsf.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    aa = a*a\n    bb = b*b\n    cc = c*c\n    (aa\
    \ + bb == cc) || (aa + cc == bb) || (bb + cc == aa)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == sqrt(b^2 + c^2) || b == sqrt(a^2 + c^2)\
    \ || c == sqrt(a^2 + b^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = max(a, b, c)\n    return hypotenuse\
    \ ^ 2 == a ^ 2 + b ^ 2 + c ^ 2 - hypotenuse ^ 2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a = a > b ? a : b\n    b = a < b ? a : b\n \
    \   c = a < c ? a : c\n    a = a > c ? a : c\n    return a^2 == b^2 + c^2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptxg57w88.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmptxg57w88.jl:24\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptxg57w88.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptxg57w88.jl:23\ntest set: Test Failed at /tmp/tmptxg57w88.jl:28\n\
    \  Expression: candidate(7, 24, 25) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxg57w88.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxg57w88.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptxg57w88.jl:30\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxg57w88.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxg57w88.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptxg57w88.jl:31\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxg57w88.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxg57w88.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptxg57w88.jl:32\n  Expression: candidate(48, 55, 73) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n "
  timestamp: 1659978419
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hyp = maximum([a, b, c])\n    others = [a, b,\
    \ c]\n    others.remove(hyp)\n    return (hyp^2 == others[1]^2 + others[2]^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpufovcz94.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpufovcz94.jl:23\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  type Array has no field remove\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpufovcz94.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpufovcz94.jl:23 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpufovcz94.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpufovcz94.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  type Array has no field remove\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpufovcz94.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpufovcz94.jl:24 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpufovcz94.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpufovcz94.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  type Array has no field remove\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpufovcz94.jl:15\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpufovcz94.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpufovcz94.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpufovcz94.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  type "
  timestamp: 1659978420
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > 0 && b > 0 && c > 0\n        a2 = a*a\n\
    \        b2 = b*b\n        c2 = c*c\n        if c2 == a2 + b2 || a2 == b2 + c2\
    \ || b2 == a2 + c2\n            return true\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a*a + b*b == c*c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpayaxkyvc.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpayaxkyvc.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpayaxkyvc.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpayaxkyvc.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c > 0 && c^2 == a^2 + b^2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6naerl30.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp6naerl30.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6naerl30.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6naerl30.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978419
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sq = a^2\n    b_sq = b^2\n    c_sq = c^2\n\
    \    if (a_sq + b_sq == c_sq) || (a_sq + c_sq == b_sq) || (b_sq + c_sq == a_sq)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    # Sort the three lengths in increasing\
    \ order\n    if a > b\n        a, b = b, a\n    end\n    if b > c\n        b,\
    \ c = c, b\n    end\n    if a > b\n        a, b = b, a\n    end\n    # Create\
    \ a right-angled triangle\n    if a^2 + b^2 == c^2\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code here\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpcm13cld0.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcm13cld0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpcm13cld0.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm13cld0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm13cld0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcm13cld0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpcm13cld0.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm13cld0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm13cld0.jl:20\ntest set:\
    \ Error During Test at /t"
  timestamp: 1659978421
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a, b, c = sort([a, b, c])\n    return a*a +\
    \ b*b == c*c\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = max(a, b, c)\n    if hypotenuse\
    \ == a\n        return a ^ 2 == b ^ 2 + c ^ 2\n    elseif hypotenuse == b\n  \
    \      return b ^ 2 == a ^ 2 + c ^ 2\n    else\n        return c ^ 2 == a ^ 2\
    \ + b ^ 2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpciaohxdi.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpciaohxdi.jl:20\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test Failed at /tmp/tmpciaohxdi.jl:22\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:24\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:26\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpciaohxdi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpciaohxdi.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpciaohxdi.jl:27\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   "
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if  a^2 + b^2 == c^2 \n        return true\n\
    \    elseif a^2 + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n\
    \        return true\n    else\n        return false\n    end\nend\nprintln(right_angle_triangle(3,\
    \ 4, 5))\nprintln(right_angle_triangle(1, 2, 3))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'true

    false

    Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Tests if a triangle is right angled\
    \ triangle\n    \"\"\"\n    if (a > b) && (a > c)\n        sqrta = a^2\n     \
    \   sqrtb = b^2\n        sqrtc = c^2\n        if (sqrta == sqrtb + sqrtc)\n  \
    \          return true\n        else\n            return false\n        end\n\
    \    elseif (b > a) && (b > c)\n        sqrta = a^2\n        sqrtb = b^2\n   \
    \     sqrtc = c^2\n        if (sqrtb == sqrta + sqrtc)\n            return true\n\
    \        else\n            return false\n        end\n    elseif (c > a) && (c\
    \ > b)\n        sqrta = a^2\n        sqrtb = b^2\n        sqrtc = c^2\n      \
    \  if (sqrtc == sqrta + sqrtb)\n            return true\n        else\n      \
    \      return false\n        end\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n    \"\"\"\n    return b^2 + c^2\
    \ == a^2 || a^2 + c^2 == b^2 || a^2 + b^2 == c^2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a + b <= c || a + c <= b || b + c <= a ||\
    \ a == 0 || b == 0 || c == 0\n        return false\n    elseif (a^2 + b^2 == c^2)\
    \ || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_bigger_b = a >= b\n    b_bigger_c = b >= c\n\
    \    c_bigger_a = c >= a\n    if (a_bigger_b && a_bigger_c) || (b_bigger_a &&\
    \ b_bigger_c) || (c_bigger_a && c_bigger_b)\n        if a_bigger_b && a_bigger_c\n\
    \            if (a^2) == (b^2 + c^2)\n                return true\n          \
    \  else\n                return false\n            end\n        elseif b_bigger_a\
    \ && b_bigger_c\n            if (b^2) == (a^2 + c^2)\n                return true\n\
    \            else\n                return false\n            end\n        elseif\
    \ c_bigger_a && c_bigger_b\n            if (c^2) == (a^2 + b^2)\n            \
    \    return true\n            else\n                return false\n           \
    \ end\n        end\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpi_k0nibf.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpi_k0nibf.jl:45\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: b_bigger_a not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpi_k0nibf.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_k0nibf.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_k0nibf.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi_k0nibf.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: b_bigger_a not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpi_k0nibf.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_k0nibf.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_k0nibf.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi_k0nibf.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: a_bigger_c not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpi_k0nibf.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_k0nibf.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_k0nibf.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi_k0nibf.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: a_bigger_c not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpi"
  timestamp: 1659978421
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp13ndqh72.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp13ndqh72.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp13ndqh72.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp13ndqh72.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978411
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sqr = a^2\n    b_sqr = b^2\n    c_sqr = c^2\n\
    \    if (a_sqr == b_sqr + c_sqr) || (b_sqr == a_sqr + c_sqr) || (c_sqr == a_sqr\
    \ + b_sqr)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 0
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sq_a = a * a\n    sq_b = b * b\n    sq_c = c\
    \ * c\n    right_angled = sq_a + sq_b == sq_c || sq_a + sq_c == sq_b || sq_b +\
    \ sq_c == sq_a\n    return right_angled\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   11     11

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypo = sqrt(a^2 + b^2)\n    if c == hypo\n \
    \       return true\n    else \n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfsgd44tl.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfsgd44tl.jl:27\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfsgd44tl.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfsgd44tl.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |   10     1     11\n"
  timestamp: 1659978420
- exit_code: 1
  program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code here!\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpbvpl0wpo.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpbvpl0wpo.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpbvpl0wpo.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvpl0wpo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvpl0wpo.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbvpl0wpo.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpbvpl0wpo.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvpl0wpo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvpl0wpo.jl:19\ntest set:\
    \ Error During Test at /t"
  timestamp: 1659978422
