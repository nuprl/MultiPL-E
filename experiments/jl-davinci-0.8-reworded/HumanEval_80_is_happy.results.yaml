name: HumanEval_80_is_happy
language: jl
results:
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    # check if length\
    \ of string is at least 3\n    length(s) >= 3 && all(s[i] != s[i + 1] for i in\
    \ 1:3:length(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc5jwa9z_.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"abcd\") == true\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [5]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    {String})(i::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _all\n      @ ./reduce.jl:1164 [inlined]\n    [7] all\n \
    \     @ ./reduce.jl:1152 [inlined]\n    [8] all\n      @ ./reduce.jl:1070 [inlined]\n\
    \    [9] is_happy(s::String)\n      @ Main /tmp/tmpc5jwa9z_.jl:20\n   [10] macro\
    \ expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpc5jwa9z_.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpc5jwa9z_.jl:26\ntest set:\
    \ Test Failed at /tmp/tmpc5jwa9z_.jl:32\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5jwa9z_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5jwa9z_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc5jwa9z_.jl:34\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5jwa9z_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5jwa9z_.jl:26\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5jwa9z_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3 \n        return false\n    end\n    for i in 1:n-2\n        j =\
    \ i + 2\n        if s[i] == s[i+1] || s[i] == s[j] || s[i+1] == s[j]\n       \
    \     return false\n        end\n    end\n    return true\nend\n        \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n   s = s # ? edit\n\
    \   for i = 1:length(s)-2\n       if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2]\n           return false\n       end\n   end\n   return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkdkbtdmn.jl:32\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkdkbtdmn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkdkbtdmn.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkdkbtdmn.jl:33\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkdkbtdmn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkdkbtdmn.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdkbtdmn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    if s[1] == s[2] || s[2] == s[3] || s[1]\
    \ == s[3]\n        return false\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t\
    @test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"\
    aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\"\
    ) == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9iy3uag.jl:39\n  Expression: candidate(\"\
    iopaxioi\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9iy3uag.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9iy3uag.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9iy3uag.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] && s[i] == s[i+2]\n            return false\n     \
    \   end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprr6cynki.jl:31\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr6cynki.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr6cynki.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprr6cynki.jl:32\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr6cynki.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr6cynki.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprr6cynki.jl:34\n  Expression: candidate(\"aabb\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr6cynki.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr6cynki.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprr6cynki.jl:36\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr6cynki.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr6cynki.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprr6cynki.jl:38\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprr6cynki.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n   is_happy(s) =\
    \ (length(s) > 3) && every(i -> s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] !=\
    \ s[i+2], 1:length(s)-2)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2y32_nul.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: Cannot `convert` an object\
    \ of type var\"#is_happy#2\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_happy(s::String)\n     @ Main /tmp/tmp2y32_nul.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2y32_nul.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2y32_nul.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2y32_nul.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"aa\") == false\n  MethodError: Cannot `convert` an object of type\
    \ var\"#is_happy#2\" to an object of type Bool\n  Closest candidates are:\n  \
    \  convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_happy(s::String)\n     @ Main /tmp/tmp2y32_nul.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2y32_nul.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2y"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2y32_nul.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 3:n\n        if s[i-2]\
    \ == s[i-1] || s[i-1] == s[i] || s[i-2] == s[i]\n            return false\n  \
    \      end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    hapjl = true\n\
    \    if length(s) >= 3\n        i = 1\n        while i < length(s)-1 && hapjl\n\
    \            hapjl = (s[i] != s[i+1]) && (s[i] != s[i+2]) && (s[i+1] != s[i+2])\n\
    \            i += 1\n        end\n    else\n        hapjl = false\n    end\n \
    \   return hapjl\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if s == \"ab\"\
    \ || s == \"aa\" || s == \"bb\" || s == \"ac\" || s == \"bc\" || s == \"cc\" ||\
    \ s == \"b\" || s == \"a\" || s == \"c\"\n        return false\n    end\n    if\
    \ length(s) > 3\n        if s[1] == s[2]\n            return false\n        end\n\
    \        if s[2] == s[3]\n            return false\n        end\n        if s[3]\
    \ == s[4]\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplt3s41l3.jl:45\n  Expression: candidate(\"\
    xyy\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplt3s41l3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplt3s41l3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplt3s41l3.jl:47\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplt3s41l3.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplt3s41l3.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplt3s41l3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    N = length(s)\n\
    \    for i in 1:N-2\n        for j in i+1:N-1\n            for k in j+1:N\n  \
    \              if (s[i] == s[j] || s[i] == s[k] || s[j] == s[k])\n           \
    \         return false\n                end\n            end\n        end\n  \
    \  end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0v4m624.jl:36\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0v4m624.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0v4m624.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb0v4m624.jl:37\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0v4m624.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0v4m624.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpb0v4m624.jl:42\n  Expression: candidate(\"iopaxpoi\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0v4m624.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0v4m624.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0v4m624.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n<3 return false end\n    i=1\n    while i+2<=n\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \        i += 1\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)<3\n\
    \        return false\n    end\n    for i=1:length(s)-2\n        if s[i]==s[i+1]\
    \ && s[i]==s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmf15vrzy.jl:37\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf15vrzy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf15vrzy.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmf15vrzy.jl:39\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf15vrzy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf15vrzy.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmf15vrzy.jl:41\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmf15vrzy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmf15vrzy.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmf15vrzy.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    counter = 0\n\
    \    for i in 1:length(s)\n        if s[i] == s[i-1]\n            counter += 1\n\
    \        end\n    end\n    if counter >= 3\n        return false\n    else\n \
    \       return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8qim7rm8.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_happy(s::String)\n\
    \     @ Main /tmp/tmp8qim7rm8.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8qim7rm8.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8qim7rm8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8qim7rm8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"aa\") == false\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_happy(s::String)\n\
    \     @ Main /tmp/tmp8qim7rm8.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8qim7rm8.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8qim7rm8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8qim7rm8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\") == true\n  BoundsError: attempt to access 4-codeunit String\
    \ at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_happy(s::String)\n\
    \     @ Main /tmp/tmp8qim7rm8.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qim7rm8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    function helper(s::String)::Bool\n\
    \        if length(s) < 3\n            return true\n        elseif s[1] == s[2]\
    \ == s[3]\n            return false\n        else\n            return helper(s[2:end])\n\
    \        end\n    end\n    return helper(s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf54g2lfx.jl:35\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf54g2lfx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf54g2lfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf54g2lfx.jl:36\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf54g2lfx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf54g2lfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf54g2lfx.jl:38\n  Expression: candidate(\"aabb\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf54g2lfx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf54g2lfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf54g2lfx.jl:40\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf54g2lfx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf54g2lfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf54g2lfx.jl:42\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf54g2lfx.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3 \n        return false\n    end\n    for i in 1:n-2\n        if\
    \ s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\n \n\"\"\"You are given a string s.\n\
    \    Your task is to check if the string is hapjl or not.\n    A string is hapjl\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpg3ftyte6.jl:31\nin expression starting at /tmp/tmpg3ftyte6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3 \n        return false\n    end\n    for i in 1:n-2\n        if\
    \ s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nprintln(is_happy(\"a\"))\nprintln(is_happy(\"\
    aa\"))\nprintln(is_happy(\"abcd\"))\nprintln(is_happy(\"aabb\"))\nprintln(is_happy(\"\
    adb\"))\nprintln(is_happy(\"xyy\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "false\nfalse\ntrue\nfalse\ntrue\nfalse\nTest Summary: | Pass  Total\ntest\
    \ set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    strlen = length(s)\n\
    \    if strlen < 3\n        return false\n    end\n    for i in 2:strlen - 1\n\
    \        if s[i-1] == s[i] && s[i] == s[i+1]\n            return false\n     \
    \   end\n    end\n    return true\nend\n    \n\"\"\"You are given a string s.\n\
    \    Your task is to check if the string is hapjl or not.\n    A string is hapjl\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") ==\
    \ false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") ==\
    \ true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
    \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp01640df6.jl:31\nin expression starting at /tmp/tmp01640df6.jl:31\n"
  exit_code: 1
  status: SyntaxError
