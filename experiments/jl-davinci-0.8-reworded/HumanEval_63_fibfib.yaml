name: HumanEval_63_fibfib
language: jl
prompt: "\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n\
  \    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  \    Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>>\
  \ fibfib(8)\n    24\n    \"\"\"\nfunction fibfib(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fibfib;\n\t@test(candidate(2)\
  \ == 1)\n\t@test(candidate(1) == 0)\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
  \ == 24)\n\t@test(candidate(10) == 81)\n\t@test(candidate(12) == 274)\n\t@test(candidate(14)\
  \ == 927)\nend\n"
completions: ["    n==0 && return 0\n    n==1 && return 0\n    n==2 && return 1\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    n == 0 && return\
    \ 0\n    n == 1 && return 0\n    n == 2 && return 1\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    if n <= 1\n        return 0\n    elseif n == 2\n \
    \       return 1\n    else\n        a, b, c = 0, 0, 1\n        for i in 3:n\n\
    \            a, b, c = b, c, a + b + c\n        end\n        return c\n    end\n\
    end", "    a, b, c = 0, 0, 1\n    for x in 1:n\n        a, b, c = b, c, a + b\
    \ + c\n    end\n    return a\nend\n@testset \"fibfib\" begin\n    @test fibfib(1)\
    \ == 0\n    @test fibfib(5) == 4\n    @test fibfib(8) == 24\nend", "    \n   \
    \ if n <= 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    n\
    \ >= 3 || throw(ArgumentError(\"n must be at least 3\"))\n    a, b, c = 0, 0,\
    \ 1\n    for i in 3:n\n        a, b, c = b, c, a + b + c\n    end\n    return\
    \ c\nend", "    i = 0\n    j = 0\n    k = 1\n    for x in 1:n\n        i, j, k\
    \ = j, k, j + k + i\n    end\n    return i\nend\nprintln(fibfib(8))", "    if\
    \ n < 2\n        return 0\n    elseif n == 2\n        return 1\n    else \n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n@benchmark\
    \ fibfib(30)", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0\n        return 0\n\
    \    elseif n == 1\n        return 0\n    elseif n == 2\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "    if n <= 2\n        return n-1\n    else\n        a, b, c = 0, 0, 1\n      \
    \  for i in 1:n-2\n            a, b, c = b, c, a+b+c\n        end\n        return\
    \ c\n    end\nend\nfibfib(8)", "    # YOUR CODE HERE\n    return 0\nend\n \n \n\
    @testset \"reverse a sentence\" begin\n    @test reverse(\"I love cats\") == \"\
    stac evol I\"\n    @test reverse(\"\") == \"\"\n    @test reverse(\"This is a\
    \ test\") == \"tset a si sihT\"\nend\n\"\"\"Write a function called reverse that\
    \ takes a string, and returns a reversed version of that string.\n    >>> reverse(\"\
    I love cats\")\n    'stac evol I'\n    >>> reverse(\"\")\n    ''\n    >>> reverse(\"\
    This is a test\")\n    'tset a si sihT'\n    \"\"\"", "    if n == 0\n       \
    \ return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end\n\"\"\"\n    You are given a string, which contains entirely of decimal digits\
    \ (0-9). Each digit is made of a certain number of dashes, as shown in the image\
    \ below. For instance 1 is made of 2 dashes, 8 is made of 7 dashes and so on.\n\
    \    You have to write a function that takes this string message as an input and\
    \ returns a corresponding value in terms of a number. This number is the count\
    \ of dashes in the string message.\n    >>> message_to_number(\"2\")\n    3\n\
    \    >>> message_to_number(\"123\")\n    14\n    >>> message_to_number(\"213\"\
    )\n    15\n    >>> message_to_number(\"98765\")\n    57\n    \"\"\"\n    ", " \
    \   return fibfib_aux(n,1,1,0)\nend", "    if n == 0 \n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else \n \
    \       return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    for\
    \ i = 0:n-1\n        if i == 0\n            fibfib(0) = 0\n        elseif i ==\
    \ 1\n            fibfib(1) = 0\n        elseif i == 2\n            fibfib(2) =\
    \ 1\n        else\n            fibfib(i) = fibfib(i-1) + fibfib(i-2) + fibfib(i-3)\n\
    \        end\n    end\n    return fibfib(n)\nend", "    if n <= 1 \n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    fibfib(0) = 0\n    fibfib(1)\
    \ = 0\n    fibfib(2) = 1\n    for i = 3:n\n        fibfib(i) = fibfib(i-1) + fibfib(i-2)\
    \ + fibfib(i-3)\n    end\n    return fibfib(n)\nend", "    if n == 0 || n == 1\n\
    \        return 0\n    elseif n == 2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n <= 1\n   \
    \     return 0\n    elseif n == 2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n <= 2\n   \
    \     return 0\n    elseif n == 3\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0\n   \
    \     return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n     \
    \   return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\n\"\"\"\nAnother way to solve the problem,\nbut it takes longer\
    \ time to run.\n\"\"\"", "    if n < 3\n        return n-1\n    end\n    prev\
    \ = [0,0,1]\n    curr = [0,0,0]\n    for i in 3:n\n        curr[1] = prev[2]\n\
    \        curr[2] = prev[3]\n        curr[3] = prev[1] + prev[2] + prev[3]\n  \
    \      prev = copy(curr)\n    end\n    return curr[3]\nend\n \n \n\"\"\"Given\
    \ a circular linked list, return the node at the beginning of the loop.\n    >>>\
    \ l = [1,2,3,4,5,6,7,8,9,10]\n    >>> a = CircularList(l)\n    >>> a.get_begin_of_loop()\n\
    \    >>> a.insert(a.get_node(5), a.get_node(1))\n    >>> a.get_begin_of_loop()\n\
    \    >>> a.print_list()\n    CircularList[1,2,3,4,5,1,2,3,4,5,6,7,8,9,10]\n  \
    \  \"\"\"\nstruct CircularListNode\n    data::Int64\n    next::CircularListNode\n\
    end\nCircularListNode(data::Int64) = CircularListNode(data, CircularListNode(data))\n\
    CircularListNode(data::Int64, next::CircularListNode) = CircularListNode(data,\
    \ next)\n \nstruct CircularList\n    head::CircularListNode\nend\nCircularList()\
    \ = CircularList(CircularListNode(0))\nCircularList(l::Array{Int64,1}) = CircularList(circular_from_list(l))",
  "    # YOUR CODE HERE\nend", "    if n==0\n        return 0\n    elseif n==1\n \
    \       return 0\n    elseif n==2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    return (n < 2)\
    \ ? 0 : fibfib_helper(n,0,0,1)\nend", "    \n    if n < 0 \n        throw(ArgumentError(\"\
    Please enter an integer greater than or equal to 0\"))\n    end\n    \n    a,\
    \ b, c = 0, 0, 1 \n    \n    for i in 1:n-2\n        a, b, c = b, c, a + b + c\n\
    \    end \n    \n    return c\nend", "    a, b, c = 0, 0, 1\n    for i in 1:n\n\
    \        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nprintln(fibfib(1))\n\
    println(fibfib(5))\nprintln(fibfib(8))", "    if n < 3 \n        n - 1\n    else\
    \ \n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    # this\
    \ currently passes the first two tests but not the third\n    # because the function\
    \ is O(n^3) and the tests need O(n^2)\n    # working on improving my algorithm\
    \ so it's O(n^2)\n    # but I'm having difficulty understanding how O(n^2) is\
    \ possible\n    # without storing all previous results\n    fibfib_prev2 = 0\n\
    \    fibfib_prev1 = 0\n    fibfib_curr = 1\n    for i in 1:n\n        fibfib_prev2\
    \ = fibfib_prev1\n        fibfib_prev1 = fibfib_curr\n        fibfib_curr = fibfib_prev2\
    \ + fibfib_prev1 + fibfib_curr\n    end\n    return fibfib_curr\nend\nprintln(fibfib(1))\n\
    println(fibfib(5))\nprintln(fibfib(8))", "    if n < 0\n        error(\"n must\
    \ be a positive integer\")\n    end\n    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      a, b, c = 0, 0, 1\n        for i in 3:n\n            a, b, c = b, c, a\
    \ + b + c\n        end\n        return c\n    end\nend", "    if n==0 || n==1\n\
    \        return 0\n    elseif n==2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n < 2 \n   \
    \     return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n <= 1 \n  \
    \      return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n < 2\n    \
    \    return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 \n  \
    \      return 0\n    elseif n == 1 \n        return 0\n    elseif n == 2 \n  \
    \      return 1\n    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nprintln(fibfib(8))", "    @inbounds if n == 0\n        return 0\n\
    \    elseif n == 1\n        return 0\n    elseif n == 2\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "    if n == 0 \n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    return fibfib_rec(1, 0, 0, n)\nend", "  if\
    \ n==0 return 0\n  if n==1 return 0\n  if n==2 return 1\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    if n == 0 \n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    a =\
    \ 0 \n    b = 0 \n    c = 1 \n    d = 1 \n    e = 1 \n    f = 2 \n    g = 3 \n\
    \    h = 5 \n    for i in 1:n \n        d = c \n        c = b \n        b = a\
    \ \n        a = d \n        f = e \n        e = h \n        h = g + h \n     \
    \   g = g + f \n    end \n    return b \nend\nprint(fibfib(1))\nprint(fibfib(5))\n\
    print(fibfib(8))", "    if n == 0\n        return 0\n    elseif n == 1\n     \
    \   return 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n <= 1\n        return 0\n\
    \    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    a, b, c = 0, 0, 1\n    for i in 1:n\n   \
    \     a, b, c = b, c, a + b + c\n    end\n    return a\nend", "    if n == 0\n\
    \        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n  \
    \      return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    fibfib_array = [0, 0, 1] #initialise the fibfib_array starting\
    \ with 3 of the first fibfib numbers, to later be able to make the next fibfib\
    \ number with the three previous ones\n    if n < 3 \n        return fibfib_array[n]\n\
    \    else\n        for i in 3:n\n            i_fibfib = fibfib_array[i-1] + fibfib_array[i-2]\
    \ + fibfib_array[i-3]\n            push!(fibfib_array, i_fibfib)\n        end\n\
    \        return fibfib_array[n]\n    end\nend", "    if n <= 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        a, b, c = (0, 0, 1)\n\
    \        for i in 3:n\n            a, b, c = (b, c, a+b+c)\n        end\n    \
    \    return c\n    end\nend\n@testset \"Testing fibfib function\" begin\n    @test\
    \ fibfib(1) == 0\n    @test fibfib(5) == 4\n    @test fibfib(8) == 24\nend", " \
    \   \"\"\"Computes the n-th Fibfib number in linear time.\"\"\"\n    a, b, c =\
    \ 0, 0, 1\n    for i in range(1, n)\n        a, b, c = b, c, a + b + c\n    end\n\
    \    return a\nend", "    a, b, c = 0, 0, 1\n    for i = 3:n\n        a, b, c\
    \ = b, c, c + b + a\n    end\n    return c\nend", "    if n == 0 \n        return\
    \ 0\n    elseif n == 1 \n        return 0\n    elseif n == 2 \n        return\
    \ 1\n    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    a = 0\n    b = 0\n    c = 1\n    count = 0\n    while count < n\n \
    \       sum = a + b + c\n        a = b\n        b = c\n        c = sum\n     \
    \   count += 1\n    end\n    return a\nend", "    fib_list = Array{Int64}(n+1)\n\
    \    for i in 1:n+1\n        if i == 1 || i == 2\n            fib_list[i] = 0\n\
    \        elseif i == 3\n            fib_list[i] = 1\n        else\n          \
    \  fib_list[i] = fib_list[i-1] + fib_list[i-2] + fib_list[i-3]\n        end\n\
    \    end\n    return fib_list[n+1]\nend", "    if n<=1\n        return 0\n   \
    \ elseif n==2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    if n==0\n        return 0\n    elseif n==1\n\
    \        return 0\n    elseif n==2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0\n   \
    \     return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n     \
    \   return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n<0\n        return 0\n    end\n    if n==0\n        return\
    \ 0\n    end\n    if n==1\n        return 0\n    end\n    if n==2\n        return\
    \ 1\n    end\n    fn_1=1\n    fn_2=0\n    fn_3=0\n    for i=3:n\n        fn=fn_1+fn_2+fn_3\n\
    \        fn_3=fn_2\n        fn_2=fn_1\n        fn_1=fn\n    end\n    return fn\n\
    end", "    if n <= 1\n        return 0\n    elseif n == 2\n        return 1\n\
    \    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    println(fibfib(5))", "    if n <= 1\n        return 0\n    elseif n == 2\n   \
    \     return 1\n    else\n        a, b, c = 0, 0, 1\n        for _ in 1:n-2\n\
    \            a, b, c = b, c, a+b+c\n        end\n        return c\n    end\nend",
  "    a, b, c = 0, 0, 1 \n    for i = 3:n \n        a, b, c = b, c, a + b + c \n\
    \    end \n    return c \nend", "  if n == 0\n    return 0\n  elseif n == 1\n\
    \    return 0\n  elseif n == 2\n    return 1\n  else\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n  end\nend", "    fib = [0, 0, 1]\n    if (n < 3)\n\
    \        return fib[n+1]\n    end\n    for i in 3:n\n        push!(fib, fib[end]\
    \ + fib[end-1] + fib[end-2])\n    end\n    return fib[end]\nend", "    if n ==\
    \ 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    # The last three elements in the sequence:\n    x, y, z =\
    \ 0, 0, 1\n    # The current element to be iterated:\n    current = 1\n    for\
    \ _ in 1:n\n        current = x + y + z\n        x, y, z = y, z, current\n   \
    \ end\n    return current\nend", "    if n == 0 \n        return 0\n    elseif\
    \ n == 1 \n        return 0\n    elseif n == 2 \n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if\
    \ n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n\
    \ == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "    fibs = [0, 0, 1]\n    while length(fibs) <\
    \ n+1\n        push!(fibs, fibs[end-2] + fibs[end-1] + fibs[end])\n    end\n \
    \   return fibs[n+1]\nend", "    if n==0\n        return 0\n    elseif n==1\n\
    \        return 0\n    elseif n==2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n <= 1\n   \
    \     return 0\n    elseif n == 2\n        return 1\n    else\n        a, b, c\
    \ = 0, 0, 1\n        for i = 3:n\n            d = a + b + c\n            a, b,\
    \ c = b, c, d\n        end\n        return d\n    end\nend", "    if n < 3\n \
    \       return n-1\n    end\n    a = 0\n    b = 0\n    c = 1\n    for i in 3:n\n\
    \        a, b, c = b, c, a+b+c\n    end\n    return c\nend", "    if n == 0 \n\
    \        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n  \
    \      return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n == 0 \n        return 0\n    elseif n == 1\n       \
    \ return 0\n    elseif n == 2\n        return 1\n    else \n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 || n == 1\n     \
    \   return 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n < 2 \n        return 0\n\
    \    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    f_minus_2 = 0\n    f_minus_1 = 0\n    f =\
    \ 1\n    for i = 3:n\n        f_minus_2 = f_minus_1\n        f_minus_1 = f\n \
    \       f = f_minus_1 + f_minus_2 + f_minus_2\n    end\n    return f\nend", " \
    \   # Implement me!\n    return 0\nend", "    f1 = 0\n    f2 = 0\n    f3 = 1\n\
    \    for i = 3:n\n        f1 = f2\n        f2 = f3\n        f3 = f1 + f2 + f3\n\
    \    end\n    return f3\nend", "    if n <= 2\n        return n-1\n    else\n\
    \        prev3, prev2, prev1 = 0, 0, 1\n        curr = 0\n        for i in 1:n-2\n\
    \            curr = prev1 + prev2 + prev3\n            prev3, prev2, prev1 = prev2,\
    \ prev1, curr\n        end\n        return curr\n    end\nend", "    if n == 0\n\
    \        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n  \
    \      return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    \n    if n == 0\n        return 0\n    elseif n == 1\n  \
    \      return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n < 2 return\
    \ 0 end\n    if n == 2 return 1 end\n    a, b, c = 0, 0, 1\n    for i = 3:n\n\
    \        d = a + b + c\n        a, b, c = b, c, d\n    end\n    return c\nend",
  "    if n == 0 \n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 1\n    else \n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    if n == 0\n        return 0\n    elseif n\
    \ == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n \n@test fibfib(0)\
    \ == 0\n@test fibfib(1) == 0\n@test fibfib(2) == 1\n@test fibfib(5) == 4\n@test\
    \ fibfib(8) == 24\n \n\"\"\"Now let's compute the fibfib number sequence up to\
    \ a certain number.\n    Please write a function that computes the fibfib number\
    \ sequence up to `n` and returns it as a list.\n    >>> fibfib_list(2)\n    [0,\
    \ 0, 1]\n    >>> fibfib_list(8)\n    [0, 0, 1, 1, 2, 4, 7, 13, 24]\n    \"\"\"",
  "    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n    elseif\
    \ n == 2 \n        return 1\n    else\n        a = [0, 0, 1]\n        for i in\
    \ 1:n-2\n            push!(a, a[i+1] + a[i+2] + a[i])\n        end\n        return\
    \ a[n]\n    end\nend", "    if n < 0 \n        throw(DomainError())\n    end\n\
    \    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n    elseif\
    \ n == 2 \n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\n@btime fibfib(8)", "    if n <= 2\n        return\
    \ n-1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n\
    \    elseif n == 2 \n        return 1\n    else \n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    end\nend\n ", "    if n == 0 \n        return\
    \ 0\n    elseif n == 1 \n        return 0\n    elseif n == 2 \n        return\
    \ 1\n    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    # TODO: implement this function\nend", "    if n < 2\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    n<3 ? n-1 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", " \n    if n < 3\n      return n-1\n    end\n \n    a,\
    \ b, c = 0, 0, 1\n    for i = 3:n\n      a, b, c = b, c, a+b+c\n    end\n \n \
    \   return c\nend", "    fibfibs = Array{Int64}(undef, n+1)\n    fibfibs[1] =\
    \ 0\n    fibfibs[2] = 0\n    fibfibs[3] = 1\n    for i = 4:n\n        fibfibs[i]\
    \ = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3]\n    end\n    return fibfibs[n]\n\
    end\nfibfib(1)", "    if n == 0 || n == 1\n        return 0\n    elseif n == 2\n\
    \        return 1\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\n \n@test fibfib(1) == 0\n@test fibfib(5) == 4\n@test fibfib(8)\
    \ == 24", "    seq = [0, 0, 1]\n    for i in 3:n \n        push!(seq, seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n    end\n    return seq[n]\nend", "    fibfib(0) = 0\n\
    \    fibfib(1) = 0\n    fibfib(2) = 1\n    for i in 3:n \n        fibfib(i) =\
    \ fibfib(i-1) + fibfib(i-2) + fibfib(i-3)\n    end\n    return fibfib(n)\nend",
  "    n < 2 && return 0\n    n == 2 && return 1\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    fibfib_array = zeros(Int64, n+1)\n    fibfib_array[1]\
    \ = 0\n    fibfib_array[2] = 0\n    fibfib_array[3] = 1\n    for i in 4:n+1\n\
    \        fibfib_array[i] = fibfib_array[i-1] + fibfib_array[i-2] + fibfib_array[i-3]\n\
    \    end\n    return fibfib_array[n+1]\nend", "    if n <= 2 \n        return\
    \ n-1\n    end\n    f1, f2, f3 = 0, 0, 1\n    for _ in 1:n-3\n        f1, f2,\
    \ f3 = f2, f3, f1+f2+f3\n    end\n    return f3\nend", "    if n == 0 || n ==\
    \ 1 || n == 2 \n        n\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n < 3\n        return n-1\n    end\n    n1, n2, n3 = 0,\
    \ 0, 1\n    for _ in 3:n\n        n1, n2, n3 = n2, n3, n1+n2+n3\n    end\n   \
    \ return n3\nend", "    return 0\nend", "    if n < 3\n        return n-1\n  \
    \  end\n    x = 0\n    y = 1\n    z = 1\n    for i = 3:n\n        x = y\n    \
    \    y = z\n        z = x + y + z\n    end\n    return z\nend\nfibfib(8)", " \
    \   \n    if n == 0\n        0\n    elseif n == 1\n        0\n    elseif n ==\
    \ 2\n        1\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  end\nend", "    if n <= 2\n        return n-1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    fib = [0, 0, 1]\n    if n >\
    \ 2\n        for i = 3:n\n            fib[3] = fib[2] + fib[1] + fib[3]\n    \
    \        fib[1] = fib[2]\n            fib[2] = fib[3]\n        end\n    end\n\
    \    return fib[3]\nend", "    fibs = [0, 0, 1]\n    while length(fibs) < n\n\
    \        push!(fibs, sum(fibs[end-2:end]))\n    end\n    return fibs[n]\nend",
  "    n < 3 && return 0\n    n == 3 && return 1\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    a::Int64 = 0\n    b::Int64 = 0\n    c::Int64 = 1\n\
    \    for i = 3:n\n        c_new = a + b + c\n        a = b\n        b = c\n  \
    \      c = c_new\n    end\n    return c\nend", "    if n < 3 \n        return\
    \ n-1\n    end\n    seq = [0,0,1]\n    for i in 4:n\n        push!(seq, seq[end-2]\
    \ + seq[end-1] + seq[end])\n    end\n    return seq[end]\nend", "    if n <= 1\n\
    \        return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    \n    if n == 0\
    \ \n        return 0\n    elseif n == 1 \n        return 0\n    elseif n == 2\
    \ \n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    \n    a = 0\n    b = 0\n    c = 1\n    d = 0\n    \n    if\
    \ n == 0\n        return a\n    elseif n == 1\n        return b\n    elseif n\
    \ == 2\n        return c\n    else\n        for i in 3:n\n            d = a +\
    \ b + c\n            a = b\n            b = c\n            c = d\n        end\n\
    \        return d\n    end\n    \nend\nfibfib(10)", "    if n == 0 return 0\n\
    \    if n == 1 return 0\n    if n == 2 return 1\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    if n <= 1 return 0\n    elseif n == 2 return 1\n \
    \   else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nend", "    if n\
    \ < 3\n        return n-1\n    end\n    f_n_1, f_n_2, f_n_3 = 1, 0, 0\n    for\
    \ i in 3:n\n        new_f = f_n_1 + f_n_2 + f_n_3\n        f_n_3 = f_n_2\n   \
    \     f_n_2 = f_n_1\n        f_n_1 = new_f\n    end\n    return f_n_1\nend", " \
    \   if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    if n<=1 \n        return 0\n    elseif n==2\n\
    \        return 1\n    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n <= 1\n        return 0\n    elseif n == 2\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n\
    \    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    zero = 0\n    one = 0\n    two = 1\n    result\
    \ = 0\n    if n == 0\n        return zero\n    elseif n == 1\n        return one\n\
    \    elseif n == 2\n        return two\n    else \n        for i in 3:n\n    \
    \        result = one + two + zero\n            zero = one\n            one =\
    \ two\n            two = result\n        end\n        return result\n    end\n\
    end", "    if n<0\n        return -1\n    end\n    if n==0 || n==1\n        return\
    \ 0\n    end\n    if n==2\n        return 1\n    end\n    a=0\n    b=0\n    c=1\n\
    \    for i=3:n\n        d=a+b+c\n        a=b\n        b=c\n        c=d\n    end\n\
    \    return c\nend", "    a, b, c = 0, 0, 1 \n    for i = 3:n \n        a, b,\
    \ c = b, c, a + b + c \n    end \n    return c \nend", "    if n == 0 return 0\n\
    \    if n == 1 return 0\n    if n == 2 return 1\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    if n < 3\n        return n-1\n    end\n    a, b, c\
    \ = 0, 0, 1\n    for i in 3:n\n        a, b, c = b, c, a+b+c\n    end\n    return\
    \ c\nend", "    if n == 0 \n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0\n        return 0\n\
    \    elseif n == 1\n        return 0\n    elseif n == 2\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "    if n == 0 return 0\n    elseif n == 1 return 0\n    elseif n == 2 return 1\n\
    \    else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "   \
    \ if n <= 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    if n == 0\n        return 0\n    elseif n\
    \ == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n\
    \ < 3\n        return n-1\n    end\n    n1, n2, n3 = 0, 1, 1\n    for _ in 3:n\n\
    \        n1, n2, n3 = n2, n3, n1+n2+n3\n    end\n    return n3\nend", "    if\
    \ n == 0\n        return 0\n    elseif n == 1 \n        return 0\n    elseif n\
    \ == 2\n        return 1\n    else \n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend ", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if\
    \ n < 3\n        return n-1\n    end\n    a = [0, 0, 1]\n    for i = 4:n\n   \
    \     append!(a, sum(a[end-2:end]))\n        a = a[2:end]\n    end\n    return\
    \ sum(a)\nend", "    \n    if n == 0\n        return 0\n    elseif n == 1\n  \
    \      return 0\n    elseif n == 2\n        return 1\n    else \n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0\n   \
    \     return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n     \
    \   return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n <= 1\n        return 0\n    elseif n == 2\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    n <= 2 && return 0\n    n == 3 && return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    nums = [0, 0, 1]\n    for i in range(3,\
    \ n+1)\n        nums[1] = nums[2]\n        nums[2] = nums[3]\n        nums[3]\
    \ = nums[1] + nums[2] + nums[3]\n    end\n    return nums[3]\nend\n@testset \"\
    Basic Tests\" begin\n    @test fibfib(0) == 0\n    @test fibfib(1) == 0\n    @test\
    \ fibfib(2) == 1\n    @test fibfib(3) == 1\n    @test fibfib(4) == 2\n    @test\
    \ fibfib(5) == 4\n    @test fibfib(6) == 7\n    @test fibfib(7) == 13\n    @test\
    \ fibfib(8) == 24\n    @test fibfib(9) == 44\n    @test fibfib(10) == 81\n   \
    \ @test fibfib(11) == 149\n    @test fibfib(12) == 274\n    @test fibfib(13) ==\
    \ 504\n    @test fibfib(14) == 927\n    @test fibfib(15) == 1705\n    @test fibfib(16)\
    \ == 3136\n    @test fibfib(17) == 5768\n    @test fibfib(18) == 10609\n    @test\
    \ fibfib(19) == 19513\n    @test fibfib(20) == 35890\n    @test fibfib(21) ==\
    \ 66012\n    @test fibfib(22) == 121415\n    @test fibfib(23) == 223317\n    @test\
    \ fibfib(24) == 410744\n    @test fibfib(25) == 755476\n    @test fibfib(26) ==\
    \ 1389537\n    @test fibfib(27) == 2555757\n    @test fibfib(28) == 4700770\n\
    \    @test fibfib(29) == 8646064\n    @test fibfib(30) == 15902591\n    @test\
    \ fibfib(31) == 292494", "    if n <= 1\n        return 0\n    elseif n == 2\n\
    \        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else \n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    f0, f1, f2 = 0, 0, 1\n    for\
    \ i in 1:n-2\n        f0, f1, f2 = f1, f2, f0 + f1 + f2\n    end\n    return f2\n\
    end\nfibfib(1)\nfibfib(5)\nfibfib(8)", "    a, b, c = 0, 0, 1\n    for i = 3:n\n\
    \        a, b, c = b, c, a + b + c\n    end\n    return c\nend", "    if n < 2\n\
    \        return 0\n    elseif n == 2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    # Base case\n \
    \   if n == 0\n        return 0\n    elseif n == 1 || n == 2\n        return 1\n\
    \    end\n    # Recursive calls\n    fib_n = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    return fib_n\nend", "    if n < 3\n        return n-1\n    end\n    a = 0\n\
    \    b = 0\n    c = 1\n    for i = 4:n\n        d = a + b + c\n        a = b\n\
    \        b = c\n        c = d\n    end\n    return c\nend", "    if n == 0 ||\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    fibfib_old\
    \ = 0\n    fibfib_new = 0\n    for ii in 2:n\n        fibfib_tmp = fibfib_new\n\
    \        fibfib_new = fibfib_new + fibfib_old + fibfib_new\n        fibfib_old\
    \ = fibfib_tmp\n    end\n    return fibfib_new\nend", "    n == 0 && return 0\n\
    \    n == 1 && return 0\n    n == 2 && return 1\n    a = 0\n    b = 0\n    c =\
    \ 1\n    temp = 0\n    for i in 3:n\n        temp = a + b + c\n        a = b\n\
    \        b = c\n        c = temp\n    end\n    return c\nend", "    n < 3 && return\
    \ 0 # A shorthand for a compact if statement.\n    n < 4 && return 1\n    # Define\
    \ the fibfib base cases.\n    f1, f2, f3 = 0, 0, 1 # This is a neat way to define\
    \ a vector of numbers!\n    for i in 4:n\n        f1, f2, f3 = f2, f3, f1 + f2\
    \ + f3\n    end\n    return f3\nend", "    n < 3 && return 0\n    n == 3 && return\
    \ 1\n    a, b, c = 0, 0, 1\n    for i in 3:n-1\n        a, b, c = b, c, a+b+c\n\
    \    end\n    return c\nend", "    if n == 0\n        return 0\n    elseif n ==\
    \ 1\n        return 0\n    elseif n == 2\n        return 1\n    else \n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n \nfibfib(5)",
  "    sum = 0\n    a = 0\n    b = 0\n    c = 1\n    for i in range(0,n)\n       \
    \ sum = a + b + c\n        a = b\n        b = c\n        c = sum\n    end\n  \
    \  return sum\nend", "    if n == 0 || n == 1\n        return 0\n    elseif n\
    \ == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "    if n == 0 || n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    # 1: n == 0\n    if n == 0\n        return\
    \ 0\n    end\n    # 2: n == 1\n    if n == 1\n        return 0\n    end\n    #\
    \ 3: n == 2\n    if n == 2\n        return 1\n    end\n    # 4: n > 2\n    a =\
    \ 0\n    b = 0\n    c = 1\n    d = 0\n    i = 3\n    while i <= n\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n        i += 1\n   \
    \ end\n    return d\nend\nfibfib(8)", "    a = 0\n    b = 0\n    c = 1\n    if\
    \ n == 0 \n        return a\n    elseif n == 1\n        return b\n    elseif n\
    \ == 2\n        return c\n    else \n        for i in 1:n-2\n            d = a\
    \ + b + c\n            a = b\n            b = c\n            c = d\n        end\n\
    \        return c\n    end\nend", "    if n <= 1\n        return 0\n    elseif\
    \ n == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    n < 3 && return 0\n    n == 3 && return 1\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n@code_warntype fibfib(5)",
  "    if n==0 \n        return 0\n    elseif n==1 \n        return 0\n    elseif\
    \ n==2 \n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    return n < 3 ? n-1 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    return int(fibfib_float(n))\nend", "    if n == 0\
    \ \n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nfibfib(8)", "    if n <= 1\n        return 0\n    elseif n == 2\n\
    \        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    # If n is zero, return 0, if\
    \ n is 1, return 0, and if n is 2, return 1. \n    if n <= 2\n        return n-1\n\
    \    else\n        # Base case: I will keep track of the three values that I need\
    \ to compute fibfib(n)\n        a = 0\n        b = 0\n        c = 1\n        #\
    \ Iteration case: I will loop until I compute fibfib(n)\n        i = 3\n     \
    \   while i <= n\n            # We can't use d to compute fibfib(n) because the\
    \ old value of d is needed to compute the old value of c.\n            # d = a\
    \ + b + c\n            d = a + b + c\n            # d was computed and is no longer\
    \ needed to compute c. So, I set d to c, so c can be used to compute d.\n    \
    \        a = b\n            b = c\n            c = d\n            i += 1\n   \
    \     end\n        return c\n    end\nend", "    if n==0 return 0\n    elseif\
    \ n==1 return 0\n    elseif n==2 return 1\n    else return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\nfibfib(10)", "    if n==0 || n==1\n        return\
    \ 0\n    elseif n==2\n        return 1\n    else\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    end\nend", "    fibfib_history = [0, 0, 1]\n\
    \    for i in 3:n\n        push!(fibfib_history, fibfib_history[i-1] + fibfib_history[i-2]\
    \ + fibfib_history[i-3])\n    end\n    return fibfib_history[n]\nend", "    n\
    \ < 3 && return n-1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend",
  "    n >= 0 || throw(DomainError())\n    if n <= 2 \n        return n - 1\n    end\n\
    \    a, b, c = (0, 0, 1)\n    for i = 3:n\n        a, b, c = (b, c, a + b + c)\n\
    \    end\n    return c\nend", "    a = 0\n    b = 0\n    c = 1\n    for i in 2:n\n\
    \        a, b, c = b, c, a + b + c\n    end\n    return c\nend", "    i = 0;\n\
    \    j = 0;\n    k = 1;\n    if n == 0\n        return 0\n    elseif n == 1\n\
    \        return 0\n    elseif n == 2\n        return 1\n    else\n        for\
    \ x in 1:n-2\n            l = i + j + k\n            i = j\n            j = k\n\
    \            k = l\n        end\n        return k\n    end\nend", "    if n ==\
    \ 0 return 0 end\n    if n == 1 return 0 end\n    if n == 2 return 1 end\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    if n == 0\n     \
    \   return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n       \
    \ return 1\n    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n < 0\n        return 0\n    end\n    prev_prev = 0\n\
    \    prev = 0\n    curr = 1\n    for i in 2:n\n        prev_prev, prev, curr =\
    \ prev, curr, prev_prev + prev + curr\n    end\n    return curr\nend", "    if\
    \ n == 0 \n        return 0\n    elseif n == 1\n        return 0\n    elseif n\
    \ == 2\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "    return 0\nend", "    if n <= 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend\nfibfib(10)", "    n==0 && return\
    \ 0\n    n==1 && return 0\n    n==2 && return 1\n    n>2 && return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if\
    \ n <= 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if\
    \ n==0 || n==1\n        return 0\n    elseif n==2\n        return 1\n    else\
    \ \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", " \
    \   n==0 && return 0\n    n==1 && return 0\n    n==2 && return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "    if n < 3\n        return n-1\n    end\n\
    \    a, b, c = 0, 0, 1\n    for i in 1:n-3\n        a, b, c = b, c, a+b+c\n  \
    \  end\n    return c\nend\nfibfib(1)\nfibfib(5)\nfibfib(8)", "    if n <= 2\n\
    \        return (n - 1)\n    else \n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "    result = 0\n    if (n == 0)\n        return\
    \ 0\n    elseif (n == 1)\n        return 0\n    elseif (n == 2)\n        return\
    \ 1\n    else\n        (result, temp1, temp2) = (0, 0, 1)\n        for i = 3:n\n\
    \            result = temp1 + temp2 + result\n            temp1 = temp2\n    \
    \        temp2 = result\n        end\n        return result\n    end\nend", " \
    \   \n    @assert n >= 0 \"Positive Integer only\"\n    \n    if n == 0\n    \
    \    return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\n    \nend", "    if n == 0\n        return 0\n    elseif n == 1\n  \
    \      return 0\n    elseif n == 2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    n <= 1 && return\
    \ 0\n    n == 2 && return 1\n    a, b, c = (0, 0, 1)\n    for i in 3:n\n     \
    \   a, b, c = (b, c, a+b+c)\n    end\n    return c\nend\n    \nfibfib(1)\nfibfib(5)\n\
    fibfib(8)", "    if n < 0\n        throw(ArgumentError(\"Argument must be greater\
    \ than or equal to 0.\"))\n    end\n    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if\
    \ n<0\n        throw(ArgumentError(\"n is a positive integer\"))\n    end\n  \
    \  if n<3\n        return n-1\n    end\n    f1=0\n    f2=0\n    f3=1\n    for\
    \ i in 3:n\n        f1=f2\n        f2=f3\n        f3=f1+f2+f3\n    end\n    return\
    \ f3\nend", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    \n    if n == 0 || n == 1\n\
    \        return 0\n    elseif n == 2\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 || n\
    \ == 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n@test fibfib(5)\
    \ == 4\n@test fibfib(8) == 24\n@test fibfib(1) == 0\n ", "    n < 2 && return\
    \ 0\n    n < 3 && return 1\n    v = [0, 0, 1]\n    for i in 3:n\n        v[1:3]\
    \ = v\n        v[3] = v[1] + v[2] + v[3]\n    end\n    return v[3]\nend", "  \
    \  if n <= 1 \n        return 0\n    elseif n == 2\n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if\
    \ n == 0\n    return 0\n  elseif n == 1\n    return 0\n  elseif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "    if n < 2\n        return 0\n    elseif n == 2\n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    \"\
    \"\"Produces the n-th element of the fibfib number sequence.\"\"\"\n    if n <=\
    \ 1\n        return 0\n    elseif n == 2\n        return 1\n    else\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
