name: HumanEval_151_double_the_difference
language: jl
results:
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    s = 0\n    for i in\
    \ lst\n        if i > 0 && mod(i, 2) == 1\n            s += i*i\n        end\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\n    if length(lst)==0\n        return\
    \ 0\n    else\n        return 2*sum([x^2 for x in lst if isodd(x) && x>0])\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ebie5v8.jl:44\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 50 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ebie5v8.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebie5v8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3ebie5v8.jl:48\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 68 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ebie5v8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebie5v8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3ebie5v8.jl:49\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ebie5v8.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ebie5v8.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ebie5v8.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # your code here\n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_vxn19kn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Float64}([])) == 0\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmp_vxn19kn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_vxn19kn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_vxn19kn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp_vxn19kn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5.0, 4.0]) == 25\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp_vxn19kn.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_vxn19kn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_vxn19kn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp_vxn19kn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([0.1, 0.2, 0.3]) == 0\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp_vxn19kn.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_vxn19kn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_vxn19kn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp_vxn19kn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-10.0, -20.0, -30.0]) == 0\n  UndefVarError: pass not defined\n \
    \ Stacktrace:\n   [1] double_the_difference(lst::Vector{Float64})\n     @ Main\
    \ /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_vxn19kn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0 \n    for i in lst\n        if(isodd(Int64(i))==true)\n      \
    \      sum = sum + i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo5sn0cpb.jl:32\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.1)\n \
    \ Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpo5sn0cpb.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo5sn0cpb.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo5sn0cpb.jl:29\ntest set:\
    \ Test Failed at /tmp/tmpo5sn0cpb.jl:34\n  Expression: candidate([-1.0, -2.0,\
    \ 8.0]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5sn0cpb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5sn0cpb.jl:29\ntest set: Error\
    \ During Test at /tmp/tmpo5sn0cpb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(0.2)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpo5sn0cpb.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo5sn0cpb.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo5sn0cpb.jl:29\ntest set:\
    \ Test Failed at /tmp/tmpo5sn0cpb.jl:36\n  Expression: candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5sn0cpb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if (i % 2 != 0) & (i > 0)\n       \
    \     sum += i * i\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmo11tqi5.jl:32\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpmo11tqi5.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmo11tqi5.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmo11tqi5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmo11tqi5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpmo11tqi5.jl:23\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmo11tqi5.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmo11tqi5.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmo11tqi5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n  sm = 0 \n  s = 0\n  for i in lst \n    if i%2 != 0 && i >= 0\n      sm +=\
    \ i^2\n    end\n  end\n  return sm\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi54tygnx.jl:33\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpi54tygnx.jl:24\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpi54tygnx.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi54tygnx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpi54tygnx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpi54tygnx.jl:24\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpi54tygnx.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi54tygnx.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi54tygnx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\n# b.\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    s=0\n    for i in lst\n        if i>0 && i%2!=0\n            s+=i^2\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1qanmjio.jl:32\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmp1qanmjio.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1qanmjio.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1qanmjio.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1qanmjio.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([0.2, 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp1qanmjio.jl:23\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1qanmjio.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1qanmjio.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qanmjio.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    s = 0\n    for x in lst\n        if x % 2 == 1\n            s += x * x\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    res = 0\n    for x in lst\n        if x % 2 == 1\n            res += round(Int64,\
    \ x)^2\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    #your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpab00wyps.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Float64}([])) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpab00wyps.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpab00wyps.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpab00wyps.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpab00wyps.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([5.0, 4.0]) == 25\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] double_the_difference(lst::Vector{Float64})\n\
    \     @ Main /tmp/tmpab00wyps.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpab00wyps.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpab00wyps.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    nums_odd = [i for i in lst if i%2 == 1]\n    if !isempty(nums_odd)\n \
    \       odd_sum = sum(nums_odd.^2)\n        return 2*odd_sum\n    else\n     \
    \   return 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjx_sb4gy.jl:31\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 50 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjx_sb4gy.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjx_sb4gy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjx_sb4gy.jl:35\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 68 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjx_sb4gy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjx_sb4gy.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjx_sb4gy.jl:36\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjx_sb4gy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjx_sb4gy.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjx_sb4gy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for i in lst\n        if i > 0 && i%2==1\n            total\
    \ += i^2\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x >= 0 && isinteger(x)\n       \
    \     if x % 2 != 0\n                sum += x*x\n            end\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    y = 0\n    for i = 1:length(lst)\n        if isodd(lst[i]) == true &&\
    \ lst[i]>0\n            y = y + lst[i]^2\n        end\n    end\n    return y\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0\n    end\n    tot = 0\n    for\
    \ i in lst\n        if i%2 == 1 && i > 0\n            tot += i^2\n        end\n\
    \    end\n    return tot * 2\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7evwenr.jl:34\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 50 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf7evwenr.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7evwenr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpf7evwenr.jl:38\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 68 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7evwenr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7evwenr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpf7evwenr.jl:39\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7evwenr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7evwenr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7evwenr.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    odd = 0\n    even = 0\n    for i in lst\n        if i % 2 == 0\n     \
    \       even += i*i\n        else\n            odd += i*i\n        end\n    end\n\
    \    return 2(odd - even)\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27qiw90_.jl:34\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 18 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp27qiw90_.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27qiw90_.jl:32\ntest set: Error\
    \ During Test at /tmp/tmp27qiw90_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.28)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmp27qiw90_.jl:26\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp27qiw90_.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp27qiw90_.jl:32\ntest set:\
    \ Test Failed at /tmp/tmp27qiw90_.jl:36\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: -2800 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27qiw90_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27qiw90_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp27qiw90_.jl:37\n  Expression: candidate([-1.0, -2.0, 8.0])\
    \ == 0\n   Evaluated: -134 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp27qiw90_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp27q"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27qiw90_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    is_odd = mod.(lst, 2) .== 1\n    sq_odd = lst[is_odd] .^ 2\n    return\
    \ 2sum(sq_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdteekml.jl:27\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 50 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxdteekml.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdteekml.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxdteekml.jl:30\n  Expression: candidate([-1.0, -2.0, 8.0])\
    \ == 0\n   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdteekml.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdteekml.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxdteekml.jl:31\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 68 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdteekml.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdteekml.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxdteekml.jl:32\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 660 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdteekml.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdteekml.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdteekml.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    return sum([x ^ 2 for x in lst if floor(x) == x && x % 2 == 1])\nend\n\
    \    \nprint(\"(Test 1) input: [1, 3, 2, 0], expected output: 10, actual output:\
    \ \", double_the_difference([1, 3, 2, 0]))\nprint(\"(Test 2) input: [-1, -2, 0],\
    \ expected output: 0, actual output: \", double_the_difference([-1, -2, 0]))\n\
    print(\"(Test 3) input: [9, -2], expected output: 81, actual output: \", double_the_difference([9,\
    \ -2]))\nprint(\"(Test 4) input: [0], expected output: 0, actual output: \", double_the_difference([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching double_the_difference(::Vector{Int64})\n\
    Closest candidates are:\n  double_the_difference(!Matched::Vector{Float64}) at\
    \ /tmp/tmpopdned9r.jl:16\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpopdned9r.jl:20\n\
    in expression starting at /tmp/tmpopdned9r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum_of_squares = 0\n    for e in lst\n        if (e>0) && (e%2 == 1)\n\
    \            sum_of_squares += e*e\n        end\n    end\n    sum_of_squares\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
