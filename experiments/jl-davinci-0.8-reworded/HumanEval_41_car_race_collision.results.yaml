name: HumanEval_41_car_race_collision
language: jl
results:
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # write your code here\n\
    \    count = 0\n    for i = 1:n\n        for j = 1:n\n            if (j + i) >=\
    \ n\n                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplhi4934o.jl:30\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 8 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:31\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 13 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:32\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 43 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:33\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 64 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhi4934o.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars = [Cars(rand(-10:10),\
    \ rand(-10:10)) for i in 1:n] \n    cars1 = sort(cars, by=x -> x.pos) \n    cars2\
    \ = sort(cars, by=x -> -x.pos)\n    count = 0 \n    for i in 1:n \n        count\
    \ += abs(cars1[i].pos - cars2[i].pos) <= cars1[i].vel * cars2[i].vel\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4_dohz8l.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: Cars not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#4\"})\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4_dohz8l.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4_dohz8l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4_dohz8l.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: Cars not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#4\"\
    })\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n     @ Main\
    \ /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4_dohz8l.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4_dohz8l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4_dohz8l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: Cars not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#4\"\
    })\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n     @ Main\
    \ /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_dohz8l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # We'll solve this problem\
    \ recursively by first finding\n    # the number of collisions that happen after\
    \ the first\n    # car has moved, then recursively computing the number\n    #\
    \ of collisions that happen until the next car moves, etc.\n    return n == 0\
    \ ? 0 : 2 * n + 2 * car_race_collision(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvp7_7gqu.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 22 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 52 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1004 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 4072 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:28 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvp7_7gqu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = length\
    \ of each set of cars\n    \"\"\"\n    return Int64(n*(n-1)/2)\nend\ncar_race_collision(2)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7rat8et7.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:28 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rat8et7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n * (n - 1))\
    \ / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyjjy48a.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyjjy48a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    total_cars = n * 2\n\
    \    num_collisions = 0\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn63ztuzc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn63ztuzc.jl:1\n\
    in expression starting at /tmp/tmpn63ztuzc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    # From now on, n >= 1.\n    if n == 1\n        return 0\n  \
    \  end\n    # From now on, n >= 2.\n    if n == 2\n        return 1\n    end\n\
    \    # From now on, n >= 3.\n    @assert n >= 3\n    @assert n <= 100\n    # We\
    \ construct a triangular matrix:\n    #  a[1,1] = 1\n    #  a[2,2] = 1\n    #\
    \  a[3,3] = 1\n    #  a[4,4] = 1\n    #  a[5,5] = 1\n    #  a[6,6] = 1\n    #\
    \  a[7,7] = 1\n    #  a[8,8] = 1\n    #  a[9,9] = 1\n    #  a[10,10] = 1\n   \
    \ #  a[10,9] = 9\n    #  a[10,8] = 36\n    #  a[10,7] = 84\n    #  a[10,6] = 126\n\
    \    #  a[10,5] = 126\n    #  a[10,4] = 84\n    #  a[10,3] = 36\n    #  a[10,2]\
    \ = 9\n    #  a[10,1] = 1\n    #  a[9,9] = 1\n    #  a[9,8] = 8\n    #  a[9,7]\
    \ = 28\n    #  a[9,6] = 56\n    #  a[9,5] = 70\n    #  a[9,4] = 56\n    #  a[9,3]\
    \ = 28\n    #  a[9,2] = 8\n    #  a[9,1] = 1\n    #  a[8,8] = 1\n    #  a[8,7]\
    \ = 7\n    #  a[8,6] = 21\n    #  a[8,5] = 35\n    #  a[8,4] = 35\n    #  a[8,3]\
    \ = 21\n    #  a[8,2\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaazoudkq.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaazoudkq.jl:1\n\
    in expression starting at /tmp/tmpaazoudkq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    my_travel_time = 0\n\
    \    num_cars_over = 0\n    for i = 1:n\n        if my_travel_time &lt;= i\n \
    \           my_travel_time += 1\n        else\n            num_cars_over += 1\n\
    \        end\n    end\n    return num_cars_over\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ydyaexz.jl:16\nin expression starting at /tmp/tmp0ydyaexz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Construct\
    \ the positions of all cars.\n    First half of the list are cars moving left\
    \ to right;\n    second half of the list are cars moving right to left.\n    The\
    \ i-th car in the list moves at a speed of i.\n    \"\"\"\n    posn = map(x ->\
    \ x*(1+x), range(1,n,1))\n    posn = reverse(posn)\n    posn = append!(posn, map(x\
    \ -> x*(1+x), range(1,n,1)))\n    count = 0 \n    #Go through all the cars and\
    \ determine the number of collisions\n    for i = 1:2*n-1\n        for j = i+1:2*n\n\
    \            if posn[i] == posn[j]\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp30z5gg_2.jl:38\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  ArgumentError: range(1.0, stop=2.0, length=1):\
    \ endpoints differ\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:726\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] car_race_collision(n::Int64)\n\
    \      @ Main /tmp/tmp30z5gg_2.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp30z5gg_2.jl:38 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp30z5gg_2.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp30z5gg_2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  ArgumentError: range(1.0, stop=3.0, length=1): endpoints\
    \ differ\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64}, start::Float64,\
    \ stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:726\n    [2] _linspace(#unused#::Type{Float64},\
    \ start_n::Int64, stop_n::Int64, len::Int64, den::Int64)\n      @ Base ./twiceprecision.jl:706\n\
    \    [3] _linspace\n      @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n\
    \      @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] car_race_collision(n::Int64)\n\
    \      @ Main /tmp/tmp30z5gg_2.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp30z5gg_2.jl:39 [inlined]\n\
    \   [10] macro expansion\n      @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30z5gg_2.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    nleft = n\n    nright\
    \ = n\n    ncollisions = 0\n    # speed is a random number from 1 to 1000 (both\
    \ inclusive)\n    for i in 1:n\n        speed = get_random_int(1,1000)\n     \
    \   nleft -= speed\n        nright += speed\n        if nleft < 0\n          \
    \  ncollisions += abs(nleft)\n            nleft = 0\n        end\n        if nright\
    \ < 0\n            ncollisions += abs(nright)\n            nright = 0\n      \
    \  end\n    end\n    return ncollisions\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr6o5cm4o.jl:37\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: get_random_int not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6o5cm4o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\n  \
    \  return 0\nend\ncar_race_collision(5)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr48i9ic1.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:26 [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr48i9ic1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    \"\
    \"\"\n    This is a double for loop.  With N cars, we have N^2 pairs.\n    The\
    \ outer loop runs N times.  The inner loop runs N times.\n    For example, when\
    \ N=10, the outer loop runs 10 times, and the\n    inner loop runs 10 times. \
    \ As a result, there are a total of\n    100 times through the inner loop, and\
    \ the result is 100 collisions.\n    \"\"\"\n    for i = 1:n\n        for j =\
    \ 1:n\n            if (i > j)\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptv8cfksc.jl:35\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:36\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:37\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:38\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:39\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:39 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv8cfksc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    s = 0\n    for i = 0:n-1\n\
    \        for j = 0:n-1\n            if j-i>0\n                s += 1\n       \
    \     end\n        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplqyzfu_n.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:32 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqyzfu_n.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    A naive implementation\
    \ that takes O(n^2) time.\n    \"\"\"\n    # this is a 1D array\n    cars = [0]\
    \ * n\n    # populate cars with random locations\n    for i in 1:n\n        cars[i]\
    \ = rand(-1000:1000)\n    end\n    # cars is now a 1D array of size n.  it records\
    \ all the locations for the \n    # cars going in the same direction.  We do the\
    \ same for cars_other,\n    # which records all the locations for the cars that\
    \ are going in the\n    # opposite direction\n    cars_other = [0] * n\n    for\
    \ i in 1:n\n        cars_other[i] = rand(-1000:1000)\n    end\n    # sort them\
    \ in ascending order\n    sort!(cars)\n    sort!(cars_other)\n    count = 0\n\
    \    # if cars[i] == cars_other[j], then the ith car and the jth car collide\n\
    \    # because they're in the same location but are traveling in opposite directions\n\
    \    i = 1\n    j = 1\n    while i < n && j < n\n        if cars[i] == cars_other[j]\n\
    \            count += 1\n            i += 1\n            j += 1\n        elseif\
    \ cars[i] < cars_other[j]\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprvjtvji_.jl:56\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:59\n  Test threw exception\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvjtvji_.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # assumes n > 0\n   \
    \ n * (n - 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g5ifiki.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:25 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g5ifiki.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    sum = 0\n    for i =\
    \ 1:n\n        sum += i\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3ddc_3d.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:28 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3ddc_3d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    i = 1\n    num_collision\
    \ = 0\n    for i in 1:n\n        j = 1\n        for j in 1:n\n            if i\
    \ == j\n                num_collision += 1\n            end\n        end\n   \
    \ end\n    return num_collision\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpahea9lf5.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:34 [inline"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahea9lf5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_from_left = collect(1:n)\n\
    \    cars_from_right = collect(1:n)\n    coll = 0\n    for i = 1:n\n        for\
    \ j = 1:n\n            if i == j\n                #println(\"The car going from\
    \ left to right and the car going from right to left are the same car\")\n   \
    \         elseif abs(cars_from_left[i] - cars_from_right[j]) == n - 1\n      \
    \          #println(\"$(cars_from_left[i]) meets $(cars_from_right[j])\")\n  \
    \              coll += 1\n            end\n        end\n    end\n    println(\"\
    The number of collisions are $coll\")\n    return coll\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "The number of collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:34\n\
    \  Expression: candidate(2) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:35\n  Expression:\
    \ candidate(3) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:36\n  Expression:\
    \ candidate(4) == 16\n   Evaluated: 2 == 16\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:37\n  Expression:\
    \ candidate(8) == 64\n   Evaluated: 2 == 64\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:38\n  Expression:\
    \ candidate(10) == 100\n   Evaluated: 2 == 100\nStacktrace:\n [1] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9ibyhw4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n * (n - 1) / 2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1463dcj3.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:24 [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1463dcj3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # The task is O(n) and\
    \ can be accomplished in 1 pass\n    \n    # The elements in left_to_right store\
    \ the timestamps at which the \n    # cars driving left to right will arrive at\
    \ the origin\n    left_to_right = Vector{Int64}(undef, n)\n    for i in 1:n\n\
    \        left_to_right[i] = i\n    end\n    \n    # The elements in right_to_left\
    \ store the timestamps at which the \n    # cars driving right to left will arrive\
    \ at the origin\n    right_to_left = Vector{Int64}(undef, n)\n    for i in 1:n\n\
    \        right_to_left[i] = n + i\n    end\n    \n    # Merge the two sorted arrays\
    \ of timestamps and count the number of \n    # timestamps in the merged array\
    \ that are repeated at least twice.\n    # That number is the answer.\n    return\
    \ merge_and_count_repeats(left_to_right, right_to_left)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4t0gxat.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: merge_and_count_repeats not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: merge_and_count_repeats not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: merge_and_count_repeats not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: merge_and_count_repeats not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4t0gxat.jl:36\n"
  exit_code: 1
  status: SyntaxError
