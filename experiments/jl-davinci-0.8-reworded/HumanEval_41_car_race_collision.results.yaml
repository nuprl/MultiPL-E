language: jl
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # write your code here\n\
    \    count = 0\n    for i = 1:n\n        for j = 1:n\n            if (j + i) >=\
    \ n\n                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplhi4934o.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmplhi4934o.jl:30\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 8 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:31\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 13 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:32\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 43 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplhi4934o.jl:33\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 64 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplhi4934o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplhi4934o.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars = [Cars(rand(-10:10),\
    \ rand(-10:10)) for i in 1:n] \n    cars1 = sort(cars, by=x -> x.pos) \n    cars2\
    \ = sort(cars, by=x -> -x.pos)\n    count = 0 \n    for i in 1:n \n        count\
    \ += abs(cars1[i].pos - cars2[i].pos) <= cars1[i].vel * cars2[i].vel\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4_dohz8l.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp4_dohz8l.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: Cars not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#4\"})\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4_dohz8l.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4_dohz8l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4_dohz8l.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: Cars not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#4\"\
    })\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n     @ Main\
    \ /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4_dohz8l.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4_dohz8l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4_dohz8l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: Cars not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#4\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#4\"\
    })\n     @ Base ./array.jl:724\n   [4] car_race_collision(n::Int64)\n     @ Main\
    \ /tmp/tmp4_dohz8l.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # We'll solve this problem\
    \ recursively by first finding\n    # the number of collisions that happen after\
    \ the first\n    # car has moved, then recursively computing the number\n    #\
    \ of collisions that happen until the next car moves, etc.\n    return n == 0\
    \ ? 0 : 2 * n + 2 * car_race_collision(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvp7_7gqu.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpvp7_7gqu.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 22 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 52 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1004 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp7_7gqu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvp7_7gqu.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 4072 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp7_7gqu.jl:28 "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = length\
    \ of each set of cars\n    \"\"\"\n    return Int64(n*(n-1)/2)\nend\ncar_race_collision(2)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7rat8et7.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp7rat8et7.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rat8et7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7rat8et7.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rat8et7.jl:28 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n * (n - 1))\
    \ / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeyjjy48a.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpeyjjy48a.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:24 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    total_cars = n * 2\n\
    \    num_collisions = 0\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn63ztuzc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn63ztuzc.jl:1\n\
    in expression starting at /tmp/tmpn63ztuzc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    # From now on, n >= 1.\n    if n == 1\n        return 0\n  \
    \  end\n    # From now on, n >= 2.\n    if n == 2\n        return 1\n    end\n\
    \    # From now on, n >= 3.\n    @assert n >= 3\n    @assert n <= 100\n    # We\
    \ construct a triangular matrix:\n    #  a[1,1] = 1\n    #  a[2,2] = 1\n    #\
    \  a[3,3] = 1\n    #  a[4,4] = 1\n    #  a[5,5] = 1\n    #  a[6,6] = 1\n    #\
    \  a[7,7] = 1\n    #  a[8,8] = 1\n    #  a[9,9] = 1\n    #  a[10,10] = 1\n   \
    \ #  a[10,9] = 9\n    #  a[10,8] = 36\n    #  a[10,7] = 84\n    #  a[10,6] = 126\n\
    \    #  a[10,5] = 126\n    #  a[10,4] = 84\n    #  a[10,3] = 36\n    #  a[10,2]\
    \ = 9\n    #  a[10,1] = 1\n    #  a[9,9] = 1\n    #  a[9,8] = 8\n    #  a[9,7]\
    \ = 28\n    #  a[9,6] = 56\n    #  a[9,5] = 70\n    #  a[9,4] = 56\n    #  a[9,3]\
    \ = 28\n    #  a[9,2] = 8\n    #  a[9,1] = 1\n    #  a[8,8] = 1\n    #  a[8,7]\
    \ = 7\n    #  a[8,6] = 21\n    #  a[8,5] = 35\n    #  a[8,4] = 35\n    #  a[8,3]\
    \ = 21\n    #  a[8,2\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaazoudkq.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaazoudkq.jl:1\n\
    in expression starting at /tmp/tmpaazoudkq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    my_travel_time = 0\n\
    \    num_cars_over = 0\n    for i = 1:n\n        if my_travel_time &lt;= i\n \
    \           my_travel_time += 1\n        else\n            num_cars_over += 1\n\
    \        end\n    end\n    return num_cars_over\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ydyaexz.jl:16\nin expression starting at /tmp/tmp0ydyaexz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Construct\
    \ the positions of all cars.\n    First half of the list are cars moving left\
    \ to right;\n    second half of the list are cars moving right to left.\n    The\
    \ i-th car in the list moves at a speed of i.\n    \"\"\"\n    posn = map(x ->\
    \ x*(1+x), range(1,n,1))\n    posn = reverse(posn)\n    posn = append!(posn, map(x\
    \ -> x*(1+x), range(1,n,1)))\n    count = 0 \n    #Go through all the cars and\
    \ determine the number of collisions\n    for i = 1:2*n-1\n        for j = i+1:2*n\n\
    \            if posn[i] == posn[j]\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp30z5gg_2.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp30z5gg_2.jl:38\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  ArgumentError: range(1.0, stop=2.0, length=1):\
    \ endpoints differ\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:726\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] car_race_collision(n::Int64)\n\
    \      @ Main /tmp/tmp30z5gg_2.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp30z5gg_2.jl:38 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp30z5gg_2.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp30z5gg_2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  ArgumentError: range(1.0, stop=3.0, length=1): endpoints\
    \ differ\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64}, start::Float64,\
    \ stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:726\n    [2] _linspace(#unused#::Type{Float64},\
    \ start_n::Int64, stop_n::Int64, len::Int64, den::Int64)\n      @ Base ./twiceprecision.jl:706\n\
    \    [3] _linspace\n      @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n\
    \      @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] car_race_collision(n::Int64)\n\
    \      @ Main /tmp/tmp30z5gg_2.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp30z5gg_2.jl:39 [inlined]\n\
    \   [10] macro expansion\n      @ /sh"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    nleft = n\n    nright\
    \ = n\n    ncollisions = 0\n    # speed is a random number from 1 to 1000 (both\
    \ inclusive)\n    for i in 1:n\n        speed = get_random_int(1,1000)\n     \
    \   nleft -= speed\n        nright += speed\n        if nleft < 0\n          \
    \  ncollisions += abs(nleft)\n            nleft = 0\n        end\n        if nright\
    \ < 0\n            ncollisions += abs(nright)\n            nright = 0\n      \
    \  end\n    end\n    return ncollisions\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpr6o5cm4o.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpr6o5cm4o.jl:37\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: get_random_int not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6o5cm4o.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6o5cm4o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr6o5cm4o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: get_random_int not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpr6o5cm4o.jl:18\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/j"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\n  \
    \  return 0\nend\ncar_race_collision(5)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr48i9ic1.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpr48i9ic1.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr48i9ic1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpr48i9ic1.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr48i9ic1.jl:26 [inlined"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    \"\
    \"\"\n    This is a double for loop.  With N cars, we have N^2 pairs.\n    The\
    \ outer loop runs N times.  The inner loop runs N times.\n    For example, when\
    \ N=10, the outer loop runs 10 times, and the\n    inner loop runs 10 times. \
    \ As a result, there are a total of\n    100 times through the inner loop, and\
    \ the result is 100 collisions.\n    \"\"\"\n    for i = 1:n\n        for j =\
    \ 1:n\n            if (i > j)\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptv8cfksc.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmptv8cfksc.jl:35\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:36\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:37\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:38\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv8cfksc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmptv8cfksc.jl:39\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv8cfksc.jl:39 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    s = 0\n    for i = 0:n-1\n\
    \        for j = 0:n-1\n            if j-i>0\n                s += 1\n       \
    \     end\n        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplqyzfu_n.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmplqyzfu_n.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqyzfu_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmplqyzfu_n.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqyzfu_n.jl:32 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    A naive implementation\
    \ that takes O(n^2) time.\n    \"\"\"\n    # this is a 1D array\n    cars = [0]\
    \ * n\n    # populate cars with random locations\n    for i in 1:n\n        cars[i]\
    \ = rand(-1000:1000)\n    end\n    # cars is now a 1D array of size n.  it records\
    \ all the locations for the \n    # cars going in the same direction.  We do the\
    \ same for cars_other,\n    # which records all the locations for the cars that\
    \ are going in the\n    # opposite direction\n    cars_other = [0] * n\n    for\
    \ i in 1:n\n        cars_other[i] = rand(-1000:1000)\n    end\n    # sort them\
    \ in ascending order\n    sort!(cars)\n    sort!(cars_other)\n    count = 0\n\
    \    # if cars[i] == cars_other[j], then the ith car and the jth car collide\n\
    \    # because they're in the same location but are traveling in opposite directions\n\
    \    i = 1\n    j = 1\n    while i < n && j < n\n        if cars[i] == cars_other[j]\n\
    \            count += 1\n            i += 1\n            j += 1\n        elseif\
    \ cars[i] < cars_other[j]\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprvjtvji_.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmprvjtvji_.jl:56\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmprvjtvji_.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprvjtvji_.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprvjtvji_.jl:55\ntest set:\
    \ Error During Test at /tmp/tmprvjtvji_.jl:59\n  Test threw exception\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # assumes n > 0\n   \
    \ n * (n - 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2g5ifiki.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp2g5ifiki.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2g5ifiki.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2g5ifiki.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2g5ifiki.jl:25 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    sum = 0\n    for i =\
    \ 1:n\n        sum += i\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa3ddc_3d.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpa3ddc_3d.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3ddc_3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa3ddc_3d.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3ddc_3d.jl:28 [inli"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    i = 1\n    num_collision\
    \ = 0\n    for i in 1:n\n        j = 1\n        for j in 1:n\n            if i\
    \ == j\n                num_collision += 1\n            end\n        end\n   \
    \ end\n    return num_collision\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpahea9lf5.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpahea9lf5.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahea9lf5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpahea9lf5.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahea9lf5.jl:34 [inline"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_from_left = collect(1:n)\n\
    \    cars_from_right = collect(1:n)\n    coll = 0\n    for i = 1:n\n        for\
    \ j = 1:n\n            if i == j\n                #println(\"The car going from\
    \ left to right and the car going from right to left are the same car\")\n   \
    \         elseif abs(cars_from_left[i] - cars_from_right[j]) == n - 1\n      \
    \          #println(\"$(cars_from_left[i]) meets $(cars_from_right[j])\")\n  \
    \              coll += 1\n            end\n        end\n    end\n    println(\"\
    The number of collisions are $coll\")\n    return coll\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb9ibyhw4.jl:31

    '
  stdout: "The number of collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:34\n\
    \  Expression: candidate(2) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:35\n  Expression:\
    \ candidate(3) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:36\n  Expression:\
    \ candidate(4) == 16\n   Evaluated: 2 == 16\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:37\n  Expression:\
    \ candidate(8) == 64\n   Evaluated: 2 == 64\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9ibyhw4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9ibyhw4.jl:33\nThe number of\
    \ collisions are 2\ntest set: Test Failed at /tmp/tmpb9ibyhw4.jl:38\n  Expression:\
    \ candidate(10) == 100\n   Evaluated: 2 == 100\nStacktrace:\n [1] macro "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n * (n - 1) / 2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1463dcj3.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp1463dcj3.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1463dcj3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1463dcj3.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1463dcj3.jl:24 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # The task is O(n) and\
    \ can be accomplished in 1 pass\n    \n    # The elements in left_to_right store\
    \ the timestamps at which the \n    # cars driving left to right will arrive at\
    \ the origin\n    left_to_right = Vector{Int64}(undef, n)\n    for i in 1:n\n\
    \        left_to_right[i] = i\n    end\n    \n    # The elements in right_to_left\
    \ store the timestamps at which the \n    # cars driving right to left will arrive\
    \ at the origin\n    right_to_left = Vector{Int64}(undef, n)\n    for i in 1:n\n\
    \        right_to_left[i] = n + i\n    end\n    \n    # Merge the two sorted arrays\
    \ of timestamps and count the number of \n    # timestamps in the merged array\
    \ that are repeated at least twice.\n    # That number is the answer.\n    return\
    \ merge_and_count_repeats(left_to_right, right_to_left)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpt4t0gxat.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpt4t0gxat.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: merge_and_count_repeats not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: merge_and_count_repeats not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: merge_and_count_repeats not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4t0gxat.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4t0gxat.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpt4t0gxat.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: merge_and_count_repeats not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt4t0gxat.jl:32\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_collisions = 0\n  \
    \  for i in 1:n-1\n        n_collisions += i\n    end\n    return n_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfv3w63b8.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpfv3w63b8.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfv3w63b8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfv3w63b8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfv3w63b8.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfv3w63b8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfv3w63b8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfv3w63b8.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfv3w63b8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfv3w63b8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfv3w63b8.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfv3w63b8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfv3w63b8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfv3w63b8.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfv3w63b8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input:\n\
    \        n: length of each list of cars\n    Output:\n        Number of collisions\n\
    \    \"\"\"\n    # Initialize 2 lists of cars\n    cars_r2l = np.arange(1, n+1,\
    \ 1) #cars going right to left\n    cars_l2r = np.arange(n, 0, -1) #cars going\
    \ left to right\n    # Initialize the number of collisions\n    num_collisions\
    \ = 0\n    while cars_r2l.size > 0 and cars_l2r.size > 0:\n        # Check for\
    \ collisions\n        if cars_r2l[0] == cars_l2r[0]:\n            num_collisions\
    \ += 1\n            cars_r2l = cars_r2l[1:]\n            cars_l2r = cars_l2r[1:]\n\
    \        # Update positions\n        else:\n            cars_r2l[0] -= 1\n   \
    \         cars_l2r[0] += 1\n            if cars_r2l[0] == 0:\n               \
    \ cars_r2l = cars_r2l[1:]\n            if cars_l2r[0] == 0:\n                cars_l2r\
    \ = cars_l2r[1:]\n    return num_collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"while\" at /tmp/tmpejvrde_k.jl:24 expected\
    \ \"end\", got \"cars_l2r\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpejvrde_k.jl:24\n\
    in expression starting at /tmp/tmpejvrde_k.jl:24\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    You can assume\
    \ that n is a positive integer.\n    \"\"\"\n    return n * (n - 1) / 2\nend\n\
    car_race_collision(10)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_xvjvewz.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp_xvjvewz.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xvjvewz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xvjvewz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xvjvewz.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xvjvewz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xvjvewz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xvjvewz.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xvjvewz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xvjvewz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xvjvewz.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xvjvewz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xvjvewz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_xvjvewz.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xvjvewz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  \n  # Step 1:  sort the\
    \ left-to-right cars (by their starting position).\n  # Step 2:  sort the right-to-left\
    \ cars.\n  # Step 3:  perform a linear scan on the sorted arrays of cars to determine\n\
    \  #          the number of collisions.\n  \n  # initialize the left-to-right\
    \ cars\n  ltorcars = zeros(n)\n  for i in 1:n\n    ltorcars[i] = rand()\n  end\n\
    \  \n  # initialize the right-to-left cars\n  rtolcars = zeros(n)\n  for i in\
    \ 1:n\n    rtolcars[i] = rand()\n  end\n  \n  # sort the arrays\n  ltorcars =\
    \ sort(ltorcars)\n  rtolcars = sort(rtolcars)\n  \n  # find the number of collisions\n\
    \  collisions = 0\n  idx = 1\n  while idx <= n && ltorcars[idx] < 1 - rtolcars[n\
    \ + 1 - idx]\n    collisions += 1\n    idx += 1\n  end\n  \n  return collisions\n\
    \  \nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfnvq221g.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpfnvq221g.jl:51\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnvq221g.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnvq221g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfnvq221g.jl:52\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnvq221g.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnvq221g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfnvq221g.jl:53\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnvq221g.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnvq221g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfnvq221g.jl:54\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnvq221g.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnvq221g.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfnvq221g.jl:55\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 7 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnvq221g.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # represents the n cars\
    \ driving left to right, by their positions\n    # the cars are sorted in increasing\
    \ order\n    cars_driving_left_to_right = zeros(Int64, n) \n    # represents the\
    \ n cars driving right to left, by their positions\n    # the cars are sorted\
    \ in decreasing order\n    cars_driving_right_to_left = zeros(Int64, n) \n   \
    \ for i in 1:n\n        cars_driving_left_to_right[i] = i\n        cars_driving_right_to_left[i]\
    \ = n - i + 1\n    end\n    # this variable represents the number of collisions\
    \ so far\n    collisions = 0\n    # the distance travelled by the cars so far\n\
    \    dist = 0\n    # this variable represents the index of the car in \n    #\
    \ cars_driving_left_to_right that is immediately to the left of\n    # the car\
    \ in cars_driving_right_to_left with index j\n    i = 1\n    # this variable represents\
    \ the index of the car in \n    # cars_driving_right_to_left that is immediately\
    \ to the right of\n    # the car in cars_driving_left_to_right with index i\n\
    \    j = 1\n    while true\n        # imagine each car \"moving\" by incrementing\
    \ its position by 1\n        dist += 1\n        # check if there is a collision\n\
    \        if (cars_driving_left_to_right[i] == cars_driving_right_to_left[j])\n\
    \            # yes, there is a collision\n            collisions += 1\n      \
    \      # move forward the cars \n            i += 1\n            j += 1\n    \
    \        # did we just move forward all cars?\n            if (i > n || j > n)\n\
    \                # yes, we did\n                # we are done\n              \
    \  break\n            end\n        elseif (cars_driving_left_to_right[i] < cars_driving_right_to_left[j])\n\
    \            # no, there is no collision; but, the car from the left is\n    \
    \        # immediately to the left of the car from the right\n            # so,\
    \ we must move forward the car from the left\n            i += 1\n           \
    \ # did we just move forward all cars?\n           \nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgs7hfxmk.jl:1\nin expression starting at /tmp/tmpgs7hfxmk.jl:1\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00gb_80i.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp00gb_80i.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\n  \
    \  return 1\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj6658wsf.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj6658wsf.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6658wsf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6658wsf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj6658wsf.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6658wsf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6658wsf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj6658wsf.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6658wsf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6658wsf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj6658wsf.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6658wsf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj6658wsf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj6658wsf.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj6658wsf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # the number of cars\
    \ that start moving left to right\n    # the number of cars that start moving\
    \ right to left\n    cars_l = Dict()\n    cars_r = Dict()\n    collisions = 0\n\
    \    for i = 1:n\n        # generate a random distance in meters that this car\
    \ starts at\n        start_r = rand(0:1000)\n        start_l = rand(0:1000)\n\
    \        cars_r[i] = start_r\n        cars_l[i] = start_l\n    end\n    for i\
    \ = 1:n\n        for j = 1:n\n            # see if car_r gets to car_l\n     \
    \       # both cars are moving at the same speed\n            # collision occurs\
    \ if they start at the same position\n            if cars_r[i] == cars_l[j]\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwt79mzdg.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpwt79mzdg.jl:42\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt79mzdg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt79mzdg.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpwt79mzdg.jl:43\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt79mzdg.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt79mzdg.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpwt79mzdg.jl:44\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt79mzdg.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt79mzdg.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpwt79mzdg.jl:45\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt79mzdg.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt79mzdg.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpwt79mzdg.jl:46\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt79mzdg.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # We first make the left-to-right\
    \ cars\n    # We want them to be close to each other, so we'll place them\n  \
    \  # in a list that we call a \"track\"\n    # We'll put the cars in a \"track\"\
    \ that has a length of 1.\n    # The end of the track is a number x such that\
    \ x is close to 1.\n    # Think of the track as a circle that has been straightened\n\
    \    # out so it's a line.  If we kept it a circle, the cars would\n    # keep\
    \ going around and around forever.  We don't want that.\n    track_end = 1\n \
    \   car_velocity = 0.5 # All cars move at the same speed\n    track = [i for i\
    \ in 0.0:car_velocity:track_end]\n    num_left_to_right_cars = length(track)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi0kivr5z.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi0kivr5z.jl:1\n\
    in expression starting at /tmp/tmpi0kivr5z.jl:1\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0 \n   \
    \ for i in 1:n \n        for j in 1:n \n            if i == j \n             \
    \   continue \n            end \n            if abs(2i - 2j) == 2 \n         \
    \       collisions += 1 \n            end \n        end \n    end \n    return\
    \ collisions \nend \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd26wa_hk.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpd26wa_hk.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd26wa_hk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd26wa_hk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpd26wa_hk.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd26wa_hk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd26wa_hk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpd26wa_hk.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd26wa_hk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd26wa_hk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpd26wa_hk.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 14 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd26wa_hk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd26wa_hk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpd26wa_hk.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 18 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd26wa_hk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977963
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return car_race_collision(collect(1:n),\
    \ collect(1:n))\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp18b95vcx.jl:20\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: no method matching
    car_race_collision(::Vector{Int64}, ::Vector{Int64})\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp18b95vcx.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp18b95vcx.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp18b95vcx.jl:19\ntest set: Error
    During Test at /tmp/tmp18b95vcx.jl:21\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  MethodError: no method matching car_race_collision(::Vector{Int64}, ::Vector{Int64})\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp18b95vcx.jl:13\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp18b95vcx.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp18b95vcx.jl:19\n'''
  timestamp: 1659977964
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # We'll be manipulating\
    \ the car_positions vector.  As we move\n    # each car to its new position, we'll\
    \ also track its initial position\n    # in the other_car_positions vector.  \n\
    \    car_positions = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n    other_car_positions\
    \ = [10; 9; 8; 7; 6; 5; 4; 3; 2; 1]\n    for i in 1:n\n        for j in 1:10\n\
    \            if car_positions[j] > 0\n                car_positions[j] = car_positions[j]\
    \ + 1\n            else\n                car_positions[j] = car_positions[j] -\
    \ 1\n            end\n        end\n        # Now we compare the car_positions\
    \ with other_car_positions.\n        # Wherever there's a match, we've found a\
    \ collision.\n        collision_idx = findall(car_positions .== other_car_positions)\n\
    \        n_collisions = length(collision_idx)\n        other_car_positions[collision_idx]\
    \ = 0\n    end\n    n_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppvt_2rzk.jl:39\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  ArgumentError: indexed assignment
    with a single value to possibly many locations is not supported; perhaps use broadcasting
    `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n     @
    Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear, A::Vector{Int64},
    x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @
    ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315
    [inlined]\n   [5] car_race_collision(n::Int64)\n     @ Main /tmp/tmppvt_2rzk.jl:30\n   [6]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmppvt_2rzk.jl:39 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmppvt_2rzk.jl:38\ntest set: Error
    During Test at /tmp/tmppvt_2rzk.jl:40\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  ArgumentError: indexed assignment with a single value to possibly many
    locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1]
    setindex_shape_check(::Int64, ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,
    A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n   [3]
    _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n     @
    ./abstractarray.jl:1315 [inlined]\n   [5] car_race_collision(n::Int64)\n     @
    Main /tmp/tmppvt_2rzk.jl:30\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmppvt_2rzk.jl:40 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmppvt_2rzk.jl:38\ntest set: Erro'
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00gb_80i.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp00gb_80i.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00gb_80i.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp00gb_80i.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00gb_80i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    leftright = [i for i\
    \ in 1:n]\n    rightleft = [n-i+1 for i in 1:n]\n    return length(intersect(leftright,\
    \ rightleft))\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk8e597ff.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpk8e597ff.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8e597ff.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8e597ff.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8e597ff.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8e597ff.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8e597ff.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8e597ff.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8e597ff.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8e597ff.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8e597ff.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8e597ff.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8e597ff.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk8e597ff.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8e597ff.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # WRITE YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5_37xzo1.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp5_37xzo1.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_37xzo1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_37xzo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5_37xzo1.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_37xzo1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_37xzo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5_37xzo1.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_37xzo1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_37xzo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5_37xzo1.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_37xzo1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_37xzo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5_37xzo1.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_37xzo1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n < 1\n        println(\"\
    Error: number of cars must be >= 1!\")\n        return\n    end\n    return collision_rec(n,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp2eh6u_j_.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: collision_rec not
    defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp2eh6u_j_.jl:17\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eh6u_j_.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eh6u_j_.jl:23\ntest set: Error
    During Test at /tmp/tmp2eh6u_j_.jl:25\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: collision_rec not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp2eh6u_j_.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eh6u_j_.jl:25 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eh6u_j_.jl:23\ntest set: Error
    During Test at /tmp/tmp2eh6u_j_.jl:26\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: collision_rec not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp2eh6u_j_.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eh6u_j_.jl:26 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eh6u_j_.jl:23\ntest set: Error
    During Test at /tmp/tmp2eh6u_j_.jl:27\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: collision_rec not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp2eh6u_j_.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/'
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_collisions = 0\n  \
    \  n_cars_moving_l2r = n\n    n_cars_moving_r2l = n\n    for car_idx = 1:n\n \
    \       if n_cars_moving_l2r > 0 && n_cars_moving_r2l > 0\n            # there\
    \ is still a chance for a collision\n            if car_idx % 2 == 0\n       \
    \         # even\n                n_cars_moving_l2r -= 1\n            else\n \
    \               # odd\n                n_cars_moving_r2l -= 1\n              \
    \  n_collisions += 1\n            end\n        else\n            # no longer a\
    \ chance for a collision\n            break\n        end\n    end\n    return\
    \ n_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxjmqo343.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpxjmqo343.jl:39\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjmqo343.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjmqo343.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxjmqo343.jl:40\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjmqo343.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjmqo343.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxjmqo343.jl:41\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjmqo343.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjmqo343.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxjmqo343.jl:42\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 4 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjmqo343.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjmqo343.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxjmqo343.jl:43\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 5 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjmqo343.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input:\n\
    \    n is a positive integer.\n    \"\"\"\n    \"Your code here\"\n    max_collisions\
    \ = Int64(0)\n    for i in 1:n\n        for j in 1:n\n            if i - j > 0\
    \ && i - j > max_collisions\n                max_collisions = i - j\n        \
    \    end\n        end\n    end\n    return max_collisions\nend\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptwcw4nuv.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmptwcw4nuv.jl:50\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwcw4nuv.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwcw4nuv.jl:49\ntest set: Test\
    \ Failed at /tmp/tmptwcw4nuv.jl:51\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwcw4nuv.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwcw4nuv.jl:49\ntest set: Test\
    \ Failed at /tmp/tmptwcw4nuv.jl:52\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwcw4nuv.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwcw4nuv.jl:49\ntest set: Test\
    \ Failed at /tmp/tmptwcw4nuv.jl:53\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwcw4nuv.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwcw4nuv.jl:49\ntest set: Test\
    \ Failed at /tmp/tmptwcw4nuv.jl:54\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwcw4nuv.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977963
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # Randomly generate\
    \ n cars moving left to right\n    # Each car is described by its position (on\
    \ the road) and its velocity (km/hour)\n    # The cars are assumed to be uniformly\
    \ distributed on the road with position in [0, 100]\n    # The cars are also assumed\
    \ to be uniformly distributed with velocity in [10, 100]\n    leftright = [(rand(),\
    \ rand(10:100)) for i=1:n]\n    \n    # Do the same thing for the cars moving\
    \ right to left\n    rightleft = [(rand(), -rand(10:100)) for i=1:n]\n    \n \
    \   # At each time stamp, simulate each car moving for 1 second\n    for i=1:100\n\
    \        for j=1:n\n            leftright[j][1] += leftright[j][2]/3600\n    \
    \        rightleft[j][1] += rightleft[j][2]/3600\n        end\n    end\n    \n\
    \    # Check if any cars collided\n    ncollision = 0\n    for i=1:n\n       \
    \ if leftright[i][1]>=1 && rightleft[i][1]<=0\n            ncollision += 1\n \
    \       end\n    end\n    \n    return ncollision\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpcvwrbijf.jl:46\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: no method matching
    setindex!(::Tuple{Float64, Int64}, ::Float64, ::Int64)\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpcvwrbijf.jl:26\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvwrbijf.jl:46 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvwrbijf.jl:45\n'''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # we use a neat trick\
    \ to solve this problem.  We imagine\n    # that the cars are traveling on an\
    \ infinitely large grid.\n    # Each car is represented by a point on the grid.\
    \  Two cars\n    # are in collision if and only if their points are the same.\n\
    \    # We place all the cars on the left-to-right set into a set,\n    # and all\
    \ the cars on the right-to-left set into a different set.\n    # Then we intersect\
    \ the two sets to get the number of collisions.\n    # It is easy to see that\
    \ each car is at a unique location,\n    # and so the intersection of the two\
    \ sets is accurate.\n    set1 = Set{Int64}()\n    set2 = Set{Int64}()\n    for\
    \ i in 1:n\n        push!(set1, i)\n        push!(set2, i)\n    end\n    return\
    \ length(intersect(set1, set2))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb0kohcgs.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpb0kohcgs.jl:35\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0kohcgs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0kohcgs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpb0kohcgs.jl:36\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0kohcgs.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0kohcgs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpb0kohcgs.jl:37\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0kohcgs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0kohcgs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpb0kohcgs.jl:38\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0kohcgs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0kohcgs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpb0kohcgs.jl:39\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0kohcgs.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977963
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"TODO: fill in this\
    \ function and remove this line.\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwa818b6e.jl:20\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an
    object of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpwa818b6e.jl:13\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwa818b6e.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwa818b6e.jl:19\n'''
  timestamp: 1659977964
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input\n \
    \       n: number of cars driving to the right\n    Output\n        the number\
    \ of collisions\n    \"\"\"\n    # this is your job\n    # don't look at the solution;\
    \  just ask questions if you are stuck\nend\n \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i in 1:n\n        for j in 1:n\n            collisions += 1\n        end\n \
    \   end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #Store positions of each\
    \ car in an array\n    right_cars = zeros(Int64,n) #X-coordinate of each car\n\
    \    left_cars = zeros(Int64,n)\n    for i = 1:n\n        right_cars[i] = i\n\
    \        left_cars[i] = -i\n    end\n    #Check when cars collide and store in\
    \ a vector\n    collisions = Vector{Tuple{Int64,Int64}}()\n    #Store cars and\
    \ their index into a dictionary\n    #This is used to append the cars that have\
    \ collided\n    right_cars_dict = Dict{Int64,Int64}()\n    left_cars_dict = Dict{Int64,Int64}()\n\
    \    for i = 1:n\n        right_cars_dict[right_cars[i]] = i\n        left_cars_dict[left_cars[i]]\
    \ = i\n    end\n    while !(length(right_cars) == 0 || length(left_cars) == 0)\n\
    \        for i = 1:length(right_cars)\n            for j = 1:length(left_cars)\n\
    \                if right_cars[i] == left_cars[j]\n                    push!(collisions,(right_cars_dict[right_cars[i]],left_cars_dict[left_cars[j]]))\n\
    \                    delete!(right_cars_dict,right_cars[i])\n                \
    \    delete!(left_cars_dict,left_cars[j])\n                    deleteat!(right_cars,i)\n\
    \                    deleteat!(left_cars,j)\n                    break\n     \
    \           end\n            end\n        end\n        right_cars += 1\n     \
    \   left_cars -= 1\n    end\n    return length(collisions)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp666bu05u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp666bu05u.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars = zeros(n, 2)\n\
    \    cars[:, 1] = randn(n)\n    cars[:, 2] = sort(randn(n))\n    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if cars[i, 1] < cars[j,\
    \ 1]\n                if cars[i, 2] > cars[j, 2]\n                    collisions\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps7vy17iq.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmps7vy17iq.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7vy17iq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7vy17iq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps7vy17iq.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7vy17iq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7vy17iq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps7vy17iq.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7vy17iq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7vy17iq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps7vy17iq.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7vy17iq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7vy17iq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps7vy17iq.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7vy17iq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\" \n    We assume\
    \ that we know the car's speed; assume that it's 1.\n    This means that the position\
    \ of the car at time t is x(t) = t + c,\n    where c is a constant integer.  For\
    \ a car moving right to left,\n    the position is y(t) = -t + d, for some constant\
    \ d.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuh8_8mc.jl:1\nin expression starting at /tmp/tmpiuh8_8mc.jl:1\n"
  stdout: ''
  timestamp: 1659977964
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    car_list = generate_input(n)\n\
    \    return ccall((:get_collisions, \"libexercise\"), Cint, (Ref{Cint}, Ref{Cint},\
    \ Ref{Cint}, Cint),\n        Int64[car_list[i][1] for i=1:n], Int64[car_list[i][2]\
    \ for i=1:n], Int64[car_list[i][3] for i=1:n], n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp6bhchhhx.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: generate_input not
    defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp6bhchhhx.jl:14\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6bhchhhx.jl:23 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6bhchhhx.jl:22\ntest set: Error
    During Test at /tmp/tmp6bhchhhx.jl:24\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: generate_input not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp6bhchhhx.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6bhchhhx.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6bhchhhx.jl:22\ntest set: Error
    During Test at /tmp/tmp6bhchhhx.jl:25\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: generate_input not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp6bhchhhx.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6bhchhhx.jl:25 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6bhchhhx.jl:22\ntest set: Error
    During Test at /tmp/tmp6bhchhhx.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: generate_input not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp6bhchhhx.jl:14\n   [2] macro expansion\n     @ ~/.conda/e'
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7fqqvmi.jl:1\nin expression starting at /tmp/tmps7fqqvmi.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv26xsb1m.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpv26xsb1m.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv26xsb1m.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv26xsb1m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpv26xsb1m.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv26xsb1m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv26xsb1m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpv26xsb1m.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv26xsb1m.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv26xsb1m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpv26xsb1m.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv26xsb1m.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv26xsb1m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpv26xsb1m.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv26xsb1m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977967
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars in each group\n    return n^2 \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    c = 0\n    for i = 0:n-1\n\
    \        for j = 0:n-1\n            if (i - j) % n == 0\n                c +=\
    \ 1\n            end\n        end\n    end\n    return c\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3qdf385.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpw3qdf385.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3qdf385.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3qdf385.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw3qdf385.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3qdf385.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3qdf385.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw3qdf385.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3qdf385.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3qdf385.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw3qdf385.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3qdf385.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3qdf385.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw3qdf385.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3qdf385.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977967
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars moving left to right, and n cars moving right to left\n    pass\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1qzm5a4x.jl:21\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp1qzm5a4x.jl:14\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qzm5a4x.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qzm5a4x.jl:20\ntest set: Error
    During Test at /tmp/tmp1qzm5a4x.jl:22\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp1qzm5a4x.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qzm5a4x.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qzm5a4x.jl:20\ntest set: Error
    During Test at /tmp/tmp1qzm5a4x.jl:23\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp1qzm5a4x.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qzm5a4x.jl:23 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qzm5a4x.jl:20\ntest set: Error
    During Test at /tmp/tmp1qzm5a4x.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp1qzm5a4x.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes'
  timestamp: 1659977968
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This is a\
    \ naive implementation which runs in O(n^2) time.\n    \"\"\"\n    count = 0\n\
    \    for left_car_idx in 1:n\n        for right_car_idx in 1:n\n            if\
    \ left_car_idx == right_car_idx\n                continue\n            end\n \
    \           left_car_start = parse(Int64, rand(1:10^6))  # random location\n \
    \           right_car_start = parse(Int64, rand(1:10^6))  # random location\n\
    \            if left_car_start < right_car_start\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp9yb6bbb1.jl:36\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: no method matching
    parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    parse(::Type{T},
    !Matched::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    parse(::Type{T},
    !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n    parse(::Type{T},
    !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp9yb6bbb1.jl:22\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9yb6bbb1.jl:36 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9yb6bbb1.jl:35\ntest set: Error
    During Test at /tmp/tmp9yb6bbb1.jl:37\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  MethodError: no method matching parse(::Type{Int64}, ::Int64)\n  Closest
    candidates are:\n    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer
    at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    parse(::Type{T}, !Matched::AbstractString;
    base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n    parse(::Type{T},
    !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp9yb6bbb1.jl:22\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9yb6bbb1.jl:37 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9yb6bbb1.jl:35\n'''
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ takes the number of cars (n) and returns the number of\n    collisions\n   \
    \ \"\"\"\n    return n*(n-1) // 2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpugj7hfq7.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpugj7hfq7.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugj7hfq7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugj7hfq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpugj7hfq7.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugj7hfq7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugj7hfq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpugj7hfq7.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugj7hfq7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugj7hfq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpugj7hfq7.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugj7hfq7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpugj7hfq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpugj7hfq7.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpugj7hfq7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977967
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # ----- YOUR CODE\
    \ HERE -----\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp666bu05u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp666bu05u.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Return the number of\
    \ times a car from the left meets a car from the right.\n    # n is the number\
    \ of cars going in each direction.\n    \n    # This follows a pattern of the\
    \ sum of the first n numbers.\n    # There are n + n - 1 of those collisions.\n\
    \    # So the sum is n^2.\n    n^2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n <= 1\n        return\
    \ 0\n    end\n    return n*(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppv2545i7.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmppv2545i7.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977967
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    sorted_left_to_right\
    \ = sort!(rand(n, 2))\n    sorted_right_to_left = sort!(rand(n, 2))\n    #@show\
    \ sorted_left_to_right\n    #@show sorted_right_to_left\n    count = 0\n    for\
    \ i = 1:n\n        if sorted_left_to_right[i, 1] > sorted_right_to_left[i, 1]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpzhaa3o0b.jl:30\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefKeywordError: keyword argument
    dims not assigned\n  Stacktrace:\n   [1] sort!(A::Matrix{Float64})\n     @ Base.Sort
    ./sort.jl:1097\n   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmpzhaa3o0b.jl:13\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzhaa3o0b.jl:30 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzhaa3o0b.jl:29\ntest set: Error
    During Test at /tmp/tmpzhaa3o0b.jl:31\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefKeywordError: keyword argument dims not assigned\n  Stacktrace:\n   [1]
    sort!(A::Matrix{Float64})\n     @ Base.Sort ./sort.jl:1097\n   [2] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpzhaa3o0b.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzhaa3o0b.jl:31 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzhaa3o0b.jl:29\ntest set: Error
    During Test at /tmp/tmpzhaa3o0b.jl:32\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefKeywordError: keyword argument dims not assigned\n  Stacktrace:\n   [1]
    sort!(A::Matrix{Float64})\n     @ Base.Sort ./sort.jl:1097\n   [2] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpzhaa3o0b.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzhaa3o0b.jl:32 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzhaa3o0b.jl:29\ntest set: Error
    During Test at /tmp/tmpzhaa3o0b.jl'
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n cars are moving right\
    \ to left\n    # n cars are moving left to right\n    # each car is at a location\n\
    \    # n right-to-left cars have length n+1\n    # n left-to-right cars have length\
    \ n+1\n    #\n    # cars move one step per time\n    # they just keep on going\
    \ forever\n    # whenever a car moves into another car\n    # we count a collision\n\
    \    # \n    # car_locations[k] = j means\n    #     car k is currently at location\
    \ j\n    #\n    car_locations = zeros(Int64, 2*n)\n    for i in 1:n\n        car_locations[i]\
    \ = i-1\n        car_locations[i+n] = -i\n    end\n    # now car_locations is\
    \ [0,-1,1,-2,2,-3,...]\n    #\n    # now we need to keep moving the cars\n   \
    \ #\n    # let's see what happens when we move a particular car\n    #\n    collision_count\
    \ = 0\n    #\n    # i indexes which cars we're moving\n    #\n    for i in 1:2*n\n\
    \        car_locations[i] += 1\n        # now we need to see if car i hit any\
    \ other cars\n        #\n        # j indexes which cars we're checking\n     \
    \   #\n        for j in 1:2*n\n            if car_locations[i] == car_locations[j]\n\
    \                collision_count += 1\n            end\n        end\n    end\n\
    \    return collision_count\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2zopdhe9.jl:58

    '
  stdout: "test set: Test Failed at /tmp/tmp2zopdhe9.jl:61\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zopdhe9.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zopdhe9.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp2zopdhe9.jl:62\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 8 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zopdhe9.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zopdhe9.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp2zopdhe9.jl:63\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 11 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zopdhe9.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zopdhe9.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp2zopdhe9.jl:64\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 23 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zopdhe9.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zopdhe9.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp2zopdhe9.jl:65\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 29 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zopdhe9.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977967
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n^2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    \ \n \ncar_race_collision(4) # -> 6\n \n@code_llvm car_race_collision(4) # ->\
    \ 2\n \ncar_race_collision(1000000) # -> 500,000,000,000\n \n@time car_race_collision(1000000)\
    \ # -> 2.271353 seconds\n \n@code_llvm car_race_collision(1000000) # -> 3.74 ms\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @code_llvm not defined

    in expression starting at /tmp/tmphsbwj08t.jl:19

    in expression starting at /tmp/tmphsbwj08t.jl:19

    '
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7fqqvmi.jl:1\nin expression starting at /tmp/tmps7fqqvmi.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"A car race collision\
    \ counter\"\"\"\n    count = 0\n    for i = 1:n\n        for j = n+1:2n\n    \
    \        if i == j \n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend\n\"\"\"\n    Overall complexity of the above function\
    \ is O(n^2).  The outer loop runs n times,\n    and the inner loop runs n times\
    \ for each iteration of the outer loop.\n    \"\"\"\nfor n in [1:10:100]\n   \
    \ println(\"Count = \", car_race_collision(n))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nfor n =\
    \ [1:10:100]\n    #= /tmp/tmp333d6se2.jl:29 =#\n    println(\"Count = \", car_race_collision(n))\n\
    end\n\nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n\
    \ [2] top-level scope\n   @ /tmp/tmp333d6se2.jl:24\nin expression starting at\
    \ /tmp/tmp333d6se2.jl:24\n"
  stdout: ''
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ does the following:\n    It takes the first car on the left to right line and\
    \ looks at all the cars on the \n    right to left line to see if there is a car\
    \ that is at the same distance from the end\n    (i.e. the same distance from\
    \ the car on the left to right line).  If there is, we\n    say that there is\
    \ a collision.  If there is not, we can be sure that that pair of cars\n    will\
    \ never collide.  We remove that car and repeat until there are no more cars.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj3t2rqo.jl:1\nin expression starting at /tmp/tmpoj3t2rqo.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Example: \n    # \n\
    \    # Imagine the line to be a road whose length is 100.  \n    # So, the left-to-right\
    \ cars are numbered from 0 to 99, \n    # and the right-to-left cars are also\
    \ numbered from 0 to 99.\n    # \n    # If the cars move at speeds 1, then the\
    \ left-to-right cars \n    # would take 100 seconds to cross the road and the\
    \ right-to-left\n    # cars would take 100 seconds to cross the road.\n    # \n\
    \    # If the cars move at speeds 1 to 99, then the left-to-right\n    # cars\
    \ would take 1, 2, ..., 99 seconds to cross the road,\n    # and the right-to-left\
    \ cars would take 99, 98, ..., 1 seconds\n    # to cross the road.\n    # \n \
    \   # On the other hand, if the cars move at speeds 2 to 100,\n    # then the\
    \ left-to-right cars would take 2, 4, ..., 100\n    # seconds to cross the road,\
    \ and the right-to-left cars\n    # would take 50, 49, ..., 1 seconds to cross\
    \ the road.\n    # \n    # So, in this case, there are 24 collisions.\n    # \n\
    \    # Note that there is an infinite number of solutions,\n    # and here is\
    \ another one:\n    # \n    # If the cars move at speeds 1 to 49, then the left-to-right\n\
    \    # cars would take 1, 2, ..., 49 seconds to cross the road,\n    # and the\
    \ right-to-left cars would take 49, 48, ..., 1 seconds\n    # to cross the road.\n\
    \    # \n    # On the other hand, if the cars move at speeds 50 to 100,\n    #\
    \ then the left-to-right cars would take 50, 51, ..., 100\n    # seconds to cross\
    \ the road, and the right-to-left cars\n    # would take 50, 49, ..., 1 seconds\
    \ to cross the road.\n    # \n    # So, in this case, there are 24 collisions.\n\
    \    # \n    # Just to summarize:\n    # \n    # | left to right speeds | right\
    \ to left speeds | collisions |\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7o6rq8b5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7o6rq8b5.jl:1\n\
    in expression starting at /tmp/tmp7o6rq8b5.jl:1\n"
  stdout: ''
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n==0\n        return\
    \ 0\n    end\n    return 1+car_race_collision(n-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzeksi_2i.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpzeksi_2i.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzeksi_2i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzeksi_2i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzeksi_2i.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzeksi_2i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzeksi_2i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzeksi_2i.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzeksi_2i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzeksi_2i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzeksi_2i.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzeksi_2i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzeksi_2i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzeksi_2i.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzeksi_2i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    c = 0\n    min_dist_idx\
    \ = Array{Int64}(undef, n)\n    max_dist_idx = Array{Int64}(undef, n)\n    left_car_pos\
    \ = Array{Int64}(undef, n)\n    right_car_pos = Array{Int64}(undef, n)\n    for\
    \ i = 1:n\n        left_car_pos[i] = i\n        right_car_pos[i] = n + i\n   \
    \ end\n    for i = 1:n\n        min_dist_idx[i] = argmin(abs.(left_car_pos .-\
    \ right_car_pos))\n        max_dist_idx[i] = argmax(abs.(left_car_pos .- right_car_pos))\n\
    \        left_car_pos[min_dist_idx[i]] += n\n        right_car_pos[max_dist_idx[i]]\
    \ -= n\n    end\n    for i = 1:n\n        if min_dist_idx[i] == max_dist_idx[i]\n\
    \            c += 1\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkde0c_x8.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpkde0c_x8.jl:40\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkde0c_x8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkde0c_x8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkde0c_x8.jl:41\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkde0c_x8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkde0c_x8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkde0c_x8.jl:42\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkde0c_x8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkde0c_x8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkde0c_x8.jl:43\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 2 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkde0c_x8.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkde0c_x8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpkde0c_x8.jl:44\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 2 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkde0c_x8.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977969
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO\nend\n \n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyxadunx9.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpyxadunx9.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxadunx9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxadunx9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyxadunx9.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxadunx9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxadunx9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyxadunx9.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxadunx9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxadunx9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyxadunx9.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxadunx9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyxadunx9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyxadunx9.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyxadunx9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977969
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7fqqvmi.jl:1\nin expression starting at /tmp/tmps7fqqvmi.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # The following code\
    \ is buggy.  The function is intended to output the number of collisions.\n  \
    \  # But, for some inputs, it outputs wrong results.\n    collisions = 0\n   \
    \ for i in 1:n\n        for j in 1:n\n            collisions += 1\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    number_of_cars = n\n\
    \    initial_positions = floor(2rand(number_of_cars))\n    left_to_right_cars\
    \ = initial_positions[initial_positions .== 0]\n    right_to_left_cars = initial_positions[initial_positions\
    \ .== 1]\n    left_to_right_cars, right_to_left_cars = \n        sort(left_to_right_cars),\
    \ sort(right_to_left_cars, rev=true)\n    number_of_collisions = n - length(union(left_to_right_cars,\
    \ right_to_left_cars))\n    return number_of_collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n<2 return 0 end\n\
    \    return n*(n-1)\nend\n@btime car_race_collision(10000)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @btime not defined

    in expression starting at /tmp/tmpq8rousxs.jl:16

    in expression starting at /tmp/tmpq8rousxs.jl:16

    '
  stdout: ''
  timestamp: 1659977968
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_of_collisions = 0\n\
    \    cars_left_to_right = Set{Int64}()\n    cars_right_to_left = Set{Int64}()\n\
    \    for i = 1:n\n        push!(cars_left_to_right, i)\n        push!(cars_right_to_left,\
    \ n-i+1)\n    end\n    while length(cars_left_to_right) > 0 && length(cars_right_to_left)\
    \ > 0\n        if cars_left_to_right[1] < cars_right_to_left[1]\n            pop!(cars_left_to_right)\n\
    \            num_of_collisions += 1\n        else\n            pop!(cars_right_to_left)\n\
    \        end\n    end\n    return num_of_collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    # @assert n > 0\n    # @assert n <= 2 * 10^9\n    return n *\
    \ (n - 1) \xF7 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphpnzpl5y.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmphpnzpl5y.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpnzpl5y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpnzpl5y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphpnzpl5y.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpnzpl5y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpnzpl5y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphpnzpl5y.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpnzpl5y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpnzpl5y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphpnzpl5y.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpnzpl5y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpnzpl5y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphpnzpl5y.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpnzpl5y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n==0 return 0 end\n\
    \    if n==1 return 0 end\n    collisions = 0\n    for i in 0:n-1\n        for\
    \ j in 0:n-1\n            if i != j\n                if abs(i-j) < n-abs(i-j)\n\
    \                    collisions = collisions + 1\n                end\n      \
    \      end\n        end\n    end\n    return collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5x375vh3.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp5x375vh3.jl:32\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x375vh3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x375vh3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5x375vh3.jl:33\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x375vh3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x375vh3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5x375vh3.jl:34\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x375vh3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x375vh3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5x375vh3.jl:35\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x375vh3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5x375vh3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5x375vh3.jl:36\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 60 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5x375vh3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    a = [x for x in 1:n]\n\
    \    b = [x for x in n:-1:1]\n    counter = 0\n    for i in 1:n\n        for j\
    \ in 1:n\n            if a[i] == b[j]\n                counter += 1\n        \
    \    end\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdz5cv9rt.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpdz5cv9rt.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdz5cv9rt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdz5cv9rt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdz5cv9rt.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdz5cv9rt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdz5cv9rt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdz5cv9rt.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdz5cv9rt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdz5cv9rt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdz5cv9rt.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdz5cv9rt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdz5cv9rt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdz5cv9rt.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdz5cv9rt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # we call the cars moving\
    \ left to right set A, and the cars\n    # moving right to left set B\n    # Initially,\
    \ we assume that all cars in set A are on the left of\n    # all cars in set B.\n\
    \    # Each car in set A will move to the right at the same rate.\n    # Each\
    \ car in set B will move to the left at the same rate.\n    # If a car in set\
    \ A is on the left of a car in set B, the leftmost car\n    # will surely collide\
    \ with the rightmost car.\n    # Notice that the leftmost car in set A will always\
    \ be in front of \n    # all other cars in set A. \n    # Similarly, the rightmost\
    \ car in set B will always be behind all\n    # other cars in set B.\n    # Thus,\
    \ we only need to check for collisions for these two extreme cars.\n    if n >\
    \ 1\n        return n-1\n    else\n        return 0\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph_92uokz.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmph_92uokz.jl:37\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_92uokz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_92uokz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmph_92uokz.jl:38\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_92uokz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_92uokz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmph_92uokz.jl:39\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_92uokz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_92uokz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmph_92uokz.jl:40\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_92uokz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_92uokz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmph_92uokz.jl:41\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_92uokz.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  n*(n-1)/2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqi__hbai.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpqi__hbai.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi__hbai.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi__hbai.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqi__hbai.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi__hbai.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi__hbai.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqi__hbai.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi__hbai.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi__hbai.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqi__hbai.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi__hbai.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi__hbai.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqi__hbai.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi__hbai.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977971
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_collisions = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            # there will be an infinite\
    \ amount of collisions for this \n            # car, so we make the number of\
    \ collisions for this car infinite\n            # and break\n            if i\
    \ == j\n                num_collisions = Inf\n                break\n        \
    \    end\n            num_collisions += 1\n        end\n    end\n    return num_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpv3ootrlg.jl:33\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  InexactError: Int64(Inf)\n  Stacktrace:\n   [1]
    Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpv3ootrlg.jl:26\n   [4] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv3ootrlg.jl:33 [inlined]\n   [6]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv3ootrlg.jl:32\ntest set: Error
    During Test at /tmp/tmpv3ootrlg.jl:34\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  InexactError: Int64(Inf)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812
    [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpv3ootrlg.jl:26\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv3ootrlg.jl:34 [inlined]\n   [6]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv3ootrlg.jl:32\ntest set: Error
    During Test at /tmp/tmpv3ootrlg.jl:35\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  InexactError: Int64(Inf)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812
    [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpv3ootrlg.jl:26\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv3ootrlg.jl:35 [inlined]\n   [6]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv3ootrlg.jl:32\ntest set: Error
    During Test at /tmp/tmpv3ootrlg.jl:36'
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    d = Dict()\n    for i\
    \ in 1:n\n        x = randn()\n        try\n            get!(d,x)\n        catch\
    \ e\n            d[x] = 1\n        end\n    end\n    for i in 1:n\n        x =\
    \ randn()\n        try\n            get!(d,x)\n        catch e\n            d[x]\
    \ = 1\n        end\n    end\n    sum = 0\n    for key in keys(d)\n        sum\
    \ += d[key]\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp98hgqr83.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp98hgqr83.jl:42\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98hgqr83.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98hgqr83.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp98hgqr83.jl:43\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98hgqr83.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98hgqr83.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp98hgqr83.jl:44\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 16 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98hgqr83.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98hgqr83.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp98hgqr83.jl:45\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98hgqr83.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98hgqr83.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659977972
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = number\
    \ of cars moving left to right and right to left (there are 2n cars total)\n \
    \   \"\"\"\n    x = zeros(n)\n    y = zeros(n)\n    for i in 1:n\n        x[i]\
    \ = rand(1:10:1000)\n        y[i] = rand(1:10:1000)\n    end\n    return sum(abs.(x-y)\
    \ .<= 100)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmp7pkjqsgt.jl:29\n  Expression: candidate(2)
    == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pkjqsgt.jl:29 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pkjqsgt.jl:28\ntest set: Test Failed
    at /tmp/tmp7pkjqsgt.jl:30\n  Expression: candidate(3) == 9\n   Evaluated: 0 ==
    9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pkjqsgt.jl:30 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pkjqsgt.jl:28\ntest set: Test Failed
    at /tmp/tmp7pkjqsgt.jl:31\n  Expression: candidate(4) == 16\n   Evaluated: 1 ==
    16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pkjqsgt.jl:31 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pkjqsgt.jl:28\ntest set: Test Failed
    at /tmp/tmp7pkjqsgt.jl:32\n  Expression: candidate(8) == 64\n   Evaluated: 0 ==
    64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pkjqsgt.jl:32 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pkjqsgt.jl:28\ntest set: Test Failed
    at /tmp/tmp7pkjqsgt.jl:33\n  Expression: candidate(10) == 100\n   Evaluated: 3
    == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pkjqsgt.jl'
  timestamp: 1659977972
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Your code here\nend\n\
    \ \n    \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659977972
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Build a random list\
    \ of left-to-right cars\n    l2r_cars = rand(n)\n    # Sort that list\n    # NOTE:\
    \ \"sort\" sorts a list in O(nlogn) time.\n    #   You can speed up this part\
    \ by writing a function that sorts the list in O(n) time!\n    sort!(l2r_cars)\n\
    \    # Build a random list of right-to-left cars\n    r2l_cars = rand(n)\n   \
    \ # Sort that list too!\n    sort!(r2l_cars)\n    # Merge the two lists using\
    \ the O(n) algorithm that you wrote.\n    #   This is the most time-consuming\
    \ part of the algorithm,\n    #   and should be O(n) because the two lists are\
    \ already sorted.\n    #   Note that this algorithm is similar to the merge part\
    \ of MergeSort.\n    l2r_i = 1\n    r2l_i = 1\n    c = 0\n    # O(n) loop to iterate\
    \ through the merged list (of length 2n)\n    for i in 1:2n\n        if l2r_i\
    \ <= n && r2l_i <= n\n            if l2r_cars[l2r_i] <= r2l_cars[r2l_i]\n    \
    \            l2r_i += 1\n            else\n                r2l_i += 1\n      \
    \          c += n-l2r_i+1\n            end\n        end\n    end\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.\nin expression starting at /tmp/tmpqq7zdlr8.jl:45\n'''
  stdout: 'b''test set: Test Failed at /tmp/tmpqq7zdlr8.jl:48\n  Expression: candidate(2)
    == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7zdlr8.jl:48 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7zdlr8.jl:47\ntest set: Test Failed
    at /tmp/tmpqq7zdlr8.jl:49\n  Expression: candidate(3) == 9\n   Evaluated: 7 ==
    9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7zdlr8.jl:49 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7zdlr8.jl:47\ntest set: Test Failed
    at /tmp/tmpqq7zdlr8.jl:50\n  Expression: candidate(4) == 16\n   Evaluated: 15
    == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7zdlr8.jl:50 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7zdlr8.jl:47\ntest set: Test Failed
    at /tmp/tmpqq7zdlr8.jl:51\n  Expression: candidate(8) == 64\n   Evaluated: 16
    == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7zdlr8.jl:51 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7zdlr8.jl:47\ntest set: Test Failed
    at /tmp/tmpqq7zdlr8.jl:52\n  Expression: candidate(10) == 100\n   Evaluated: 69
    == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7zdlr8'
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_left_to_right =\
    \ zeros(Int64,n)\n    cars_right_to_left = zeros(Int64,n)\n    for i in 1:n\n\
    \        cars_left_to_right[i] = i\n        cars_right_to_left[i] = i\n    end\n\
    \    collisions = 0\n    for i in 1:n\n        for j in 1:n\n            if cars_left_to_right[i]\
    \ == cars_right_to_left[j]\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7vblav8y.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp7vblav8y.jl:34\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vblav8y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vblav8y.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7vblav8y.jl:35\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vblav8y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vblav8y.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7vblav8y.jl:36\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vblav8y.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vblav8y.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7vblav8y.jl:37\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vblav8y.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vblav8y.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7vblav8y.jl:38\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vblav8y.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977972
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(1/2)n(n-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpi2dioi2u.jl:20\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1]
    Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpi2dioi2u.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi2dioi2u.jl:20 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi2dioi2u.jl:19\ntest set: Error
    During Test at /tmp/tmpi2dioi2u.jl:21\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1] Int64(x::Float64)\n     @
    Base ./float.jl:812\n   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmpi2dioi2u.jl:13\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi2dioi2u.jl:21 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi2dioi2u.jl:19\ntest set: Error
    During Test at /tmp/tmpi2dioi2u.jl:22\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1] Int64(x::Float64)\n     @
    Base ./float.jl:812\n   [2] car_race_collision(n::Int64)\n     @ Main /tmp/tmpi2dioi2u.jl:13\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi2dioi2u.jl:22 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi2dioi2u.jl:19\ntest set: Error
    During Test at /tmp/tmpi2dioi2u.jl:23\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1] Int64(x::Floa'
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    r\"\"\"\n    Imagine\
    \ a road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kza3bp6.jl:1\nin expression starting at /tmp/tmp1kza3bp6.jl:1\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0\n        return\
    \ 0\n    end\n    if n < 0\n        error(\"car_race_collision: n cannot be negative\"\
    )\n    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 1\n    end\n    if n == 3\n        return 3\n    end\n    if n == 4\n      \
    \  return 4\n    end\n    return n*(n-1)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6pudtn9d.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp6pudtn9d.jl:38\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pudtn9d.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pudtn9d.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6pudtn9d.jl:39\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pudtn9d.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pudtn9d.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6pudtn9d.jl:40\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pudtn9d.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pudtn9d.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6pudtn9d.jl:41\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pudtn9d.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pudtn9d.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp6pudtn9d.jl:42\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pudtn9d.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_left2right = n\n  \
    \  n_right2left = n\n    n_collisions = 0\n    while n_left2right &gt; 0 &amp;&amp;\
    \ n_right2left &gt; 0\n        if rem(n_left2right, 2) == 0\n            n_collisions\
    \ += n_right2left\n            n_left2right -= 1\n        else\n            n_right2left\
    \ -= 1\n        end\n    end\n    return n_collisions\nend\n</code>\nThis version\
    \ is completely wrong.  I'm very confused.  I can't seem to understand why my\
    \ version is wrong, or how to fix it.  Please help!\nTo see this, try running\
    \ \n<code>car_race_collision(4)</code>\nwhich should output \n<code>4</code>\n\
    while my version outputs \n<code>0</code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &amp around /tmp/tmpqeltq9t3.jl:16\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqeltq9t3.jl:1\nin expression starting\
    \ at /tmp/tmpqeltq9t3.jl:1\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    A function\
    \ to count the number of collisions in a car race.\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsmikc_4.jl:1\nin expression starting at /tmp/tmpcsmikc_4.jl:1\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars going left to right.\n    # the number of cars going right to left is n.\n\
    \    # You do not need to worry about n being 0 or negative.\n    # You do not\
    \ need to worry about n being bigger than 1e9.\n    #\n    #\n    # This is all\
    \ you need to understand.\n    # The rest of the code below is to generate random\
    \ examples of \n    # left and right cars, and to test your code.\n    # If you\
    \ want to test your code, you do not need to read the\n    # rest of the code\
    \ below.\n    #\n    # The input of this function is n.\n    # If n = 1, then\
    \ there's one car going left to right, \n    # and 1 car going right to left.\
    \  When they meet, they will collide.\n    # If n = 2, then there's two cars going\
    \ left to right,\n    # and two cars going right to left.  When they meet, they\
    \ will collide.\n    # If n = 3, then there's three cars going left to right,\n\
    \    # and three cars going right to left.  When they meet, they will collide.\n\
    \    # ....\n    # If n = 13, then there's 13 cars going left to right,\n    #\
    \ and 13 cars going right to left.  When they meet, they will collide.\n    #\
    \ If n = 14, then there's 14 cars going left to right,\n    # and 14 cars going\
    \ right to left.  When they meet, they will collide.\n    # ....\n    # Note that\
    \ two cars that move in opposite directions will always collide when they meet\n\
    \    # (infinitely strong cars collide and continue moving forward).\n    #\n\
    \    # The output of this function is the number of such collisions.\n    # If\
    \ n = 1, then the output is 1.\n    # If n = 2, then the output is 2.\n    # If\
    \ n = 3, then the output is 3.\n    # ....\n    # If n = 13, then the output is\
    \ 13.\n    # If n = 14, then the output is 14.\n    # ....\n    # Note that two\
    \ cars that move in opposite directions will always collide when they meet\n \
    \   # (infinitely strong cars collide and continue moving forward).\n    #\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35ox5ufg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35ox5ufg.jl:1\n\
    in expression starting at /tmp/tmp35ox5ufg.jl:1\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    left_to_right = 1\n \
    \   right_to_left = n\n    collision = 0\n    if n % 2 == 0\n        left_to_right\
    \ = n / 2\n        right_to_left = n / 2\n    else\n        left_to_right = floor(Int64,\
    \ n / 2) + 1\n        right_to_left = n - left_to_right\n    end\n    collision\
    \ = left_to_right * right_to_left\n    return collision\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsb7rpm_7.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpsb7rpm_7.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsb7rpm_7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsb7rpm_7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpsb7rpm_7.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsb7rpm_7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsb7rpm_7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpsb7rpm_7.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsb7rpm_7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsb7rpm_7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpsb7rpm_7.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 16 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsb7rpm_7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsb7rpm_7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpsb7rpm_7.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 25 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsb7rpm_7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input: \n\
    \        n: an integer, the number of cars on the road.\n    Output: \n      \
    \  an integer, the number of collisions.\n    \"\"\"\n    ans = 0\n    for i in\
    \ 1:n\n        ans += n-i\n    end\n    return ans\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnh4609v7.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpnh4609v7.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh4609v7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh4609v7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnh4609v7.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh4609v7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh4609v7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnh4609v7.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh4609v7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh4609v7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnh4609v7.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh4609v7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh4609v7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnh4609v7.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh4609v7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Randomly generate a\
    \ single car's trajectory.\n    # The car starts at a random point on the road.\n\
    \    # The car's direction can be either left to right or right to left.\n   \
    \ # The car's speed is a random number between 1 and 100 (inclusive).\n    function\
    \ rand_car_trajectory()::Tuple{Int64, Int64, Int64}\n        pos::Int64 = rand(-10^9:10^9)\n\
    \        dir::Int64 = (rand(0:1) == 0 ? -1 : 1)\n        speed::Int64 = rand(1:100)\n\
    \        return (pos, dir, speed)\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1o08ak8.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr1o08ak8.jl:1\n\
    in expression starting at /tmp/tmpr1o08ak8.jl:1\n"
  stdout: ''
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    v = zeros(n) # the speed\
    \ of the car\n    t = zeros(n) # the time when the car hits the origin\n    for\
    \ i = 1:n\n        v[i] = rand()\n        t[i] = rand()/v[i]\n    end\n    sort!(t)\n\
    \    t_ev = zeros(2n)\n    v_ev = zeros(2n)\n    for i = 1:n\n        t_ev[i]\
    \ = t[i]\n        v_ev[i] = v[i]\n    end\n    for i = 1:n\n        t_ev[n+i]\
    \ = t[i]\n        v_ev[n+i] = -v[i]\n    end\n    sort!(t_ev)\n    @assert v_ev[1]\
    \ > 0\n    num_collisions = 0\n    for i = 2:2n\n        if v_ev[i] < 0 && v_ev[i-1]\
    \ > 0\n            num_collisions += 1\n        end\n    end\n    return num_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1x615gt5.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp1x615gt5.jl:45\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x615gt5.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x615gt5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp1x615gt5.jl:46\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x615gt5.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x615gt5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp1x615gt5.jl:47\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x615gt5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x615gt5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp1x615gt5.jl:48\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 1 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x615gt5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x615gt5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp1x615gt5.jl:49\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x615gt5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    t = 0\n    for i = 1:n\n\
    \        t += i\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppubkmni9.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmppubkmni9.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppubkmni9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppubkmni9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppubkmni9.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppubkmni9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppubkmni9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppubkmni9.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppubkmni9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppubkmni9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppubkmni9.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppubkmni9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppubkmni9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppubkmni9.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppubkmni9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977974
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i in 1:n\n        for j in 1:n\n            collisions += 1\n        end\n \
    \   end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\" n is the number\
    \ of cars driving each direction.  \n    \"\"\"\n    numcollisions = 0\n    lefttordist\
    \ = [-10000 for i in 1:n]\n    righttodist = [10000 for i in 1:n]\n    for i in\
    \ 1:n\n        for j in 1:n\n            if (lefttordist[i]>=righttodist[j]) &&\
    \ (lefttordist[i]<=(righttodist[j]+1))\n                numcollisions = numcollisions\
    \ + 1\n            end\n        end\n        lefttordist[i] = lefttordist[i] +\
    \ 1\n        righttodist[i] = righttodist[i] - 1\n    end\n    return numcollisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfjytjo13.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpfjytjo13.jl:34\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjytjo13.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjytjo13.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfjytjo13.jl:35\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjytjo13.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjytjo13.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfjytjo13.jl:36\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjytjo13.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjytjo13.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfjytjo13.jl:37\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjytjo13.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjytjo13.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfjytjo13.jl:38\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjytjo13.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977975
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # First, sort all left-to-right\
    \ cars and right-to-left cars by their position.\n    # Obviously, the cars that\
    \ are closer to the center are more likely to collide.\n    # So, one can go through\
    \ all possible pairs of cars and count how many of them \n    # would collide.\
    \  Thus, the running time is O(n^2).  This is not optimal. \n    # A more clever\
    \ algorithm will have running time O(n log n). \n    # A full solution is provided\
    \ in [2].\n    \n    # This function computes the number of unique pairs of cars\n\
    \    # in an array of n integers.\n    # For example, if the array is [1, 2, 2,\
    \ 3, 3, 3, 4], \n    # then the number of unique pairs is 3.\n    # This function\
    \ is used for computing the number of unique pairs in \n    # collisions.\n  \
    \  function unique_pairs(a::Array{Int64, 1})::Int64\n        # If the array is\
    \ empty, then return 0.\n        if size(a, 1) == 0\n            return 0\n  \
    \      end\n        # If the array has only one element, then there are no pairs.\n\
    \        if size(a, 1) == 1\n            return 0\n        end\n        # Recursive\
    \ call with the tail.\n        # Note that tail(a) returns a subarray that starts\
    \ at the second element.\n        # Note that the first element of a is a[1].\n\
    \        # Note that the first element of tail(a) is a[2].\n        # The number\
    \ of unique pairs is the number of pairs in the tail plus\n        # the number\
    \ of pairs formed by the first element with the rest of the tail.\n        return\
    \ unique_pairs(tail(a)) + size(a, 1) - size(tail(a), 1)\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyirkm1uk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyirkm1uk.jl:1\n\
    in expression starting at /tmp/tmpyirkm1uk.jl:1\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsl161mwk.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpsl161mwk.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsl161mwk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsl161mwk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsl161mwk.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsl161mwk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsl161mwk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsl161mwk.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsl161mwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsl161mwk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsl161mwk.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsl161mwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsl161mwk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsl161mwk.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsl161mwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Returns the\
    \ number of collisions that happen during a car race\n    between n cars going\
    \ left to right and n cars going right to left.\n    \"\"\"\n    return sum(1:n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbxzagu_p.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpbxzagu_p.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxzagu_p.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxzagu_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbxzagu_p.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxzagu_p.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxzagu_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbxzagu_p.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxzagu_p.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxzagu_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbxzagu_p.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxzagu_p.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbxzagu_p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbxzagu_p.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbxzagu_p.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n<1\n        println(\"\
    error: the number of cars should be greater than 0\")\n        return 0\n    end\n\
    \    nn = 2*n\n    x = zeros(Int64, nn)\n    for i=1:n\n        x[i] = i\n   \
    \ end\n    for i=n+1:nn\n        x[i] = 2*n - i + 1\n    end\n    sc = sortperm(x)\n\
    \    res = 0\n    for i=1:n\n        if sc[i]<=n\n            res += i-1\n   \
    \     else\n            res += n - i + 1\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0aetztcy.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp0aetztcy.jl:41\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0aetztcy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0aetztcy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0aetztcy.jl:42\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 4 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0aetztcy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0aetztcy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0aetztcy.jl:43\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0aetztcy.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0aetztcy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0aetztcy.jl:44\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0aetztcy.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0aetztcy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0aetztcy.jl:45\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0aetztcy.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\" \n    Two cars\
    \ collide if two integers i, j satisfy:\n    i > j\n    i - j == a[i] - a[j]\n\
    \    \"\"\"\n    if n <= 1 \n        return 0\n    end\n    a = [rand(1:n) for\
    \ i = 1:n]\n    ret = 0\n    for i = 1:n\n        for j = i+1:n\n            if\
    \ a[i] - a[j] == i - j\n                ret += 1\n            end\n        end\n\
    \    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplp2nt6bk.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmplp2nt6bk.jl:37\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp2nt6bk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp2nt6bk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplp2nt6bk.jl:38\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp2nt6bk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp2nt6bk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplp2nt6bk.jl:39\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp2nt6bk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp2nt6bk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplp2nt6bk.jl:40\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 6 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp2nt6bk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp2nt6bk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplp2nt6bk.jl:41\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 1 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp2nt6bk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The cars\
    \ are initially n apart.  To get any collision,\n    a car has to reach the position\
    \ of the other car, but then\n    the other car has to stay put and not move any\
    \ further.\n    \"\"\"\n    return n-1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpowbsn44n.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpowbsn44n.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowbsn44n.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowbsn44n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpowbsn44n.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowbsn44n.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowbsn44n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpowbsn44n.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowbsn44n.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowbsn44n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpowbsn44n.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowbsn44n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowbsn44n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpowbsn44n.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowbsn44n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ prints the number of car collisions.\n    \"\"\"\n    # Note:  for a car to\
    \ collide with another car, it must first overtake that car\n    # which in turn\
    \ means its x-coordinate has to become greater than that of the other car\n  \
    \  # (because all cars move at the same speed).  Therefore, we can imagine that\
    \ \n    # the left-to-right moving cars are the \"positive\" cars and the right-to-left\
    \ moving cars\n    # are the \"negative\" cars.  \n    # This function is designed\
    \ to find the number of collisions between two lists of\n    # numbers, where\
    \ the elements in the first list are positive and the elements in the\n    # second\
    \ list are negative.\n    # We will denote the number of positive numbers by n1,\
    \ and the number of negative numbers\n    # by n2.  The algorithms are:\n    #\n\
    \    # n1 == 0  ||  n2 == 0  =>  0 collision\n    # n1 > n2   =>  n2 collisions\
    \ (because there are n2 positive numbers, so that is the upper bound)\n    # n1\
    \ < n2   =>  n1 collisions (because there are n1 negative numbers, so that is\
    \ the upper bound)\n    # n1 == n2  =>  n1 collisions (because of the symmetry\
    \ between \"positive\" and \"negative\" lists)\n    #\n    # Note:  the algorithm\
    \ above can be further improved to O(n) by using the \"sweep line\" algorithm\n\
    \    # but we don't bother to do so.\n    #\n    #\n    # Therefore, let us sort\
    \ the \"positive\" cars and the \"negative\" cars separately and then count\n\
    \    # the number of collisions.  We do so by using the merge sort algorithm.\n\
    \    #\n    # Finally, we also make a count of the number of times a car overtakes\
    \ another car but does not collide.\n    #\n    # Note:  the most obvious way\
    \ to count the collisions is to use an O(n^2) algorithm.  However, \n    # the\
    \ number of tests that we are expected to execute is very large.  Therefore, we\
    \ do an O(n log n)\n    # algorithm instead.  In fact, if we use the most obvious\
    \ O(n^2) algorithm, we\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpep_w05wn.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpep_w05wn.jl:1\n\
    in expression starting at /tmp/tmpep_w05wn.jl:1\n"
  stdout: ''
  timestamp: 1659977974
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    for i in 1:n\n      \
    \  for j in 1:n\n            if right_to_left[i] <= left_to_right[j]\n       \
    \         collisions += 1\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp03l9kiqq.jl:26\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: right_to_left not
    defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp03l9kiqq.jl:15\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp03l9kiqq.jl:26 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03l9kiqq.jl:25\ntest set: Error
    During Test at /tmp/tmp03l9kiqq.jl:27\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: right_to_left not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp03l9kiqq.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp03l9kiqq.jl:27 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03l9kiqq.jl:25\ntest set: Error
    During Test at /tmp/tmp03l9kiqq.jl:28\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: right_to_left not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp03l9kiqq.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp03l9kiqq.jl:28 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03l9kiqq.jl:25\ntest set: Error
    During Test at /tmp/tmp03l9kiqq.jl:29\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: right_to_left not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp03l9kiqq.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/'
  timestamp: 1659977976
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # this is the fastest\
    \ O(n) solution\n    # there is a better O(n log n) solution as well\n    # both\
    \ solutions are provided here\n    return car_race_collision_O_n(n)\n    # return\
    \ car_race_collision_O_n_log_n(n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpuy5lvwsf.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_O_n
    not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpuy5lvwsf.jl:16\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy5lvwsf.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy5lvwsf.jl:23\ntest set: Error
    During Test at /tmp/tmpuy5lvwsf.jl:25\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: car_race_collision_O_n not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpuy5lvwsf.jl:16\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy5lvwsf.jl:25 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy5lvwsf.jl:23\ntest set: Error
    During Test at /tmp/tmpuy5lvwsf.jl:26\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: car_race_collision_O_n not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpuy5lvwsf.jl:16\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy5lvwsf.jl:26 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy5lvwsf.jl:23\ntest set: Error
    During Test at /tmp/tmpuy5lvwsf.jl:27\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: car_race_collision_O_n not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpuy5lvwsf.jl:16\n   [2] ma'
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    my_cars = sort(rand(n))\n\
    \    your_cars = sort(rand(n))\n    my_cars_2 = []\n    your_cars_2 = []\n   \
    \ for i in my_cars\n        for j in your_cars\n            if (i < j)\n     \
    \           my_cars_2 = vcat(my_cars_2,i)\n            else\n                your_cars_2\
    \ = vcat(your_cars_2,j)\n            end\n        end\n    end\n    return max(length(my_cars_2),length(your_cars_2))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiiq64m8s.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpiiq64m8s.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiiq64m8s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiiq64m8s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiiq64m8s.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 7 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiiq64m8s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiiq64m8s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiiq64m8s.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 11 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiiq64m8s.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiiq64m8s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiiq64m8s.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 34 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiiq64m8s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiiq64m8s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiiq64m8s.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 51 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiiq64m8s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977977
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #\n    # YOUR CODE HERE\n\
    \    #\nend\n \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ################\n  \
    \  # SOLUTION\n    ################\n    \n    collisions = 1\n    for i = 2:n\n\
    \        collisions += i\n    end\n    return collisions\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9nm3mjxw.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp9nm3mjxw.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nm3mjxw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nm3mjxw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9nm3mjxw.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nm3mjxw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nm3mjxw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9nm3mjxw.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nm3mjxw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nm3mjxw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9nm3mjxw.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nm3mjxw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nm3mjxw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9nm3mjxw.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nm3mjxw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n * (n - 1))\
    \ / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeyjjy48a.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpeyjjy48a.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeyjjy48a.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpeyjjy48a.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeyjjy48a.jl:24 [inlin"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n represents the number\
    \ of cars\n    # the first set of cars is named car_left_to_right\n    # the second\
    \ set of cars is named car_right_to_left\n    # I want each car to be represented\
    \ by a number;\n    # this number is the distance of the car away from\n    #\
    \ the origin\n    car_left_to_right = [i for i in 1:n]\n    car_right_to_left\
    \ = [i for i in 1:n]\n    # car_left_to_right[i] and car_right_to_left[i] represent\
    \ \n    # the distance the car is away from the origin\n    num_collisions = 0\n\
    \    @show car_left_to_right\n    for i in 1:n\n        for j in 1:n\n       \
    \     if car_left_to_right[i] == car_right_to_left[j]\n                # the car\
    \ has a collision\n                num_collisions += 1\n            end\n    \
    \    end\n        car_left_to_right[i] += 1\n        car_right_to_left[i] -= 1\n\
    \    end\n    return num_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpow4nfyzp.jl:39

    '
  stdout: "car_left_to_right = [1, 2]\ntest set: Test Failed at /tmp/tmpow4nfyzp.jl:42\n\
    \  Expression: candidate(2) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow4nfyzp.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow4nfyzp.jl:41\ncar_left_to_right\
    \ = [1, 2, 3]\ntest set: Test Failed at /tmp/tmpow4nfyzp.jl:43\n  Expression:\
    \ candidate(3) == 9\n   Evaluated: 3 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpow4nfyzp.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpow4nfyzp.jl:41\ncar_left_to_right = [1, 2,\
    \ 3, 4]\ntest set: Test Failed at /tmp/tmpow4nfyzp.jl:44\n  Expression: candidate(4)\
    \ == 16\n   Evaluated: 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow4nfyzp.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow4nfyzp.jl:41\ncar_left_to_right\
    \ = [1, 2, 3, 4, 5, 6, 7, 8]\ntest set: Test Failed at /tmp/tmpow4nfyzp.jl:45\n\
    \  Expression: candidate(8) == 64\n   Evaluated: 8 == 64\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow4nfyzp.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow4nfyzp.jl:41\ncar_left_to_right\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest set: Test Failed at /tmp/tmpow4nfyzp.jl:46\n\
    \  Expression: candidate(10) == 100\n   Evaluated: 10 == 100\nStacktrace:\n [1]\
    \ macro expansi"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ finds the number of collisions in a car race of n cars \n    moving in the same\
    \ speed both left to right and right to left.\n    \"\"\"\n    return Int64(n*(n-1)/2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi9y2x6in.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpi9y2x6in.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y2x6in.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y2x6in.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi9y2x6in.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y2x6in.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y2x6in.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi9y2x6in.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y2x6in.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y2x6in.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi9y2x6in.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y2x6in.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y2x6in.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi9y2x6in.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y2x6in.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    input:  n,\
    \ where n>=0, as above\n    output: the number of such collisions.\n    \"\"\"\
    \n    collisions = 0\n    # collision between cars i,k where i<k\n    for i=1:n-1\n\
    \        for k=i+1:n\n            s = 2*abs(k-i)\n            if s%4 == 0\n  \
    \              collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsk7lxbv4.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpsk7lxbv4.jl:34\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk7lxbv4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk7lxbv4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsk7lxbv4.jl:35\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk7lxbv4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk7lxbv4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsk7lxbv4.jl:36\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk7lxbv4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk7lxbv4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsk7lxbv4.jl:37\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 12 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk7lxbv4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk7lxbv4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsk7lxbv4.jl:38\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk7lxbv4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977976
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n   \"\"\"\n   The number\
    \ of cars moving left to right is a permutation of the numbers 1, ..., n.\n  \
    \ The number of cars moving right to left is another permutation of the numbers\
    \ 1, ..., n.\n   We represent this as a bijection s::Array{Int64, 1} where s[i]\
    \ is the index in the \n   right-to-left-moving array that is mapped to i.\n \
    \  \"\"\"\n    s = collect(1:n)\n    shuffle!(s)\n    \"\"\"\n    We now want\
    \ to count the number of pairs (i, j) where i < j and s[i] > s[j].\n    This is\
    \ the same as the number of inversions in the array s.  Here, we\n    count the\
    \ number of inversions in s using the following O(n^2) time algorithm:\n    \"\
    \"\"\n    num_inversions = 0\n    for i in 1:n-1\n        for j in i+1:n\n   \
    \         if s[i] > s[j]\n                num_inversions += 1\n            end\n\
    \        end\n    end\n    return num_inversions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp867et797.jl:41\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: shuffle! not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp867et797.jl:20\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp867et797.jl:41 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp867et797.jl:40\ntest set: Error
    During Test at /tmp/tmp867et797.jl:42\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: shuffle! not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp867et797.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp867et797.jl:42 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp867et797.jl:40\ntest set: Error
    During Test at /tmp/tmp867et797.jl:43\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: shuffle! not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp867et797.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp867et797.jl:43 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp867et797.jl:40\ntest set: Error
    During Test at /tmp/tmp867et797.jl:44\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: shuffle! not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp867et797.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia'
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp666bu05u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp666bu05u.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n * (n - 1))\
    \ \xF7 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqd_xc1py.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpqd_xc1py.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd_xc1py.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd_xc1py.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqd_xc1py.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd_xc1py.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd_xc1py.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqd_xc1py.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd_xc1py.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd_xc1py.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqd_xc1py.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd_xc1py.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd_xc1py.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqd_xc1py.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd_xc1py.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977977
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # sort the left-to-right\
    \ set of cars by position, same for right-to-left\n    left_cars = sorted(rand(Int64,n))\n\
    \    right_cars = sorted(rand(Int64,n))\n    len = length(left_cars)\n    i =\
    \ 1\n    j = 1\n    collisions = 0\n    while i <= len && j <= len\n        if\
    \ left_cars[i] < right_cars[j]\n            i += 1\n        elseif left_cars[i]\
    \ > right_cars[j]\n            j += 1\n        else\n            collisions +=\
    \ 1\n            i += 1\n            j += 1\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpu4y4rrwx.jl:38\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpu4y4rrwx.jl:14\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4y4rrwx.jl:38 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4y4rrwx.jl:37\ntest set: Error
    During Test at /tmp/tmpu4y4rrwx.jl:39\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpu4y4rrwx.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4y4rrwx.jl:39 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4y4rrwx.jl:37\ntest set: Error
    During Test at /tmp/tmpu4y4rrwx.jl:40\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpu4y4rrwx.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4y4rrwx.jl:40 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4y4rrwx.jl:37\ntest set: Error
    During Test at /tmp/tmpu4y4rrwx.jl:41\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpu4y4rrwx.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/'
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    running_sum = 0\n   \
    \ for i in 0:n-1\n        running_sum += i\n    end\n    return running_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnid3f676.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpnid3f676.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnid3f676.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnid3f676.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnid3f676.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnid3f676.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnid3f676.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnid3f676.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnid3f676.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnid3f676.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnid3f676.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnid3f676.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnid3f676.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnid3f676.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnid3f676.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\ncar_race_collision(4)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqb2b68wz.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpqb2b68wz.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb2b68wz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb2b68wz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqb2b68wz.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb2b68wz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb2b68wz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqb2b68wz.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb2b68wz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb2b68wz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqb2b68wz.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb2b68wz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb2b68wz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqb2b68wz.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb2b68wz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    r\"\"\"\n    Given a\
    \ \"board\" $B$ consisting of `n` rooks on a chessboard, return a matrix\n   \
    \ with all zeros except the $i$-th row and $j$-th column containing a one, corresponding\n\
    \    to the rook at position $i,j$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qjdhphd.jl:1\nin expression starting at /tmp/tmp8qjdhphd.jl:1\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpygi4xczw.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpygi4xczw.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygi4xczw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygi4xczw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpygi4xczw.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygi4xczw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygi4xczw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpygi4xczw.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygi4xczw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygi4xczw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpygi4xczw.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygi4xczw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygi4xczw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpygi4xczw.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygi4xczw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \n    # count the number\
    \ of collisions\n    # by creating a 2D table that tracks\n    # the positions\
    \ of both sets of cars.\n    # Start by creating such a table.\n    position_table\
    \ = zeros(Int64,n,n)\n    \n    # For illustration purposes, let's say\n    #\
    \ the cars moving left to right\n    # have positions 1,2,3, ... n,\n    # and\
    \ the cars moving right to left\n    # have positions n,n-1, ... 1.\n    # More\
    \ formally, we can say that\n    # for each i,\n    # position_table[i,k] = k\
    \ + i.\n    for i = 1:n, k = 1:n\n        position_table[i,k] = k + i\n    end\n\
    \    \n    # count the number of collisions.\n    # For illustration purposes,\
    \ let's say\n    # the car moving from 1 to 2 collides\n    # with the car moving\
    \ from n to n-1.\n    # More formally, we can say that\n    # a collision occurs\n\
    \    # if there is some i such that\n    # position_table[i,k] = position_table[k,i].\n\
    \    # Here, we set k to be 1,2, ... n.\n    # More formally, we can say that\n\
    \    # a collision occurs\n    # if there is some i such that\n    # position_table[i,1]\
    \ = position_table[1,i]\n    # or position_table[i,2] = position_table[2,i]\n\
    \    # or position_table[i,3] = position_table[3,i]\n    # or ...\n    # or position_table[i,n]\
    \ = position_table[n,i].\n    # More formally, we can say that\n    # a collision\
    \ occurs\n    # if there is some i such that\n    # position_table[i,1:n] = position_table[1:n,i].\n\
    \    # Note that \"position_table[i,1:n] = position_table[1:n,i]\"\n    # is a\
    \ vectorized comparison.\n    return sum(sum(position_table[i,1:n] .== position_\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qyk9u6c.jl:56\nin expression starting at\
    \ /tmp/tmp5qyk9u6c.jl:56\n"
  stdout: ''
  timestamp: 1659977977
- exit_code: 0
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n^2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #Write your code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4pl2gnlt.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp4pl2gnlt.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pl2gnlt.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pl2gnlt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4pl2gnlt.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pl2gnlt.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pl2gnlt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4pl2gnlt.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pl2gnlt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pl2gnlt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4pl2gnlt.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pl2gnlt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4pl2gnlt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4pl2gnlt.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4pl2gnlt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return div(n*(n-1), 2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7ml3z08.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpa7ml3z08.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7ml3z08.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7ml3z08.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa7ml3z08.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7ml3z08.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7ml3z08.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa7ml3z08.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7ml3z08.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7ml3z08.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa7ml3z08.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7ml3z08.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7ml3z08.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa7ml3z08.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7ml3z08.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfb9g6dfc.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpfb9g6dfc.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb9g6dfc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb9g6dfc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfb9g6dfc.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb9g6dfc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb9g6dfc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfb9g6dfc.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb9g6dfc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb9g6dfc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfb9g6dfc.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb9g6dfc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb9g6dfc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfb9g6dfc.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb9g6dfc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64( n*(n-1)/2\
    \ ) \nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpunurugt2.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpunurugt2.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunurugt2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunurugt2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpunurugt2.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunurugt2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunurugt2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpunurugt2.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunurugt2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunurugt2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpunurugt2.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunurugt2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunurugt2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpunurugt2.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunurugt2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977979
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_right_to_left =\
    \ CarPosition[]\n    cars_left_to_right = CarPosition[]\n    for i = 1:n\n   \
    \     push!(cars_right_to_left, CarPosition(n - i, 1))\n        push!(cars_left_to_right,\
    \ CarPosition(i, -1))\n    end\n    if n == 1\n        return 0\n    end\n   \
    \ car_race_collision_recursive(cars_right_to_left, cars_left_to_right)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7qyb18rd.jl:29\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: CarPosition not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp7qyb18rd.jl:13\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qyb18rd.jl:29 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qyb18rd.jl:28\ntest set: Error
    During Test at /tmp/tmp7qyb18rd.jl:30\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: CarPosition not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp7qyb18rd.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qyb18rd.jl:30 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qyb18rd.jl:28\ntest set: Error
    During Test at /tmp/tmp7qyb18rd.jl:31\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: CarPosition not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp7qyb18rd.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qyb18rd.jl:31 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qyb18rd.jl:28\ntest set: Error
    During Test at /tmp/tmp7qyb18rd.jl:32\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: CarPosition not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp7qyb18rd.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot'
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n \n    # This function works\
    \ by first sorting the positions of the cars, then finding\n    # the midpoint,\
    \ and then checking to see whether there are cars on the left\n    # side that\
    \ need to overtake cars on the right side.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry7viobh.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry7viobh.jl:1\n\
    in expression starting at /tmp/tmpry7viobh.jl:1\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7fqqvmi.jl:1\nin expression starting at /tmp/tmps7fqqvmi.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    lanes = Dict()\n    for\
    \ i in 1:n\n        lanes[i] = Array{Tuple{Int64,Int64}}()\n    end\n    for i\
    \ in 1:n\n        push!(lanes[i], (i,1))\n    end\n    for i in 1:n\n        push!(lanes[1],\
    \ (i, -1))\n    end\n    t = 0\n    collisions = 0\n    cur = Dict()\n    next\
    \ = Dict()\n    while true\n        t += 1\n        for i in 1:n\n           \
    \ cur[i] = lanes[i][1]\n        end\n        for i in 1:n\n            next[i]\
    \ = lanes[i][2]\n        end\n        for i in 1:n\n            val = cur[i]\n\
    \            if val[2] == 1\n                # right to left car\n           \
    \     if next[val[1]][2] == -1\n                    collisions += 1\n        \
    \        end\n            else\n                # left to right car\n        \
    \        if next[i][2] == 1\n                    collisions += 1\n           \
    \     end\n            end\n        end\n        for i in 1:n\n            popfirst!(lanes[i])\n\
    \        end\n        for i in 1:n\n            val = cur[i]\n            push!(lanes[val[1]],\
    \ (val[1], val[2]))\n        end\n        if isempty(lanes[1])\n            break\n\
    \        end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8trk7886.jl:67\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: no method matching
    (Array{Tuple{Int64, Int64}})()\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,
    !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,
    !Matched::Integer, !Matched::Integer) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T,
    S} where S<:AbstractMatrix{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp8trk7886.jl:15\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8trk7886.jl:67 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8trk7886.jl:66\ntest set: Error
    During Test at /tmp/tmp8trk7886.jl:68\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  MethodError: no method matching (Array{Tuple{Int64, Int64}})()\n  Closest
    candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,
    Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,
    !Matched::Integer, !Matched::Integer) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T,
    S} where S<:AbstractMatrix{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp8trk7886.jl:15\n   [2] '
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    while\
    \ n > 0\n        collisions += n\n        n -= 1\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tgr5f0m.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp3tgr5f0m.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tgr5f0m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tgr5f0m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3tgr5f0m.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tgr5f0m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tgr5f0m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3tgr5f0m.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tgr5f0m.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tgr5f0m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3tgr5f0m.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tgr5f0m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tgr5f0m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3tgr5f0m.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tgr5f0m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    @btime car_race_collision(300);\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @btime not defined

    in expression starting at /tmp/tmpdzsrfxhb.jl:15

    in expression starting at /tmp/tmpdzsrfxhb.jl:15

    '
  stdout: ''
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    @inbounds distance =\
    \ 0\n    @inbounds counter = 0\n    for i in 1:n\n        distance += 1\n    \
    \    distance -= 1\n        counter += distance\n    end\n    return counter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpav0bubob.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpav0bubob.jl:27\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav0bubob.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav0bubob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpav0bubob.jl:28\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav0bubob.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav0bubob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpav0bubob.jl:29\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav0bubob.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav0bubob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpav0bubob.jl:30\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav0bubob.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpav0bubob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpav0bubob.jl:31\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpav0bubob.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    a = rand(-1:1, n)\n \
    \   b = rand(-1:1, n)\n    collisions = 0\n    for i in 1:n\n        for j in\
    \ 1:n\n            collisions += (a[i] > 0 && b[j] < 0) ? 1 : 0\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3lg31192.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp3lg31192.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3lg31192.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3lg31192.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3lg31192.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3lg31192.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3lg31192.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3lg31192.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 1 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3lg31192.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3lg31192.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3lg31192.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 4 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3lg31192.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3lg31192.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3lg31192.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 12 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3lg31192.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977981
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    pass \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp77kavhjb.jl:20\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp77kavhjb.jl:13\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77kavhjb.jl:20 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77kavhjb.jl:19\ntest set: Error
    During Test at /tmp/tmp77kavhjb.jl:21\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp77kavhjb.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77kavhjb.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77kavhjb.jl:19\ntest set: Error
    During Test at /tmp/tmp77kavhjb.jl:22\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp77kavhjb.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77kavhjb.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77kavhjb.jl:19\ntest set: Error
    During Test at /tmp/tmp77kavhjb.jl:23\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmp77kavhjb.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes'
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp666bu05u.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp666bu05u.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp666bu05u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp666bu05u.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp666bu05u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n <= 1\n        return\
    \ 0\n    end\n    return n*(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppv2545i7.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmppv2545i7.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppv2545i7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppv2545i7.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppv2545i7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    positions = 0 # assume\
    \ that the cars are numbered from 1 to n, and n is even\n    for i in 1:n\n  \
    \      positions += i\n    end\n    return positions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiebis9ym.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpiebis9ym.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiebis9ym.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiebis9ym.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiebis9ym.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiebis9ym.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiebis9ym.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiebis9ym.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 10 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiebis9ym.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiebis9ym.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiebis9ym.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 36 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiebis9ym.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiebis9ym.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiebis9ym.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 55 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiebis9ym.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977981
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # We do a first pass\
    \ to put the left-to-right cars in an ordered collection.\n    # Then we do a\
    \ second pass to sweep the right-to-left cars against the left-to-right cars\n\
    \    # and count the collisions.\n    # Time complexity is O(n log n) because\
    \ the sort is O(n log n) and the second sweep is O(n)\n    left_to_right_car_positions\
    \ = []\n    for i in 1:n\n        # position is a random number on the line between\
    \ 0 and 1\n        position = rand()\n        # put the cars in left-to-right\
    \ order\n        push!(left_to_right_car_positions, position)\n    end\n    sort!(left_to_right_car_positions)\n\
    \    num_collisions = 0\n    for i in 1:n\n        # position is a random number\
    \ on the line between 0 and 1\n        position = rand()\n        # We sweep the\
    \ right-to-left cars against the ordered left-to-right cars.\n        # It is\
    \ convenient to do this sweep in reverse order, i.e. from right to left.\n   \
    \     # This way, when we find a collision, we know all the subsequent cars in\
    \ the \n        # left-to-right ordered collection have no chance of colliding.\n\
    \        for j in (n-1):-1:0\n            if position <= left_to_right_car_positions[j]\n\
    \                num_collisions += 1\n                break # all subsequent cars\
    \ in left-to-right ordered collection have no chance of colliding\n          \
    \  end\n        end\n    end\n    return num_collisions\nend\ncar_race_collision(1000)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 1000-element Vector{Any}\
    \ at index [0]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ car_race_collision(n::Int64)\n   @ Main /tmp/tmpmhkz34qn.jl:34\n [3] top-level\
    \ scope\n   @ /tmp/tmpmhkz34qn.jl:42\nin expression starting at /tmp/tmpmhkz34qn.jl:42\n"
  stdout: ''
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    # input:\
    \ n, the number of cars in each direction\n    # output: the number of collisions\n\
    \    # This assumes that the cars are driving from -1 to 1, and that the cars\
    \ have the following\n    # positions:\n        # Cars 1 to n going from -1 to\
    \ 1: x[i] = -1 + 2*i/(n-1) for i = 0:(n-1)\n        # Cars n+1 to 2n going from\
    \ 1 to -1: x[i] = 1 - 2*(i-n)/(n-1) for i = n:(2n-1)\n        # A car i collides\
    \ with a car j, iff x[i] = x[j].\n        # A simple computation shows that car\
    \ i collides with car n+1-i.\n        # This results in n/2 collisions, or 2*(n/2)\
    \ collisions if n is even,\n        # or (n-1)/2 collisions if n is odd. \n  \
    \  \"\"\"\n    if n%2 == 0 \n        return 2*(n/2)\n    else\n        return\
    \ (n-1)/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkz1seacc.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpkz1seacc.jl:36\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1seacc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1seacc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkz1seacc.jl:37\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1seacc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1seacc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkz1seacc.jl:38\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1seacc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1seacc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkz1seacc.jl:39\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1seacc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1seacc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkz1seacc.jl:40\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1seacc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    new_index = zeros(Int64,\
    \ n)\n    for i in 1:n\n        index = n - i\n        new_index[index] = i\n\
    \    end\n    new_index\nend\n@show car_race_collision(4)\n@show car_race_collision(5)\n\
    @show car_race_collision(6)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\nStacktrace:\n [1] setindex!\n   @ ./array.jl:903 [inlined]\n [2]\
    \ car_race_collision(n::Int64)\n   @ Main /tmp/tmpb27zom4s.jl:16\n [3] top-level\
    \ scope\n   @ show.jl:1047\nin expression starting at /tmp/tmpb27zom4s.jl:20\n"
  stdout: ''
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: fill this in\n\
    \    return 0\nend\ncar_race_collision(10)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp86nxe2qr.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp86nxe2qr.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86nxe2qr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86nxe2qr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp86nxe2qr.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86nxe2qr.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86nxe2qr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp86nxe2qr.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86nxe2qr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86nxe2qr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp86nxe2qr.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86nxe2qr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86nxe2qr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp86nxe2qr.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86nxe2qr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977981
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    for i = 1:n\n       \
    \ for j = 1:n\n            if i==j\n                pass\n            else\n \
    \               # this is the collision case \n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpn5e8ebba.jl:28\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpn5e8ebba.jl:16\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5e8ebba.jl:28 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5e8ebba.jl:27\ntest set: Error
    During Test at /tmp/tmpn5e8ebba.jl:29\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpn5e8ebba.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5e8ebba.jl:29 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5e8ebba.jl:27\ntest set: Error
    During Test at /tmp/tmpn5e8ebba.jl:30\n  Test threw exception\n  Expression: candidate(4)
    == 16\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpn5e8ebba.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn5e8ebba.jl:30 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5e8ebba.jl:27\ntest set: Error
    During Test at /tmp/tmpn5e8ebba.jl:31\n  Test threw exception\n  Expression: candidate(8)
    == 64\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @
    Main /tmp/tmpn5e8ebba.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes'
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n + n - 1\nend\n\
    #q1\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwmcam06q.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpwmcam06q.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmcam06q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmcam06q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwmcam06q.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 5 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmcam06q.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmcam06q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwmcam06q.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 7 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmcam06q.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmcam06q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwmcam06q.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 15 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmcam06q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmcam06q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwmcam06q.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 19 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmcam06q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The result\
    \ is the number of collisions in a car race with n cars.\n    \"\"\"\n    coll\
    \ = 0\n    c = n-1\n    while c > 0\n        coll += c\n        c -= 1\n    end\n\
    \    return coll\nend\n    \n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1sjm7eic.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp1sjm7eic.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sjm7eic.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sjm7eic.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1sjm7eic.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sjm7eic.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sjm7eic.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1sjm7eic.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sjm7eic.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sjm7eic.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1sjm7eic.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sjm7eic.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sjm7eic.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1sjm7eic.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sjm7eic.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977982
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    positions = zeros(Int64,\
    \ n*2)\n    for i in 1:n\n        positions[i] = rand(Int64, -500000000:500000000)\n\
    \    end\n    for i in n+1:n*2\n        positions[i] = rand(Int64, -500000000:500000000)\n\
    \    end\n    positions = sort(positions)\n    x = 0\n    for i in n+1:n*2\n \
    \       x += count(positions[1:i], positions[i])\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_zmzwmly.jl:32\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: no method matching
    rand(::Type{Int64}, ::UnitRange{Int64})\n  Closest candidates are:\n    rand(::Type{X})
    where X at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Random/src/Random.jl:260\n    rand(::Type{X},
    !Matched::Tuple{Vararg{Int64, N}} where N) where X at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Random/src/Random.jl:290\n    rand(::Type{X},
    !Matched::Integer, !Matched::Integer...) where X at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Random/src/Random.jl:293\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmp_zmzwmly.jl:15\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_zmzwmly.jl:32 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_zmzwmly.jl:31\n'''
  timestamp: 1659977983
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # write your code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5j3rmu3a.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp5j3rmu3a.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j3rmu3a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j3rmu3a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5j3rmu3a.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j3rmu3a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j3rmu3a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5j3rmu3a.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j3rmu3a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j3rmu3a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5j3rmu3a.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j3rmu3a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j3rmu3a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5j3rmu3a.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j3rmu3a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOU WILL FILL IN THE\
    \ DETAILS\n    n1 = rand(-2:2:2,n)\n    n2 = rand(-2:2:2,n)\n    n3 = sum(n1 .==\
    \ n2)\n    return n3\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp60klu8t_.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp60klu8t_.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60klu8t_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60klu8t_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp60klu8t_.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60klu8t_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60klu8t_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp60klu8t_.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60klu8t_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60klu8t_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp60klu8t_.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 2 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60klu8t_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp60klu8t_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp60klu8t_.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 3 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp60klu8t_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    We are going\
    \ to use the following algorithm:\n    - randomly choose the positions of all\
    \ the cars (i.e. the two sets of n cars).\n    - for each pair of cars (in the\
    \ first set and in the second set), check whether\n      they are close enough\
    \ to collide.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38txyaqg.jl:1\nin expression starting at /tmp/tmp38txyaqg.jl:1\n"
  stdout: ''
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ takes an integer n and returns the\n    number of possible collision between\
    \ the set of \n    n cars moving left to right and the set of n\n    cars moving\
    \ right to left.\n    \"\"\"\n    # There are n different collisions for the set\
    \ of cars\n    # moving left to right.  There are a different set of n\n    #\
    \ different collisions for the set of cars moving right to left.\n    # So there\
    \ are a total of n+n = 2n collisions.  We subtract 1 because\n    # the cars that\
    \ move left to right and the cars that move right to left\n    # can collide too.\n\
    \    return 2n - 1\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoubuphnc.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpoubuphnc.jl:32\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoubuphnc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoubuphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoubuphnc.jl:33\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 5 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoubuphnc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoubuphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoubuphnc.jl:34\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 7 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoubuphnc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoubuphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoubuphnc.jl:35\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 15 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoubuphnc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoubuphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoubuphnc.jl:36\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 19 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoubuphnc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collision_count = 0\n\
    \    right_to_left_sorted = sort(rand(1:1_000_000, n), rev=true)\n    left_to_right_sorted\
    \ = sort(rand(1:1_000_000, n))\n    for i in 1:n\n        if right_to_left_sorted[i]\
    \ > left_to_right_sorted[i]\n            collision_count += 1\n        end\n \
    \   end\n    return collision_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7pfxzze0.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp7pfxzze0.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pfxzze0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pfxzze0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7pfxzze0.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pfxzze0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pfxzze0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7pfxzze0.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pfxzze0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pfxzze0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7pfxzze0.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 5 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pfxzze0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7pfxzze0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7pfxzze0.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 2 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7pfxzze0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977984
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    cars_left\
    \ = Set(1:n)\n    cars_right = Set(1:n)\n    for i in 1:n\n        if !isempty(intersect(cars_left,\
    \ cars_right))\n            collisions += 1\n        end\n        delete!(cars_left,\
    \ i)\n        delete!(cars_right, i)\n    end\n    return collisions\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvrf6iap6.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpvrf6iap6.jl:30\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrf6iap6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrf6iap6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvrf6iap6.jl:31\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrf6iap6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrf6iap6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvrf6iap6.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrf6iap6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrf6iap6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvrf6iap6.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrf6iap6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrf6iap6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvrf6iap6.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrf6iap6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977984
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # num_collisions = 0\n\
    \    # this is a naive algorithm\n    # n_left_right = n\n    # n_right_left =\
    \ n\n    # while n_left_right != 0 && n_right_left != 0\n    #     if rand(0:1)\
    \ == 0\n    #         num_collisions += 1\n    #         n_left_right -= 1\n \
    \   #     else\n    #         n_right_left -= 1\n    #     end\n    # end\n  \
    \  # num_collisions\n    n_left_right = n\n    n_right_left = n\n    while n_left_right\
    \ != 0 && n_right_left != 0\n        if rand(0:1) == 0\n            n_left_right\
    \ -= 1\n        else\n            n_right_left -= 1\n        end\n    end\n  \
    \  n - n_left_right - n_right_left\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpndg_7b0e.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpndg_7b0e.jl:42\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndg_7b0e.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndg_7b0e.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpndg_7b0e.jl:43\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 1 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndg_7b0e.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndg_7b0e.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpndg_7b0e.jl:44\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 2 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndg_7b0e.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndg_7b0e.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpndg_7b0e.jl:45\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndg_7b0e.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpndg_7b0e.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpndg_7b0e.jl:46\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 6 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpndg_7b0e.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977984
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Assume that\
    \ the number of car pairs that are traveling in opposite directions are\n    evenly\
    \ divisible by two.  (For example, in the case of n = 3,\n    i.e. 3 pairs of\
    \ cars traveling in opposite directions,\n    each pair will contain 2 cars.)\n\
    \    \"\"\"\n    if n == 0\n        return 0\n    else\n        return (n - 1)\
    \ + car_race_collision(n - 1)\n    end\nend\ncar_race_collision(3)\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2o0fzxia.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2o0fzxia.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o0fzxia.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o0fzxia.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2o0fzxia.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o0fzxia.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o0fzxia.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2o0fzxia.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o0fzxia.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o0fzxia.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2o0fzxia.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o0fzxia.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2o0fzxia.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2o0fzxia.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2o0fzxia.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  if n==1\n        return 0\n    else\n        return n-1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3_2kx2vi.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp3_2kx2vi.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_2kx2vi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_2kx2vi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3_2kx2vi.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_2kx2vi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_2kx2vi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3_2kx2vi.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_2kx2vi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_2kx2vi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3_2kx2vi.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_2kx2vi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_2kx2vi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3_2kx2vi.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_2kx2vi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # write your code here\n\
    end\n \n\"\"\"\n    Input: a list of integers\n    Output: a tuple of two lists,\
    \ one of odd and one of even integers\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpts8l9hz6.jl:16\nin expression starting at /tmp/tmpts8l9hz6.jl:16\n"
  stdout: ''
  timestamp: 1659977984
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # because the cars are\
    \ infinitely sturdy, there can be no collisions\n    # between cars coming from\
    \ opposite directions on the same road\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk_7lej5l.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpk_7lej5l.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_7lej5l.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_7lej5l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk_7lej5l.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_7lej5l.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_7lej5l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk_7lej5l.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_7lej5l.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_7lej5l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk_7lej5l.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_7lej5l.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_7lej5l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk_7lej5l.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_7lej5l.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ r in 1:n\n        for l in r+1:n\n            if r > l\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6xoq3oyz.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp6xoq3oyz.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xoq3oyz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xoq3oyz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6xoq3oyz.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xoq3oyz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xoq3oyz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6xoq3oyz.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xoq3oyz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xoq3oyz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6xoq3oyz.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xoq3oyz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xoq3oyz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp6xoq3oyz.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xoq3oyz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\n \nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcmf80aj_.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcmf80aj_.jl:22\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmf80aj_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmf80aj_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmf80aj_.jl:23\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmf80aj_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmf80aj_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmf80aj_.jl:24\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmf80aj_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmf80aj_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmf80aj_.jl:25\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmf80aj_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmf80aj_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmf80aj_.jl:26\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmf80aj_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    cars_moving_left_to_right\
    \ = Array{Tuple{Int64,Int64},1}(n)\n    cars_moving_right_to_left = Array{Tuple{Int64,Int64},1}(n)\n\
    \    # You can assume the coordinates of the cars moving left to right\n    #\
    \ are stored in cars_moving_left_to_right and the coordinates of the cars\n  \
    \  # moving right to left are stored in cars_moving_right_to_left.\n    # The\
    \ ith element in each array has the form (x, y), where x represents the x-coordinate\n\
    \    # of the car and y represents the y-coordinate of the car.\n    # The x-coordinate\
    \ of the ith car moving left to right is always greater than 0.\n    # The x-coordinate\
    \ of the ith car moving right to left is always less than 0.\n    # The ith car\
    \ moving left to right is always moving right.\n    # The ith car moving right\
    \ to left is always moving left.\n    # The cars move 1 unit to the right or left\
    \ per minute.\n    # For example, a car moving left to right might have the coordinates\
    \ (3, 5).\n    # This means at t = 0, the car was at (3, 5).  One minute later,\
    \ at t = 1, the car is at (4, 5).\n    # And so on.\n    # For all i, 0 < cars_moving_left_to_right[i][1]\n\
    \    # For all i, cars_moving_right_to_left[i][1] < 0\n    # For all i, cars_moving_left_to_right[i][1]\
    \ > cars_moving_right_to_left[i][1]\n    # For all i, cars_moving_left_to_right[i][2]\
    \ == cars_moving_right_to_left[i][2]\n    # For all i, cars_moving_left_to_right[i][2]\
    \ is an integer\n    # For all i, cars_moving_right_to_left[i][2] is an integer\n\
    \    collisions = 0\n    for t in 1:Int64\n        for i in 1:n\n            if\
    \ cars_moving_left\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnb_r5up.jl:1\nin expression starting at /tmp/tmpsnb_r5up.jl:1\n"
  stdout: ''
  timestamp: 1659977984
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"find the number of\
    \ collisions in a car race\"\n    hit_count=0\n    #### INSERT CODE HERE TO SOLVE\
    \ THIS PROBLEM\n    return hit_count\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwwdkkhvd.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpwwdkkhvd.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwdkkhvd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwdkkhvd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwwdkkhvd.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwdkkhvd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwdkkhvd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwwdkkhvd.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwdkkhvd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwdkkhvd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwwdkkhvd.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwdkkhvd.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwdkkhvd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwwdkkhvd.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwdkkhvd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    A = n\n    B = n\n  \
    \  count = 0\n    while A > 0 && B > 0\n        if rand() < 0.5\n            A\
    \ -= 1\n        else\n            B -= 1\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl4h5q8gu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpl4h5q8gu.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4h5q8gu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4h5q8gu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl4h5q8gu.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4h5q8gu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4h5q8gu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl4h5q8gu.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4h5q8gu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4h5q8gu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl4h5q8gu.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 8 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4h5q8gu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl4h5q8gu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpl4h5q8gu.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 10 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl4h5q8gu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/po"
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n: the number\
    \ of cars in the race\n    \"\"\"\n    s = 0\n    for car1_idx in 1:n\n      \
    \  for car2_idx in 1:n\n            if car1_idx < car2_idx \n                if\
    \ car1_idx == car2_idx + 1\n                    s += 1\n                end\n\
    \            elseif car1_idx > car2_idx\n                if car1_idx == car2_idx\
    \ - 1\n                    s += 1\n                end\n            end\n    \
    \    end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyvbgxemo.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyvbgxemo.jl:37\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvbgxemo.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvbgxemo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyvbgxemo.jl:38\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvbgxemo.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvbgxemo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyvbgxemo.jl:39\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvbgxemo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvbgxemo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyvbgxemo.jl:40\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvbgxemo.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvbgxemo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyvbgxemo.jl:41\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvbgxemo.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return 0 \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpccprf180.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpccprf180.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccprf180.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccprf180.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpccprf180.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccprf180.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccprf180.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpccprf180.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccprf180.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccprf180.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpccprf180.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccprf180.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccprf180.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpccprf180.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccprf180.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Preliminary.  Make\
    \ sure n is valid\n    if n < 0\n        return 0\n    end\n    \n    # Test if\
    \ there is a collision\n    return 0\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt0rinxhs.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpt0rinxhs.jl:27\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0rinxhs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0rinxhs.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt0rinxhs.jl:28\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0rinxhs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0rinxhs.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt0rinxhs.jl:29\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0rinxhs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0rinxhs.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt0rinxhs.jl:30\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0rinxhs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0rinxhs.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt0rinxhs.jl:31\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0rinxhs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  # dummy array of positions.\
    \  Each i-th element holds the position of the i-th\n  # car that's moving left\
    \ to right.\n  pos_l2r = [1000 * i for i in 1:n]\n  # similarly, we have an array\
    \ for the positions of the cars moving right to left.\n  pos_r2l = [1000 * i for\
    \ i in 1:n]\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppjixbevl.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppjixbevl.jl:1\n\
    in expression starting at /tmp/tmppjixbevl.jl:1\n"
  stdout: ''
  timestamp: 1659977985
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Give the number of\
    \ collisions.\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpgcjjgwf6.jl:20\n'''
  timestamp: 1659977987
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_cars = 2*n\n    car_positions\
    \ = zeros(n_cars)\n    left_to_right_speeds = zeros(n)\n    right_to_left_speeds\
    \ = zeros(n)\n    for i = 1:n\n        left_to_right_speeds[i] = rand()\n    \
    \    right_to_left_speeds[i] = rand()\n    end\n    # end for\n    for i = 1:n\n\
    \        car_positions[i] = rand()\n        car_positions[i+n] = rand()\n    end\n\
    \    # end for\n    collision_indices = sort(car_positions, rev=true)[1:n]\n \
    \   return sum(collision_indices)\n    # end function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9nenanhd.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9nenanhd.jl:1\n\
    in expression starting at /tmp/tmp9nenanhd.jl:1\n"
  stdout: ''
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    a = sort(rand(n))\n \
    \   b = sort(rand(n))\n    c = 0\n    for i = 1:n\n        for j = 1:n\n     \
    \       if a[i] < b[j]\n                c += 1\n            end\n        end\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkfoptk7n.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpkfoptk7n.jl:31\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkfoptk7n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkfoptk7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkfoptk7n.jl:32\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 11 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkfoptk7n.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkfoptk7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkfoptk7n.jl:33\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 31 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkfoptk7n.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkfoptk7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpkfoptk7n.jl:34\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 56 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkfoptk7n.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkfoptk7n.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659977987
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    >>> car_race_collision(2)\n\
    \    1\n    >>> car_race_collision(3)\n    4\n    >>> car_race_collision(4)\n\
    \    10\n    >>> car_race_collision(5)\n    20\n    >>> car_race_collision(6)\n\
    \    35\n    >>> car_race_collision(7)\n    56\n    >>> car_race_collision(8)\n\
    \    84\n    >>> car_race_collision(9)\n    120\n    >>> car_race_collision(10)\n\
    \    165\n    >>> car_race_collision(11)\n    220\n    >>> car_race_collision(12)\n\
    \    286\n    >>> car_race_collision(13)\n    364\n    >>> car_race_collision(14)\n\
    \    455\n    >>> car_race_collision(15)\n    560\n    >>> car_race_collision(16)\n\
    \    680\n    >>> car_race_collision(17)\n    816\n    >>> car_race_collision(18)\n\
    \    969\n    >>> car_race_collision(19)\n    1140\n    >>> car_race_collision(20)\n\
    \    1330\n    >>> car_race_collision(1000)\n    499955000\n    \"\"\"\n    if\
    \ n == 1\n        return 0\n    else\n        #Each car from the left moves past\
    \ n-1 cars from the right\n        #and each car from the right moves past n-1\
    \ cars from the left\n        return (n-1)*n + car_race_collision(n-1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_tb7y73y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_tb7y73y.jl:1\n\
    in expression starting at /tmp/tmp_tb7y73y.jl:1\n"
  stdout: ''
  timestamp: 1659977985
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    num_collisions = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            if i != j\n               \
    \ num_collisions += 1\n            end\n        end\n    end\n    return num_collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9tbr899h.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp9tbr899h.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tbr899h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tbr899h.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9tbr899h.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tbr899h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tbr899h.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9tbr899h.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tbr899h.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tbr899h.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9tbr899h.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tbr899h.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tbr899h.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9tbr899h.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tbr899h.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977987
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #n is an even number.\
    \  \n    cnt = 0 \n    i = 1\n    while i <= n \n        j = n + 1\n        while\
    \ j <= 2n \n            if i + j == n + 1 \n                cnt += 1\n       \
    \     end\n            j += 1\n        end\n        i += 1\n    end\n    return\
    \ cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc3ulncgi.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpc3ulncgi.jl:33\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ulncgi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ulncgi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpc3ulncgi.jl:34\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ulncgi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ulncgi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpc3ulncgi.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ulncgi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ulncgi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpc3ulncgi.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ulncgi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3ulncgi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpc3ulncgi.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3ulncgi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977987
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\nend\n\
    @testset \"car_race_collision\" begin\n    @test car_race_collision(1) == 0\n\
    \    @test car_race_collision(2) == 1\n    @test car_race_collision(4) == 6\n\
    \    @test car_race_collision(100) == 4950\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpwzcmbezg.jl:15

    in expression starting at /tmp/tmpwzcmbezg.jl:15

    '
  stdout: ''
  timestamp: 1659977986
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # [ 0 1 2 3 4 5 6 7 8\
    \ 9 ]\n    # [ 9 8 7 6 5 4 3 2 1 0 ]\n    # ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ \n    #   ^ ^\
    \ ^ ^ ^ ^ ^ ^ ^ ^\n    # n = 10\n    # n * n - n = 90\n    # n * (n - 1) / 2 =\
    \ 45\n    return n * (n - 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph1oz49mc.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmph1oz49mc.jl:27\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1oz49mc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1oz49mc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph1oz49mc.jl:28\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1oz49mc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1oz49mc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph1oz49mc.jl:29\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1oz49mc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1oz49mc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph1oz49mc.jl:30\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1oz49mc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1oz49mc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph1oz49mc.jl:31\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1oz49mc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977988
- exit_code: -1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO\n    # remember\
    \ not to use any loops\n    # you can use the sort! function on an array.\n  \
    \  # see https://docs.julialang.org/en/v1/stdlib/Sort/index.html#Sort.sort!\n\
    \    # it is the same as Python's sort()\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmpcfim5g.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an
    object of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpmpcfim5g.jl:18\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmpcfim5g.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmpcfim5g.jl:23\ntest set: Error
    During Test at /tmp/tmpmpcfim5g.jl:25\n  Test threw exception\n  Expression: candidate(3)
    == 9\n  MethodError: Cannot `convert` an object of type Nothing to an object of
    type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where
    T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    car_race_collision(n::Int64)\n     @ Main /tmp/tmpmpcfim5g.jl:18\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmpcfim5g.jl:25 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmpcfim5g.jl:23\ntest set: Error
    During Test at /tmp/tmpmpcfim5g.jl:2'
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    n_collisions = 0\n  \
    \  n_cars_p1 = 0\n    n_cars_p2 = 0\n    while n_cars_p1 < n && n_cars_p2 < n\n\
    \        if distance(n_cars_p1, n_cars_p2) == 0\n            n_collisions += 1\n\
    \        end\n        n_cars_p1 += 1\n        n_cars_p2 += 1\n    end\n    return\
    \ n_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp765lgfgr.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp765lgfgr.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: distance not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp765lgfgr.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp765lgfgr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp765lgfgr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp765lgfgr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: distance not defined\n  Stacktrace:\n  \
    \ [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp765lgfgr.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp765lgfgr.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp765lgfgr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp765lgfgr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: distance not defined\n  Stacktrace:\n \
    \  [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp765lgfgr.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp765lgfgr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp765lgfgr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp765lgfgr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: distance not defined\n  Stacktrace:\n \
    \  [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp765lgfgr.jl:17\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    #solution: \n    return\
    \ Int64(n*(n-1)/2)\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr7f53ifg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpr7f53ifg.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7f53ifg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7f53ifg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr7f53ifg.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7f53ifg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7f53ifg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr7f53ifg.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7f53ifg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7f53ifg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr7f53ifg.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7f53ifg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7f53ifg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr7f53ifg.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7f53ifg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977988
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    distances = zeros(Int64,\
    \ n, n)\n    n1 = Int64(floor(n/2))\n    n2 = n - n1\n    for i = 1:n1\n     \
    \   for j = 1:n2\n            distances[i, j] = (j - i)*2\n        end\n    end\n\
    \    for i = 1:n1\n        for j = 1:n2\n            distances[i, j] = (j - i)*2\n\
    \        end\n    end\n    return sum(sum(distances .<= 0))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgsffe13a.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpgsffe13a.jl:34\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 8 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsffe13a.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsffe13a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgsffe13a.jl:35\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 15 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsffe13a.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsffe13a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgsffe13a.jl:36\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 58 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsffe13a.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsffe13a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgsffe13a.jl:37\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsffe13a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsffe13a.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659977988
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    A car can\
    \ be thought of as a point on the number line.\n    \"\"\"\n    left_cars = zeros(Int64,\
    \ n) # left to right\n    right_cars = zeros(Int64, n) # right to left\n    #\
    \ 0 is the starting point\n    # 1:n are left to right\n    # -1:-n are right\
    \ to left\n    left_cars[:] = collect(1:n)\n    right_cars[:] = collect(-1:-n)\n\
    \    \"\"\"\n    A collision between two cars are equivalent to left_cars[i] ==\
    \ -right_cars[j]\n    for some i, j.\n    \"\"\"\n    num_collisions = 0\n   \
    \ for i = 1:n\n        for j = 1:n\n            if left_cars[i] == -right_cars[j]\n\
    \                num_collisions += 1\n            end\n        end\n    end\n\
    \    return num_collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdffc5i8w.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpdffc5i8w.jl:42\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  DimensionMismatch(\"tried to assign 0 elements\
    \ to 2 destinations\")\n  Stacktrace:\n   [1] throw_setindex_mismatch(X::Vector{Int64},\
    \ I::Tuple{Int64})\n     @ Base ./indices.jl:191\n   [2] setindex_shape_check\n\
    \     @ ./indices.jl:245 [inlined]\n   [3] setindex!\n     @ ./array.jl:937 [inlined]\n\
    \   [4] car_race_collision(n::Int64)\n     @ Main /tmp/tmpdffc5i8w.jl:22\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdffc5i8w.jl:42 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdffc5i8w.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpdffc5i8w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  DimensionMismatch(\"tried to assign 0 elements to 3 destinations\"\
    )\n  Stacktrace:\n   [1] throw_setindex_mismatch(X::Vector{Int64}, I::Tuple{Int64})\n\
    \     @ Base ./indices.jl:191\n   [2] setindex_shape_check\n     @ ./indices.jl:245\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:937 [inlined]\n   [4] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmpdffc5i8w.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdffc5i8w.jl:43 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdffc5i8w.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpdffc5i8w.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  DimensionMismatch(\"tried to assign 0 elements to 4 destinations\"\
    )\n  Stacktrace:\n   [1] throw_setindex_mismatch(X::Vector{Int64}, I::Tuple{Int64})\n\
    \     @ Base ./indices.jl:191\n   [2] setindex_shape_check\n     @ ./indices.jl:245\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:937 [inlined]\n   [4] car_race_collision(n::Int64)\n\
    \     @ Main "
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return (n*(n-1)) \xF7\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmdwahb9_.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmdwahb9_.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdwahb9_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdwahb9_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdwahb9_.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdwahb9_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdwahb9_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdwahb9_.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdwahb9_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdwahb9_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdwahb9_.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdwahb9_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdwahb9_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmdwahb9_.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdwahb9_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977988
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n % 2 == 0\n     \
    \   return (n/2) * (n/2)\n    else\n        return (n/2) * (n/2 + 1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfb24w923.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpfb24w923.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb24w923.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb24w923.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpfb24w923.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  InexactError: Int64(3.75)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] car_race_collision(n::Int64)\n     @ Main /tmp/tmpfb24w923.jl:16\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpfb24w923.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfb24w923.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpfb24w923.jl:26\n  Expression: candidate(4) == 16\n  \
    \ Evaluated: 4 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb24w923.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb24w923.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfb24w923.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 16 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb24w923.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb24w923.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfb24w923.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 25 == 100\n"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The output\
    \ is an integer\n    \"\"\"\n    if n < 1\n        throw(ArgumentError(\"n must\
    \ be positive\"))\n    end\n    return n*(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmponfpct08.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmponfpct08.jl:26\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponfpct08.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponfpct08.jl:25\ntest set: Test\
    \ Failed at /tmp/tmponfpct08.jl:27\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponfpct08.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponfpct08.jl:25\ntest set: Test\
    \ Failed at /tmp/tmponfpct08.jl:28\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponfpct08.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponfpct08.jl:25\ntest set: Test\
    \ Failed at /tmp/tmponfpct08.jl:29\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponfpct08.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponfpct08.jl:25\ntest set: Test\
    \ Failed at /tmp/tmponfpct08.jl:30\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponfpct08.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977988
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    sum = 0 \n    for i in\
    \ 1:n-1\n        sum += i\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsc4t_dny.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpsc4t_dny.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc4t_dny.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc4t_dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsc4t_dny.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc4t_dny.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc4t_dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsc4t_dny.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc4t_dny.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc4t_dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsc4t_dny.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc4t_dny.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc4t_dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsc4t_dny.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc4t_dny.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input:\n\
    \    - n: number of cars in each direction.  0 \u2264 n \u2264 10^9.\n    Output:\n\
    \    - number of collisions between the cars.\n    \"\"\"\n    collisions = 0\n\
    \    max_value = n - 1\n    for i = 1:max_value \n        collisions += i\n  \
    \  end\n    return collisions * 2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4xtzrenp.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp4xtzrenp.jl:31\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xtzrenp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xtzrenp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xtzrenp.jl:32\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xtzrenp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xtzrenp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xtzrenp.jl:33\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xtzrenp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xtzrenp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xtzrenp.jl:34\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xtzrenp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xtzrenp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xtzrenp.jl:35\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xtzrenp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    ## YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpejpl5q_o.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpejpl5q_o.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpejpl5q_o.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejpl5q_o.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejpl5q_o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpejpl5q_o.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpejpl5q_o.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejpl5q_o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejpl5q_o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpejpl5q_o.jl:22\n  Test threw exception\n  Expression:\
    \ can"
  timestamp: 1659977990
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n  \"\"\"\n  A naive algorithm\
    \ that runs in O(n^2) time.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp862kowfm.jl:1\nin expression starting at /tmp/tmp862kowfm.jl:1\n"
  stdout: ''
  timestamp: 1659977988
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    if n == 0; return 0 end\n\
    \    if n == 1; return 0 end\n    if n == 2; return 1 end\n    return n-1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpel2lmtgt.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpel2lmtgt.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel2lmtgt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel2lmtgt.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpel2lmtgt.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 2 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel2lmtgt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel2lmtgt.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpel2lmtgt.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 3 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel2lmtgt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel2lmtgt.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpel2lmtgt.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 7 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel2lmtgt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel2lmtgt.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpel2lmtgt.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 9 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel2lmtgt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7fqqvmi.jl:1\nin expression starting at /tmp/tmps7fqqvmi.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    pre: n >=\
    \ 0\n    post: returns the number of collisions in a car race with n cars.\n \
    \   \"\"\"\n    if n == 0 \n        return 0\n    else\n        return n - 1 +\
    \ car_race_collision(n - 1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd2wu1vy6.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpd2wu1vy6.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2wu1vy6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2wu1vy6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd2wu1vy6.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2wu1vy6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2wu1vy6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd2wu1vy6.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2wu1vy6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2wu1vy6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd2wu1vy6.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2wu1vy6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2wu1vy6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd2wu1vy6.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2wu1vy6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # Write your code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptf1n7fhb.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptf1n7fhb.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf1n7fhb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf1n7fhb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptf1n7fhb.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf1n7fhb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf1n7fhb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptf1n7fhb.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf1n7fhb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf1n7fhb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptf1n7fhb.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf1n7fhb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptf1n7fhb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptf1n7fhb.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptf1n7fhb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/pol"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    k = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i > j\n                k += 1\n         \
    \   end\n        end\n    end\n    return k\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8xf1r3ds.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp8xf1r3ds.jl:28\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xf1r3ds.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xf1r3ds.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8xf1r3ds.jl:29\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xf1r3ds.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xf1r3ds.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8xf1r3ds.jl:30\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xf1r3ds.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xf1r3ds.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8xf1r3ds.jl:31\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xf1r3ds.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xf1r3ds.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8xf1r3ds.jl:32\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xf1r3ds.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977989
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return Int64(floor(n*(n-1)/2))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkcbzrhnl.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkcbzrhnl.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbzrhnl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbzrhnl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkcbzrhnl.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbzrhnl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbzrhnl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkcbzrhnl.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbzrhnl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbzrhnl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkcbzrhnl.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbzrhnl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcbzrhnl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkcbzrhnl.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcbzrhnl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659977989
