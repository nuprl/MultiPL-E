language: jl
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n\
    \    p = 2 # first prime\n    while n > 1\n        # count how many times factor\
    \ p goes into n\n        m = 0\n        while n % p == 0\n            m += 1\n\
    \            n /= p\n        end\n        push!(result, [p for _ in 1:m])\n  \
    \      p += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp46h4ana6.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp46h4ana6.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmp46h4ana6.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp46h4ana6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp46h4ana6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp46h4ana6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Vector{Int64}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmp46h4ana6.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp46h4ana6.jl:32 [inlined]\n\
    \   [5]"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2\n\
    \        return []\n    end\n    n_mod_two = n % 2\n    if n_mod_two == 0\n  \
    \      return [2] * (Int64(log2(n)) + 1)\n    end\n    divisor = 3\n    while\
    \ divisor <= sqrt(n)\n        n_mod_divisor = n % divisor\n        if n_mod_divisor\
    \ == 0\n            return push!(factorize(divisor), factorize(n / divisor)...)\n\
    \        end\n        divisor += 2\n    end\n    return [n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsz26po28.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpsz26po28.jl:44\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [4] == [2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpsz26po28.jl:45\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [6] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpsz26po28.jl:46\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [8] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpsz26po28.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpsz26po28.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsz26po28.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsz26po28.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsz26po28.jl:43\ntest set:\
    \ Error Dur"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    #write your\
    \ code here\n    return Vector{Int64}()\nend\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsh7_yo3i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpsh7_yo3i.jl:22\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:23\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:24\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:25\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:26\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n <= 0\n\
    \        return error(\"Input number should be positive\")\n    end\n    factors\
    \ = Int64[]\n    # Loop over all factors of 2\n    while n % 2 == 0\n        push!(factors,\
    \ 2)\n        n = n / 2\n    end\n    # Loop over all possible odd factors\n \
    \   factor = 3\n    while n > 1\n        while n % factor == 0\n            push!(factors,\
    \ factor)\n            n = n / factor\n        end\n        factor = factor +\
    \ 2\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while (n != 1)\n        while (n % divisor == 0)\n\
    \            push!(factors, divisor)\n            n = n / divisor\n        end\n\
    \        divisor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    is_prime(n)\
    \ && return [n]\n    factors = factorize(n\xF7divisor(n))\n    return append!(factors,\
    \ divisor(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpemim52lg.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpemim52lg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  \n    facs =\
    \ Vector{Int64}()\n    f = 2\n    while n > 1\n        while n % f == 0\n    \
    \        push!(facs, f)\n            n /= f\n        end\n        f += 1\n   \
    \ end\n    return facs\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n % 2 == 0\n        push!(prime_factors, 2)\n        n /= 2\n\
    \    end\n    for i in 3:sqrt(n)\n        while n % i == 0\n            push!(prime_factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    factors = []\n    while n%2 == 0\n        push!(factors, 2)\n    \
    \    n = n/2\n    end\n    factor = 3\n    while n > 1\n        while n%factor\
    \ == 0\n            push!(factors, factor)\n            n = n/factor\n       \
    \ end\n        factor += 2\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n<2\n \
    \       throw(DomainError(\"n should be positive integer >= 2\"))\n    end\n \
    \   res = Int64[]\n    factor = 2\n    while n>1\n        while n%factor == 0\n\
    \            push!(res, factor)\n            n /= factor\n        end\n      \
    \  factor += 1\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = Vector{Int64}(undef,\
    \ 0)\n    factor = 2\n    while n > 1\n        if n % factor == 0\n          \
    \  push!(v, factor)\n            n = n / factor\n        else\n            factor\
    \ += 1\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    s = Set()\n\
    \    c = n\n    for i in 2:n\n        while rem(c, i) == 0\n            c = c/i\n\
    \            push!(s, i)\n        end\n    end\n    return collect(s)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp37e0v65l.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp37e0v65l.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 19] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n"
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    j = 2\n    while n > 1\n        while n % j == 0\n            push!(prime_factors,\
    \ j)\n            n /= j\n        end\n        j += 1\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    f = 2\n    fs = []\n    while f <= isqrt(n)\n\
    \        if n % f == 0\n            push!(fs, f)\n            n = n \xF7 f\n \
    \       else\n            f += 1\n        end\n    end\n    push!(fs, n)\n   \
    \ return fs\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    while n%2==0\n        push!(factors,2)\n        n=n/2\n    end\n    k=3\n\
    \    while n>1\n        while n%k==0\n            push!(factors,k)\n         \
    \   n=n/k\n        end\n        k=k+2\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    factor = 2\n    while n != 1\n        while n % factor == 0\n \
    \           push!(factors, factor)\n            n /= factor\n        end\n   \
    \     factor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2 #return\
    \ empty vector if input is less than 2\n        return Int64[]\n    end\n    for\
    \ i in 2:n-1 #checking that n is a natural number\n        if n % i == 0\n   \
    \         return Int64[]\n        end\n    end\n    factors = Int64[] #vector\
    \ of factors\n    i = 2\n    while i <= n #while i is less than or equal to input\
    \ number\n        while n % i == 0 #if i is a factor of n\n            push!(factors,\
    \ i) #push i to the vector\n            n = n/i #now try to factorize n/i\n  \
    \      end\n        i = i + 1 #increment i\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0i03tr38.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp0i03tr38.jl:37\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:38\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:39\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:40\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:41\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: Int64[] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /share"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # use vector\
    \ instead of set to keep the order of addition\n    v = []\n    push!(v, factorize_helper(n))\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpctlczyq1.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpctlczyq1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factorize_helper not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factorize_helper not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factorize_helper not defined\n \
    \ Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factorize_helper not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # 0.\
    \ Start at 2 and 1 because we only have to check up to square root\n    # 1. Initialize\
    \ vector of factors to empty.\n    # 2. Initialize potential factor to 1.\n  \
    \  # 3. While potential factor is less than or equal to square root of n:\n  \
    \  # 3.1 If n is divisible by potential factor, add potential factor to vector\
    \ of factors\n    # 3.2 Divide n by potential factor\n    # 3.3 Increase potential\
    \ factor by 1.\n    # 4. If n is not 1, add it to vector of factors\n    # 5.\
    \ Return vector of factors\n    \n    factors = Int64[]\n    current_factor =\
    \ 2\n    while current_factor <= floor(sqrt(n))\n        if n % current_factor\
    \ == 0\n            push!(factors, current_factor)\n            n = n / current_factor\n\
    \        end\n        current_factor += 1\n    end\n    if n != 1\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi8b6sbwd.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpi8b6sbwd.jl:44\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:46\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:47\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:48\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    array = Int64[]\n\
    \    while n % 2 == 0\n        push!(array, 2)\n        n = n/2\n    end\n   \
    \ for i = 3:2:floor(Int64, sqrt(n))\n        while n % i == 0\n            push!(array,\
    \ i)\n            n = n/i\n        end\n    end\n    if n > 2\n        push!(array,\
    \ n)\n    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    divider =\
    \ 2\n    factors = Int64[]\n    while n > 1\n        if n % divider == 0\n   \
    \         push!(factors, divider)\n            n = n / divider\n        else\n\
    \            divider += 1\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factor = Int64[]\n\
    \    p = 2\n    while p*p <= n\n        while n % p == 0\n            push!(factor,\
    \ p)\n            n = n / p\n        end\n        p += 1\n    end\n    if n >\
    \ 1\n        push!(factor, n)\n    end\n    return factor\nend\nprintln(factorize(25))\n\
    println(factorize(70))\nprintln(factorize(8))\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: '[5, 5]

    [2, 5, 7]

    [2, 2, 2]

    Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:floor(Int64, sqrt(n))\n        while n % i == 0 \n       \
    \     push!(factors, i)\n            n /= i\n        end\n    end\n    if n >\
    \ 1\n        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Function\
    \ returns vector of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be vectored number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\n    factorization = Vector{Int64}()\n    prime = 2 \n    while prime <=\
    \ sqrt(n)\n        if n % prime == 0\n            push!(factorization, prime)\n\
    \            n = n/prime\n        else \n            prime += 1\n        end\n\
    \    end\n    push!(factorization, n)\n    return factorization\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    factor = find_smallest_prime_factor(n)\n    return\
    \ [factor] * int(log(n, factor))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptcevarln.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmptcevarln.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: find_smallest_prime_factor\
    \ not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmptcevarln.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptcevarln.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcevarln.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptcevarln.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: find_smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmptcevarln.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptcevarln.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcevarln.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptcevarln.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: find_smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmptcevarln.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptcevarln.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcevarln.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptcevarln.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: find_smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmptcevarln.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            factors =\
    \ push!(factors, i)\n            n = n / i\n        else\n            i += 1\n\
    \        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    factors = Int64[]\n    for i = 2:sqrt(n)\n  \
    \      if n % i == 0\n            push!(factors, i)\n            append!(factors,\
    \ factorize(div(n, i)))\n            return factors\n        end\n    end\n  \
    \  return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpze8ua75_.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpze8ua75_.jl:31\n  Test threw exception\n\
    \  Expression: candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpze8ua75_.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpze8ua75_.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze8ua75_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze8ua75_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpze8ua75_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpze8ua75_.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpze8ua75_.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze8ua75_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze8ua75_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpze8ua75_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpze8ua75_.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpze8ua75_.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze8ua75_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze8ua75_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpze8ua75_.jl:34\n  Test"
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    if n == 1\n        return factors\n    end\n    curr =\
    \ n\n    for i in 2:curr\n        if i > curr\n            break\n        end\n\
    \        if isprime(i) && curr % i == 0\n            if curr != i\n          \
    \      push!(factors, i)\n                curr = curr / i\n                push!(factors,\
    \ factorize(curr))\n                return factors\n            else\n       \
    \         push!(factors, i)\n                return factors\n            end\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbypx3300.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpbypx3300.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbypx3300.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbypx3300.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbypx3300.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpbypx3300.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbypx3300.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbypx3300.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbypx3300.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpbypx3300.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbypx3300.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbypx3300.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbypx3300.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpbypx3300.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbypx3300.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    s = []\n \
    \   for i in divisors(n)\n        if isprime(i)\n            push!(s, i)\n   \
    \     end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0vn6h3bn.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp0vn6h3bn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0vn6h3bn.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0vn6h3bn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vn6h3bn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0vn6h3bn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0vn6h3bn.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0vn6h3bn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vn6h3bn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0vn6h3bn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0vn6h3bn.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0vn6h3bn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vn6h3bn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0vn6h3bn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0vn6h3bn.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1659979542
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    x = collect(2:sqrt(n))\n\
    \    v = Vector{Int64}()\n    while n > 1\n        for i in x\n            if\
    \ isprime(i)\n                c = 0\n                while n % i == 0\n      \
    \              n = n / i\n                    c += 1\n                end\n  \
    \              if c > 0\n                    push!(v, i)\n                end\n\
    \            end\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factor_list\
    \ = [] \n    for i = 2:n \n        if mod(n, i) == 0 \n            factor_list\
    \ = [factor_list; factorize(i)] \n            n = div(n, i) \n        end \n \
    \   end \n    return factor_list \nend \n\"\"\" Count the number of divisors of\
    \ n.\n    >>> divisors(6)\n    4\n    >>> divisors(1)\n    1\n    >>> divisors(100)\n\
    \    9\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpzhztekia.jl:21\nin expression starting at /tmp/tmpzhztekia.jl:21\n"
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = Int64[]\n\
    \    # https://en.wikipedia.org/wiki/Integer_factorization\n    # for c in primes(ceil(Int,\
    \ log(n)))\n    for c in collect(2:ceil(Int, sqrt(n)))\n        # See https://docs.julialang.org/en/v1/manual/faq/#How-do-I-check-whether-a-value-is-a-prime-number-and-what-are-their-properties%3F-1\n\
    \        if isprime(c) == true\n            while rem(n, c) == 0\n           \
    \     push!(f, c)\n                n = div(n, c)\n            end\n        end\n\
    \    end\n    if n > 1\n        push!(f, n)\n    end\n    return f\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpg9wgdcfm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpg9wgdcfm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg9wgdcfm.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg9wgdcfm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9wgdcfm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg9wgdcfm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg9wgdcfm.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg9wgdcfm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9wgdcfm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg9wgdcfm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg9wgdcfm.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg9wgdcfm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9wgdcfm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg9wgdcfm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg9wgdcfm.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Write implementation\
    \ here\n    factors = Int64[]\n    i = 2\n    while n > 1\n        while n % i\
    \ == 0\n            push!(factors, i)\n            n /= i\n        end\n     \
    \   i += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    #if(n < 2)\n\
    \    #    return [-1]\n    #end\n    arr = []\n    for i in 2:n \n        if(n%i\
    \ == 0)\n            arr = append!(arr, i)\n            n = n/i\n            i\
    \ = i-1\n        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxwgjnact.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxwgjnact.jl:31\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxwgjnact.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxwgjnact.jl:29\ntest set: Test Failed at /tmp/tmpxwgjnact.jl:32\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwgjnact.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwgjnact.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwgjnact.jl:34\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxwgjnact.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxwgjnact.jl:29\ntest set: Test Failed at /tmp/tmpxwgjnact.jl:35\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwgjnact.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwgjnact.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwgjnact.jl:36\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979541
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    z = Int64[]\n\
    \    while n > 1\n        for i in primes(n)\n            while n % i == 0\n \
    \               push!(z, i)\n                n = n / i\n            end\n    \
    \    end\n    end\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq9awcuuh.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpq9awcuuh.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq9awcuuh.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9awcuuh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9awcuuh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq9awcuuh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq9awcuuh.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9awcuuh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9awcuuh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq9awcuuh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq9awcuuh.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9awcuuh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9awcuuh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq9awcuuh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq9awcuuh.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979542
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    primes = [2]\n    prime_factors = []\n    while\
    \ n != 1\n        for p in primes\n            if isprime(p) && n % p == 0\n \
    \               push!(prime_factors, p)\n                n = n / p\n         \
    \       break\n            end\n        end\n        push!(primes, last(primes)\
    \ + 1)\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpoc7unkyp.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpoc7unkyp.jl:34\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpoc7unkyp.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoc7unkyp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoc7unkyp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpoc7unkyp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpoc7unkyp.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoc7unkyp.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoc7unkyp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpoc7unkyp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpoc7unkyp.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoc7unkyp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoc7unkyp.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpoc7unkyp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpoc7unkyp.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while n > 1\n        while rem(n, divisor) == 0\n \
    \           push!(factors, divisor)\n            n = div(n, divisor)\n       \
    \ end\n        divisor += 1\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n > 1\n        for factor in 2:floor(Int64,sqrt(n))\n      \
    \      if n % factor == 0\n                push!(prime_factors, factor)\n    \
    \            n = div(n, factor)\n                break\n            end\n    \
    \    end\n        if n > 1\n            push!(prime_factors, n)\n            n\
    \ = 1\n        end\n    end\n    return prime_factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnxvrpiu6.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpnxvrpiu6.jl:35\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnxvrpiu6.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnxvrpiu6.jl:32\ntest set: Test Failed at /tmp/tmpnxvrpiu6.jl:37\n\
    \  Expression: candidate(3249) == [3, 3, 19, 19]\n   Evaluated: [3, 1083] == [3,\
    \ 3, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnxvrpiu6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnxvrpiu6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnxvrpiu6.jl:38\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 61731] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnxvrpiu6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnxvrpiu6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnxvrpiu6.jl:39\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 6859] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnxvrpiu6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnxvrpiu6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnxvrpiu6.jl:40\n  Expression: candidate(18) == [2, 3, 3]\n\
    \   Evaluated: [2, 9] == [2, 3, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979541
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    tmp = n\n    p = 2\n    while tmp != 1\n        if tmp\
    \ % p == 0\n            push!(factors, p)\n            tmp = tmp \xF7 p\n    \
    \    else\n            p += 1\n        end\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\
    \    for i in prime_numbers(isqrt(n))\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1mf40c5u.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp1mf40c5u.jl:36\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: prime_numbers not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1mf40c5u.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mf40c5u.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mf40c5u.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1mf40c5u.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1mf40c5u.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mf40c5u.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mf40c5u.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1mf40c5u.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1mf40c5u.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mf40c5u.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mf40c5u.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1mf40c5u.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: prime_numbers not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1mf40c5u.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  timestamp: 1659979542
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    @assert n>0\n\
    \    factorization = Int64[]\n    i = 2\n    while n!=1\n        # find first\
    \ prime factor\n        if isprime(i) \n            while n%i==0\n           \
    \     push!(factorization, i)\n                n = n/i\n            end\n    \
    \    end\n        i += 1\n    end\n    return factorization\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbnjyfxyc.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpbnjyfxyc.jl:32\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbnjyfxyc.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnjyfxyc.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnjyfxyc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbnjyfxyc.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbnjyfxyc.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnjyfxyc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnjyfxyc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbnjyfxyc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbnjyfxyc.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnjyfxyc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnjyfxyc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbnjyfxyc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbnjyfxyc.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979542
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = divisors(n)\n\
    \    res = []\n    i = 1\n    while length(primes) > 0\n        if n % primes[i]\
    \ == 0\n            res = [res; primes[i]]\n            n = n / primes[i]\n  \
    \      else\n            i += 1\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpherbfdqi.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpherbfdqi.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpherbfdqi.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpherbfdqi.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpherbfdqi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpherbfdqi.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpherbfdqi.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpherbfdqi.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpherbfdqi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpherbfdqi.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpherbfdqi.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpherbfdqi.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpherbfdqi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpherbfdqi.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpherbfdqi.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1659979542
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    if !isprime(n)\n\
    \        return vcat(factorize(factor(n))...)\n    else\n        return [n]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpn9qd6v2w.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpn9qd6v2w.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpn9qd6v2w.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn9qd6v2w.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn9qd6v2w.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn9qd6v2w.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpn9qd6v2w.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn9qd6v2w.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn9qd6v2w.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn9qd6v2w.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpn9qd6v2w.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn9qd6v2w.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn9qd6v2w.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn9qd6v2w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpn9qd6v2w.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    divisor = 2\n    while n > 1\n        while n % divisor\
    \ == 0\n            push!(factors, divisor)\n            n /= divisor\n      \
    \  end\n        divisor += 1\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    i=2\n    while n>1\n        if n%i==0\n            push!(factors,i)\n   \
    \         n=n/i\n        else\n            i+=1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # initialize\
    \ the output vector\n    output = Vector{Int64}()\n    # we will determine the\
    \ integer divisor until it is less than the square root of input number\n    k\
    \ = Int64(1)\n    while (k <= sqrt(n))\n        # until then, if the input number\
    \ is divisible by the iterator\n        if (mod(n, k) == 0)\n            # then\
    \ we append this iterator to the output vector\n            push!(output, k)\n\
    \            # now we update the input number to be quotient of the original input\
    \ number divided by our last divisor\n            n = div(n, k)\n            #\
    \ note that we have to iterate this divisor again in case the input number is\
    \ divisible by the same number\n            k = k - 1\n        end\n        #\
    \ iterate the divisor\n        k = k + 1\n    end\n    # lastly, if we are not\
    \ done yet, we need to append the last integer to the output vector\n    push!(output,\
    \ n)\n    # now we return the output vector\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979544
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    pfactors =\
    \ Int64[]\n    nn = n\n    while nn > 1\n        a, b = factor(nn)\n        push!(pfactors,\
    \ a)\n        nn = b\n    end\n    return pfactors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp76x80xkk.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp76x80xkk.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp76x80xkk.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76x80xkk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76x80xkk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp76x80xkk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp76x80xkk.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76x80xkk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76x80xkk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp76x80xkk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp76x80xkk.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76x80xkk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76x80xkk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp76x80xkk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp76x80xkk.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979543
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    while n % 3 == 0\n        push!(factors, 3)\n        n /= 3\n    end\n  \
    \  i = 5\n    while i*i <= n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 1\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if isprime(n)\n\
    \        return [n]\n    end\n    vec = Int64[]\n    for p in primes(n/2)\n  \
    \      k = 0\n        while (n%p == 0)\n            n = n/p\n            k +=\
    \ 1\n        end\n        for i in 1:k\n            push!(vec, p)\n        end\n\
    \    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq5sqlzeq.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpq5sqlzeq.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq5sqlzeq.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5sqlzeq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5sqlzeq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq5sqlzeq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq5sqlzeq.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5sqlzeq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5sqlzeq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq5sqlzeq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq5sqlzeq.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5sqlzeq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5sqlzeq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq5sqlzeq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpq5sqlzeq.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979543
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while rem(n, i) == 0\n        \
    \    push!(factors, i)\n            n = div(n, i)\n        end\n        i += 1\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Vector{Int64}()\
    \ # (1)\n    i = 2\n    # (2)\n    while n != 1\n        if n % i == 0\n     \
    \       push!(result, i) # (3)\n            n = n / i\n        else\n        \
    \    i += 1\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorized\
    \ = Int64[]\n    factor = 2\n    while n > 1\n        if n % factor == 0\n   \
    \         push!(factorized, factor)\n            n = n / factor\n        else\n\
    \            factor += 1\n        end\n    end\n    return factorized\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # variable\
    \ to store result of factorization\n    result = Int64[]\n    # variable to store\
    \ possible prime factor\n    current_prime = 2\n    # while there are still numbers\
    \ left to factorize\n    while n > 1\n        # while remainder of division of\
    \ n by current_prime is 0\n        while mod(n, current_prime) == 0\n        \
    \    # reduce number to be factorized by current_prime\n            n = div(n,\
    \ current_prime)\n            # add current_prime to list of factors\n       \
    \     push!(result, current_prime)\n        end\n        # increase current_prime\
    \ by 1\n        current_prime += 1\n    end\n    # return list of factors\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # Prime\
    \ numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n    \n    # If n is a prime number itself\
    \ - return vector of size one\n    if findfirst(primes .== n) != nothing\n   \
    \     return [n]\n    end\n    \n    # Create a vector of factors with zero elements\n\
    \    factors = zeros(Int64, n)\n    \n    # Indicator of correct factorization\n\
    \    correct = true\n    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4j72ybmh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4j72ybmh.jl:1\n\
    in expression starting at /tmp/tmp4j72ybmh.jl:1\n"
  stdout: ''
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = Vector{Int64}()\n    factor = 2\n    while factor * factor <= n\n        if\
    \ mod(n, factor) == 0\n            push!(prime_factors, factor)\n            n\
    \ = div(n, factor)\n        else\n            factor += 1\n        end\n    end\n\
    \    push!(prime_factors, n)\n    return prime_factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    div = 2\n\
    \    factors = Vector{Int64}()\n    sqrtn = round(Int64, sqrt(n))\n    while n\
    \ > 1 && div <= sqrtn\n        q, r = divrem(n, div)\n        if r == 0\n    \
    \        push!(factors, div)\n            n = q\n        else\n            div\
    \ += 1\n        end\n    end\n    push!(factors, n)\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp67sjrsok.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp67sjrsok.jl:33\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2, 2, 1] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp67sjrsok.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp67sjrsok.jl:31\ntest set: Test Failed at /tmp/tmp67sjrsok.jl:34\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 2, 2, 1] == [2, 2,\
    \ 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67sjrsok.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67sjrsok.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp67sjrsok.jl:36\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 3, 19, 19, 1] == [3, 3, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67sjrsok.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67sjrsok.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp67sjrsok.jl:37\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 3, 3, 19, 19, 19, 1] == [3, 3, 3, 19, 19,\
    \ 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67sjrsok.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67sjrsok.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp67sjrsok.jl:38\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 19, 19, 1] == [3, 19, 19, 19]\nStacktrace:\n\
    \ [1] mac"
  timestamp: 1659979544
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\"\n \
    \   Output = factorized_vector(Int64)\n    \"\"\"\n    factors = Vector{Int64}()\
    \ # initialize vector\n    while n%2 == 0\n        push!(factors, 2) # add smallest\
    \ possible factor\n        n = n/2 # reduce n\n    end\n    for k in 3:sqrt(n)\n\
    \        while n%k == 0\n            push!(factors, k) # add k to vector\n   \
    \         n = n/k # reduce n\n        end\n    end\n    if n > 2 # if n is prime,\
    \ add to vector\n        push!(factors, n)\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = Int64[]\n    factor = 2\n    \n    while (n != 1)\n        if (n % factor\
    \ == 0)\n            push!(factors, factor)\n            n = n / factor\n    \
    \    else\n            factor += 1\n        end\n    end\n    \n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Vector to\
    \ store the factors\n    fac = Vector{Int64}(Int64[])\n    # Base case\n    if\
    \ n <= 1\n        return fac\n    end\n    # Check if number is even and push\
    \ it to vector\n    while (n % 2 == 0)\n        push!(fac, 2)\n        n = n /\
    \ 2\n    end\n    # Division by odd factors\n    for i = 3:2:floor(sqrt(n))\n\
    \        while (n % i == 0)\n            push!(fac, i)\n            n = n / i\n\
    \        end\n    end\n    # If n is a prime number\n    if n > 2\n        push!(fac,\
    \ n)\n    end\n    # Sorting the vector (optional)\n    sort!(fac)\n    return\
    \ fac\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979542
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # Initialization\
    \ of vector of prime factors, variable for producing a factorization, variable\
    \ for counting number of divisors\n    prime_factors = []\n    factorization =\
    \ n\n    divisor = 2\n    \n    # when factorization is equal to 1, programm will\
    \ be finished\n    while factorization != 1\n        if isprime(divisor) && factorization\
    \ % divisor == 0 # I prefer this way, but if you'd like, it's possibe to replace\
    \ it with: if factorization % divisor == 0 && isprime(divisor)\n            #\
    \ counting number of this prime factor\n            count = 0\n            while\
    \ factorization % divisor == 0\n                factorization = factorization\
    \ / divisor\n                count += 1\n            end\n            # addition\
    \ of prime factor\n            for i in 1:count\n                push!(prime_factors,\
    \ divisor)\n            end\n        end\n        divisor += 1\n    end\n    return\
    \ prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbu6acrdw.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpbu6acrdw.jl:41\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbu6acrdw.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu6acrdw.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu6acrdw.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbu6acrdw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbu6acrdw.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu6acrdw.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu6acrdw.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbu6acrdw.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbu6acrdw.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu6acrdw.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu6acrdw.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbu6acrdw.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbu6acrdw.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979545
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = Int64[]\n    i = 2\n    while n > 1\n        while rem(n, i) == 0\n      \
    \      push!(prime_factors, i)\n            n = n/i\n        end\n        i +=\
    \ 1\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}([])\n    i = 2\n    while n > 1 \n        if n % i == 0\n    \
    \        n = n / i\n            push!(factors, i)\n        else\n            i\
    \ += 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979542
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # ---\n  \
    \  # TODO: code goes here\n    # ---\n    # return vector of prime factors of\
    \ given integer in the order from smallest to largest \nend\n \n \nfactorize(8)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}'''
  stdout: None
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n != 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n = n/i\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979542
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    A = []\n \
    \   while n > 1\n        for i in 2:n\n            if n % i == 0\n           \
    \     n = n / i\n                push!(A, i)\n                break\n        \
    \    end\n        end\n    end\n    A\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # TODO:\n\
    \    # Complete the function\n    # Hint: You may find `factor` function useful\n\
    \    # \n    # Return list of factors. \n    #\n    pass\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpkvqx6vy9.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpkvqx6vy9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkvqx6vy9.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvqx6vy9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvqx6vy9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkvqx6vy9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: pass not defined\n  Stacktrace:\n \
    \  [1] factorize(n::Int64)\n     @ Main /tmp/tmpkvqx6vy9.jl:18\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkvqx6vy9.jl:26 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvqx6vy9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkvqx6vy9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkvqx6vy9.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvqx6vy9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvqx6vy9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkvqx6vy9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkvqx6vy9.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvqx6"
  timestamp: 1659979546
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = [] #here we store the prime factors\n    prime_factors_temp = [] #here we\
    \ store the prime factors temporary\n    i = 0 #helper variable\n    temp = 0\
    \ #helper variable\n    while(n != 1)\n        #i = 1\n        while(i < n+1)\n\
    \            if(rem(n,i) == 0)#if reminder is 0, then i is a divisor\n       \
    \         temp = i\n                break\n            end\n            i += 1\n\
    \        end\n        prime_factors_temp = factorize(temp)\n        #if temp is\
    \ prime\n        if(length(prime_factors_temp) == 1)\n            n = n/temp\n\
    \            push!(prime_factors,temp)\n        else\n            n = n/temp\n\
    \            for i in prime_factors_temp\n                push!(prime_factors,i)\n\
    \            end\n        end\n    end\n    return prime_factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpio0k4wsj.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpio0k4wsj.jl:44\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] factorize(n::Int64)\n     @\
    \ Main /tmp/tmpio0k4wsj.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpio0k4wsj.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpio0k4wsj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpio0k4wsj.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] factorize(n::Int64)\n     @\
    \ Main /tmp/tmpio0k4wsj.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpio0k4wsj.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpio0k4wsj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpio0k4wsj.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] factorize(n::Int64)\n     @\
    \ Main /tmp/tmpio0k4wsj.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpio0k4wsj.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpio0k4wsj.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpio0k4wsj.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  DivideError: integer division error\n  Stacktrace:\n\
    \   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] factorize(n::Int64)\n     @"
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    factors = Int64[]\n    i = 2\n    while n > 1\n\
    \        while n % i == 0\n            push!(factors, i)\n            n /= i\n\
    \        end\n        i += 1\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = primes(n)\n\
    \    factors = Int64[]\n    for p in primes\n        while n % p == 0\n      \
    \      push!(factors, p)\n            n /= p\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp8lny2ab7.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp8lny2ab7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8lny2ab7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8lny2ab7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8lny2ab7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8lny2ab7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8lny2ab7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8lny2ab7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8lny2ab7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8lny2ab7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8lny2ab7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8lny2ab7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8lny2ab7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8lny2ab7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8lny2ab7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n          \
    \  push!(factors, i)\n            n /= i\n        end\n        i += 1\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = []\n \
    \   count = 0\n    for i in 2:n\n        if n%i == 0\n            while n%i ==\
    \ 0\n                n = n/i\n                count += 1\n            end\n  \
    \          push!(v, i)\n        end\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1zt6gh9q.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp1zt6gh9q.jl:31\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1zt6gh9q.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1zt6gh9q.jl:29\ntest set: Test Failed at /tmp/tmp1zt6gh9q.jl:32\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zt6gh9q.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zt6gh9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1zt6gh9q.jl:34\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1zt6gh9q.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1zt6gh9q.jl:29\ntest set: Test Failed at /tmp/tmp1zt6gh9q.jl:35\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 19]\
    \ == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zt6gh9q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zt6gh9q.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1zt6gh9q.jl:36\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659979545
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    pass\nend\n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp44lgy4bg.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp44lgy4bg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44lgy4bg.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44lgy4bg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44lgy4bg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp44lgy4bg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: pass not defined\n  Stacktrace:\n \
    \  [1] factorize(n::Int64)\n     @ Main /tmp/tmp44lgy4bg.jl:12\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp44lgy4bg.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44lgy4bg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp44lgy4bg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44lgy4bg.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44lgy4bg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44lgy4bg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp44lgy4bg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp44lgy4bg.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44lgy"
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while n > 1\n        while n % divisor == 0\n     \
    \       push!(factors, divisor)\n            n /= divisor\n        end\n     \
    \   divisor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n\
    \    factor = 2\n    while n > 1\n        if n % factor == 0\n            push!(factors,\
    \ factor)\n            n = n / factor\n        else\n            factor += 1\n\
    \        end\n    end\n    return factors\nend\n@test factorize(8) == [2, 2, 2]\n\
    @test factorize(25) == [5, 5]\n@test factorize(70) == [2, 5, 7]\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpxj_qpl64.jl:34

    in expression starting at /tmp/tmpxj_qpl64.jl:34

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        # divmod(n, i) returns (quotient,\
    \ modulo) \n        q, r = divmod(n, i)\n        if r == 0\n            push!(factors,\
    \ i)\n            n = q\n        else\n            i += 1\n        end\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppkcbw451.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmppkcbw451.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divmod not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppkcbw451.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppkcbw451.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppkcbw451.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppkcbw451.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divmod not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppkcbw451.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppkcbw451.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppkcbw451.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppkcbw451.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divmod not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppkcbw451.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppkcbw451.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppkcbw451.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppkcbw451.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divmod not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppkcbw451.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    # \u043E\u0441\u0442\u0430\u0442\u043E\u043A \u043E\u0442 \u0434\u0435\
    \u043B\u0435\u043D\u0438\u044F \u043D\u0430 2 (\u043F\u043E\u043A\u0430 \u043D\
    \u0435\u0447\u0435\u0442\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E)\n \
    \   while iseven(n)\n        push!(prime_factors, 2)\n        n = div(n, 2)\n\
    \    end\n    # \u0434\u0435\u043B\u0438\u043C \u043D\u0430 \u043D\u0435\u0447\
    \u0435\u0442\u043D\u044B\u0435 \u0447\u0438\u0441\u043B\u0430\n    f = 3\n   \
    \ while f * f <= n\n        if iseven(f)\n            f += 1\n        elseif mod(n,\
    \ f) == 0\n            push!(prime_factors, f)\n            n = div(n, f)\n  \
    \      else\n            f += 2\n        end\n    end\n    if n > 1\n        push!(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while (n != 1)\n        factor = first(filter(x -> n % x == 0, primes(Int64(sqrt(n)))))\n\
    \        n = n/factor\n        push!(factors, factor)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpu_s0x9iu.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpu_s0x9iu.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  InexactError: Int64(1.4142135623730951)\n\
    \  Stacktrace:\n   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] factorize(n::Int64)\n\
    \     @ Main /tmp/tmpu_s0x9iu.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu_s0x9iu.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu_s0x9iu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpu_s0x9iu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpu_s0x9iu.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu_s0x9iu.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_s0x9iu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpu_s0x9iu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  InexactError: Int64(2.8284271247461903)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] factorize(n::Int64)\n\
    \     @ Main /tmp/tmpu_s0x9iu.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu_s0x9iu.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu_s0x9iu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpu_s0x9iu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  InexactError: Int64(7.54983443527075)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] factorize(n::Int64)\n\
    \     @"
  timestamp: 1659979547
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    current_number = n\n    fact = []\n    while current_number > 1\n\
    \        for i in primes(current_number)\n            while current_number % i\
    \ == 0\n                push!(fact, i)\n                current_number = current_number\
    \ / i\n            end\n        end\n    end\n    return fact\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5xf1c6li.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp5xf1c6li.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp5xf1c6li.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xf1c6li.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xf1c6li.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5xf1c6li.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp5xf1c6li.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xf1c6li.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xf1c6li.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5xf1c6li.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp5xf1c6li.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xf1c6li.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xf1c6li.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5xf1c6li.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp5xf1c6li.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    i = 2\n    while n > 1\n        while n % i == 0\n    \
    \        n /= i\n            push!(factors, i)\n        end\n        i += 1\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979543
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    while n % 2 == 0\n        push!(result, 2)\n        n /= 2\n    end\n   \
    \ i = 3\n    while i <= n\n        while n % i == 0\n            push!(result,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    assert(n>=2,\
    \ \"Input number must be greater or equal to 2.\")\n    i = 2\n    factors = Vector{Int64}()\n\
    \    while n > 1\n        if rem(n, i) == 0\n            push!(factors, i)\n \
    \           n = div(n, i)\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6tw8tqx8.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp6tw8tqx8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6tw8tqx8.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6tw8tqx8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6tw8tqx8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6tw8tqx8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6tw8tqx8.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6tw8tqx8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6tw8tqx8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6tw8tqx8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6tw8tqx8.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6tw8tqx8.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6tw8tqx8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6tw8tqx8.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6tw8tqx8.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979547
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    is_prime(m)\
    \ = all(rem(m, i) != 0 for i in 2:floor(Int, sqrt(m)))\n    prime_factors = []\n\
    \    while n != 1\n        for i in 2:n\n            if is_prime(i) && rem(n,\
    \ i) == 0\n                push!(prime_factors, i)\n                n = div(n,\
    \ i)\n                break\n            end\n        end\n    end\n    return\
    \ prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result::Vector{Int64}\
    \ = []\n    for i in primes(n)\n        if n % i == 0\n            n = n / i\n\
    \            push!(result, i)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmkplsdb_.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpmkplsdb_.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmkplsdb_.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmkplsdb_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmkplsdb_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmkplsdb_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmkplsdb_.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmkplsdb_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmkplsdb_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmkplsdb_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmkplsdb_.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmkplsdb_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmkplsdb_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmkplsdb_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmkplsdb_.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979547
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    for i in 2:n\n\
    \        if n % i == 0\n            factors = [i]\n            factors = append!(factors,\
    \ factorize(n/i))\n            return factors\n        end\n    end\n    return\
    \ [n]\nend\n@assert factorize(8) == [2, 2, 2]\n@assert factorize(25) == [5, 5]\n\
    @assert factorize(70) == [2, 5, 7]\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching factorize(::Float64)\nClosest
    candidates are:\n  factorize(!Matched::Int64) at /tmp/tmpeflfcaex.jl:11\nStacktrace:\n
    [1] factorize('''
  stdout: None
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    is_prime(x::Int64) = x == 2 || x > 2 && rem(x, 2) != 0 && all(rem(x,\
    \ i) != 0 for i in 3:2:floor(Int, sqrt(x)))\n    for i in 1:n\n        if is_prime(i)\
    \ && rem(n, i) == 0\n            push!(prime_factors, i)\n            n = n /\
    \ i\n            i = 1\n        end\n    end\n    return prime_factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsvvr4w21.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpsvvr4w21.jl:29\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsvvr4w21.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsvvr4w21.jl:27\ntest set: Test Failed at /tmp/tmpsvvr4w21.jl:30\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvvr4w21.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvvr4w21.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsvvr4w21.jl:32\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsvvr4w21.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsvvr4w21.jl:27\ntest set: Test Failed at /tmp/tmpsvvr4w21.jl:33\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 19]\
    \ == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvvr4w21.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvvr4w21.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsvvr4w21.jl:34\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659979546
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    prime_factors=[]\n    function factorize(i::Int64)\n        if i == 1\n \
    \           return\n        end\n        k=2\n        while k<=i\n           \
    \ if i%k==0\n                factors=push!(factors,k)\n                factorize(i//k)\n\
    \                break\n            end\n            k+=1\n        end\n    end\n\
    \    factorize(n)\n    for i in factors\n        if isprime(i)\n            prime_factors=push!(prime_factors,i)\n\
    \        end\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo3hszbjr.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpo3hszbjr.jl:41\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching (::var\"\
    #factorize#1\")(::Rational{Int64})\n  Closest candidates are:\n    (::var\"#factorize#1\"\
    )(!Matched::Int64) at /tmp/tmpo3hszbjr.jl:14\n  Stacktrace:\n   [1] (::var\"#factorize#1\"\
    )(i::Int64)\n     @ Main /tmp/tmpo3hszbjr.jl:22\n   [2] factorize(n::Int64)\n\
    \     @ Main /tmp/tmpo3hszbjr.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo3hszbjr.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo3hszbjr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpo3hszbjr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching (::var\"#factorize#1\"\
    )(::Rational{Int64})\n  Closest candidates are:\n    (::var\"#factorize#1\")(!Matched::Int64)\
    \ at /tmp/tmpo3hszbjr.jl:14\n  Stacktrace:\n   [1] (::var\"#factorize#1\")(i::Int64)\n\
    \     @ Main /tmp/tmpo3hszbjr.jl:22\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmpo3hszbjr.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo3hszbjr.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo3hszbjr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpo3hszbjr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching (::var\"#factorize#1\"\
    )(::Rational{Int64})\n  Closest candidates are:\n    (::var\"#factorize#1\")(!Matched::Int64)\
    \ at /tmp/tmpo3hszbjr.jl:14\n  Stacktrace:\n   [1] (::var\"#factorize#1\")(i::Int64)\n\
    \     @ Main /tmp/tmpo3hszbjr.jl:22\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmpo3hszbjr.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes"
  timestamp: 1659979548
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return Vector{Int64}()\n    end\n    factors = Vector{Int64}()\n    factor\
    \ = 2\n    while n > 1\n        while n % factor == 0\n            push!(factors,\
    \ factor)\n            n /= factor\n        end\n        factor += 1\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Vector of\
    \ factors\n    factors = Int64[]\n    # Vector of prime numbers\n    prime_numbers\
    \ = [2]\n    # If given integer is not greater than 1\n    if n < 2\n        return\
    \ factors\n    end\n    # A loop over all prime numbers\n    for prime in prime_numbers\n\
    \        # If a given integer cannot be divided by a given prime number\n    \
    \    while n % prime == 0\n            # A given integer is divided by a given\
    \ prime number\n            n /= prime\n            # A given prime number is\
    \ added to the vector of factors\n            push!(factors, prime)\n        end\n\
    \        # If a given integer is greater than 1\n        if n > 1\n          \
    \  # A given prime number is added to the vector of prime numbers\n          \
    \  push!(prime_numbers, prime + 1)\n        end\n    end\n    # Vector of factors\
    \ is returned\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    assert(n>=1,\
    \ \"Provided number should be positive integer\")\n    factorization = Vector{Int64}()\n\
    \    factor = 2\n    while n > 1\n        if n % factor == 0\n            push!(factorization,\
    \ factor)\n            n = n / factor\n        else\n            factor += 1\n\
    \        end\n    end\n    return factorization\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpflktzdrp.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpflktzdrp.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpflktzdrp.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflktzdrp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflktzdrp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpflktzdrp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpflktzdrp.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflktzdrp.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflktzdrp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpflktzdrp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpflktzdrp.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpflktzdrp.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpflktzdrp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpflktzdrp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpflktzdrp.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979547
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    prime_number = 2\n    while n > 1\n        while n % prime_number\
    \ == 0\n            push!(prime_factors, prime_number)\n            n /= prime_number\n\
    \        end\n        prime_number += 1\n    end\n    return prime_factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979544
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = []\n \
    \   i = 2\n    while n > 1\n        while n % i == 0\n            n /= i\n   \
    \         push!(v, i)\n        end\n        i += 1\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979545
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = Vector{Int64}()\n\
    \    i = 2\n    while n > 1\n        while n % i == 0\n            push!(f, i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return f\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return factorize(n::Int128)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo5h_au9v.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpo5h_au9v.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  TypeError: in typeassert, expected Int128,\
    \ got a value of type Int64\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @\
    \ Main /tmp/tmpo5h_au9v.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5h_au9v.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5h_au9v.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo5h_au9v.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  TypeError: in typeassert, expected Int128, got a value\
    \ of type Int64\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpo5h_au9v.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5h_au9v.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5h_au9v.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo5h_au9v.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  TypeError: in typeassert, expected Int128, got\
    \ a value of type Int64\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main\
    \ /tmp/tmpo5h_au9v.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5h_au9v.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5h_au9v.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo5h_au9v.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  TypeError: in typeassert, expected Int128, got a\
    \ value of type Int64\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main\
    \ /tmp/tmpo5h_au9v.jl:22\n   "
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    dividend = n\n    primes = primes_up_to(n)\n    for p in primes\n\
    \        if dividend % p == 0\n            push!(prime_factors, p)\n         \
    \   dividend = dividend / p\n        end\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmdumqr09.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpmdumqr09.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes_up_to not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmdumqr09.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmdumqr09.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmdumqr09.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpmdumqr09.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes_up_to not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmdumqr09.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmdumqr09.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmdumqr09.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpmdumqr09.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes_up_to not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmdumqr09.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmdumqr09.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmdumqr09.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpmdumqr09.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes_up_to not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmdumqr09.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  timestamp: 1659979548
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n != 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        end\n        i += 1\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979545
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = zeros(Int64,\
    \ 0)\n    for i in 2:n\n        if isprime(i) && n % i == 0\n            v = [v;\
    \ i]\n            n = div(n, i)\n            i -= 1\n        end\n    end\n  \
    \  return v\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpuy2szrb6.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpuy2szrb6.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpuy2szrb6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy2szrb6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy2szrb6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuy2szrb6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpuy2szrb6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy2szrb6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy2szrb6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuy2szrb6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpuy2szrb6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy2szrb6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy2szrb6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuy2szrb6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpuy2szrb6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979549
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    for divisor in 2:n-1\n        if divisor in divisors(n)\n\
    \            push!(factors, divisor)\n            n = n/divisor\n        end\n\
    \    end\n    if n in divisors(n)\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1go1wsqt.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1go1wsqt.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1go1wsqt.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1go1wsqt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1go1wsqt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1go1wsqt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1go1wsqt.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1go1wsqt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1go1wsqt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1go1wsqt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1go1wsqt.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1go1wsqt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1go1wsqt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1go1wsqt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1go1wsqt.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = primes_less_than(n)\n\
    \    factors = Vector{Int64}()\n    for p in primes\n        pcount = 0\n    \
    \    while n % p == 0\n            n /= p\n            pcount += 1\n        end\n\
    \        if pcount > 0\n            append!(factors, fill(p, pcount))\n      \
    \  end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqya02rgd.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpqya02rgd.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes_less_than not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqya02rgd.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqya02rgd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqya02rgd.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqya02rgd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes_less_than not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqya02rgd.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqya02rgd.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqya02rgd.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqya02rgd.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes_less_than not defined\n \
    \ Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqya02rgd.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqya02rgd.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqya02rgd.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqya02rgd.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes_less_than not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqya02rgd.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    for i in 2:n # check for every number from 2 to n if it is divisor\n\
    \        if n % i == 0 # if yes, it is a prime factor\n            push!(prime_factors,\
    \ i) # add it to vector of factors\n            n = n / i # check for other factors\
    \ for reduced value of n\n            i = 1 # reset i to 1 to check for all factors\n\
    \        end\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3b93eftb.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp3b93eftb.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3b93eftb.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3b93eftb.jl:26\ntest set: Test Failed at /tmp/tmp3b93eftb.jl:29\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3b93eftb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3b93eftb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3b93eftb.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3b93eftb.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3b93eftb.jl:26\ntest set: Test Failed at /tmp/tmp3b93eftb.jl:32\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3b93eftb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3b93eftb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3b93eftb.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979548
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    k = 1\n    while n > 1\n        k += 1\n        while n\
    \ % k == 0\n            push!(factors, k)\n            n /= k\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979546
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = []\n    divisor = 2\n    while divisor <= n\n        while (n % divisor) ==\
    \ 0\n            push!(factorization, divisor)\n            n /= divisor\n   \
    \     end\n        divisor += 1\n    end\n    return factorization\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979546
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = sieve(n)\n\
    \    fact = []\n    for p in primes\n        while n % p == 0\n            n /=\
    \ p\n            push!(fact, p)\n        end\n    end\n    return fact\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplfrfwifz.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmplfrfwifz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: sieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplfrfwifz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfrfwifz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfrfwifz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplfrfwifz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: sieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplfrfwifz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfrfwifz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfrfwifz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplfrfwifz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: sieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplfrfwifz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfrfwifz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfrfwifz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplfrfwifz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: sieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmplfrfwifz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl"
  timestamp: 1659979549
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    if n==0\n        return 0\n    end\n    divisor = 2\n    result =\
    \ []\n    while divisor <= sqrt(n)\n        while (n % divisor == 0) && (n !=\
    \ divisor)\n            n = n / divisor\n            push!(result, divisor)\n\
    \        end\n        divisor += 1\n    end\n    push!(result, n)\n    return\
    \ result\nend\n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979546
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    #validation\n\
    \    if n == 1\n        return [1]\n    end\n    \n    #initialize prime factor\
    \ dictionary\n    prim_dic = Dict(key => 0 for key in [1:n]);\n    \n    #Initialize\
    \ factors vector\n    factors = Int64[]\n    \n    #iterate over all numbers\n\
    \    for i in 2:n\n        # if i is in prim_dic, it must be prime.\n        if\
    \ prim_dic[i] != 0\n            # record i as a prime factor\n            push!(factors,\
    \ i)\n            # remove all multiples of i\n            j = i + i\n       \
    \     while j <= n\n                prim_dic[j] = 0\n                j += i\n\
    \            end\n        end\n    end\n    \n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp25fxbr_v.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp25fxbr_v.jl:46\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  KeyError: key 2 not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{UnitRange{Int64}, Int64}, key::Int64)\n     @ Base ./dict.jl:481\n\
    \   [2] factorize(n::Int64)\n     @ Main /tmp/tmp25fxbr_v.jl:27\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp25fxbr_v.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp25fxbr_v.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp25fxbr_v.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  KeyError: key 2 not found\n  Stacktrace:\n   [1] getindex(h::Dict{UnitRange{Int64},\
    \ Int64}, key::Int64)\n     @ Base ./dict.jl:481\n   [2] factorize(n::Int64)\n\
    \     @ Main /tmp/tmp25fxbr_v.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp25fxbr_v.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp25fxbr_v.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp25fxbr_v.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  KeyError: key 2 not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{UnitRange{Int64}, Int64}, key::Int64)\n     @ Base ./dict.jl:481\n\
    \   [2] factorize(n::Int64)\n     @ Main /tmp/tmp25fxbr_v.jl:27\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp25fxbr_v.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp25fxbr_v.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp25fxbr_v.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  KeyError: key"
  timestamp: 1659979550
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    for i in 2:n\n        if n%i == 0\n            push!(factors,\
    \ i)\n            n /= i\n            i -= 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3ep_f3j2.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp3ep_f3j2.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ep_f3j2.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3ep_f3j2.jl:26\ntest set: Test Failed at /tmp/tmp3ep_f3j2.jl:29\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ep_f3j2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ep_f3j2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3ep_f3j2.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ep_f3j2.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3ep_f3j2.jl:26\ntest set: Test Failed at /tmp/tmp3ep_f3j2.jl:32\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ep_f3j2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ep_f3j2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3ep_f3j2.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979549
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    if n<2\n\
    \        println(\"Error, insert an integer greater than 1\")\n        return(0)\n\
    \    end\n    #if n<1\n    #    println(\"Error, insert an integer\")\n    # \
    \   return(0)\n    #end\n    \n    factors=Int64[]\n    prime_index=1\n    while\
    \ n>1\n        if n%prime(prime_index)==0\n            n/=prime(prime_index)\n\
    \            push!(factors,prime(prime_index))\n        else\n            prime_index+=1\n\
    \        end\n    end\n    factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmps9_jd8g1.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmps9_jd8g1.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmps9_jd8g1.jl:25\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9_jd8g1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9_jd8g1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmps9_jd8g1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmps9_jd8g1.jl:25\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9_jd8g1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9_jd8g1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmps9_jd8g1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmps9_jd8g1.jl:25\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9_jd8g1.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9_jd8g1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmps9_jd8g1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmps9_jd8g1.jl:25\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps"
  timestamp: 1659979550
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # vector\
    \ to store the primes factorization\n    factors = Int64[]\n    \n    # square\
    \ root of n gives a upper bound for the loop below\n    nsqrt = ceil(Int64, sqrt(n))\n\
    \    \n    for i = 2:nsqrt\n        #if prime, add i as many times as it divides\
    \ n\n        if (isprime(i) == true) && (n % i == 0)\n            push!(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    \n    # if n is not 1 then\
    \ it has to be a prime greater than its sqrt\n    if n != 1\n        push!(factors,\
    \ n)\n    end\n    \n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpkmulfz0p.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpkmulfz0p.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkmulfz0p.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmulfz0p.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmulfz0p.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpkmulfz0p.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkmulfz0p.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmulfz0p.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmulfz0p.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpkmulfz0p.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkmulfz0p.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkmulfz0p.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkmulfz0p.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpkmulfz0p.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkmulfz0p.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n != 1\n        while n % i == 0\n           \
    \ push!(factors, i)\n            n /= i\n        end\n        i += 1\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979547
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    if n==1\n\
    \        return [1]\n    end\n    if isprime(n)\n        return [n]\n    end\n\
    \    \n    factors = Int64[]\n    while n % 2 == 0\n        push!(factors, 2)\n\
    \        n /= 2\n    end\n    # Now n is odd.\n    f = 3\n    # Repeat until n\
    \ is 1\n    while n != 1\n        # While n is divisible by f\n        while n\
    \ % f == 0\n            push!(factors, f)\n            n /= f\n        end\n \
    \       f += 2\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_jo3j1ra.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp_jo3j1ra.jl:43\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_jo3j1ra.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_jo3j1ra.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_jo3j1ra.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp_jo3j1ra.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_jo3j1ra.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_jo3j1ra.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_jo3j1ra.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp_jo3j1ra.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_jo3j1ra.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_jo3j1ra.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_jo3j1ra.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp_jo3j1ra.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_jo3j1ra.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979550
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=Vector{Int64}()\n\
    \    i=2\n    while n>1\n        if isprime(i)\n            if n%i==0\n      \
    \          factors=push!(factors,i)\n                n=n//i\n            else\n\
    \                i+=1\n            end\n        else\n            i+=1\n     \
    \   end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqnz6rb_p.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpqnz6rb_p.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqnz6rb_p.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqnz6rb_p.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqnz6rb_p.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqnz6rb_p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqnz6rb_p.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqnz6rb_p.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqnz6rb_p.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqnz6rb_p.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqnz6rb_p.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqnz6rb_p.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqnz6rb_p.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqnz6rb_p.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpqnz6rb_p.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    while n % 3 == 0\n        push!(factors, 3)\n        n /= 3\n    end\n  \
    \  f = 5\n    while f * f <= n\n        while n % f == 0\n            push!(factors,\
    \ f)\n            n /= f\n        end\n        f += 2\n    end\n    if n > 1\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979547
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\"\n \
    \   \u0415\u0441\u043B\u0438 \u0447\u0438\u0441\u043B\u043E \u043C\u0435\u043D\
    \u044C\u0448\u0435 \u0434\u0432\u0443\u0445, \u0442\u043E \u043E\u043D\u043E \u043D\
    \u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043F\u0440\u043E\
    \u0441\u0442\u044B\u043C\n    \"\"\"\n    if n < 2\n        throw(ArgumentError())\n\
    \    end\n    \"\"\"\n    \u0415\u0441\u043B\u0438 \u0447\u0438\u0441\u043B\u043E\
    \ \u0440\u0430\u0432\u043D\u043E \u0434\u0432\u0443\u043C, \u0442\u043E \u043F\
    \u0440\u043E\u0441\u0442\u044B\u043C \u043E\u043D\u043E \u043D\u0435 \u044F\u0432\
    \u043B\u044F\u0435\u0442\u0441\u044F\n    \"\"\"\n    if n == 2\n        return\
    \ [1, 2]\n    end\n    \"\"\"\n    \u0415\u0441\u043B\u0438 \u0447\u0438\u0441\
    \u043B\u043E \u0434\u0435\u043B\u0438\u0442\u0441\u044F \u043D\u0430 \u0434\u0432\
    \u0430, \u0442\u043E \u043C\u044B \u0434\u043E\u0431\u0430\u0432\u043B\u044F\u0435\
    \u043C \u0432 \u0432\u0435\u043A\u0442\u043E\u0440 \u0435\u0434\u0438\u043D\u0438\
    \u0446\u0443 \u0438 \u0432\u044B\u0437\u044B\u0432\u0430\u0435\u043C \u0444\u0443\
    \u043D\u043A\u0446\u0438\u044E \u0441 \u0447\u0438\u0441\u043B\u043E\u043C \u043F\
    \u043E\u043B\u0443\u0447\u0435\u043D\u043D\u044B\u043C \u043F\u043E\u0441\u043B\
    \u0435 \u0434\u0435\u043B\u0435\u043D\u0438\u044F\n    \"\"\"\n    if n % 2 ==\
    \ 0\n        return vcat([1], factorize(div(n, 2)))\n    end\n    \"\"\"\n   \
    \ \u0415\u0441\u043B\u0438 \u0447\u0438\u0441\u043B\u043E \u043D\u0435 \u0434\u0435\
    \u043B\u0438\u0442\u0441\u044F \u043D\u0430 \u0434\u0432\u0430, \u0442\u043E \u0432\
    \u044B\u0437\u044B\u0432\u0430\u0435\u043C \u0444\u0443\u043D\u043A\u0446\u0438\
    \u044E \u0441 \u0447\u0438\u0441\u043B\u043E\u043C \u043F\u043E\u043B\u0443\u0447\
    \u0435\u043D\u043D\u044B\u043C \u043F\u043E\u0441\u043B\u0435 \u0434\u0435\u043B\
    \u0435\u043D\u0438\u044F\n    \"\"\"\n    if n % 2 != 0\n        return factorize(div(n,\
    \ 2))\n    end\n    \"\"\"\n    \u0415\u0441\u043B\u0438 \u0447\u0438\u0441\u043B\
    \u043E \u0434\u0435\u043B\u0438\u0442\u0441\u044F \u043D\u0430 \u0442\u0440\u0438\
    , \u0442\u043E \u043C\u044B \u0434\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C\
    \ \u0432 \u0432\u0435\u043A\u0442\u043E\u0440 \u0435\u0434\u0438\u043D\u0438\u0446\
    \u0443 \u0438 \u0432\u044B\u0437\u044B\u0432\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgzi5jtq.jl:1\nin expression starting at /tmp/tmprgzi5jtq.jl:1\n"
  stdout: ''
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for f in 2:n\n        if (n % f == 0)\n            n = n / f\n     \
    \       push!(factors, f)\n        end\n    end\n    return factors\nend\nfactorize(8)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8v0dj95o.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp8v0dj95o.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8v0dj95o.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8v0dj95o.jl:26\ntest set: Test Failed at /tmp/tmp8v0dj95o.jl:29\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v0dj95o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v0dj95o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8v0dj95o.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8v0dj95o.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8v0dj95o.jl:26\ntest set: Test Failed at /tmp/tmp8v0dj95o.jl:32\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8v0dj95o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8v0dj95o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8v0dj95o.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979549
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primeFactors\
    \ = primes(n)\n    nums = zeros(Int64, maximum(length(primeFactors), 1))\n   \
    \ k = 1\n    for factor in primeFactors\n        if n % factor == 0\n        \
    \    nums[k] = nums[k] + 1\n            n = n / factor\n        else\n       \
    \     k = k + 1\n        end\n    end\n    return nums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgsxe57bm.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpgsxe57bm.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgsxe57bm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsxe57bm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsxe57bm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgsxe57bm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgsxe57bm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsxe57bm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsxe57bm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgsxe57bm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgsxe57bm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsxe57bm.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsxe57bm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgsxe57bm.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgsxe57bm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979551
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = Int64[]\n\
    \    i = 2\n    while n >= i\n        if n % i == 0\n            push!(res, i)\n\
    \            n = n / i\n        else\n            i += 1\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979548
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    f = 2\n    while f*f <= n\n        if n % f == 0\n    \
    \        push!(factors, f)\n            n = n / f\n        else\n            f\
    \ += 1\n        end\n    end\n    push!(factors, n)\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979547
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    for i in 2:n-1\n\
    \        if n % i == 0\n            return vcat(factorize(i), factorize(n/i))\n\
    \        end\n    end\n    return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpelj5x3gx.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpelj5x3gx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpelj5x3gx.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpelj5x3gx.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpelj5x3gx.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpelj5x3gx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpelj5x3gx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpelj5x3gx.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpelj5x3gx.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpelj5x3gx.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpelj5x3gx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpelj5x3gx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpelj5x3gx.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpelj5x3gx.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpelj5x3gx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpelj5x3gx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpelj5x3gx.jl:28\n  Test"
  timestamp: 1659979551
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    for i in range(2, Int(sqrt(n))+1)\n        if n % i == 0\n       \
    \     if isprime(i)\n                push!(prime_factors, i)\n               \
    \ n = n/i\n            end\n        end\n    end\n    prime_factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5w6xelpg.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp5w6xelpg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  InexactError: Int64(1.4142135623730951)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] factorize(n::Int64)\n\
    \     @ Main /tmp/tmp5w6xelpg.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5w6xelpg.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5w6xelpg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5w6xelpg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp5w6xelpg.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w6xelpg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w6xelpg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5w6xelpg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  InexactError: Int64(2.8284271247461903)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] factorize(n::Int64)\n \
    \    @ Main /tmp/tmp5w6xelpg.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5w6xelpg.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5w6xelpg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5w6xelpg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  InexactError: Int64(7.54983443527075)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] factorize(n::Int64)\n \
    \    @ Main /tmp/tmp5w6xel"
  timestamp: 1659979551
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    factor = 2 # next possible factor\n    while n > 1\n        if n %\
    \ factor == 0\n            push!(prime_factors, factor)\n            n /= factor\n\
    \        else\n            factor += 1\n        end\n    end\n    return prime_factors\n\
    end\nfactorize(8)\nfactorize(25)\nfactorize(70)\n@assert factorize(8) == [2, 2,\
    \ 2]\n@assert factorize(25) == [5, 5]\n@assert factorize(70) == [2, 5, 7]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979548
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[] # create empty vector for factors\n    divisor = 2 # start with 2\n\
    \    while divisor <= n # while divisor is less or equal than n\n        if n\
    \ % divisor == 0 # if divisor divides n\n            push!(factors, divisor) #\
    \ push divisor in factors\n            n = n/divisor # divide n by divisor\n \
    \       else\n            divisor += 1 # increase divisor by 1\n        end\n\
    \    end\n    return factors\nend\nfactorize(2)\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979548
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = primes_less_than(sqrt(n))\n\
    \    factors = []\n    for i in primes\n        while (n % i == 0)\n         \
    \   push!(factors, i)\n            n = n \xF7 i\n        end\n    end\n    if\
    \ n > 1\n        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp93ms7d6m.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp93ms7d6m.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes_less_than not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp93ms7d6m.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp93ms7d6m.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp93ms7d6m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp93ms7d6m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes_less_than not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp93ms7d6m.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp93ms7d6m.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp93ms7d6m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp93ms7d6m.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes_less_than not defined\n \
    \ Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp93ms7d6m.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp93ms7d6m.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp93ms7d6m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp93ms7d6m.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes_less_than not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp93ms7d6m.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  timestamp: 1659979551
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = factor(n)\n\
    \    return [f[i][1] for i in 1:length(f)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2q0o8j6o.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp2q0o8j6o.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2q0o8j6o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2q0o8j6o.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2q0o8j6o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2q0o8j6o.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2q0o8j6o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2q0o8j6o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2q0o8j6o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2q0o8j6o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2q0o8j6o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2q0o8j6o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2q0o8j6o.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2q0o8j6o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp2q0o8j6o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979551
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in primes(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvgnqyfom.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpvgnqyfom.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpvgnqyfom.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgnqyfom.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgnqyfom.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvgnqyfom.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpvgnqyfom.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgnqyfom.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgnqyfom.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvgnqyfom.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpvgnqyfom.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgnqyfom.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgnqyfom.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvgnqyfom.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpvgnqyfom.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i = 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\n@testset\
    \ \"factorize(n)\" begin\n    @test factorize(8) == [2, 2, 2]\n    @test factorize(25)\
    \ == [5, 5]\n    @test factorize(70) == [2, 5, 7]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpxpzxs84j.jl:21

    in expression starting at /tmp/tmpxpzxs84j.jl:21

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while i*i < n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n = n/i\n        end\n        i += 1\n    end\n    if n > 1\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8iq46azu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp8iq46azu.jl:32\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [4] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8iq46azu.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8iq46azu.jl:30\ntest set: Test Failed at /tmp/tmp8iq46azu.jl:35\n\
    \  Expression: candidate(3249) == [3, 3, 19, 19]\n   Evaluated: [3, 3, 361] ==\
    \ [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8iq46azu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iq46azu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8iq46azu.jl:38\n  Expression: candidate(18) == [2, 3, 3]\n\
    \   Evaluated: [2, 9] == [2, 3, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8iq46azu.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iq46azu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659979551
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n\
    \    i = 2\n    while i <= n\n        if isprime(i) && n % i == 0\n          \
    \  push!(result, i)\n            n = div(n, i)\n        else\n            i +=\
    \ 1\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_7l0co68.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_7l0co68.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_7l0co68.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7l0co68.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7l0co68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_7l0co68.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_7l0co68.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7l0co68.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7l0co68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_7l0co68.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_7l0co68.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7l0co68.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7l0co68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_7l0co68.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_7l0co68.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:n \n        while n % i == 0 \n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\n```\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_66vahi.jl:21\nin expression starting at\
    \ /tmp/tmpo_66vahi.jl:21\n"
  stdout: ''
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    arr = []\n\
    \    i = 2\n    while (n>1)\n        if (rem(n,i)==0)\n            arr = push!(arr,i)\n\
    \            n = div(n,i)\n        else\n            i = i+1\n        end\n  \
    \  end\n    return arr\nend\nfactorize(70)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979549
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\
    \ return [1] end\n    prime_factors = []\n    for i in 2:ceil(Int64,sqrt(n))\n\
    \        while n % i == 0\n            push!(prime_factors, i)\n            n\
    \ = n / i\n        end\n    end\n    if n > 1 push!(prime_factors, n) end\n  \
    \  return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979549
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorized\
    \ = Vector{Int64}()\n    lastprime = 0\n    for prime in primes(maximum(n, 2))\n\
    \        if n == 1\n            break\n        end\n        if isprime(n)\n  \
    \          push!(factorized, n)\n            break\n        end\n        if n\
    \ % prime == 0\n            push!(factorized, prime)\n            n = n // prime\n\
    \        end\n    end\n    factorized\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpubgizam6.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpubgizam6.jl:34\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n   \
    \  @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:678\n   [5] factorize(n::Int64)\n\
    \     @ Main /tmp/tmpubgizam6.jl:14\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpubgizam6.jl:34 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpubgizam6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpubgizam6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: objects of type Int64 are not callable\n\
    \  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n\
    \   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n     @ Base ./reduce.jl:394\n\
    \   [2] mapreduce(f::Int64, op::Function, a::Int64)\n     @ Base ./reduce.jl:421\n\
    \   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(),\
    \ Tuple{}}})\n     @ Base ./reduce.jl:678\n   [4] maximum(f::Int64, a::Int64)\n\
    \     @ Base ./reduce.jl:678\n   [5] factorize(n::Int64)\n     @ Main /tmp/tmpubgizam6.jl:14\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpubgizam6.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpubgizam6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpubgizam6.jl:36\n "
  timestamp: 1659979553
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorize(n,\
    \ 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpk68xxab8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk68xxab8.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching factorize(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    factorize(::Int64) at /tmp/tmpk68xxab8.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpk68xxab8.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk68xxab8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk68xxab8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk68xxab8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    factorize(::Int64) at /tmp/tmpk68xxab8.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpk68xxab8.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk68xxab8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk68xxab8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk68xxab8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    factorize(::Int64) at /tmp/tmpk68xxab8.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpk68xxab8.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk68xxab8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk68xxab8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk68xxab8.jl:22\n  Test threw e"
  timestamp: 1659979553
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979549
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = Int64[]\n\
    \    while n > 1\n        d = first_factor(n)\n        push!(res, d)\n       \
    \ n = n \xF7 d\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1q6uujnn.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp1q6uujnn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: first_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1q6uujnn.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1q6uujnn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1q6uujnn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1q6uujnn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1q6uujnn.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1q6uujnn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1q6uujnn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1q6uujnn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1q6uujnn.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1q6uujnn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1q6uujnn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1q6uujnn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1q6uujnn.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2 \n\
    \        return []\n    end\n    primes = primes_list(n)\n    factors = []\n \
    \   while n != 1\n        for p in primes\n            if n % p == 0\n       \
    \         push!(factors, p)\n                n = n / p\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7a2dvb7r.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp7a2dvb7r.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes_list not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp7a2dvb7r.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a2dvb7r.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a2dvb7r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7a2dvb7r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes_list not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp7a2dvb7r.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a2dvb7r.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a2dvb7r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7a2dvb7r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes_list not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp7a2dvb7r.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a2dvb7r.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a2dvb7r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7a2dvb7r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes_list not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp7a2dvb7r.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659979553
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    x = Int64[]\n\
    \    i = 2\n    while n > 1\n        while n % i == 0\n            push!(x, i)\n\
    \            n = n \xF7 i\n        end\n        i += 1\n    end\n    return x\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\
    \ return [1] end\n    res = Int64[]\n    while n % 2 == 0\n        push!(res,\
    \ 2)\n        n = n / 2\n    end\n    step = 1\n    curr = 3\n    while curr*curr\
    \ <= n\n        while n % curr == 0\n            push!(res, curr)\n          \
    \  n = n / curr\n        end\n        curr += step\n        step = 4 - step\n\
    \    end\n    if n > 1 push!(res, n) end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    p = 2\n  \
    \  factors = []\n    while n != 1 && p*p <= n\n        if n % p == 0\n       \
    \     push!(factors, p)\n            n = n/p\n        else\n            p += 1\n\
    \        end\n    end\n    if n != 1\n        push!(factors, n)\n    end\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    num = 2\n\
    \    factors = Int64[]\n    while n > 1\n        if n % num == 0\n           \
    \ factors = push!(factors, num)\n            n = n / num\n        else\n     \
    \       num += 1\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # set starting\
    \ values\n    factors = Int64[] \n    i = 2 \n    nn = n\n    # iterate from 2\
    \ to n (inclusive) and keep factorizing\n    while i <= nn\n        if isprime(i)\
    \ && rem(nn, i) == 0 \n            push!(factors, i)\n            nn = div(nn,\
    \ i)\n        else\n            i += 1\n        end\n    end\n    # return vector\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpr8ke7clq.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpr8ke7clq.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpr8ke7clq.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8ke7clq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8ke7clq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr8ke7clq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpr8ke7clq.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8ke7clq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8ke7clq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr8ke7clq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpr8ke7clq.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8ke7clq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8ke7clq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr8ke7clq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpr8ke7clq.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979553
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = Int64[]\n\
    \    while n > 1\n        for i in 2:n\n            if n % i == 0\n          \
    \      push!(res, i)\n                n = n \xF7 i\n                break\n  \
    \          end\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979550
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n        if n % i ==\
    \ 0\n            factorize(i)\n            factorize(n / i)\n            return\
    \ \n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979555
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # vector\
    \ to store the prime factors \n    prime_factors = Vector{Int64}()\n    \n   \
    \ # loop over the numbers from 2 to n\n    for factor in 2:n\n        \n     \
    \   # check if the value of factor divides n\n        if n % factor == 0\n   \
    \         \n            # if the factor is a factor, push the factor to the vector\
    \ and divide n by the factor\n            push!(prime_factors, factor)\n     \
    \       n = n / factor\n            \n            # begin loop again since this\
    \ modified n\n            continue\n        end\n    end\n    \n    # return vector\
    \ of prime factors\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe8uii5x9.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpe8uii5x9.jl:40\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe8uii5x9.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe8uii5x9.jl:38\ntest set: Test Failed at /tmp/tmpe8uii5x9.jl:41\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8uii5x9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8uii5x9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe8uii5x9.jl:43\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe8uii5x9.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe8uii5x9.jl:38\ntest set: Test Failed at /tmp/tmpe8uii5x9.jl:44\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8uii5x9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8uii5x9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe8uii5x9.jl:45\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979553
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  \n  function\
    \ factorize_inner(n::Int64, factors::Vector{Int64})::Vector{Int64}\n    # TODO:\
    \ return inner function\n    # NOTE: This is pretty simple, but at the same time,\
    \ it's a useful exercise for you\n    # Don't forget to return an inner function\
    \ with proper type\n  end\n  \n  return factorize_inner(n, Int64[])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp23khqivi.jl:26\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray
    at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    (::var"#factorize_inner#1")(n::Int64, factors::Vector{Int64})\n     @ Main /tmp/tmp23khqivi.jl:17\n   [2]
    factorize(n::Int64)\n     @ Main /tmp/tmp23khqivi.jl:19\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp23khqivi.jl:26 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp23khqivi.jl:25\ntest set: Error During Test at
    /tmp/tmp23khqivi.jl:27\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    (::var"#factorize_inner#1")(n::Int64, factors::Vector{Int64})\n     @ Main /tmp/tmp23khqivi.jl:17\n   [2]
    factorize(n::Int64)\n     @ Main /tmp/tmp23khqivi.jl:19\n   [3] mac'
  timestamp: 1659979555
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    #input number\n\
    \    if n<2\n        return []\n    end\n    #vector of prime factors (to be returned)\n\
    \    primes = []\n    #prime factors found in the process\n    factor = 2\n  \
    \  #number of times the same factor appeares in factorization\n    #n=8 -> 1x2x2x2\n\
    \    count = 0\n    #while n is not 1\n    while n!=1\n        #if factor divides\
    \ n...\n        if n%factor==0\n            #... number of times it appeares in\
    \ factorization is increased by 1\n            count += 1\n            #n is divided\
    \ by this factor. This allows us to find all the factors, including exponents\n\
    \            n = n/factor\n        else\n            #if factor is not the one\
    \ that divides n, we change the factor to the next prime number\n            #and\
    \ repeat the whole process.\n            primes = [primes; fill(factor, count)]\n\
    \            factor = nextprime(factor)\n            count = 0\n        end\n\
    \    end\n    #returns vector of primes\n    return primes\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpupqygo2m.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpupqygo2m.jl:47\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpupqygo2m.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpupqygo2m.jl:46\ntest set: Test Failed at /tmp/tmpupqygo2m.jl:48\n\
    \  Expression: candidate(4) == [2, 2]\n   Evaluated: Int64[] == [2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupqygo2m.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupqygo2m.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpupqygo2m.jl:49\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupqygo2m.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupqygo2m.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpupqygo2m.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: nextprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpupqygo2m.jl:35\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupqygo2m.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupqygo2m.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpupqygo2m.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(3249) == [3, 3, 19, 19]\n  UndefVarError: next"
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    sieve = primesieve(n)\n\
    \    factors = []\n    i = 1\n    factor = sieve[i]\n    while n > 1\n       \
    \ if n % factor == 0\n            push!(factors, factor)\n            n = n /\
    \ factor\n        else\n            i += 1\n            factor = sieve[i]\n  \
    \      end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsyoy1m1f.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpsyoy1m1f.jl:32\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primesieve not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsyoy1m1f.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsyoy1m1f.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsyoy1m1f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsyoy1m1f.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsyoy1m1f.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsyoy1m1f.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsyoy1m1f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsyoy1m1f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsyoy1m1f.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsyoy1m1f.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsyoy1m1f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsyoy1m1f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsyoy1m1f.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expans"
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Uses\
    \ brut force to find all prime numbers <= n to check if number is prime \"\"\"\
    \n    checkprimes(n)\n    @show Base.prime_pi(n)\n    factors = Int64[]\n    for\
    \ i = 2:n\n        # Check if i is prime\n        if isprime(i)\n            #\
    \ Check if i is a factor of n\n            if n % i == 0\n                # Add\
    \ factor i to vector\n                push!(factors, i)\n                # Divide\
    \ n by factor i\n                n = n / i\n                # Set i to 1 so that\
    \ it is increased by 1 again\n                i = 1\n            end\n       \
    \ end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp265x906c.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp265x906c.jl:37\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: checkprimes not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp265x906c.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp265x906c.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp265x906c.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp265x906c.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: checkprimes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp265x906c.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp265x906c.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp265x906c.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp265x906c.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: checkprimes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp265x906c.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp265x906c.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp265x906c.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp265x906c.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: checkprimes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp265x906c.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659979553
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979551
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Your code\
    \ here \nend\n@test factorize(8) == [2, 2, 2]\n@test factorize(25) == [5, 5]\n\
    @test factorize(70) == [2, 5, 7]\n@test prod(factorize(8)) == 8\n@test prod(factorize(25))\
    \ == 25\n@test prod(factorize(70)) == 70\n \nfactorize(8)\n \nfactorize(25)\n\
    \ \nfactorize(70)\n \nfactorize(222)\n \nfactorize(123456789)\n \n \n\"===========================================================================\"\
    \n \n\"===========================Task 4==========================================\"\
    \n \n\"\"\" Return a vector of prime factors of given integer sorted in descending\
    \ order.\n    Each of the factors should be vectored number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize_sorted(8)\n    [2, 2,\
    \ 2]\n    >>> factorize_sorted(25)\n    [5, 5]\n    >>> factorize_sorted(70)\n\
    \    [7, 5, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpijtczaci.jl:14

    in expression starting at /tmp/tmpijtczaci.jl:14

    '
  stdout: ''
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=Int64[]\n\
    \    # run over all prime numbers up to the square root of the number\n    for\
    \ p in primes(Int64,ceil(sqrt(n)))\n        # while the number can be divided\
    \ by p then the result of the division is number,\n        # otherwise (if p is\
    \ not a divisor of n) then the new number is n itself\n        # (otherwise the\
    \ loop is repeated from the beginning, i.e. n is divided by the next prime factor)\n\
    \        while n%p==0 \n            push!(factors,p)\n            n/=p\n     \
    \   end\n    end\n    # if n is prime, then it is its own largest prime factor,\
    \ otherwise it is the product of all its factors\n    # (note that now it's not\
    \ anymore divisible by the square root of n)\n    push!(factors,n)\n    factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprublhsf3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmprublhsf3.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmprublhsf3.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprublhsf3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprublhsf3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprublhsf3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmprublhsf3.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprublhsf3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprublhsf3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprublhsf3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmprublhsf3.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprublhsf3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprublhsf3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprublhsf3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmprublhsf3.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        prime = smallest_prime_factor(n)\n        push!(factors,\
    \ prime)\n        n = n//prime\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmv04x24z.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpmv04x24z.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: smallest_prime_factor not\
    \ defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmv04x24z.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmv04x24z.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv04x24z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmv04x24z.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmv04x24z.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmv04x24z.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv04x24z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmv04x24z.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmv04x24z.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmv04x24z.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv04x24z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmv04x24z.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: smallest_prime_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpmv04x24z.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/s"
  timestamp: 1659979554
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    p = 2\n  \
    \  v = Vector{Int64}()\n    while n != 1\n        n % p == 0 ? push!(v, p) : n\
    \ = n\n        p += 1\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Test\
    \ example. Note the doctest output below.\n    >>> factorize(70)\n    [2, 5, 7]\n\
    \    \"\"\"\n    fact = []\n    c = n\n    for i = 2:sqrt(c)\n        if c%i ==\
    \ 0\n            c = c/i\n            push!(fact, i)\n        end\n    end\n \
    \   return fact\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp235o4t0i.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp235o4t0i.jl:31\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp235o4t0i.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp235o4t0i.jl:30\ntest set: Test Failed at /tmp/tmp235o4t0i.jl:32\n\
    \  Expression: candidate(4) == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp235o4t0i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp235o4t0i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp235o4t0i.jl:33\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp235o4t0i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp235o4t0i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp235o4t0i.jl:34\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [3] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp235o4t0i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp235o4t0i.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp235o4t0i.jl:35\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expans"
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f=[n]\n  \
    \  while true\n        if n == 1\n            break\n        end\n        div=divisor(n)\n\
    \        push!(f,div)\n        n=Int64(n/div)\n    end\n    return f\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphxspzkcg.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmphxspzkcg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphxspzkcg.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxspzkcg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxspzkcg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphxspzkcg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphxspzkcg.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxspzkcg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxspzkcg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphxspzkcg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphxspzkcg.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxspzkcg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxspzkcg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphxspzkcg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphxspzkcg.jl:17\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979555
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = [ ]\n\
    \    i = 2\n    while n > 1\n        while n % i == 0\n            push!(f, i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return f\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # TODO: write\
    \ algorithm with time complexity O(n^0.5) and space complexity O(1)\n    # You\
    \ can use useful functions like nextprime, prevprime, isprime, gcd\n    # You\
    \ need to write a simple loop\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp8g06iyn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp8g06iyn.jl:1\n\
    in expression starting at /tmp/tmpp8g06iyn.jl:1\n"
  stdout: ''
  timestamp: 1659979553
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # if input\
    \ is less than 2 then it can not be factorized\n    if n<2\n        return\n \
    \   end\n    factors = []\n    for i in 2:n-1\n        if isprime(i) && mod(n,i)==0\n\
    \            push!(factors,i)\n            return vcat(factors,factorize(n/i))\n\
    \        end\n    end\n    # if the recursion is ended and we get here the input\
    \ was prime number\n    push!(factors,n)\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4fp4drst.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp4fp4drst.jl:33\n  Test threw exception\n\
    \  Expression: candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp4fp4drst.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fp4drst.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4fp4drst.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp4fp4drst.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp4fp4drst.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fp4drst.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4fp4drst.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp4fp4drst.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp4fp4drst.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fp4drst.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4fp4drst.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp4fp4drst.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(3249) == [3, 3, 19, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp4fp4drst.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expa"
  timestamp: 1659979555
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n % 2 == 0\n        push!(prime_factors, 2)\n        n /= 2\n\
    \    end\n    p = 3\n    while n != 1\n        while n % p == 0\n            push!(prime_factors,\
    \ p)\n            n /= p\n        end\n        p += 2\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = []\n \
    \   for d = 2:n\n        if n % d == 0\n            push!(v, d)\n            n\
    \ = n / d\n            d = 1\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpflaeb4fe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpflaeb4fe.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpflaeb4fe.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpflaeb4fe.jl:26\ntest set: Test Failed at /tmp/tmpflaeb4fe.jl:29\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflaeb4fe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflaeb4fe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpflaeb4fe.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpflaeb4fe.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpflaeb4fe.jl:26\ntest set: Test Failed at /tmp/tmpflaeb4fe.jl:32\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflaeb4fe.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflaeb4fe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpflaeb4fe.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979555
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpmfatxwp6.jl:19\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray
    at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmfatxwp6.jl:13\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmfatxwp6.jl:19 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmfatxwp6.jl:18\ntest set: Error During Test at
    /tmp/tmpmfatxwp6.jl:20\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmfatxwp6.jl:13\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmfatxwp6.jl:20 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/po'
  timestamp: 1659979557
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # initialize\
    \ vector of the result\n    result = Vector{Int64}()\n    # define trial divisor\n\
    \    divisor = 2\n    # while the integer is not fully factorized:\n    while\
    \ n > 1\n        # while the trial divisor is a factor of the integer:\n     \
    \   while rem(n, divisor) == 0\n            # add divisor to vector of the result\n\
    \            push!(result, divisor)\n            # divide the integer by the trial\
    \ divisor\n            n = n / divisor\n        end\n        # try next possible\
    \ divisor\n        divisor += 1\n    end\n    # return the vector of the result\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979552
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ the next prime number larger than given integer.\n    >>> nextprime(5)\n   \
    \ 7\n    >>> nextprime(7)\n    11\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9xnvnxu8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9xnvnxu8.jl:1\n\
    in expression starting at /tmp/tmp9xnvnxu8.jl:1\n"
  stdout: ''
  timestamp: 1659979554
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}(undef, 0)\n    i = 2\n    n_i = n\n    while n_i > 1\n       \
    \ if n_i % i == 0\n            push!(factors, i)\n            n_i = n_i / i\n\
    \        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979553
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if n%i == 0\n            push!(factors, i)\n \
    \           n /= i\n            if n == 1\n                break\n           \
    \ end\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4rxwrmhc.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp4rxwrmhc.jl:30\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4rxwrmhc.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4rxwrmhc.jl:28\ntest set: Test Failed at /tmp/tmp4rxwrmhc.jl:31\n\
    \  Expression: candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rxwrmhc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rxwrmhc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4rxwrmhc.jl:33\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4rxwrmhc.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4rxwrmhc.jl:28\ntest set: Test Failed at /tmp/tmp4rxwrmhc.jl:34\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n   Evaluated: [3, 9,\
    \ 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rxwrmhc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rxwrmhc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4rxwrmhc.jl:35\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979555
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    f = 2\n    while rem(n, f) != 0\n        f +=\
    \ 1\n    end\n    return [f, factorize(n//f)... ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpe58zy2nd.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpe58zy2nd.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching factorize(::Rational{Int64})\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpe58zy2nd.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpe58zy2nd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe58zy2nd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe58zy2nd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpe58zy2nd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Rational{Int64})\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpe58zy2nd.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpe58zy2nd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe58zy2nd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe58zy2nd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpe58zy2nd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Rational{Int64})\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpe58zy2nd.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpe58zy2nd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe58zy2nd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe58zy2nd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpe5"
  timestamp: 1659979557
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  if n < 0\n \
    \   return factorize(-n)\n  end\n  if n == 0 || n == 1\n    return [n]\n  end\n\
    \  # Make vector of prime numbers and their values\n  # This will be used to factorize\
    \ number\n  # Making this vector takes time, but not much and it is not called\
    \ every time function is run\n  # It runs only once on first time function is\
    \ run\n  # This saves a lot of time while factorizing numbers\n  global prime_factors\n\
    \  if isempty(prime_factors)\n    global primes\n    prime_factors = [(p, 0) for\
    \ p in primes(n)]\n  end\n  # Factorize number, by keeping dividing by lowest\
    \ prime factors \n  #  until dividend is less than the prime factor\n  # Value\
    \ of prime factor is increased by one every time it divides without remainder.\n\
    \  for (factor, i) in prime_factors\n    while rem(n, factor) == 0\n      n =\
    \ div(n, factor)\n      prime_factors[i][2] += 1\n    end\n  end\n  # Return prime\
    \ factors\n  prime_factors = [p for p in prime_factors if p[2] > 0]\n  return\
    \ prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpytn4gfc7.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpytn4gfc7.jl:46\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: prime_factors not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpytn4gfc7.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpytn4gfc7.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpytn4gfc7.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpytn4gfc7.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: prime_factors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpytn4gfc7.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpytn4gfc7.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpytn4gfc7.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpytn4gfc7.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: prime_factors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpytn4gfc7.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpytn4gfc7.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpytn4gfc7.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpytn4gfc7.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: prime_factors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpytn4gfc7.jl:24\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n > 1\n        # Let's find the smallest divisor first\n   \
    \     divisor = divisor(n)\n        # Add it to prime factors list\n        push!(prime_factors,\
    \ divisor)\n        # Divide \"n\" by divisor\n        n = n \xF7 divisor\n  \
    \  end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpc5xbbevd.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpc5xbbevd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc5xbbevd.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5xbbevd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5xbbevd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpc5xbbevd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc5xbbevd.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5xbbevd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5xbbevd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpc5xbbevd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc5xbbevd.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5xbbevd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5xbbevd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpc5xbbevd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpc5xbbevd.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979557
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    list = []\n\
    \    while n % 2 == 0\n        push!(list, 2)\n        n = n/2\n    end\n    for\
    \ i in 3:n\n        while n % i == 0\n            push!(list, i)\n           \
    \ n = n/i\n        end\n    end\n    return list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979554
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    F = Int64[]\n\
    \    while n % 2 == 0\n        push!(F, 2)\n        n = n \xF7 2\n    end\n  \
    \  f = 3\n    while n > 1\n        while n % f == 0\n            push!(F, f)\n\
    \            n = n \xF7 f\n        end\n        f = f + 2\n    end\n    return\
    \ F\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n <= 1\n\
    \        error(\"Invalid input\")\n    end\n    res = Int64[]\n    divisor = 2\n\
    \    while n > 1\n        n, rem = divrem(n, divisor)\n        while rem == 0\n\
    \            push!(res, divisor)\n            n, rem = divrem(n, divisor)\n  \
    \      end\n        divisor += 1\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2lx9fc7w.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp2lx9fc7w.jl:35\n  Expression: candidate(57)\
    \ == [3, 19]\n   Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2lx9fc7w.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2lx9fc7w.jl:31\ntest set: Test Failed at /tmp/tmp2lx9fc7w.jl:36\n\
    \  Expression: candidate(3249) == [3, 3, 19, 19]\n   Evaluated: [5] == [3, 3,\
    \ 19, 19]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lx9fc7w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lx9fc7w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2lx9fc7w.jl:37\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: Int64[] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2lx9fc7w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2lx9fc7w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2lx9fc7w.jl:38\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [7] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2lx9fc7w.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2lx9fc7w.jl:31\ntest set: Test Failed at /tmp/tmp2lx9fc7w.jl:39\n\
    \  Expression: candidate(18) == [2, 3, 3]\n   Evaluated: [2] == [2, 3, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = factor(n)\n\
    \    for i in 1:length(f)\n        f[i] = f[i][1]\n    end\n    return f\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpg3mbt7bs.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpg3mbt7bs.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg3mbt7bs.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg3mbt7bs.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg3mbt7bs.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg3mbt7bs.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg3mbt7bs.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg3mbt7bs.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg3mbt7bs.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg3mbt7bs.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg3mbt7bs.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg3mbt7bs.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg3mbt7bs.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg3mbt7bs.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpg3mbt7bs.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979557
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=Int64[]\n\
    \    for i in 2:n\n        if n%i==0\n            push!(factors,i)\n         \
    \   n/=i\n            continue\n        end\n    end\n    return factors\nend\n\
    println(factorize(123456789987654321))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979558
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    k = 2\n    while n > 1\n        if n % k == 0\n            push!(factors,\
    \ k)\n            n = n / k\n        else\n            k += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979554
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpydpdewnk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpydpdewnk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpydpdewnk.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydpdewnk.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydpdewnk.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpydpdewnk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpydpdewnk.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydpdewnk.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src"
  timestamp: 1659979558
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\
    \ return [1] end\n    primes = primesieve(n);\n    factors = Vector{Int64}();\n\
    \    for p in primes\n        if n % p == 0\n            push!(factors, p)\n \
    \           n = n / p\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_nv87ge3.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp_nv87ge3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primesieve not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_nv87ge3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_nv87ge3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_nv87ge3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_nv87ge3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_nv87ge3.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_nv87ge3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_nv87ge3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_nv87ge3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_nv87ge3.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_nv87ge3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_nv87ge3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_nv87ge3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primesieve not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_nv87ge3.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expans"
  timestamp: 1659979558
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [2]\n    for i = 3:2:n\n        if is_prime(i)\n            if mod(n, i) ==\
    \ 0\n                push!(factors, i)\n                n = n/i\n            end\n\
    \        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8u_mbzhx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp8u_mbzhx.jl:29\n  Test threw exception\n\
    \  Expression: candidate(4) == [2, 2]\n  UndefVarError: is_prime not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8u_mbzhx.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u_mbzhx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u_mbzhx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u_mbzhx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8u_mbzhx.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u_mbzhx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u_mbzhx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u_mbzhx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8u_mbzhx.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8u_mbzhx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8u_mbzhx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8u_mbzhx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(3249) == [3, 3, 19, 19]\n  UndefVarError: is_prime not defined\n \
    \ Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp8u_mbzhx.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro "
  timestamp: 1659979558
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # preallocate\
    \ the vector to save time later\n    factors::Vector{Int64} = Vector{Int64}(undef,\
    \ 0)\n    # check if `n` is actually a number\n    if isinteger(n) == false\n\
    \        return(\"This is not a number.\")\n    end\n    # check if `n` is positive\n\
    \    if n < 0\n        return(\"This is not a positive number.\")\n    end\n \
    \   # check if `n` is not 0 or 1\n    if n == 0 || n == 1\n        return(n)\n\
    \    end\n    # keep finding the smallest prime factor of `n` until `n` is equal\
    \ to 1\n    # each time add this factor to the vector\n    while n != 1\n    \
    \    # get the smallest prime factor of `n`\n        p = smallest_prime_factor(n)\n\
    \        # check if it is prime\n        if isprime(p) == false\n            return(\"\
    This is not a prime factor.\")\n        end\n        # push factor to the vector\n\
    \        push!(factors, p)\n        # update `n` to the quotient of division by\
    \ factor\n        n = div(n, p)\n    end\n    # return the vector of prime factors\n\
    \    return(factors)\nend\n \n# small test\nfactorize(16*17*18*19*20)\n \n# large\
    \ test\n@time factorize(Int64(big(2)^16 * 3^11 * 5^7 * 7^5 * 11^3 * 13^2 * 17\
    \ * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73 * 79 *\
    \ 83 * 89 * 97 * 101 * 103 * 107 * 109 * 113))\n \n### Euler's totient function\n\
    \"\"\" Return Euler's totient function value at given integer n.\n    Euler's\
    \ totient function is defined as a number of positive integers up to n that are\
    \ coprime with n.\n    >>> euler_totient(5)\n    4\n    >>> euler_totient(12)\n\
    \    4\n    >>> euler_totient(100)\n    40\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: smallest_prime_factor not defined\nStacktrace:\n\
    \ [1] factorize(n::Int64)\n   @ Main /tmp/tmp1e8cxmck.jl:30\n [2] top-level scope\n\
    \   @ /tmp/tmp1e8cxmck.jl:45\nin expression starting at /tmp/tmp1e8cxmck.jl:45\n"
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=Vector{Int64}()\
    \ #create vector of factors\n    for i in primes(Int64,n) \n        while n%i==0\n\
    \            n=n/i\n            push!(factors,i)\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnlpisb_7.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnlpisb_7.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnlpisb_7.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlpisb_7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlpisb_7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnlpisb_7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnlpisb_7.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlpisb_7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlpisb_7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnlpisb_7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnlpisb_7.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnlpisb_7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnlpisb_7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnlpisb_7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpnlpisb_7.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659979558
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # inner function\
    \ for checking if given number is prime\n    function is_prime(n::Int64)::Bool\n\
    \        if n==1; return false end\n        if n<=3; return true end\n       \
    \ if n%2==0; return false end\n        if n%3==0; return false end\n        i=5\n\
    \        while i*i<=n\n            if n%i==0; return false end\n            if\
    \ n%(i+2)==0; return false end\n            i=i+6\n        end\n        return\
    \ true\n    end\n    prime_factors = []\n    while n!=1\n        i=2\n       \
    \ while !is_prime(i)\n            i+=1\n        end\n        while n%i==0\n  \
    \          push!(prime_factors, i)\n            n=n/i\n        end\n        i+=1\n\
    \    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979559
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for div in divisors(n)\n        if isprime(div)\n            push!(factors,\
    \ div)\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbc3b_tnb.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpbc3b_tnb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc3b_tnb.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc3b_tnb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc3b_tnb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbc3b_tnb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc3b_tnb.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc3b_tnb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc3b_tnb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbc3b_tnb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc3b_tnb.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc3b_tnb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc3b_tnb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbc3b_tnb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: divisors not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc3b_tnb.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n    "
  timestamp: 1659979558
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # TODO: write\
    \ your code here\n    if n == 1\n        return [1]\n    end\n    i = 2\n    prime_factors\
    \ = Int64[]\n    while i <= n\n        while n % i == 0\n            push!(prime_factors,\
    \ i)\n            n = n / i\n        end\n        i += 1\n    end\n    return\
    \ prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979555
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    for d in 2:n-1\n        if n % d == 0\n     \
    \       return vcat(factorize(d), factorize(n/d))\n        end\n    end\n    return\
    \ [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1b8njs46.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp1b8njs46.jl:28\n  Test threw exception\n\
    \  Expression: candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp1b8njs46.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1b8njs46.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1b8njs46.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1b8njs46.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1b8njs46.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp1b8njs46.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1b8njs46.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1b8njs46.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1b8njs46.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1b8njs46.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmp1b8njs46.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp1b8njs46.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1b8njs46.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1b8njs46.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1b8njs46.jl:31\n  Test"
  timestamp: 1659979559
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    fact = Vector{Int64}()\n\
    \    while n%2 == 0\n        push!(fact, 2)\n        n = n/2\n    end\n    i =\
    \ 3\n    while i*i <= n\n        while n%i == 0\n            push!(fact, i)\n\
    \            n = n/i\n        end\n        i += 2\n    end\n    if n > 2\n   \
    \     push!(fact, n)\n    end\n    return fact\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979555
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Int64[]\n\
    \    for i in 2:n\n        while !(n % i) \n            n /= i\n            push!(result,\
    \ i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwmcp9aev.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpwmcp9aev.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching !(::Int64)\n\
    \  Closest candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwmcp9aev.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmcp9aev.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmcp9aev.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwmcp9aev.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching !(::Int64)\n  Closest\
    \ candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpwmcp9aev.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmcp9aev.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmcp9aev.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwmcp9aev.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching !(::Int64)\n  Closest\
    \ candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Miss"
  timestamp: 1659979559
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    assert n >\
    \ 0, \"Input should be > 0\"\n    result = Vector{Int64}(undef, 0)\n    divisor\
    \ = 2\n    while divisor*divisor <= n\n        while rem(n, divisor) == 0\n  \
    \          push!(result, divisor)\n            n /= divisor\n        end\n   \
    \     divisor += 1\n    end\n    if n > 1\n        push!(result, n)\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpf157aghd.jl:11 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf157aghd.jl:12\n\
    in expression starting at /tmp/tmpf157aghd.jl:12\n"
  stdout: ''
  timestamp: 1659979557
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:n \n        if i * i > n\n            break\n        end\n\
    \        while n % i == 0\n            push!(factors, i)\n            n /= i\n\
    \        end\n    end\n    if n > 1\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979556
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n \
    \           append!(factors, divisor)\n            n = n / divisor\n        else\n\
    \            divisor += 1\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n <= 1\n\
    \        return []\n    end\n    factor = 2\n    while n % factor != 0\n     \
    \   factor += 1\n    end\n    push!(factorize(n/factor), factor)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdn85e83c.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpdn85e83c.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpdn85e83c.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdn85e83c.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdn85e83c.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdn85e83c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpdn85e83c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpdn85e83c.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdn85e83c.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdn85e83c.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdn85e83c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpdn85e83c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpdn85e83c.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdn85e83c.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdn85e83c.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdn85e83c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpdn85e83c.jl:29\n  Test thre"
  timestamp: 1659979559
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    if n == 1\n        return Vector{Int64}(1)\n    end\n \
    \   factor = find_factor(n)\n    while factor <= n\n        while n % factor ==\
    \ 0\n            push!(factors, factor)\n            n = n / factor\n        end\n\
    \        factor = find_factor(n)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp97kknw7j.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp97kknw7j.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: find_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp97kknw7j.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp97kknw7j.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp97kknw7j.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97kknw7j.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: find_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp97kknw7j.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp97kknw7j.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp97kknw7j.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97kknw7j.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: find_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp97kknw7j.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp97kknw7j.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp97kknw7j.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97kknw7j.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: find_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp97kknw7j.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  timestamp: 1659979559
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = Vector{Int64}([])\n\
    \    while n > 1 && n % 2 == 0\n        push!(factors, 2)\n        n = n / 2\n\
    \    end\n    factor = 3\n    while n > 1\n        while n % factor == 0\n   \
    \         push!(factors, factor)\n            n = n / factor\n        end\n  \
    \      factor += 2\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if isprime(i) && (n % i == 0)\n            n =\
    \ n / i\n            push!(factors, i)\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgd9s2hjc.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgd9s2hjc.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgd9s2hjc.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd9s2hjc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd9s2hjc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgd9s2hjc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgd9s2hjc.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd9s2hjc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd9s2hjc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgd9s2hjc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgd9s2hjc.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgd9s2hjc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgd9s2hjc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgd9s2hjc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpgd9s2hjc.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979559
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2 \n\
    \        return 0\n    end\n    i = 2\n    factors = []\n    while n > 1\n   \
    \     while n % i == 0\n            n /= i\n            push!(factors, i)\n  \
    \      end\n        i += 1\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979556
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    for i in 2:n\n        if isprime(i) == true && n % i == 0\n      \
    \      j = 0\n            while n % i == 0\n                n = n / i\n      \
    \          j += 1\n            end\n            for k in 1:j\n               \
    \ push!(prime_factors, i)\n            end\n        end\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6e7m3y68.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp6e7m3y68.jl:32\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6e7m3y68.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6e7m3y68.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6e7m3y68.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6e7m3y68.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6e7m3y68.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6e7m3y68.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6e7m3y68.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6e7m3y68.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6e7m3y68.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6e7m3y68.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6e7m3y68.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6e7m3y68.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6e7m3y68.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979559
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = primes_of_a_number(n)\n\
    \    result = Int64[]\n    for p in primes\n        m = n\n        while m % p\
    \ == 0\n            m = m / p\n            push!(result, p)\n        end\n   \
    \ end\n    return result\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdzbbewgc.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpdzbbewgc.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes_of_a_number not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdzbbewgc.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdzbbewgc.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdzbbewgc.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdzbbewgc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes_of_a_number not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdzbbewgc.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdzbbewgc.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdzbbewgc.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdzbbewgc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes_of_a_number not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdzbbewgc.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdzbbewgc.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdzbbewgc.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdzbbewgc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes_of_a_number not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpdzbbewgc.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659979560
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    list = Int64[]\
    \ # create a vector list which will contain prime factors of n\n    while n >\
    \ 1\n        if mod(n,2) == 0 # if n is divisible by 2, then appends 2 to list\
    \ and divides n by 2\n            push!(list,2)\n            n = div(n,2)\n  \
    \      else\n            for i in 3:2:n-1\n                if mod(n,i) == 0\n\
    \                    push!(list,i)\n                    n = div(n,i)\n       \
    \             break\n                end\n            end\n        end\n    end\n\
    \    return list\nend\nprintln(factorize(8))\nprintln(factorize(25))\nprintln(factorize(70))\n\
    println(factorize(123456))\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: b'[2, 2, 2]\n'
  timestamp: 1659979561
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Handle special\
    \ cases\n    if n < 0\n        n = -n\n    end\n    if n == 0\n        return\
    \ []\n    end\n    if n == 1\n        return [1]\n    end\n    if n == 2\n   \
    \     return [2]\n    end\n    # Handle general case\n    divisor = 2\n    factors\
    \ = []\n    while n > 1\n        if n % divisor == 0\n            push!(factors,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor +=\
    \ 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979557
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8zdok17.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd8zdok17.jl:1\n\
    in expression starting at /tmp/tmpd8zdok17.jl:1\n"
  stdout: ''
  timestamp: 1659979558
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    base = 2\n    while n != 1\n        while n % base == 0\n          \
    \  push!(factors, base)\n            n /= base\n        end\n        base += 1\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979557
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    out = []\n\
    \    num = n\n    for i in 2:ceil(Int64, sqrt(n))\n        if isprime(i)\n   \
    \         if num % i == 0\n                divisor = i\n                push!(out,\
    \ divisor)\n                num = num/divisor\n            end\n        end\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbc20gzlo.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpbc20gzlo.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc20gzlo.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc20gzlo.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc20gzlo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbc20gzlo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc20gzlo.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc20gzlo.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc20gzlo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbc20gzlo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc20gzlo.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc20gzlo.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc20gzlo.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbc20gzlo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpbc20gzlo.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /"
  timestamp: 1659979560
- exit_code: 0
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    i = 2\n  \
    \  factors = Vector{Int64}()\n    while n > 1\n        while n % i == 0\n    \
    \        push!(factors, i)\n            n /= i\n        end\n        i += 1\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659979557
