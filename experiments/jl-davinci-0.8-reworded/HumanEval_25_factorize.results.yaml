name: HumanEval_25_factorize
language: jl
results:
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n\
    \    p = 2 # first prime\n    while n > 1\n        # count how many times factor\
    \ p goes into n\n        m = 0\n        while n % p == 0\n            m += 1\n\
    \            n /= p\n        end\n        push!(result, [p for _ in 1:m])\n  \
    \      p += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp46h4ana6.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmp46h4ana6.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp46h4ana6.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp46h4ana6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp46h4ana6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Vector{Int64}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] factorize(n::Int64)\n     @ Main /tmp/tmp46h4ana6.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp46h4ana6.jl:32 [inlined]\n\
    \   [5]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46h4ana6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ vector of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be vectored number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2\n\
    \        return []\n    end\n    n_mod_two = n % 2\n    if n_mod_two == 0\n  \
    \      return [2] * (Int64(log2(n)) + 1)\n    end\n    divisor = 3\n    while\
    \ divisor <= sqrt(n)\n        n_mod_divisor = n % divisor\n        if n_mod_divisor\
    \ == 0\n            return push!(factorize(divisor), factorize(n / divisor)...)\n\
    \        end\n        divisor += 2\n    end\n    return [n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsz26po28.jl:44\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [4] == [2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpsz26po28.jl:45\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [6] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpsz26po28.jl:46\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [8] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz26po28.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz26po28.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpsz26po28.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  MethodError: no method matching factorize(::Float64)\n\
    \  Closest candidates are:\n    factorize(!Matched::Int64) at /tmp/tmpsz26po28.jl:11\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpsz26po28.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsz26po28.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsz26po28.jl:43\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsz26po28.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    #write your\
    \ code here\n    return Vector{Int64}()\nend\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsh7_yo3i.jl:22\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:23\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:24\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:25\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsh7_yo3i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsh7_yo3i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsh7_yo3i.jl:26\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsh7_yo3i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n <= 0\n\
    \        return error(\"Input number should be positive\")\n    end\n    factors\
    \ = Int64[]\n    # Loop over all factors of 2\n    while n % 2 == 0\n        push!(factors,\
    \ 2)\n        n = n / 2\n    end\n    # Loop over all possible odd factors\n \
    \   factor = 3\n    while n > 1\n        while n % factor == 0\n            push!(factors,\
    \ factor)\n            n = n / factor\n        end\n        factor = factor +\
    \ 2\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while (n != 1)\n        while (n % divisor == 0)\n\
    \            push!(factors, divisor)\n            n = n / divisor\n        end\n\
    \        divisor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    is_prime(n)\
    \ && return [n]\n    factors = factorize(n\xF7divisor(n))\n    return append!(factors,\
    \ divisor(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpemim52lg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpemim52lg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpemim52lg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpemim52lg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: is_prime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpemim52lg.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpemim52lg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  \n    facs =\
    \ Vector{Int64}()\n    f = 2\n    while n > 1\n        while n % f == 0\n    \
    \        push!(facs, f)\n            n /= f\n        end\n        f += 1\n   \
    \ end\n    return facs\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n % 2 == 0\n        push!(prime_factors, 2)\n        n /= 2\n\
    \    end\n    for i in 3:sqrt(n)\n        while n % i == 0\n            push!(prime_factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    factors = []\n    while n%2 == 0\n        push!(factors, 2)\n    \
    \    n = n/2\n    end\n    factor = 3\n    while n > 1\n        while n%factor\
    \ == 0\n            push!(factors, factor)\n            n = n/factor\n       \
    \ end\n        factor += 2\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n<2\n \
    \       throw(DomainError(\"n should be positive integer >= 2\"))\n    end\n \
    \   res = Int64[]\n    factor = 2\n    while n>1\n        while n%factor == 0\n\
    \            push!(res, factor)\n            n /= factor\n        end\n      \
    \  factor += 1\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    v = Vector{Int64}(undef,\
    \ 0)\n    factor = 2\n    while n > 1\n        if n % factor == 0\n          \
    \  push!(v, factor)\n            n = n / factor\n        else\n            factor\
    \ += 1\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    s = Set()\n\
    \    c = n\n    for i in 2:n\n        while rem(c, i) == 0\n            c = c/i\n\
    \            push!(s, i)\n        end\n    end\n    return collect(s)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37e0v65l.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 19] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37e0v65l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37e0v65l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp37e0v65l.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37e0v65l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    j = 2\n    while n > 1\n        while n % j == 0\n            push!(prime_factors,\
    \ j)\n            n /= j\n        end\n        j += 1\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    f = 2\n    fs = []\n    while f <= isqrt(n)\n\
    \        if n % f == 0\n            push!(fs, f)\n            n = n \xF7 f\n \
    \       else\n            f += 1\n        end\n    end\n    push!(fs, n)\n   \
    \ return fs\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    while n%2==0\n        push!(factors,2)\n        n=n/2\n    end\n    k=3\n\
    \    while n>1\n        while n%k==0\n            push!(factors,k)\n         \
    \   n=n/k\n        end\n        k=k+2\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    factor = 2\n    while n != 1\n        while n % factor == 0\n \
    \           push!(factors, factor)\n            n /= factor\n        end\n   \
    \     factor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2 #return\
    \ empty vector if input is less than 2\n        return Int64[]\n    end\n    for\
    \ i in 2:n-1 #checking that n is a natural number\n        if n % i == 0\n   \
    \         return Int64[]\n        end\n    end\n    factors = Int64[] #vector\
    \ of factors\n    i = 2\n    while i <= n #while i is less than or equal to input\
    \ number\n        while n % i == 0 #if i is a factor of n\n            push!(factors,\
    \ i) #push i to the vector\n            n = n/i #now try to factorize n/i\n  \
    \      end\n        i = i + 1 #increment i\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0i03tr38.jl:37\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:38\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:39\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:40\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0i03tr38.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0i03tr38.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0i03tr38.jl:41\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: Int64[] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /share"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0i03tr38.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # use vector\
    \ instead of set to keep the order of addition\n    v = []\n    push!(v, factorize_helper(n))\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpctlczyq1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factorize_helper not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factorize_helper not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factorize_helper not defined\n \
    \ Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpctlczyq1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpctlczyq1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpctlczyq1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factorize_helper not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpctlczyq1.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpctlczyq1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    # 0.\
    \ Start at 2 and 1 because we only have to check up to square root\n    # 1. Initialize\
    \ vector of factors to empty.\n    # 2. Initialize potential factor to 1.\n  \
    \  # 3. While potential factor is less than or equal to square root of n:\n  \
    \  # 3.1 If n is divisible by potential factor, add potential factor to vector\
    \ of factors\n    # 3.2 Divide n by potential factor\n    # 3.3 Increase potential\
    \ factor by 1.\n    # 4. If n is not 1, add it to vector of factors\n    # 5.\
    \ Return vector of factors\n    \n    factors = Int64[]\n    current_factor =\
    \ 2\n    while current_factor <= floor(sqrt(n))\n        if n % current_factor\
    \ == 0\n            push!(factors, current_factor)\n            n = n / current_factor\n\
    \        end\n        current_factor += 1\n    end\n    if n != 1\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi8b6sbwd.jl:44\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:46\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:47\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpi8b6sbwd.jl:48\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8b6sbwd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8b6sbwd.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi8b6sbwd.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    array = Int64[]\n\
    \    while n % 2 == 0\n        push!(array, 2)\n        n = n/2\n    end\n   \
    \ for i = 3:2:floor(Int64, sqrt(n))\n        while n % i == 0\n            push!(array,\
    \ i)\n            n = n/i\n        end\n    end\n    if n > 2\n        push!(array,\
    \ n)\n    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
