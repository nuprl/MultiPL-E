name: HumanEval_125_split_words
language: jl
results:
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) != nothing\n        return split(txt)\n\
    \    elseif search(r\",\", txt) != nothing\n        return split(txt, \",\")\n\
    \    else\n        return count(txt[i]->(i%2==1)&&(txt[i] in 'a':'z'), txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"txt[i]\" is not a valid function argument name\
    \ around /tmp/tmp8rxvujxs.jl:19\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8rxvujxs.jl:1\n\
    in expression starting at /tmp/tmp8rxvujxs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findall(r\"\\S\", txt) == [] # if there are no non-whitespace\
    \ characters\n        if findall(r\",\", txt) == [] # if there are no commas\n\
    \            return sum(isodd.(collect(ch->ord(ch)-ord('a'),eachchar(txt)))) #\
    \ if there are no commas or whitespace, return the sum of the odd order characters\n\
    \        else\n            return split(txt, ',') # if there are no whitespace\
    \ chars but there are commas, split on commas\n        end\n    else\n       \
    \ return split(txt) # if there are whitespace characters, split on those\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpywafh223.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpywafh223.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpywafh223.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpywafh223.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpywafh223.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpywafh223.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpywafh223.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpywafh223.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpywafh223.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywafh223.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = split(txt, ' ')\n    if length(txt) > 1\n        return txt\n\
    \    else\n        txt = split(txt[1], ',')\n        if length(txt) > 1\n    \
    \        return txt\n        else\n            txt = split(txt[1], '')\n     \
    \       number = 0\n            for (i, x) in enumerate(txt)\n               \
    \ if islower(x) && i % 2 == 1\n                    number += 1\n             \
    \   end\n            end\n            return number\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ens40_9.jl:22\nin expression starting at\
    \ /tmp/tmp9ens40_9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, \" \")\n    elseif ','\
    \ in txt\n        return split(txt, \",\")\n    else\n        count = 0\n    \
    \    for i = 1:length(txt)\n            c = txt[i]\n            index = Int(findfirst(join(ASCIIString.(('a':'z')\
    \ .- 'a' .+ 1)), c))\n            if index != 0\n                count += index\
    \ % 2 == 1 ? 1 : 0\n            end\n        end\n        return count\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpte_9bvsm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpte_9bvsm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte_9bvsm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte_9bvsm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpte_9bvsm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpte_9bvsm.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte_9bvsm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte_9bvsm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpte_9bvsm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpte_9bvsm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, ' ')\n    words_size = length(words)\n    if\
    \ words_size == 1\n        commas = split(txt, ',')\n        commas_size = length(commas)\n\
    \        if commas_size == 1\n            odds = 0\n            for i in 1:length(txt)\n\
    \                odds += (ord(txt[i]) % 2 == 1 ? 1 : 0)\n            end\n   \
    \         return odds\n        else\n            return commas\n        end\n\
    \    else\n        return words\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6z0unr68.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6z0unr68.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6z0unr68.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6z0unr68.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp6z0unr68.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6z0unr68.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6z0unr68.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6z0unr68.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp6z0unr68.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6z0unr68.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # TODO: Write your code here!\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppql4qqsk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppql4qqsk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppql4qqsk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppql4qqsk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppql4qqsk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppql4qqsk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppql4qqsk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppql4qqsk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppql4qqsk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppql4qqsk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (search(r\"[ ,]+\", txt) != nothing)\n        if (search(r\"\
    [a-z]+\", txt) != nothing)\n            return split(txt, r\"[ ,]+\")\n      \
    \  else\n            return sum(n -> n % 2 == 1, [ord(char) - ord('a') for char\
    \ in txt])\n        end\n    else\n        return split(txt, r\"[ ,]+\")\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1fp94r77.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp1fp94r77.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1fp94r77.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1fp94r77.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fp94r77.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(matchall(r\"\\s\", txt))\n        if isempty(matchall(r\"\
    ,\", txt))\n            return sum(isodd.([ord(i) for i in lowercase(txt)]))\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6g27cgh0.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmp6g27cgh0.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g27cgh0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g27cgh0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6g27cgh0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\"[,]\", txt)\n        return split(txt, ',')\n    else\n        lowercase_letters\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n        counter = 0\n        for (idx, letter)\
    \ in enumerate(lowercase_letters)\n            if idx % 2 == 1\n             \
    \   counter += count(txt, letter)\n            end\n        end\n        return\
    \ counter\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp34nkdfvq.jl:19\nin expression\
    \ starting at /tmp/tmp34nkdfvq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return get_odd_letters(txt)\n\
    \    elseif !occursin(' ', txt)\n        return split(txt, \",\")\n    else\n\
    \        return split(txt, \" \")\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd4ukrt5g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd4ukrt5g.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ukrt5g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ukrt5g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd4ukrt5g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd4ukrt5g.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ukrt5g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ukrt5g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd4ukrt5g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4ukrt5g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    chars = Vector{String}(undef, 0)\n    whitespace = 0\n    comma\
    \ = 0\n    for char in txt\n        if char == ' '\n            whitespace = 1\n\
    \        elseif char == ','\n            comma = 1\n        end\n    end\n   \
    \ if whitespace == 1\n        return split(txt)\n    elseif comma == 1\n     \
    \   return split(txt, ',')\n    else\n        odds = 0\n        for i in txt\n\
    \            if (ord(i) - 96) % 2 == 1\n                odds += 1\n          \
    \  end\n        end\n        return odds\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0utjh4l.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0utjh4l.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0utjh4l.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0utjh4l.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo0utjh4l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0utjh4l.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0utjh4l.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0utjh4l.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo0utjh4l.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0utjh4l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        let\
    \ x = 0\n        for i=1:length(txt)\n            if isodd(ord(txt[i]) - ord('a'))\n\
    \                x += 1\n            end\n        end\n        return x\n    elseif\
    \ !occursin(\" \", txt) && occursin(\",\", txt)\n        split(txt, \",\")\n \
    \   elseif occursin(\" \", txt) && !occursin(\",\", txt)\n        split(txt, \"\
    \ \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"let\" at /tmp/tmpptsqytfp.jl:15 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpptsqytfp.jl:22\n\
    in expression starting at /tmp/tmpptsqytfp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # get all letters\n    letters = join(collect(txt), \"\")\n   \
    \ # get all words\n    words = split(txt)\n    # get all commas\n    commas =\
    \ split(txt, \",\")\n    # check if we have words\n    if (length(words) >= 1)\n\
    \        return words\n    # check if we have commas\n    elseif (length(commas)\
    \ >= 1)\n        return commas\n    # if no words or commas then count the letters\
    \ in odd order\n    else\n        count = 0\n        for i in letters\n      \
    \      index = Int(ord(i) - ord('a'))\n            if (index % 2 != 0)\n     \
    \           count += 1\n            end\n        end\n        return count\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo4e8e1x6.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo4e8e1x6.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4e8e1x6.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4e8e1x6.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo4e8e1x6.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo4e8e1x6.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4e8e1x6.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4e8e1x6.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo4e8e1x6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo4e8e1x6.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    commas = split(txt, \",\")\n    if size(words)\
    \ != (1,)\n        return words\n    elseif size(commas) != (1,)\n        return\
    \ commas\n    else\n        n = 0\n        for i in 1:length(txt)\n          \
    \  if i % 2 == 1 && islower(txt[i])\n                n += 1\n            end\n\
    \        end\n        return n\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqmc4z_7e.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqmc4z_7e.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmc4z_7e.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmc4z_7e.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqmc4z_7e.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqmc4z_7e.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmc4z_7e.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmc4z_7e.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqmc4z_7e.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmc4z_7e.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = [\" \"]\n    words = split(txt, whitespaces)\n  \
    \  if length(words) > 1 \n        return words\n    else \n        if contains(txt,\
    \ \",\")\n            words = split(txt, \",\")\n            return words\n  \
    \      else\n            num = 0\n            for c = txt\n                if\
    \ islower(c)\n                    if c == 'a' || c == 'c' || c == 'e' || c ==\
    \ 'g' || c == 'i' || c == 'k' || c == 'm' || c == 'o' || c == 'q' || c == 's'\
    \ || c == 'u' || c == 'w' || c == 'y'\n                        num += 1\n    \
    \                end\n                end\n            end\n            return\
    \ num\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx89rlo2a.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpx89rlo2a.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx89rlo2a.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx89rlo2a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx89rlo2a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx89rlo2a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words_vec = split(txt, \" \")\n    if length(words_vec) > 1\n \
    \       return words_vec\n    else\n        words_vec = split(txt, \",\")\n  \
    \      if length(words_vec) > 1\n            return words_vec\n        else\n\
    \            letters_vec = lowercase(txt)\n            odd_count = 0\n       \
    \     for i in 1:length(letters_vec)\n                if i % 2 == 1\n        \
    \            odd_count += 1\n                end\n            end\n          \
    \  return odd_count\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpage4jfkb.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpage4jfkb.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpage4jfkb.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpage4jfkb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpage4jfkb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpage4jfkb.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpage4jfkb.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpage4jfkb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpage4jfkb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpage4jfkb.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, ';', ',')\n    txt = replace(txt, \" \", \"\
    ,\")\n    txt = replace(txt, \"\\t\", \",\")\n    txt = replace(txt, \":\", \"\
    ,\")\n    txt = replace(txt, \".\", \",\")\n    txt = replace(txt, \"_\", \",\"\
    )\n    txt = replace(txt, \"-\", \",\")\n    txt = replace(txt, \"(\", \",\")\n\
    \    txt = replace(txt, \")\", \",\")\n    txt = replace(txt, \"?\", \",\")\n\
    \    txt = replace(txt, \"!\", \",\")\n    txt = replace(txt, \"'\", \",\")\n\
    \    txt = replace(txt, \"\\\"\", \",\")\n    txt = replace(txt, \"/\", \",\"\
    )\n    txt = replace(txt, \"\\\\\", \",\")\n    txt = replace(txt, \"[\", \",\"\
    )\n    txt = replace(txt, \"]\", \",\")\n    txt = replace(txt, \"{\", \",\")\n\
    \    txt = replace(txt, \"}\", \",\")\n    txt = replace(txt, \"|\", \",\")\n\
    \    txt = replace(txt, \"*\", \",\")\n    txt = replace(txt, \"=\", \",\")\n\
    \    txt = replace(txt, \"+\", \",\")\n    txt = replace(txt, \"#\", \",\")\n\
    \    txt = replace(txt, \"&\", \",\")\n    txt = replace(txt, \"%\", \",\")\n\
    \    txt = replace(txt, \"$\", \",\")\n    txt = replace(txt, \"\xA3\", \",\"\
    )\n    txt = replace(txt, \"\u20AC\", \",\")\n    txt = replace(txt, \"@\", \"\
    ,\")\n    txt = replace(txt, \"\xAB\", \",\")\n    txt = replace(txt, \"\xBB\"\
    , \",\")\n    txt = replace(txt, \"\xBF\", \",\")\n    txt = replace(txt, \"\xA1\
    \", \",\")\n    txt = replace(txt, \"\xA9\", \",\")\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b19tncg.jl:40\nin expression starting at\
    \ /tmp/tmp3b19tncg.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if occursin(r\"\\s\", txt)\n        return  split(txt)\n\
    \    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        cnt = 0\n        for i in txt\n            if Int(i) % 2 == 1\n     \
    \           cnt += 1\n            end\n        end\n        return cnt\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3drcu1m5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3drcu1m5.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3drcu1m5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3drcu1m5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3drcu1m5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3drcu1m5.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3drcu1m5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3drcu1m5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3drcu1m5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3drcu1m5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    import Base.split, Base.convert\n    if contains(txt, ' ')\n  \
    \      return split(txt, ' ')\n    elseif contains(txt, ',')\n        return split(txt,\
    \ ',')\n    else\n        return sum(i->isodd(i), collect(map(i-> ord(i)-ord('a'),\
    \ txt)))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"import\" expression not at top level\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtbwrd0k.jl:1\nin expression starting at /tmp/tmpmtbwrd0k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    x=txt.occursin(\" \")\n    y=txt.occursin(\",\")\n    z=0\n   \
    \ if x!=0\n        z=txt.split(\" \")\n    elseif y!=0\n        z=txt.split(\"\
    ,\")\n    else\n        for i in 1:length(txt)\n            if txt[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                z=z+1\n            end\n        end\n    end\n    return z\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp99vq3plr.jl:23\nin expression\
    \ starting at /tmp/tmp99vq3plr.jl:23\n"
  exit_code: 1
  status: SyntaxError
