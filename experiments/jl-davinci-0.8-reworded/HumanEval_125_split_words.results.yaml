language: jl
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) != nothing\n        return split(txt)\n\
    \    elseif search(r\",\", txt) != nothing\n        return split(txt, \",\")\n\
    \    else\n        return count(txt[i]->(i%2==1)&&(txt[i] in 'a':'z'), txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"txt[i]\" is not a valid function argument name\
    \ around /tmp/tmp8rxvujxs.jl:19\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8rxvujxs.jl:1\n\
    in expression starting at /tmp/tmp8rxvujxs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findall(r\"\\S\", txt) == [] # if there are no non-whitespace\
    \ characters\n        if findall(r\",\", txt) == [] # if there are no commas\n\
    \            return sum(isodd.(collect(ch->ord(ch)-ord('a'),eachchar(txt)))) #\
    \ if there are no commas or whitespace, return the sum of the odd order characters\n\
    \        else\n            return split(txt, ',') # if there are no whitespace\
    \ chars but there are commas, split on commas\n        end\n    else\n       \
    \ return split(txt) # if there are whitespace characters, split on those\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpywafh223.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpywafh223.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpywafh223.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpywafh223.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpywafh223.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpywafh223.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpywafh223.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpywafh223.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpywafh223.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpywafh223.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = split(txt, ' ')\n    if length(txt) > 1\n        return txt\n\
    \    else\n        txt = split(txt[1], ',')\n        if length(txt) > 1\n    \
    \        return txt\n        else\n            txt = split(txt[1], '')\n     \
    \       number = 0\n            for (i, x) in enumerate(txt)\n               \
    \ if islower(x) && i % 2 == 1\n                    number += 1\n             \
    \   end\n            end\n            return number\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ens40_9.jl:22\nin expression starting at\
    \ /tmp/tmp9ens40_9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, \" \")\n    elseif ','\
    \ in txt\n        return split(txt, \",\")\n    else\n        count = 0\n    \
    \    for i = 1:length(txt)\n            c = txt[i]\n            index = Int(findfirst(join(ASCIIString.(('a':'z')\
    \ .- 'a' .+ 1)), c))\n            if index != 0\n                count += index\
    \ % 2 == 1 ? 1 : 0\n            end\n        end\n        return count\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpte_9bvsm.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpte_9bvsm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpte_9bvsm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte_9bvsm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte_9bvsm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpte_9bvsm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpte_9bvsm.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpte_9bvsm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpte_9bvsm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpte_9bvsm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, ' ')\n    words_size = length(words)\n    if\
    \ words_size == 1\n        commas = split(txt, ',')\n        commas_size = length(commas)\n\
    \        if commas_size == 1\n            odds = 0\n            for i in 1:length(txt)\n\
    \                odds += (ord(txt[i]) % 2 == 1 ? 1 : 0)\n            end\n   \
    \         return odds\n        else\n            return commas\n        end\n\
    \    else\n        return words\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6z0unr68.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp6z0unr68.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6z0unr68.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6z0unr68.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6z0unr68.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp6z0unr68.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6z0unr68.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6z0unr68.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6z0unr68.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp6z0unr68.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # TODO: Write your code here!\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppql4qqsk.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppql4qqsk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppql4qqsk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppql4qqsk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppql4qqsk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppql4qqsk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppql4qqsk.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppql4qqsk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppql4qqsk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppql4qqsk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n  "
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (search(r\"[ ,]+\", txt) != nothing)\n        if (search(r\"\
    [a-z]+\", txt) != nothing)\n            return split(txt, r\"[ ,]+\")\n      \
    \  else\n            return sum(n -> n % 2 == 1, [ord(char) - ord('a') for char\
    \ in txt])\n        end\n    else\n        return split(txt, r\"[ ,]+\")\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1fp94r77.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1fp94r77.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp1fp94r77.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1fp94r77.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1fp94r77.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1fp94r77.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1fp94r77.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1fp94r77.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Mai"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(matchall(r\"\\s\", txt))\n        if isempty(matchall(r\"\
    ,\", txt))\n            return sum(isodd.([ord(i) for i in lowercase(txt)]))\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6g27cgh0.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp6g27cgh0.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmp6g27cgh0.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g27cgh0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g27cgh0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g27cgh0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g27cgh0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6g27cgh0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  "
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\"[,]\", txt)\n        return split(txt, ',')\n    else\n        lowercase_letters\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n        counter = 0\n        for (idx, letter)\
    \ in enumerate(lowercase_letters)\n            if idx % 2 == 1\n             \
    \   counter += count(txt, letter)\n            end\n        end\n        return\
    \ counter\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp34nkdfvq.jl:19\nin expression\
    \ starting at /tmp/tmp34nkdfvq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return get_odd_letters(txt)\n\
    \    elseif !occursin(' ', txt)\n        return split(txt, \",\")\n    else\n\
    \        return split(txt, \" \")\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpd4ukrt5g.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpd4ukrt5g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd4ukrt5g.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ukrt5g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ukrt5g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd4ukrt5g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd4ukrt5g.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4ukrt5g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4ukrt5g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd4ukrt5g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    chars = Vector{String}(undef, 0)\n    whitespace = 0\n    comma\
    \ = 0\n    for char in txt\n        if char == ' '\n            whitespace = 1\n\
    \        elseif char == ','\n            comma = 1\n        end\n    end\n   \
    \ if whitespace == 1\n        return split(txt)\n    elseif comma == 1\n     \
    \   return split(txt, ',')\n    else\n        odds = 0\n        for i in txt\n\
    \            if (ord(i) - 96) % 2 == 1\n                odds += 1\n          \
    \  end\n        end\n        return odds\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpo0utjh4l.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpo0utjh4l.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0utjh4l.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0utjh4l.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0utjh4l.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo0utjh4l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0utjh4l.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0utjh4l.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0utjh4l.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo0utjh4l.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        let\
    \ x = 0\n        for i=1:length(txt)\n            if isodd(ord(txt[i]) - ord('a'))\n\
    \                x += 1\n            end\n        end\n        return x\n    elseif\
    \ !occursin(\" \", txt) && occursin(\",\", txt)\n        split(txt, \",\")\n \
    \   elseif occursin(\" \", txt) && !occursin(\",\", txt)\n        split(txt, \"\
    \ \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"let\" at /tmp/tmpptsqytfp.jl:15 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpptsqytfp.jl:22\n\
    in expression starting at /tmp/tmpptsqytfp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # get all letters\n    letters = join(collect(txt), \"\")\n   \
    \ # get all words\n    words = split(txt)\n    # get all commas\n    commas =\
    \ split(txt, \",\")\n    # check if we have words\n    if (length(words) >= 1)\n\
    \        return words\n    # check if we have commas\n    elseif (length(commas)\
    \ >= 1)\n        return commas\n    # if no words or commas then count the letters\
    \ in odd order\n    else\n        count = 0\n        for i in letters\n      \
    \      index = Int(ord(i) - ord('a'))\n            if (index % 2 != 0)\n     \
    \           count += 1\n            end\n        end\n        return count\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpo4e8e1x6.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpo4e8e1x6.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo4e8e1x6.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4e8e1x6.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4e8e1x6.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo4e8e1x6.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo4e8e1x6.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo4e8e1x6.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo4e8e1x6.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpo4e8e1x6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    commas = split(txt, \",\")\n    if size(words)\
    \ != (1,)\n        return words\n    elseif size(commas) != (1,)\n        return\
    \ commas\n    else\n        n = 0\n        for i in 1:length(txt)\n          \
    \  if i % 2 == 1 && islower(txt[i])\n                n += 1\n            end\n\
    \        end\n        return n\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqmc4z_7e.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpqmc4z_7e.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqmc4z_7e.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmc4z_7e.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmc4z_7e.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqmc4z_7e.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqmc4z_7e.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmc4z_7e.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmc4z_7e.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqmc4z_7e.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = [\" \"]\n    words = split(txt, whitespaces)\n  \
    \  if length(words) > 1 \n        return words\n    else \n        if contains(txt,\
    \ \",\")\n            words = split(txt, \",\")\n            return words\n  \
    \      else\n            num = 0\n            for c = txt\n                if\
    \ islower(c)\n                    if c == 'a' || c == 'c' || c == 'e' || c ==\
    \ 'g' || c == 'i' || c == 'k' || c == 'm' || c == 'o' || c == 'q' || c == 's'\
    \ || c == 'u' || c == 'w' || c == 'y'\n                        num += 1\n    \
    \                end\n                end\n            end\n            return\
    \ num\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpx89rlo2a.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpx89rlo2a.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpx89rlo2a.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx89rlo2a.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx89rlo2a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx89rlo2a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words_vec = split(txt, \" \")\n    if length(words_vec) > 1\n \
    \       return words_vec\n    else\n        words_vec = split(txt, \",\")\n  \
    \      if length(words_vec) > 1\n            return words_vec\n        else\n\
    \            letters_vec = lowercase(txt)\n            odd_count = 0\n       \
    \     for i in 1:length(letters_vec)\n                if i % 2 == 1\n        \
    \            odd_count += 1\n                end\n            end\n          \
    \  return odd_count\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpage4jfkb.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpage4jfkb.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpage4jfkb.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpage4jfkb.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpage4jfkb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpage4jfkb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpage4jfkb.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpage4jfkb.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpage4jfkb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpage4jfkb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, ';', ',')\n    txt = replace(txt, \" \", \"\
    ,\")\n    txt = replace(txt, \"\\t\", \",\")\n    txt = replace(txt, \":\", \"\
    ,\")\n    txt = replace(txt, \".\", \",\")\n    txt = replace(txt, \"_\", \",\"\
    )\n    txt = replace(txt, \"-\", \",\")\n    txt = replace(txt, \"(\", \",\")\n\
    \    txt = replace(txt, \")\", \",\")\n    txt = replace(txt, \"?\", \",\")\n\
    \    txt = replace(txt, \"!\", \",\")\n    txt = replace(txt, \"'\", \",\")\n\
    \    txt = replace(txt, \"\\\"\", \",\")\n    txt = replace(txt, \"/\", \",\"\
    )\n    txt = replace(txt, \"\\\\\", \",\")\n    txt = replace(txt, \"[\", \",\"\
    )\n    txt = replace(txt, \"]\", \",\")\n    txt = replace(txt, \"{\", \",\")\n\
    \    txt = replace(txt, \"}\", \",\")\n    txt = replace(txt, \"|\", \",\")\n\
    \    txt = replace(txt, \"*\", \",\")\n    txt = replace(txt, \"=\", \",\")\n\
    \    txt = replace(txt, \"+\", \",\")\n    txt = replace(txt, \"#\", \",\")\n\
    \    txt = replace(txt, \"&\", \",\")\n    txt = replace(txt, \"%\", \",\")\n\
    \    txt = replace(txt, \"$\", \",\")\n    txt = replace(txt, \"\xA3\", \",\"\
    )\n    txt = replace(txt, \"\u20AC\", \",\")\n    txt = replace(txt, \"@\", \"\
    ,\")\n    txt = replace(txt, \"\xAB\", \",\")\n    txt = replace(txt, \"\xBB\"\
    , \",\")\n    txt = replace(txt, \"\xBF\", \",\")\n    txt = replace(txt, \"\xA1\
    \", \",\")\n    txt = replace(txt, \"\xA9\", \",\")\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b19tncg.jl:40\nin expression starting at\
    \ /tmp/tmp3b19tncg.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if occursin(r\"\\s\", txt)\n        return  split(txt)\n\
    \    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        cnt = 0\n        for i in txt\n            if Int(i) % 2 == 1\n     \
    \           cnt += 1\n            end\n        end\n        return cnt\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3drcu1m5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp3drcu1m5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3drcu1m5.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3drcu1m5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3drcu1m5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3drcu1m5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3drcu1m5.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3drcu1m5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3drcu1m5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3drcu1m5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    import Base.split, Base.convert\n    if contains(txt, ' ')\n  \
    \      return split(txt, ' ')\n    elseif contains(txt, ',')\n        return split(txt,\
    \ ',')\n    else\n        return sum(i->isodd(i), collect(map(i-> ord(i)-ord('a'),\
    \ txt)))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"import\" expression not at top level\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtbwrd0k.jl:1\nin expression starting at /tmp/tmpmtbwrd0k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    x=txt.occursin(\" \")\n    y=txt.occursin(\",\")\n    z=0\n   \
    \ if x!=0\n        z=txt.split(\" \")\n    elseif y!=0\n        z=txt.split(\"\
    ,\")\n    else\n        for i in 1:length(txt)\n            if txt[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                z=z+1\n            end\n        end\n    end\n    return z\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp99vq3plr.jl:23\nin expression\
    \ starting at /tmp/tmp99vq3plr.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, \" \")\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, \",\")\n    else\n        sum\
    \ = 0\n        for i in 1:length(txt)\n            if islower(txt[i]) && i % 2\
    \ == 1\n                sum += 1\n            end\n        end\n        return\
    \ sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpon0o_0y6.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpon0o_0y6.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpon0o_0y6.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpon0o_0y6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpon0o_0y6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpon0o_0y6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpon0o_0y6.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpon0o_0y6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpon0o_0y6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpon0o_0y6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at "
  timestamp: 1660008918
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    (txt == \"\") && return 1\n    txt = replace(txt, \" \", \",\"\
    )\n    txt = replace(txt, \"\\\"\", \"\")\n    txt = replace(txt, \"(\", \"\"\
    )\n    txt = replace(txt, \")\", \"\")\n    txt = replace(txt, \"[\", \"\")\n\
    \    txt = replace(txt, \"]\", \"\")\n    w_txt = split(txt, \",\")\n    res =\
    \ length(filter(x -> (mod(x, 2) == 1), collect(Int, [ord(c) - 96 for c in lowercase(w_txt[1])])))\n\
    \    (length(w_txt) > 1) && return (w_txt)\n    res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpjwp5q6dn.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjwp5q6dn.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwp5q6dn.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwp5q6dn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjwp5q6dn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjwp5q6dn.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwp5q6dn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwp5q6dn.jl:30\ntest set:\
    \ Error During Tes"
  timestamp: 1660008919
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    white_space_indices = findall(x -> x == ' ', txt)\n    comma_indices\
    \ = findall(x -> x == ',', txt)\n    if !isempty(white_space_indices)\n      \
    \  return split(txt, \" \")\n    elseif !isempty(comma_indices)\n        return\
    \ split(txt, \",\")\n    else\n        odd_numbers = [c for c in 1:26 if isodd(c)]\n\
    \        odd_letters = [chr(i + 96) for i in odd_numbers]\n        lower_txt =\
    \ lowercase(txt)\n        n = 0\n        for c in lower_txt\n            n +=\
    \ in(c, odd_letters)\n        end\n        return n\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpu2dzbfkk.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu2dzbfkk.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2dzbfkk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2dzbfkk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpu2dzbfkk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu2dzbfkk.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2dzbfkk.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2dzbfkk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpu2dzbfkk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      sum([ord(letter) % 2 for letter in txt])\n        else\n            map(x\
    \ -> split(x, \",\"), txt)\n        end\n    else\n        map(x -> split(x, \"\
    \ \"), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2idid_qp.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp2idid_qp.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching split(::Char, ::String)\n  Closest candidates are:\n    split(!Matched::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:417\n\
    \  Stacktrace:\n   [1] (::var\"#3#6\")(x::Char)\n     @ Main /tmp/tmp2idid_qp.jl:21\n\
    \   [2] map(f::var\"#3#6\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] split_words(txt::String)\n     @ Main /tmp/tmp2idid_qp.jl:21\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2idid_qp.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2idid_qp.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2idid_qp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching split(::Char, ::String)\n  Closest candidates are:\n    split(!Matched::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:417\n\
    \  Stacktrace:\n   [1] (::var\"#2#5\")(x::Char)\n     @ Main /tmp/tmp2idid_qp.jl:18\n\
    \   [2] map(f::var\"#2#5\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] split_words(txt::String)\n     @ Main /tmp/tmp2idid_qp.jl:18\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2idid_qp.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2idid_qp.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2idid_qp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching split(::Char, ::String)\n  Closest candidates are:\n    "
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\n    if ' ' in txt\n        tmp =\
    \ split(txt, ' ')\n        if ',' in tmp[1]\n            return split(txt, ',')\n\
    \        else\n            return tmp\n        end\n    else\n        if ',' in\
    \ txt\n            return split(txt, ',')\n        else\n            return sum(ismember(lowercase(txt),\
    \ 'acegikmoqsuwy'))\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpuj67sxi7.jl:36\nin expression\
    \ starting at /tmp/tmpuj67sxi7.jl:36\n"
  stdout: ''
  timestamp: 1660008916
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt,r\"\\s+|,+\")\n    if length(words) == 1\n  \
    \      return length(lowercase(txt))\n    else\n        return words\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpc8tk_vnw.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc8tk_vnw.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc8tk_vnw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8tk_vnw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc8tk_vnw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc8tk_vnw.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc8tk_vnw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8tk_vnw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc8tk_vnw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    no_whitespace = replace(txt, r\"\\s+\" => \"\")\n    no_comma =\
    \ replace(no_whitespace, r\",\" => \"\")\n    if !isempty(no_comma)\n        split(txt,\
    \ r\"\\s+|,\")\n    else\n        count = 0\n        for (i,char) in enumerate(no_comma)\n\
    \            if i % 2 == 0 && islower(char)\n                count += 1\n    \
    \        end\n        end\n        count\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3l371e70.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp3l371e70.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3l371e70.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3l371e70.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3l371e70.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3l371e70.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3l371e70.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3l371e70.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3l371e70.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3l371e70.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpkq7fkxqv.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpkq7fkxqv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkq7fkxqv.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkq7fkxqv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkq7fkxqv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkq7fkxqv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpkq7fkxqv.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkq7fkxqv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkq7fkxqv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkq7fkxqv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     "
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, ',')\n    else\n        return count_lower_case_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_3ubvtp7.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp_3ubvtp7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp_3ubvtp7.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3ubvtp7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3ubvtp7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_3ubvtp7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_3ubvtp7.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3ubvtp7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3ubvtp7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_3ubvtp7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_3ubvtp7.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3ubvtp7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3ubvtp7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_3ubvtp7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008917
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = strip(txt)\n    tmp = split(txt, \" \")\n    if length(tmp)\
    \ > 1\n        return tmp\n    end\n    tmp = split(txt, \",\")\n    if length(tmp)\
    \ > 1\n        return tmp\n    end\n    cnt = 0\n    for i in 1:length(txt)\n\
    \        if islower(txt[i])\n            cnt += Int64(ord(txt[i]) % 2)\n     \
    \   end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2vr9kedz.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp2vr9kedz.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2vr9kedz.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vr9kedz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vr9kedz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2vr9kedz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2vr9kedz.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vr9kedz.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vr9kedz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2vr9kedz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008918
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt) == true\n        return split(txt, ' ')\n\
    \    elseif occursin(',', txt) == true\n        return split(txt, ',')\n    else\n\
    \        return sum(i for i in 1:length(txt) if isodd(ord(txt[i]) - ord('a')))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpi9wql1nb.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpi9wql1nb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi9wql1nb.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9wql1nb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9wql1nb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpi9wql1nb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi9wql1nb.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9wql1nb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9wql1nb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpi9wql1nb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008919
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) > 1\n     \
    \   return words\n    else\n        words = split(txt, r\"\\,\")\n        if length(words)\
    \ > 1\n            return words\n        else\n            return sum(x -> x %\
    \ 2 == 1 ? 1 : 0, isodd.(collect(txt)))\n        end\n    end\nend\nsplit_words(\"\
    Hello world!\")\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\nsplit_words(\"\
    ab,cd,ef\")\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type \n  Vector{SubString{String}}\
    \ to an object of type \n  Union{Int64, Vector{String}}\nClosest candidates are:\n\
    \  convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/"
  stdout: ''
  timestamp: 1660008919
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !contains(txt, ' ') && !contains(txt, ',')\n        return sum(\
    \ 1 for (i, c) in enumerate(txt) if islower(c) && i % 2 == 0 )\n    elseif !contains(txt,\
    \ ' ')\n        split(txt, ',')\n    else\n        split(txt, ' ')\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdceesb59.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpdceesb59.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdceesb59.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdceesb59.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdceesb59.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdceesb59.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdceesb59.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdceesb59.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdceesb59.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdceesb59.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008919
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = findall(txt, r\"\\s+\")\n    ws_ind = isempty(ws) ? findall(txt,\
    \ r\",\") : ws\n    isempty(ws_ind) ? sum(abs.(rem.(map(ord, collect(txt)), 2)))\
    \ : string.(split(txt, ws_ind))\nend\n@assert split_words(\"Hello world!\") ==\
    \ [\"Hello\", \"world!\"]\n@assert split_words(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"]\n@assert split_words(\"abcdef\") == 3\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: "ERROR: LoadError: MethodError: no method matching findall(::String, ::Regex)\n\
    Closest candidates are:\n  findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n  findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n  findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \  ...\nStacktrace:\n [1] split_words(txt::"
  stdout: ''
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt, \" \")\n    if length(s) != 1\n        return s\n\
    \    end\n    s = split(txt, \",\")\n    if length(s) != 1\n        return s\n\
    \    end\n    cnt = 0\n    for (i, c) in enumerate(txt)\n        if i % 2 == 0\
    \ && c in 'abcdefghijklmnopqrstuvwxyz'\n            cnt += 1\n        end\n  \
    \  end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpma63fxs9.jl:24\nin expression\
    \ starting at /tmp/tmpma63fxs9.jl:24\n"
  stdout: ''
  timestamp: 1660008916
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    n = length(txt)\n    j = 1\n    words = []\n    while j <= n\n\
    \        i = j\n        while i <= n && !isspace(txt[i]) && txt[i] != ','\n  \
    \          i += 1\n        end\n        if i == j\n            break\n       \
    \ end\n        push!(words, txt[j:i-1])\n        j = i + 1\n    end\n    if length(words)\
    \ == 0\n        count = 0\n        for i = 1:n\n            x = Int(txt[i]) -\
    \ 97\n            if (x % 2 == 1) && (x >= 0) && (x <= 25)\n                count\
    \ += 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4zkt874s.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmp4zkt874s.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{Any} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4zkt874s.jl:38\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zkt874s.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zkt874s.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp4zkt874s.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp4zkt874s.jl:38\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zkt874s.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zkt874s.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp4zkt874s.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::S"
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if \" \" in txt \n        return split(txt)\n    elseif \",\" in\
    \ txt\n        return split(txt, \",\")\n    else \n        count = 0\n      \
    \  for i in txt\n            if i in \"abcdefghijklmnopqrstuvwxyz\" && ord(i)\
    \ % 2 == 1\n                count += 1\n            end\n        end\n       \
    \ return count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmeyku_et.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpmeyku_et.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpmeyku_et.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmeyku_et.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmeyku_et.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmeyku_et.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpmeyku_et.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmeyku_et.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmeyku_et.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmeyku_et.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpmeyku_et.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmeyku_et.jl:35 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008917
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        odd_num = 0\n       \
    \ for c in txt\n            if ord(c) % 2 == 1\n                odd_num += 1\n\
    \            end\n        end\n        return odd_num\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0muxau3w.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp0muxau3w.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0muxau3w.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0muxau3w.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0muxau3w.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp0muxau3w.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0muxau3w.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0muxau3w.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0muxau3w.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp0muxau3w.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008918
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 1\n        if length(findall(x\
    \ -> isalpha(x) && islower(x), txt)) > 0\n            return length(findall(c\
    \ -> ord(c) % 2 == 1, txt))\n        else\n            return parse(Int64, txt)\n\
    \        end\n    else\n        return words\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpq223tof7.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq223tof7.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq223tof7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq223tof7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpq223tof7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#3\")(x::Char)\n      @ Main /tmp/tmpq223tof7.jl:16\n\
    \    [2] #104\n      @ ./iterators.jl:0 [inlined]\n    [3] iterate(::Base.Iterators.Filter{Base.var\"\
    #104#106\"{var\"#1#3\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect(itr::Base.Generator{Base.Iterators.Filter{Base.var\"\
    #104#106\"{var\"#1#3\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}}, Base.var\"#103#105\"})\n      @ Base ./array.jl:721\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] split_words(txt::String)\n\
    \      @ Main /tmp/tmpq223tof7.jl:16\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpq223tof7.jl:31 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia"
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(x -> x == ' ', txt) != 0\n        return split(txt, '\
    \ ')\n    elseif count(x -> x == ',', txt) != 0\n        return split(txt, ',')\n\
    \    else\n        odd_count = 0\n        for i in 1:length(txt)\n           \
    \ if islower(txt[i]) && (ord(txt[i]) % 2 == 1)\n                odd_count += 1\n\
    \            end\n        end\n        return odd_count\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1b6gkdzz.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp1b6gkdzz.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1b6gkdzz.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1b6gkdzz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1b6gkdzz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1b6gkdzz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1b6gkdzz.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1b6gkdzz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1b6gkdzz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1b6gkdzz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        out = 0\n\
    \        for w in txt\n            # print(w)\n            if islower(w) && (ord(w)\
    \ - ord('a')) % 2 == 1\n                out += 1\n            end\n        end\n\
    \        return out\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ \",\")\n    else\n        return split(txt, \" \")\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5qpfwyvz.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp5qpfwyvz.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qpfwyvz.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qpfwyvz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qpfwyvz.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5qpfwyvz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qpfwyvz.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qpfwyvz.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qpfwyvz.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5qpfwyvz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008918
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split = split(txt, \" \")\n    if length(split) == 1\n        split\
    \ = split(txt, \",\")\n        if length(split) == 1\n            count = 0\n\
    \            for c in txt\n                if islower(c) && (c - 'a') % 2 == 1\n\
    \                    count += 1\n                end\n            end\n      \
    \      return count\n        end\n    end\n    return split\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp8wcsflu5.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8wcsflu5.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp8wcsflu5.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8wcsflu5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8wcsflu5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8wcsflu5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8wcsflu5.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8wcsflu5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8wcsflu5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8wcsflu5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8wcsflu5.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8wcsflu5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8wcsflu5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8wcsflu5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp8wcsflu5.jl:14\n   [2] ma"
  timestamp: 1660008917
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, ' ')) > 1\n        return split(txt, ' ')\n\
    \    elseif length(split(txt, ',')) > 1\n        return split(txt, ',')\n    else\n\
    \        n = length(split(txt, ',')) \n        counter = 0\n        if n % 2 ==\
    \ 0\n            for i in 1:n\n                if txt[i] == 'a'\n            \
    \        counter += 1\n                end\n            end\n        else\n  \
    \          for i in 1:n\n                if txt[i] == 'b'\n                  \
    \  counter += 1\n                end\n            end\n        end\n        return\
    \ counter\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpzq3br_le.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzq3br_le.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq3br_le.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq3br_le.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpzq3br_le.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzq3br_le.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq3br_le.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq3br_le.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpzq3br_le.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008919
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ix = match(r\"\\s+\", txt)\n    if ix !== nothing\n        split(txt,\
    \ r\"\\s+\")\n    else\n        if match(r\",\", txt) !== nothing\n          \
    \  split(txt, r\",\")\n        else\n            sum(ord(c) % 2 == 1 for c in\
    \ txt)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpkr_d0zlu.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkr_d0zlu.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr_d0zlu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkr_d0zlu.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkr_d0zlu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkr_d0zlu.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkr_d0zlu.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkr_d0zlu.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkr_d0zlu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008921
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # if no whitespaces in txt (iswhitespace is a function in Base)\n\
    \    if !iswhitespace(txt)\n        # if no commas in txt\n        if !',' in\
    \ txt\n            # iterate through each character and find the characters in\
    \ lowercase,\n            # and check if their ASCII order value is odd.\n   \
    \         return sum(map(x -> islower(x) && ord(x) % 2 == 1, txt))\n        else\n\
    \            # split the string on commas\n            return split(txt, ',')\n\
    \        end\n    else\n        # split the string on whitespaces\n        return\
    \ split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzm6_m_bf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpzm6_m_bf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ iswhitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmpzm6_m_bf.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzm6_m_bf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzm6_m_bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzm6_m_bf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: iswhitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzm6_m_bf.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzm6_m_bf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzm6_m_bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzm6_m_bf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: iswhitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzm6_m_bf.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzm6_m_bf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzm6_m_bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzm6_m_bf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ iswhitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp"
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 1\n        words =\
    \ split(txt, \",\")\n        if length(words) == 1\n            return sum(map(x\
    \ -> isodd(x), map(x -> ord(x) - ord('a'), split(txt))))\n        end\n    end\n\
    \    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpuxtchfgk.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpuxtchfgk.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuxtchfgk.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxtchfgk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxtchfgk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuxtchfgk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuxtchfgk.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxtchfgk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxtchfgk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuxtchfgk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008922
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) != nothing\n        return split(txt)\n\
    \    elseif search(r\",\", txt) != nothing\n        return split(txt, \",\")\n\
    \    else\n        a = 0\n        for c in txt\n            a += 1\n         \
    \   if c in 'aeiou'\n                a += 1\n            end\n        end\n  \
    \      return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxk0ou90i.jl:22\nin expression\
    \ starting at /tmp/tmpxk0ou90i.jl:22\n"
  stdout: ''
  timestamp: 1660008919
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, ',', ' ')\n    if !contains(txt, ' ')\n    \
    \    return sum(ord(txt[i])-ord('a')+1 for i in 1:length(txt) if i%2 != 0)\n \
    \   end\n    return split(txt)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzrqj459p.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpzrqj459p.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::Char)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzrqj459p.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzrqj459p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzrqj459p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzrqj459p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::Char)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzrqj459p.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzrqj459p.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzrqj459p.jl:24\ntest set:\
    \ Error During Test at /tm"
  timestamp: 1660008921
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespace_regex = r\"\\s+\"\n    whitespace_search = search(whitespace_regex,\
    \ txt)\n    if !isnothing(whitespace_search)\n        return split(txt, whitespace_regex)\n\
    \    end\n    comma_regex = r\",\"\n    comma_search = search(comma_regex, txt)\n\
    \    if !isnothing(comma_search)\n        return split(txt, comma_regex)\n   \
    \ end\n    return sum(sum(string.([txt]).[end - i + 1] .== 'a':'z').%2 for i =\
    \ 1:length(txt))\nend\n \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpehcp6mbr.jl:24\nin expression starting at /tmp/tmpehcp6mbr.jl:24\n"
  stdout: ''
  timestamp: 1660008920
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        words = split(txt, ' ')\n        return\
    \ words\n    elseif ',' in txt\n        words = split(txt, ',')\n        return\
    \ words\n    else\n        letters = sum(i-> isodd(i) ? 1 : 0, [findfirst(lowercase(txt),\
    \ r) for r in lowercase(txt)])\n        return letters\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgpxalj90.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpgpxalj90.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgpxalj90.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpxalj90.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpxalj90.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgpxalj90.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgpxalj90.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpxalj90.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpxalj90.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgpxalj90.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008923
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(txt, ' ') > 0 \n        return split(txt, ' ')\n    elseif\
    \ count(txt, ',') > 0\n        return split(txt, ',')\n    else\n        return(sum(isodd.(lowercase(txt)\
    \ .- ord('a'))))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjzjljpfs.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpjzjljpfs.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ objects of type String are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String,\
    \ itr::Char)\n     @ Base ./reduce.jl:1201\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpjzjljpfs.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjzjljpfs.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjzjljpfs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjzjljpfs.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String,\
    \ itr::Char)\n     @ Base ./reduce.jl:1201\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpjzjljpfs.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjzjljpfs.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjzjljpfs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjzjljpfs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\n     @ Base ./reduce.jl:1"
  timestamp: 1660008922
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    idx = findfirst(x -> x in \" ,;\", txt)\n    if idx == nothing\n\
    \        return sum(map(x -> isodd(Int(x)-97), collect(txt)))\n    else\n    \
    \    return split(txt, txt[idx])\n    end\nend\n#=\n(c) Copright IBM Corp. 2018\n\
    Disclosure-IBM Intellectual Property\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: unterminated multi-line comment #=\
    \ ... =#\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpocef7w1m.jl:38\nin expression\
    \ starting at /tmp/tmpocef7w1m.jl:38\n"
  stdout: ''
  timestamp: 1660008920
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    flag = 0\n    for c in txt\n        if c == ' '\n            flag\
    \ = 1\n            break\n        end\n    end\n    if flag == 1\n        txt\
    \ = split(txt)\n    else\n        flag = 0\n        for c in txt\n           \
    \ if c == ','\n                flag = 1\n                break\n            end\n\
    \        end\n        if flag == 1\n            txt = split(txt, ',')\n      \
    \  else\n            N = length(txt)\n            flag = 0\n            for c\
    \ in txt\n                if 'a' <= c <= 'z'\n                    if ord(c) %\
    \ 2 == 1\n                        flag += 1\n                    end\n       \
    \         end\n            end\n            txt = flag\n        end\n    end\n\
    \    return txt\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpve5ozplh.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpve5ozplh.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpve5ozplh.jl:46\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpve5ozplh.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpve5ozplh.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpve5ozplh.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpve5ozplh.jl:46\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpve5ozplh.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpve5ozplh.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpve5ozplh.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008923
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # Whitespace\n    if (txt == strip(txt))\n        if(txt == strip(txt,','))\n\
    \            for i in 1:length(txt)\n                if(txt[i] == ',')\n     \
    \               return split(txt,',')\n                end\n            end\n\
    \        else\n            return split(txt,',')\n        end\n    else\n    \
    \    count = 0\n        for i in 1:length(txt)\n            if isa(txt[i], String)\n\
    \                if((string(txt[i]) == 'a') || (string(txt[i]) == 'c') || (string(txt[i])\
    \ == 'e') || (string(txt[i]) == 'g') || (string(txt[i]) == 'i') || (string(txt[i])\
    \ == 'k') || (string(txt[i]) == 'm') || (string(txt[i]) == 'o') || (string(txt[i])\
    \ == 'q') || (string(txt[i]) == 's') || (string(txt[i]) == 'u') || (string(txt[i])\
    \ == 'w') || (string(txt[i]) == 'y'))\n                    count = count + 1\n\
    \                end\n            end\n        end\n        return count\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphi2_al1p.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmphi2_al1p.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphi2_al1p.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphi2_al1p.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphi2_al1p.jl:41\ntest set:\
    \ Error During Test at /tmp/tmphi2_al1p.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphi2_al1p.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphi2_al1p.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphi2_al1p.jl:41\ntest set:\
    \ Error During Test at /tmp/tmphi2_al1p.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n "
  timestamp: 1660008923
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # First you should check if there are whitespaces in the string\n\
    \    # If yes, then check if there are commas in the string\n    # If yes, then\
    \ check if there are lower-case letters with odd order in the alphabet\n    #\
    \ If not, then return a vector of words split on whitespace\n    # If not, then\
    \ return a vector of words split on commas\n    # If not, then return the number\
    \ of lower-case letters with odd order in the alphabet\n    return \"replace this\
    \ line\"\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpn7gxq5ee.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpn7gxq5ee.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpn7gxq5ee.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn7gxq5ee.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn7gxq5ee.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn7gxq5ee.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpn7gxq5ee.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn7gxq5ee.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn7gxq5ee.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn7gxq5ee.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ M"
  timestamp: 1660008923
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n  i = 1\n  whitespace = [' ']\n  comma = [',']\n  if length(txt) ==\
    \ 1\n    return 3\n  end\n  if length(txt) == 0\n    return []\n  end\n  if any(txt[i]\
    \ in whitespace for i in 1:length(txt))\n    return split(txt, \" \")\n  elseif\
    \ any(txt[i] in comma for i in 1:length(txt))\n    return split(txt, \",\")\n\
    \  else\n    odd = 0\n    for i in 1:length(txt)\n      if ord(txt[i])%2 == 1\n\
    \        odd += 1\n      end\n    end\n    return odd\n  end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp0rqlwhl8.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0rqlwhl8.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rqlwhl8.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0rqlwhl8.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp0rqlwhl8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0rqlwhl8.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rqlwhl8.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0rqlwhl8.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp0rqlwhl8.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008924
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) != 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) != 1\n        return split(txt, \"\
    ,\")\n    else \n        return sum(isodd.(map(txt -> Int(txt), collect(txt))))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp0auj6p4g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0auj6p4g.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0auj6p4g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0auj6p4g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0auj6p4g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0auj6p4g.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0auj6p4g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0auj6p4g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0auj6p4g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(findall(txt, r\"\\s\"))\n        if isempty(findall(txt,\
    \ r\",\"))\n            # Count the number of lower-case letters with odd order\
    \ in the alphabet\n            sum = 0\n            for c in txt\n           \
    \     val = Int64(ord(c))\n                if val > 96 && val < 123 && (val -\
    \ 97) % 2 == 1\n                    sum += 1\n                end\n          \
    \  end\n            return sum\n        else\n            # Split on commas if\
    \ not whitespaces\n            split = split(txt, \",\")\n            return split\n\
    \        end\n    else\n        # Split on whitespaces if possible\n        split\
    \ = split(txt, \" \")\n        return split\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcm5k1gcw.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpcm5k1gcw.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findall(::String, ::Regex)\n  Closest candidates are:\n \
    \   findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcm5k1gcw.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm5k1gcw.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm5k1gcw.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpcm5k1gcw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findall(::String, ::Regex)\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcm5k1gcw.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm5k1gcw.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm5k1gcw.jl:40\ntest set:\
    \ Error Du"
  timestamp: 1660008923
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whites = ' ' in txt\n    commas = ',' in txt\n    if whites\n \
    \       split(txt, \" \")\n    elseif commas\n        split(txt, \",\")\n    else\n\
    \        sum(1 for i in txt if ord(i) % 2 == 1)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp8q8va8rq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8q8va8rq.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8q8va8rq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8q8va8rq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8q8va8rq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8q8va8rq.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8q8va8rq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8q8va8rq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8q8va8rq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    space = indmax(txt .== ' ')\n    if space == 0\n        comma =\
    \ indmax(txt .== ',')\n        if comma == 0\n            return length(txt)\n\
    \        else\n            return split(txt, ',')\n        end\n    else\n   \
    \     return split(txt, ' ')\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2ognsmfj.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2ognsmfj.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ indmax not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp2ognsmfj.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ognsmfj.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ognsmfj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2ognsmfj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2ognsmfj.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ognsmfj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ognsmfj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2ognsmfj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2ognsmfj.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ognsmfj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ognsmfj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2ognsmfj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ indmax not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp2ognsmfj.jl:14\n   [2"
  timestamp: 1660008922
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \",\", \" \")\n    result = length(findall(r\"\
    \\b[a-z]+\\b\", txt))\n    if result == 0\n        odd = length(findall(r\"[a-zA-Z]\"\
    , txt)) % 2\n        if odd == 0\n            return 0\n        else\n       \
    \     return 1\n        end\n    else\n        words = split(txt)\n        return\
    \ words\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi7093jv7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpi7093jv7.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi7093jv7.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7093jv7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi7093jv7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi7093jv7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi7093jv7.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi7093jv7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi7093jv7.jl:32\ntest set:\
    \ Error During Tes"
  timestamp: 1660008923
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt != \"\"\n        split_words(txt) = split(txt, \" \")\n\
    \        split_words(txt) = split(txt, \",\")\n        split_words(txt) = txt_count\n\
    \    end\n    return split_words(txt)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'WARNING: Method definition split_words(Any) in module Main at /tmp/tmpvnp82u0a.jl:15
    overwritten at /tmp/tmpvnp82u0a.jl:16.

    WARNING: Method definition split_words(Any) in module Main at /tmp/tmpvnp82u0a.jl:16
    overwritten at /tmp/tmpvnp82u0a.jl:17.

    ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored, 0 broken.

    in expression starting at /tmp/tmpvnp82u0a.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpvnp82u0a.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ txt_count not defined\n  Stacktrace:\n   [1] split_words\n     @ /tmp/tmpvnp82u0a.jl:17\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpvnp82u0a.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvnp82u0a.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvnp82u0a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvnp82u0a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: txt_count\
    \ not defined\n  Stacktrace:\n   [1] split_words\n     @ /tmp/tmpvnp82u0a.jl:17\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpvnp82u0a.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvnp82u0a.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvnp82u0a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvnp82u0a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: txt_count\
    \ not defined\n  Stacktrace:\n   [1] split_words\n     @ /tmp/tmpvnp82u0a.jl:17\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpvnp82u0a.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvnp82u0a.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvnp82u0a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpvnp82u0a.jl:29\n  Test threw exception\n  Expression:"
  timestamp: 1660008922
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) > 1\n     \
    \   return words\n    else\n        return sum(ord(c) % 2 == 1 for c in lowercase(txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp16ob2y3t.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp16ob2y3t.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp16ob2y3t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp16ob2y3t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp16ob2y3t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(c::Char)\n      @ Main ./none:0\n\
    \    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::String)\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n\
    \      @ ./reduce.jl:162 [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:162\
    \ [inlined]\n    [8] #mapreduce#248\n      @ ./reduce.jl:289 [inlined]\n    [9]\
    \ mapreduce\n      @ ./reduce.jl:289 [inlined]\n   [10] #sum#251\n      @ ./reduce.jl:503\
    \ [inlined]\n   [11] sum\n      @ ./reduce.jl:503 [inlined]\n   [12] #sum#252\n\
    \      @ ./reduce.jl:532 [inlined]\n   [13] sum\n      @ ./reduce.jl:532 [inlined]\n\
    \   [14] split_words(txt::String)\n      @ Main /tmp/tmp16ob2y3t.jl:18\n   [15]\
    \ macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp16ob2y3t.jl:27 [inlined]\n\
    \   [17] macro expans"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    commas = findall(txt, \",\")\n    whitespaces = findall(txt, \"\
    \ \")\n    if length(whitespaces) != 0\n        return split(txt, \" \")\n   \
    \ elseif length(commas) != 0\n        return split(txt, \",\")\n    else\n   \
    \     return length(findall(txt, x -> islower(x) && (mod(ord(x) - ord('a'), 2)\
    \ == 1), txt))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzn6pdoc4.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpzn6pdoc4.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findall(::String, ::var\"#1#2\", ::String)\n  Closest candidates\
    \ are:\n    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzn6pdoc4.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzn6pdoc4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzn6pdoc4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpzn6pdoc4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findall(::String, ::var\"#1#2\", ::String)\n  Closest candidates are:\n\
    \    findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzn6pdoc4.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzn6pdoc4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzn6pd"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #####################################################################################################\n\
    \    # TODO: Implement a method which returns a vector of words split on whitespace,\
    \ if no whitespaces #\n    # exists in the text you should split on commas ','\
    \ if no commas exists you should return the      #\n    # number of lower-case\
    \ letters with odd order in the alphabet                                     #\n\
    \    #####################################################################################################\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpbvbbc5v0.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpbvbbc5v0.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbvbbc5v0.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvbbc5v0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvbbc5v0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbvbbc5v0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpbvbbc5v0.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvbbc5v0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvbbc5v0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbvbbc5v0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     "
  timestamp: 1660008923
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if split(txt, ' ') != []\n        return split(txt, ' ')\n    elseif\
    \ split(txt, ',') != []\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> isodd(Int(x) - Int('a')), txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp06cwbjef.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp06cwbjef.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp06cwbjef.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp06cwbjef.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp06cwbjef.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp06cwbjef.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp06cwbjef.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp06cwbjef.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp06cwbjef.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp06cwbjef.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !(occursin(' ', txt))\n        if !(occursin(',', txt))\n  \
    \          return length(filter(x -> isodd(x), ord.(txt)))\n        else\n   \
    \         return split(txt, ',')\n        end\n    else\n        return split(txt)\n\
    \    end\nend\n\"\"\"\n    Given a vector of strings, each word in the vector\
    \ should be transformed to a \n    (lower-case) alphabetical character ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25.\n    All the words that consist of one\
    \ character should be ignored.\n    The function should return the sum of the\
    \ lengths of all words in the vector.\n    Examples\n    >>> sum_word_lengths([\"\
    Hello\", \"world!\"])\n    9\n    >>> sum_word_lengths([\"Hello\", \"world!\"\
    , \"abcdef\"])\n    9\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpm5eerf73.jl:24\nin expression starting at /tmp/tmpm5eerf73.jl:24\n"
  stdout: ''
  timestamp: 1660008921
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    x = split(txt, r\"\\s+\")\n    length(x) == 1 && return parse(Int64,\
    \ x[1])\n    length(x) > 1 && return x\n    x = split(txt, \",\")\n    length(x)\
    \ == 1 && return parse(Int64, x[1])\n    length(x) > 1 && return x\n    cnt =\
    \ 0\n    for i = 1:length(txt)\n        ind = txt[i]\n        ind > 'a' && ind\
    \ < 'z' && ind%2 != 0 && cnt += 1\n    end\n    return cnt\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"(ind > Char(0x61000000))\
    \ && (ind < Char(0x7a000000)) && ((ind % 2) != 0) && cnt\" around /tmp/tmp745bmza1.jl:23\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp745bmza1.jl:1\nin expression starting\
    \ at /tmp/tmp745bmza1.jl:1\n"
  stdout: ''
  timestamp: 1660008921
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = findall(x -> x == ' ', txt) # Find all whitespaces\n    cs\
    \ = findall(x -> x == ',', txt) # Find all commas\n    if length(ws) != 0 # If\
    \ there are whitespaces, split on them\n        return split(txt, ' ')\n    elseif\
    \ length(cs) != 0 # If there are commas, split on them\n        return split(txt,\
    \ ',')\n    else # else split on odd numbers\n        return length(txt[1:2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmps8284ub9.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps8284ub9.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps8284ub9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps8284ub9.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps8284ub9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps8284ub9.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps8284ub9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps8284ub9.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps8284ub9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008925
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if(\" \" in txt)\n        return split(txt)\n    elseif(\",\" in\
    \ txt)\n        return split(txt, \",\")\n    else\n        return count(isodd,\
    \ map(x -> Int(x) - Int('a'), txt))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdf6u_bkr.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpdf6u_bkr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpdf6u_bkr.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdf6u_bkr.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdf6u_bkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdf6u_bkr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpdf6u_bkr.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdf6u_bkr.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdf6u_bkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdf6u_bkr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpdf6u_bkr.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdf6u_bkr.jl:29 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008924
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(split(txt))\
    \ != 1\n        return split(txt)\n    end\n    if length(split(txt, ',')) !=\
    \ 1\n        return split(txt, ',')\n    end\n    letters = [1,3,5,7,9,11,15,17,19,21,23,25]\n\
    \    return sum(i in letters for i in [ord(i) for i in txt])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjyq5_p29.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpjyq5_p29.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjyq5_p29.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjyq5_p29.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyq5_p29.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjyq5_p29.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjyq5_p29.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjyq5_p29.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyq5_p29.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjyq5_p29.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008926
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 1\n        tmp = []\n\
    \        for i in eachindex(txt)\n            if txt[i] == ','\n             \
    \   tmp = push!(tmp, txt[1:i-1])\n                tmp = push!(tmp, txt[i+1:end])\n\
    \                return tmp\n            end\n        end\n        sum = 0\n \
    \       for i in eachindex(txt)\n            tmp = txt[i]\n            tmp = lowercase(tmp)\n\
    \            if isodd(Int(tmp) - 96)\n                sum += 1\n            end\n\
    \        end\n        return sum\n    end\n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpgmdaneqr.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgmdaneqr.jl:34\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdaneqr.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdaneqr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgmdaneqr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Any} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpgmdaneqr.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdaneqr.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdaneqr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgmdaneqr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrac"
  timestamp: 1660008926
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, \",\")\n    else\n        return count_odd_lowercase(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdy1250lr.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpdy1250lr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpdy1250lr.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1250lr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy1250lr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdy1250lr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdy1250lr.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1250lr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy1250lr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdy1250lr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdy1250lr.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1250lr.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy1250lr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdy1250lr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008924
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    a = split(txt, \" \")\n    if length(a) > 1\n        return a\n\
    \    end\n    b = split(txt, \",\")\n    if length(b) > 1\n        return b\n\
    \    end\n    c = sum(isodd.(lowercase(collect(txt))))\n    return c\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpysuygjgq.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpysuygjgq.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpysuygjgq.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysuygjgq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysuygjgq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpysuygjgq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpysuygjgq.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpysuygjgq.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpysuygjgq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpysuygjgq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008926
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \"!\" => \"\")\n    txt = replace(txt, \"?\"\
    \ => \"\")\n    txt = replace(txt, \".\" => \"\")\n    txt = replace(txt, \"\\\
    \\\" => \"\")\n    spl = split(txt, \" \")\n    if length(spl) != 1\n        return\
    \ spl\n    end\n    spl = split(txt, \",\")\n    if length(spl) != 1\n       \
    \ return spl\n    end\n    count = 0\n    for i in 1:length(txt)\n        if txt[i]\
    \ != txt[i] % 32\n            count += 1\n        end\n    end\n    if length(txt)\
    \ == 0\n        return 0\n    end\n    if length(txt) % 2 == 0\n        return\
    \ count\n    end\n    return count + 1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7w0e4lw2.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmp7w0e4lw2.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7w0e4lw2.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w0e4lw2.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w0e4lw2.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp7w0e4lw2.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7w0e4lw2.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w0e4lw2.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w0e4lw2.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp7w0e4lw2.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        split(txt, ' ')\n    elseif ',' in txt\n\
    \        split(txt, ',')\n    else\n        count(txt .<= 'z')\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmr2zcfib.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpmr2zcfib.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmr2zcfib.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmr2zcfib.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmr2zcfib.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmr2zcfib.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmr2zcfib.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmr2zcfib.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmr2zcfib.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmr2zcfib.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008927
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt && ',' in txt\n        return split(txt, r\"[ ,]\"\
    )\n    elseif ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else \n        return length(split(txt, \"\
    \"))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpkc7chaxk.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkc7chaxk.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkc7chaxk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkc7chaxk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkc7chaxk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkc7chaxk.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkc7chaxk.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkc7chaxk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkc7chaxk.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008927
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt, \" \")\n    if length(w) > 1\n        return w\n\
    \    end\n    w = split(txt, \",\")\n    if length(w) > 1\n        return w\n\
    \    end\n    ind = 0\n    for i in 1:length(txt)\n        if txt[i] == 'a' ||\
    \ txt[i] == 'c' || txt[i] == 'e' || txt[i] == 'g' || txt[i] == 'i' || txt[i] ==\
    \ 'k' || txt[i] == 'm' || txt[i] == 'o' || txt[i] == 'q' || txt[i] == 's' || txt[i]\
    \ == 'u' || txt[i] == 'w' || txt[i] == 'y'\n            ind += 1\n        end\n\
    \    end\n    return ind\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp_6389e90.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_6389e90.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6389e90.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6389e90.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_6389e90.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_6389e90.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6389e90.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6389e90.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_6389e90.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        tot_letters\
    \ = 0\n        for i in 1:length(txt)\n            if islower(txt[i]) && i % 2\
    \ == 1\n                tot_letters += 1\n            end\n        end\n     \
    \   return tot_letters\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpz9f8mktc.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpz9f8mktc.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz9f8mktc.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz9f8mktc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz9f8mktc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpz9f8mktc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz9f8mktc.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz9f8mktc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz9f8mktc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpz9f8mktc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if haskey(findall(r\"[\\s]\", txt), 1)\n        return split(txt,\
    \ r\"[\\s]\")\n    elseif haskey(findall(r\"[,]\", txt), 1)\n        return split(txt,\
    \ r\"[,]\")\n    else\n        return count_odd_chars(txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpuqd5v8qa.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpuqd5v8qa.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching haskey(::Vector{UnitRange{Int64}}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::NamedTuple, ::Union{Integer, Symbol}) at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:308\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuqd5v8qa.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqd5v8qa.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqd5v8qa.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuqd5v8qa.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching haskey(::Vector{UnitRange{Int64}}, ::Int64)\n  Closest candidates are:\n\
    \    haskey(!Matched::Base.ImmutableDict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::NamedTuple, ::Union{Integer, Symbol}) at ~/.conda/envs/polyglot/share/julia/base/namedtuple.jl:308\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuqd5v8qa.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqd5v8qa.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqd5v8qa.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuqd"
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, [\" \", \",\"])\n    if length(words) == 1\n\
    \        #No whitespaces or commas\n        return sum(isodd(ord(word) - ord('a'))\
    \ for word in txt)\n    else\n        return words\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0o_km4fj.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp0o_km4fj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmp0o_km4fj.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp0o_km4fj.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp0o_km4fj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0o_km4fj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, kee"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (txt != lowercase(txt))\n        return length(txt)\n    end\n\
    \    arr = split(txt, \" \")\n    if length(arr) == 1\n        return parse(Int64,\
    \ arr[1])\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdwtzblmu.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpdwtzblmu.jl:28\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwtzblmu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwtzblmu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdwtzblmu.jl:29\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwtzblmu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwtzblmu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdwtzblmu.jl:30\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: 13 == [\"Hello\", \"world,!\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwtzblmu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwtzblmu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdwtzblmu.jl:31\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 19 == [\"Hello,Hello,world\"\
    , \"!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwtzblmu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwtzblmu.jl:27\ntest set: Error\
    \ During Test at /tmp/tmpdwtzblmu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ab"
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splitted = split(txt, \" \")\n    if splitted[1] == txt\n     \
    \   splitted = split(txt, \",\")\n        if splitted[1] == txt\n            return\
    \ count(c -> c in 'abcdefghijklmnopqrstuvwxyz' && c != 'a' && c != 'c' && c !=\
    \ 'e' && c != 'g' && c != 'i' && c != 'k' && c != 'm' && c != 'o' && c != 'q'\
    \ && c != 's' && c != 'u' && c != 'w' && c != 'y', txt)\n        end\n    end\n\
    \    return splitted\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_c0f9f0p.jl:18\nin expression\
    \ starting at /tmp/tmp_c0f9f0p.jl:18\n"
  stdout: ''
  timestamp: 1660008925
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) == 1 && length(split(txt, \",\"))\
    \ == 1\n        return sum(i%2 == 1 for i in [ord(c)-ord('a') for c in txt])\n\
    \    elseif length(split(txt, \" \")) == 1\n        return split(txt, \",\")\n\
    \    else\n        return split(txt, \" \")\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp_w_uo3kw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_w_uo3kw.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w_uo3kw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w_uo3kw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_w_uo3kw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_w_uo3kw.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w_uo3kw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w_uo3kw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_w_uo3kw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, ',')\n    else\n        txt = lowercase(txt)\n    \
    \    return sum(1 for (i, c) in enumerate(txt) if i % 2 == 1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0wjch488.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp0wjch488.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp0wjch488.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0wjch488.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0wjch488.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0wjch488.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0wjch488.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0wjch488.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0wjch488.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0wjch488.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0wjch488.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0wjch488.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0wjch488.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0wjch488.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    check = false\n    for c in txt \n        if c == ' '\n       \
    \     check = true\n            break\n        end\n    end\n    if check == true\n\
    \        return split(txt, ' ')\n    else\n        check = false\n        for\
    \ c in txt\n            if c == ','\n                check = true\n          \
    \      break\n            end\n        end\n        if check == true\n       \
    \     return split(txt, ',')\n        else\n            return count_odd_lowercase(txt)\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpzrr8fnea.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpzrr8fnea.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzrr8fnea.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzrr8fnea.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzrr8fnea.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzrr8fnea.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzrr8fnea.jl:32\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzrr8fnea.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzrr8fnea.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpzrr8fnea.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) != 1 && all(isspace,\
    \ words)\n        words = split(txt, \",\")\n        if length(words) != 1 &&\
    \ all(isspace, words)\n            return(sum(odd, map(lowercase, txt)))\n   \
    \     end\n    end\n    return(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_ur5cjk5.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp_ur5cjk5.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isspace(::SubString{String})\n  Closest candidates are:\n\
    \    isspace(!Matched::AbstractChar) at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:471\n\
    \  Stacktrace:\n   [1] _all\n     @ ./reduce.jl:1157 [inlined]\n   [2] #all#757\n\
    \     @ ./reducedim.jl:902 [inlined]\n   [3] all\n     @ ./reducedim.jl:902 [inlined]\n\
    \   [4] split_words(txt::String)\n     @ Main /tmp/tmp_ur5cjk5.jl:15\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_ur5cjk5.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_ur5cjk5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_ur5cjk5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_ur5cjk5.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ur5cjk5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ur5cjk5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_ur5cjk5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching isspace(::SubString{String})\n  Closest candidates are:\n  \
    \  isspace(!Matched::AbstractChar) at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:471\n\
    \  St"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !contains(txt, ' ')\n        if !contains(txt, ',')\n      \
    \      return sum(isodd(ord(lowercase(c)) - ord('a')) for c in txt)\n        else\n\
    \            return split(txt, ',')\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnxqo_9ki.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpnxqo_9ki.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnxqo_9ki.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnxqo_9ki.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnxqo_9ki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnxqo_9ki.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnxqo_9ki.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnxqo_9ki.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnxqo_9ki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnxqo_9ki.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_on_whitespace = split(txt, [\" \"])\n    if length(split_on_whitespace)\
    \ != 1\n        return split_on_whitespace\n    end\n    split_on_comma = split(txt,\
    \ [\",\"])\n    if length(split_on_comma) != 1\n        return split_on_comma\n\
    \    end\n    return length(filter(x -> x % 2 == 1, map(y -> Int(y) - Int('a'),\
    \ collect(lowercase(txt)))))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfpl73tj7.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpfpl73tj7.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpfpl73tj7.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpfpl73tj7.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfpl73tj7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfpl73tj7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, kee"
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      c = lowercase(txt)\n        k = 1\n        sum = 0\n        for i = 1:length(c)\n\
    \            if k == 1\n                sum += ord(c[i])-96\n            end\n\
    \            k += 1\n            if k == 3\n                k = 1\n          \
    \  end\n        end\n        return sum\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6ea9yb2q.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp6ea9yb2q.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6ea9yb2q.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ea9yb2q.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ea9yb2q.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6ea9yb2q.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6ea9yb2q.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ea9yb2q.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ea9yb2q.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6ea9yb2q.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r'\\s')\n    if length(words) == 1\n       \
    \ words = split(txt, ',')\n        if length(words) == 1\n            n = 0\n\
    \            for i in 1:length(txt)\n                if (ord(txt[i])-96) % 2 ==\
    \ 1\n                    n += 1\n                end\n            end\n      \
    \      return n\n        end\n    end\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsz9b27cr.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpsz9b27cr.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ r not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsz9b27cr.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsz9b27cr.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsz9b27cr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsz9b27cr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: r not\
    \ defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsz9b27cr.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsz9b27cr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsz9b27cr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsz9b27cr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: r\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsz9b27cr.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsz9b27cr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsz9b27cr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsz9b27cr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ r not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsz9b27cr.jl:14\n\
    \   [2] macro expansion\n  "
  timestamp: 1660008927
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_on_comma = split(txt, \",\")\n    if length(split_on_comma)\
    \ > 1\n        return split_on_comma\n    end\n    split_on_space = split(txt,\
    \ \" \")\n    if length(split_on_space) > 1\n        return split_on_space\n \
    \   end\n    sum = 0\n    for i in 1:length(txt)\n        if txt[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            if i % 2 == 1\n                sum += ord(txt[i]) - ord('a')\n \
    \           end\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp3jp4ado9.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3jp4ado9.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jp4ado9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jp4ado9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3jp4ado9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3jp4ado9.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jp4ado9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jp4ado9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3jp4ado9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ split(txt, \"\") |> filter(c -> c in ('a':'z')) |> length() |> x -> x % 2 ==\
    \ 1 ? x : 0\n    end\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw01suaay.jl:22\nin expression starting at\
    \ /tmp/tmpw01suaay.jl:22\n"
  stdout: ''
  timestamp: 1660008926
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # TODO: implement\n    i = Int64(0)\n    for word in txt\n    \
    \    word_check = word\n        if word_check == \" \"\n            return split(txt,\
    \ \" \")\n        elseif word_check == \",\"\n            return split(txt, \"\
    ,\")\n        else\n            i = i + 1\n        end\n    end\n    return i\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppqqkayxk.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmppqqkayxk.jl:33\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppqqkayxk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppqqkayxk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppqqkayxk.jl:34\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppqqkayxk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppqqkayxk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppqqkayxk.jl:35\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: 13 == [\"Hello\", \"world,!\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppqqkayxk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppqqkayxk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppqqkayxk.jl:36\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 19 == [\"Hello,Hello,world\"\
    , \"!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppqqkayxk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppqqkayxk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppqqkayxk.jl:37\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: 6 ="
  timestamp: 1660008927
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else\n        ords = [chr(ord(x) - ord('a'))\
    \ for x in txt]\n        odds = 0\n        for i in ords\n            if i % 2\
    \ == 1\n                odds += 1\n            end\n        end\n        return\
    \ odds\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpx_52e4_c.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpx_52e4_c.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx_52e4_c.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_52e4_c.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_52e4_c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpx_52e4_c.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx_52e4_c.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_52e4_c.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_52e4_c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpx_52e4_c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008930
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \"!\", \"\")\n    txt = replace(txt, \"?\",\
    \ \"\")\n    txt = replace(txt, \",\", \"\")\n    txt = replace(txt, \".\", \"\
    \")\n    txt = replace(txt, \";\", \"\")\n    if length(split(txt, \" \")) > 1\n\
    \        return split(txt, \" \")\n    elseif length(split(txt, \",\")) > 1\n\
    \        return split(txt, \",\")\n    else\n        sum = 0\n        for i in\
    \ 1:length(txt)\n            sum += (2*((txt[i] - 96) % 2) - 1)\n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpitufw18g.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpitufw18g.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpitufw18g.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpitufw18g.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitufw18g.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpitufw18g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpitufw18g.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpitufw18g.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitufw18g.jl:35\ntest set:\
    \ Error During Tes"
  timestamp: 1660008930
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\n    txt = \"Hello world!\"\n    ls = txt.split()\n\
    \    return ls\n    #raise(NotImplementedError())\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpaiboiz1r.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpaiboiz1r.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpaiboiz1r.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaiboiz1r.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaiboiz1r.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaiboiz1r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no\
    \ field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpaiboiz1r.jl:16\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaiboiz1r.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaiboiz1r.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaiboiz1r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpaiboiz1r.jl:16\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaiboiz1r.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaiboiz1r.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpaiboiz1r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hel"
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count([i for i in 1:length(txt) if islower(txt[i]) && isodd(i)])\n    end\n\
    end\n@assert split_words(\"abcdef\") == 3\n@assert split_words(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"]\n@assert split_words(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: islower not defined\nStacktrace:\n [1]\
    \ (::var\"#1#2\"{String})(i::Int64)\n   @ Main ./none:0\n [2] iterate\n   @ ./iterators.jl:447\
    \ [inlined]\n [3] iterate\n   @ ./generator.jl:44 [inlined]\n [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, UnitRange{Int64}},\
    \ typeof(identity)})\n   @ Base ./array.jl:797\n [5] collect\n   @ ./array.jl:721\
    \ [inlined]\n [6] split_words(txt::String)\n   @ Main /tmp/tmpf9n66fcq.jl:19\n\
    \ [7] top-level scope\n   @ /tmp/tmpf9n66fcq.jl:22\nin expression starting at\
    \ /tmp/tmpf9n66fcq.jl:22\n"
  stdout: ''
  timestamp: 1660008928
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_no_whitespace(txt)\n        return count_letters(txt)\n\
    \    else\n        return split(txt, \" \")\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdkxyonam.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpdkxyonam.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_no_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpdkxyonam.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkxyonam.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkxyonam.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdkxyonam.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_no_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdkxyonam.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkxyonam.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkxyonam.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdkxyonam.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_no_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdkxyonam.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkxyonam.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkxyonam.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdkxyonam.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_no_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::Stri"
  timestamp: 1660008930
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \",\" => \" \")\n    txt = replace(txt, \".\"\
    \ => \" \")\n    txt = replace(txt, \";\" => \" \")\n    txt = replace(txt, \"\
    :\" => \" \")\n    txt = replace(txt, \"!\" => \" \")\n    txt = replace(txt,\
    \ \"?\" => \" \")\n    txt = replace(txt, \"'\" => \" \")\n    txt = replace(txt,\
    \ \"-\" => \" \")\n    words = split(txt)\n    if length(words) > 1\n        return\
    \ words\n    else\n        count = 0\n        for c in txt\n            if isalpha(c)\
    \ && ord(c) - ord('a') % 2 == 1\n                count += 1\n            end\n\
    \        end\n        return count\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0cgaabuw.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp0cgaabuw.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0cgaabuw.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cgaabuw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cgaabuw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0cgaabuw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0cgaabuw.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cgaabuw.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cgaabuw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0cgaabuw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # if no whitespaces exists in the text\n    if !(\" \" in txt)\n\
    \        # if no commas exists\n        if !(\",\" in txt)\n            # count\
    \ letters with odd order in the alphabet\n            letters = 0\n          \
    \  for x in txt\n                if (lowercase(x) == x) && (ord(x) % 2 == 1)\n\
    \                    letters += 1\n                end\n            end\n    \
    \        return letters\n        else\n            # return text split on commas\n\
    \            return split(txt, \",\")\n        end\n    else\n        # return\
    \ text split on whitespaces\n        return split(txt)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpoqbvsv17.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpoqbvsv17.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpoqbvsv17.jl:15\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoqbvsv17.jl:40 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoqbvsv17.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpoqbvsv17.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpoqbvsv17.jl:15\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoqbvsv17.jl:41 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoqbvsv17.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpoqbvsv17.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpoqbvsv17.jl:15\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoqbvsv17.jl:42 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008931
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !(occursin(\" \", txt)) & occursin(\",\", txt)\n        split(txt,\
    \ \",\")\n    elseif !(occursin(\" \", txt)) & !(occursin(\",\", txt))\n     \
    \   sum(isodd.([ord(i) for i in txt[:]] .- 96))\n    else\n        split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpmy1a4g_k.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmy1a4g_k.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmy1a4g_k.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmy1a4g_k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmy1a4g_k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmy1a4g_k.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmy1a4g_k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmy1a4g_k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmy1a4g_k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n            odd = []\n    \
    \        for l in lowercase\n                if (ord(l) % 2) == 1\n          \
    \          push!(odd, l)\n                end\n            end\n            return\
    \ length(odd)\n        else\n            return split(txt, \",\")\n        end\n\
    \    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpran9lgkn.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpran9lgkn.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpran9lgkn.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpran9lgkn.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpran9lgkn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpran9lgkn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpran9lgkn.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpran9lgkn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpran9lgkn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpran9lgkn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008932
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt)\n    if length(w) == 1 && w[1] != \",\"\n      \
    \  cnt = 0\n        for ch in w[1]\n            if isalpha(ch) && (Int(ch) - ord('a'))\
    \ % 2 == 1\n                cnt += 1\n            end\n        end\n        return\
    \ cnt\n    else\n        return w\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpvso0xb2g.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvso0xb2g.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvso0xb2g.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvso0xb2g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvso0xb2g.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvso0xb2g.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvso0xb2g.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvso0xb2g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvso0xb2g.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvso0xb2g.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp"
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # your code here\nend\n@test split_words(\"Hello world!\") == [\"\
    Hello\", \"world!\"]\n@test split_words(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ]\n@test split_words(\"abcdef\") == 3\n \n\"\"\"\n    Given a string of words,\
    \ return a vector of words split on whitespace, if no whitespaces exists in the\
    \ text you\n    should split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\n    alphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words(\"Hello\
    \ world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"Hello,world!\"\
    )\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n    3\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpqebo0rw6.jl:16

    in expression starting at /tmp/tmpqebo0rw6.jl:16

    '
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    sep = ' '\n    if ' ' \u2209 txt \n        sep = ','\n        if\
    \ ',' \u2209 txt\n            return count(txt)\n        end\n    end\n    return\
    \ split(txt, sep)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplp91e6fm.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmplp91e6fm.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplp91e6fm.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplp91e6fm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplp91e6fm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplp91e6fm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplp91e6fm.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplp91e6fm.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplp91e6fm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplp91e6fm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(findall(txt, \" \")) != 0\n        return split(txt,\
    \ \" \")\n    elseif length(findall(txt, \",\")) != 0\n        return split(txt,\
    \ \",\")\n    else\n        odd_order = []\n        for i in 1:length(txt)\n \
    \           if (ord(txt[i]) - 96) % 2 != 0\n                push!(odd_order, txt[i])\n\
    \            end\n        end\n        return length(odd_order)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpw_q3ma40.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpw_q3ma40.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ord not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpw_q3ma40.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_q3ma40.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_q3ma40.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpw_q3ma40.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpw_q3ma40.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_q3ma40.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_q3ma40.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpw_q3ma40.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpw_q3ma40.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw_q3ma40.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw_q3ma40.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpw_q3ma40.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ ord not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpw_q3ma40.jl:21\n   [2] macro expa"
  timestamp: 1660008932
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splitstring = split(txt, \" \")\n    if (length(splitstring) ==\
    \ 1)\n        splitstring = split(txt, \",\")\n        if (length(splitstring)\
    \ == 1)\n            count = 0\n            for i = 1:length(txt)\n          \
    \      lower = txt[i] |> lowercase\n                code = Int(lower) - 97\n \
    \               if (code % 2 == 1)\n                    count += 1\n         \
    \       end\n            end\n            return count\n        end\n    end\n\
    \    return splitstring\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp3_t21_n5.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3_t21_n5.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3_t21_n5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3_t21_n5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3_t21_n5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3_t21_n5.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3_t21_n5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3_t21_n5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3_t21_n5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\n    # raise NotImplementedError()\n    for i\
    \ in txt\n        if i == ' '\n            return split(txt,' ')\n        elseif\
    \ i == ','\n            return split(txt,',')\n        elseif i == 'a' || i ==\
    \ 'c' || i == 'e' || i == 'g' || i == 'i' || i == 'k' || i == 'm' || i == 'o'\
    \ || i == 'q' || i == 's' || i == 'u' || i == 'w' || i == 'y'\n            return\
    \ length(txt)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpzfqe2jjt.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpzfqe2jjt.jl:31\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfqe2jjt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfqe2jjt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzfqe2jjt.jl:32\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 12 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfqe2jjt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfqe2jjt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzfqe2jjt.jl:33\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: 13 == [\"Hello\", \"world,!\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfqe2jjt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfqe2jjt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzfqe2jjt.jl:34\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 19 == [\"Hello,Hello,world\"\
    , \"!\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfqe2jjt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfqe2jjt.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzfqe2jjt.jl:35\n  Expression: candidate(\"abcdef\") == 3\n\
    \   Evaluated: 6 ="
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return 0\n    end\n    tmp = findnext(iswhitespace,\
    \ txt)\n    if tmp == nothing\n        tmp = findnext(iscomma, txt)\n        if\
    \ tmp == nothing\n            return length(findall(r\"\\p{Ll}\", txt))\n    \
    \    end\n        return [substring(txt, 1, tmp-1), substring(txt, tmp+1, end)]\n\
    \    end\n    return [substring(txt, 1, tmp-1), substring(txt, tmp+1, end)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpern8aqti.jl:23\nin expression starting at /tmp/tmpern8aqti.jl:23\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # your code here\n    # replace \"pass\" with your code\n    pass\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpkd585yl7.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpkd585yl7.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpkd585yl7.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkd585yl7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkd585yl7.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkd585yl7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkd585yl7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkd585yl7.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkd585yl7.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkd585yl7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkd585yl7.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkd585yl7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkd585yl7.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkd585yl7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpkd585yl7.jl:16\n   [2] macro "
  timestamp: 1660008932
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #If there are whitespaces\n    if match(r\"[^\\s]\", txt) != nothing\n\
    \        return split(txt)\n    elseif match(r\"[^,]\", txt) != nothing\n    \
    \    return split(txt, \",\")\n    else\n        txt_num = 0\n        for i in\
    \ 1:length(txt)\n            txt_num += ord(txt[i])%2\n        end\n        return\
    \ txt_num\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqrs02gmn.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpqrs02gmn.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqrs02gmn.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrs02gmn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrs02gmn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqrs02gmn.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqrs02gmn.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrs02gmn.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrs02gmn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqrs02gmn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008933
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) > 1\n     \
    \   return words\n    else\n        words = split(txt, \",\")\n        if length(words)\
    \ > 1\n            return words\n        else\n            inds = [1:2:length(txt)]\n\
    \            return length(txt[inds])\n        end\n    end\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp9xo5ovru.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9xo5ovru.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xo5ovru.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xo5ovru.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9xo5ovru.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9xo5ovru.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9xo5ovru.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9xo5ovru.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9xo5ovru.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008933
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    v = split(txt, \" \")\n    if length(v) > 1\n        return v\n\
    \    end\n    v = split(txt, \",\")\n    if length(v) > 1\n        return v\n\
    \    end\n    return count_odd_chars(txt)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_a60m_qj.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_a60m_qj.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_a60m_qj.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a60m_qj.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_a60m_qj.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_a60m_qj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_a60m_qj.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a60m_qj.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_a60m_qj.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_a60m_qj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008933
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if \" \" in txt\n        return split(txt, \" \")\n    elseif \"\
    ,\" in txt\n        return split(txt, \",\")\n    else\n        let ans = [if\
    \ isodd(ord(lowercase(x)) - ord('a')) 1 else 0 for x in txt]\n        if all(x\
    \ -> x == 0, ans)\n            0\n        else\n            sum(ans)\n       \
    \ end\n    end\nend\n\"\"\"\n    Given a string of words, split the text in two\
    \ parts with the same number of words, if there is no such index where\n    number\
    \ of words on both sides are the same, return -1, otherwise return the index of\
    \ the first character of the second part\n    Examples\n    >>> middle_split(\"\
    This is a test\")\n    5\n    >>> middle_split(\"This is another test\")\n   \
    \ -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0ewg3068.jl:19 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ewg3068.jl:19\n\
    in expression starting at /tmp/tmp0ewg3068.jl:19\n"
  stdout: ''
  timestamp: 1660008930
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    delimiters = [\" \", \",\"]\n    for delimiter in delimiters\n\
    \        if delimiter in txt\n            return split(txt, delimiter)\n     \
    \   end\n    end\n    return sum(i -> isodd(i) ? 1 : 0,\n        [ASCIIString.index(txt,i)\
    \ for i in 'a':'z'])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmps6ibm65c.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmps6ibm65c.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmps6ibm65c.jl:16\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps6ibm65c.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps6ibm65c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps6ibm65c.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmps6ibm65c.jl:16\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps6ibm65c.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps6ibm65c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps6ibm65c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmps6ibm65c.jl:16\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps6ibm65c.jl:30 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008932
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_at_white_space(txt) = split(txt, ' ')\n    split_at_comma(txt)\
    \ = split(txt, ',')\n    count_number_of_low_case_characters(txt) = count(x ->\
    \ x in 'a':'z', txt)\n    is_odd(n) = n % 2 == 1\n    count_odd_numbers(txt) =\
    \ count(n -> is_odd(n), map(ord, txt))\n    if(count_number_of_low_case_characters(txt)\
    \ == 0)\n        return -1\n    elseif(isempty(split_at_white_space(txt)))\n \
    \       if(isempty(split_at_comma(txt)))\n            return count_odd_numbers(txt)\n\
    \        else\n            return split_at_comma(txt)\n        end\n    else\n\
    \        return split_at_white_space(txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfn1ejuru.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfn1ejuru.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfn1ejuru.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfn1ejuru.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfn1ejuru.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfn1ejuru.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfn1ejuru.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfn1ejuru.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfn1ejuru.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occurrences(txt, ' ') == 0 && occurrences(txt, ',') == 0\n \
    \       return countodd(txt)\n    elseif occurrences(txt, ' ') == 0\n        return\
    \ split(txt, ',')\n    else\n        return split(txt)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpachb1sbk.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpachb1sbk.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ occurrences not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  \
    \   @ Main /tmp/tmpachb1sbk.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpachb1sbk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpachb1sbk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpachb1sbk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: occurrences\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpachb1sbk.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpachb1sbk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpachb1sbk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpachb1sbk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: occurrences\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpachb1sbk.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpachb1sbk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpachb1sbk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpachb1sbk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ occurrences not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  \
    \   @ Main /tmp/tmp"
  timestamp: 1660008932
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt, \" \")\n    if length(w) == 1\n        w = split(txt,\
    \ \",\")\n        if length(w) == 1\n            # Hack to get all lowercase characters\n\
    \            w = [x for x in txt if x in ['a':'z']]\n            if length(w)\
    \ == 0\n                return 0\n            else\n                # Odd indices\n\
    \                return sum(ord(x) % 2 for x in w)\n            end\n        end\n\
    \    end\n    return w\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp314zepbt.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp314zepbt.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp314zepbt.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp314zepbt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp314zepbt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp314zepbt.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp314zepbt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp314zepbt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp314zepbt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    res = match(r\"(\\w+\\s+\\w+)|(\\w+,\\w+)|(?<=[a-z])(?=[A-Z])|(\\\
    w+)|(?<=[A-Z])(?=[a-z])\", txt)\n    return res[1]\nend\nsplit_words(\"Hello,\
    \ world!\")\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type \n  Nothing\
    \ to an object of type \n  Union{Int64, Vector{String}}\nClosest candidates are:\n\
    \  convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmptg8wyg3j.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmptg8wyg3j.jl:17\nin expression starting at\
    \ /tmp/tmptg8wyg3j.jl:17\n"
  stdout: ''
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(findall(r\"\\s\", txt)) != 0\n        return split(txt)\n\
    \    elseif length(findall(r\",\", txt)) != 0\n        return split(txt, \",\"\
    )\n    else\n        return sum(x -> x%2 == 1 ? 1 : 0, [ord(c) - ord('a') for\
    \ c in lowercase(txt)])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6i962io5.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp6i962io5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6i962io5.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i962io5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i962io5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6i962io5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6i962io5.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i962io5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i962io5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6i962io5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    r = r\"\\s+\"\n    if length(match(r, txt)) > 0\n       \
    \ return split(txt, \" \")\n    else\n        r = r\",\"\n        if length(match(r,\
    \ txt)) > 0\n            return split(txt, \",\")\n        else\n            return\
    \ sum(i -> i%2 == 1 ? 1 : 0, [ord(c) - ord('a') for c in lowercase(txt)])\n  \
    \      end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpym2mj8bq.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpym2mj8bq.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.Iterators.Stateful) at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpym2mj8bq.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpym2mj8bq.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpym2mj8bq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpym2mj8bq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.Iterators.Stateful) at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpym2mj8bq.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpym2mj8bq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) != nothing\n        return split(txt)\n\
    \    elseif search(r\",\", txt) != nothing\n        return split(txt, \",\")\n\
    \    else\n        odd_count = 0\n        for i in 1:length(txt)\n           \
    \ if isodd(ord(txt[i]) - ord('a'))\n                odd_count += 1\n         \
    \   end\n        end\n        return odd_count\n    end\nend\n    \n    \n   \
    \ \n    \n \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpis3ic25k.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpis3ic25k.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpis3ic25k.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpis3ic25k.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpis3ic25k.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpis3ic25k.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpis3ic25k.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpis3ic25k.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpis3ic25k.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpis3ic25k.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpis3ic25k.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpis3ic25k.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpis3ic25k.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpis3ic25k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpis3ic25k.jl:14\n   [2"
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        count = 0\n        for\
    \ x in lowercase(txt)\n            if count < length(lowercase(txt))\n       \
    \         if isodd(ord(x))\n                    count += 1\n                end\n\
    \            end\n        end\n        return count\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps4x0xxh6.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmps4x0xxh6.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps4x0xxh6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4x0xxh6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4x0xxh6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps4x0xxh6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps4x0xxh6.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4x0xxh6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4x0xxh6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps4x0xxh6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008935
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = findall(x -> isspace(x), txt)\n    if length(ws) > 0\n   \
    \     return [txt[i] for i in findall(x -> !isspace(x), txt)]\n    else\n    \
    \    c = findall(x -> x == ',', txt)\n        if length(c) > 0\n            return\
    \ [txt[i] for i in findall(x -> x != ',', txt)]\n        else\n            return\
    \ length([txt[i] for i in findall(x -> islower(x) && (x[1] % 2 == 1), txt)])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp284y0gp9.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{Char} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp284y0gp9.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp284y0gp9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp284y0gp9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp284y0gp9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Char} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp284y0gp9.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp284y0gp9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp284y0gp9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp284y0gp9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{Char} to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt"
  timestamp: 1660008935
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"\n    Given a string of words, return a vector of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"\
    world!\"]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n\
    \    >>> split_words(\"abcdef\")\n    3\n    \"\"\"\n    if ' ' in txt\n     \
    \   # v1 = split(txt, ' ')\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        # v2 = split(txt, ',')\n        return split(txt, ',')\n    else\n\
    \        cnt = 0\n        for c in txt\n            if 'a' <= c <= 'z' && cnt\
    \ % 2 == 1\n                cnt += 1\n            end\n        end\n        return\
    \ cnt\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpmtjuf5xq.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmtjuf5xq.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtjuf5xq.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmtjuf5xq.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpmtjuf5xq.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmtjuf5xq.jl:31\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtjuf5xq.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmtjuf5xq.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpmtjuf5xq.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008936
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if split(txt, ' ') == txt\n        if split(txt, ',') == txt\n\
    \            return sum(map(i -> i % 2 == 1, map(x -> x - 96, map(ch -> ord(ch),\
    \ collect(txt)))))\n        else\n            return split(txt, ',')\n       \
    \ end\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptbpbsg9h.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmptbpbsg9h.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptbpbsg9h.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptbpbsg9h.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptbpbsg9h.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptbpbsg9h.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptbpbsg9h.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptbpbsg9h.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptbpbsg9h.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptbpbsg9h.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008936
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ###\n    whitespace = [\" \"]\n    commas = [\",\"]\n    words\
    \ = Vector{String}([])\n    if findall(whitespace, txt) != []\n        words =\
    \ split(txt, whitespace)\n    elseif findall(commas, txt) != []\n        words\
    \ = split(txt, commas)\n    else\n        i = 0\n        for c in txt\n      \
    \      if char_lower(c) == true && isodd(Int(c) - 97) == true\n              \
    \  i += 1\n            end\n        end\n        return i\n    end\n    return\
    \ words\nend\nsplit_words(\"abcdef\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: "ERROR: LoadError: MethodError: no method matching findall(::Vector{String},\
    \ ::String)\nClosest candidates are:\n  findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \  findall(!Matched::AbstractChar, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:489\n\
    \  findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \  ...\nStacktrace:\n [1] split_words(txt::String)\n   @ "
  stdout: ''
  timestamp: 1660008937
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) != 0\n        return words\n\
    \    else\n        words = split(txt, ',')\n        if length(words) != 0\n  \
    \          return words\n        else\n            return sum(map(ord, collect(txt)))\
    \ % 2\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpoi5lptwa.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoi5lptwa.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoi5lptwa.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoi5lptwa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpoi5lptwa.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoi5lptwa.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoi5lptwa.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoi5lptwa.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpoi5lptwa.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ss = split(txt, \" \")\n    if length(ss) == 1\n        ss = split(txt,\
    \ \",\")\n        if length(ss) == 1\n            #println(length(txt))\n    \
    \        return length(txt)\n        end\n    end\n    return ss\nend\nsplit_words(\"\
    Hello,world!\")\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type \n  Vector{SubString{String}}\
    \ to an object of type \n  Union{Int64, Vector{String}}\nClosest candidates are:\n\
    \  convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmp7jqy_pgi.jl:22\n\
    \ [2] top-level scope\n   @ /tmp/tmp7jqy_pgi.jl:24\nin expression starting at\
    \ /tmp/tmp7jqy_pgi.jl:24\n"
  stdout: ''
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #check for whitespace, otherwise check for commas, otherwise return\
    \ odd letters\n    split_txt = split(txt, \" \")\n    if length(split_txt) !=\
    \ 1\n        return split_txt\n    elseif length(split(txt, \",\")) != 1\n   \
    \     return split(txt, \",\")\n    else\n        odd_letters = 0\n        for\
    \ i in 1:length(txt)\n            letter = txt[i]\n            if isletter(letter)\
    \ == true\n                if Int64(ord(letter)) % 2 == 1\n                  \
    \  odd_letters += 1\n                end\n            end\n        end\n     \
    \   return odd_letters\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0_u64ls1.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp0_u64ls1.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0_u64ls1.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_u64ls1.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_u64ls1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp0_u64ls1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0_u64ls1.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_u64ls1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_u64ls1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp0_u64ls1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(x -> (x + 1) % 2, (mod.((ord.(collect(txt)) .- ord('a')), 2)))\n    end\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4tqrris.jl:22\nin expression starting at\
    \ /tmp/tmpi4tqrris.jl:22\n"
  stdout: ''
  timestamp: 1660008934
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpj3cbhjpw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj3cbhjpw.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3cbhjpw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3cbhjpw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj3cbhjpw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj3cbhjpw.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3cbhjpw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3cbhjpw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj3cbhjpw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        cnt\
    \ = 0\n        for i in 1:length(txt)\n            if i % 2 == 1 && islower(txt[i])\n\
    \                cnt += 1\n            end\n        end\n        return cnt\n\
    \    elseif !occursin(\" \", txt) && occursin(\",\", txt)\n        return split(txt,\
    \ \",\")\n    else\n        return split(txt)\n    end\nend\n \n\"\"\"\n    Given\
    \ a list of numbers, returns the mean of all numbers\n    Examples\n    >>> mean([1,\
    \ 2, 3])\n    2.0\n    >>> mean([1, 2, 3, 5])\n    2.5\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpyuyz2k0b.jl:29\nin expression starting at /tmp/tmpyuyz2k0b.jl:29\n"
  stdout: ''
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif ','\
    \ in txt\n        return split(txt, ',')\n    else\n        return count_lower_odd(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyqa7lzrf.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpyqa7lzrf.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpyqa7lzrf.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqa7lzrf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqa7lzrf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyqa7lzrf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyqa7lzrf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqa7lzrf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqa7lzrf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyqa7lzrf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyqa7lzrf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqa7lzrf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqa7lzrf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyqa7lzrf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008936
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #########################################\n    # replace the code\
    \ below with your code #\n    #########################################\n    txt\
    \ = split(txt)\n    if length(txt) == 1\n        push!(txt, \"\")\n    end\n \
    \   if isstring(txt[1]) == false\n        return parse(Int64, txt[1])\n    end\n\
    \    return txt\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpafgae2k6.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpafgae2k6.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ isstring not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmpafgae2k6.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafgae2k6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafgae2k6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpafgae2k6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isstring\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpafgae2k6.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafgae2k6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafgae2k6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpafgae2k6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: isstring\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpafgae2k6.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpafgae2k6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpafgae2k6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpafgae2k6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ isstring not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmpafgae2k6.jl:"
  timestamp: 1660008936
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, ',')\n    else\n        return length(filter(x -> x[1]\
    \ % 2 == 1, enumerate(lowercase(txt))))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1cssi3vn.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp1cssi3vn.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp1cssi3vn.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1cssi3vn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1cssi3vn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1cssi3vn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1cssi3vn.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1cssi3vn.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1cssi3vn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1cssi3vn.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1cssi3vn.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1cssi3vn.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1cssi3vn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1cssi3vn.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008936
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    # Split on\
    \ whitespace\n    if contains(txt, \" \")\n        return split(txt, \" \")\n\
    \    end\n    # Split on commas\n    if contains(txt, \",\")\n        return split(txt,\
    \ \",\")\n    end\n    # Count the number of letters with odd order in the alphabet\n\
    \    # You need to know that ord(::Char) returns the ASCII code of the character\
    \ and character('a') returns the character\n    # with the ASCII code 0. Use the\
    \ function isodd(::Int) to determine if an integer is odd. \n    # Your solution\
    \ should be one line\n    # TODO\n    \n    \nend\nassert split_words(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3\nassert split_words(\"\
    \") == 0\n \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"split_words\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpeh1a2a08.jl:33\nin expression\
    \ starting at /tmp/tmpeh1a2a08.jl:33\n"
  stdout: ''
  timestamp: 1660008934
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n     if(occursin(' ', txt))\n        return split(txt)\n    elseif(occursin(',',\
    \ txt))\n        return split(txt, ',')\n    else\n        count = 0\n       \
    \ for i in txt\n            index = Int(i) - Int('a')\n            if(index %\
    \ 2 == 1)\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppbeock3e.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmppbeock3e.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppbeock3e.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppbeock3e.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppbeock3e.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppbeock3e.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppbeock3e.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppbeock3e.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppbeock3e.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppbeock3e.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008938
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        return split(txt, \",\")\n    else\n        count\
    \ = 0\n        for i in txt\n            if islower(i) && ord(i) % 2 == 1\n  \
    \              count += 1\n            end\n        end\n        return count\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjvdvxtyq.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpjvdvxtyq.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjvdvxtyq.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvdvxtyq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvdvxtyq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjvdvxtyq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjvdvxtyq.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvdvxtyq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvdvxtyq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjvdvxtyq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008938
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt)\n        if !occursin(\",\", txt)\n  \
    \          res = 0\n            for i = 1:length(txt)\n                res +=\
    \ ord(txt[i]) - ord('a')\n            end\n            return res % 2 == 1 ? res\
    \ : res + 1\n        else\n            return split(txt, \",\")\n        end\n\
    \    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp2waq5w6h.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2waq5w6h.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2waq5w6h.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2waq5w6h.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2waq5w6h.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2waq5w6h.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2waq5w6h.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2waq5w6h.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2waq5w6h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008939
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        sum(ord(c) for c in txt\
    \ if c in \"abcdefghijklmnopqrstuvwxyz\" if ord(c) % 2 != 0)\n    end\nend\n \n\
    split_words(\"Hello world!\")\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1tmez220.jl:19\nin expression starting at /tmp/tmp1tmez220.jl:19\n"
  stdout: ''
  timestamp: 1660008935
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # Here we check for the whitespace in the string\n    if search(r\"\
    \\s\", txt) != nothing\n        return split(txt)\n    # Here we check for commas\
    \ in the string\n    elseif search(r\",\", txt) != nothing\n        return split(txt,\
    \ \",\")\n    # Here we check for lower-case letters\n    elseif search(r\"[a-z]\"\
    , txt) != nothing\n        a = search(r\"[a-z]\", txt)\n        b = search(r\"\
    [^a-z]\", txt)\n        if a == b\n            return length(txt)\n        elseif\
    \ a != b\n            return 0\n        end\n    else\n        return \"No such\
    \ string\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6ypyl7x6.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp6ypyl7x6.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp6ypyl7x6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ypyl7x6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ypyl7x6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6ypyl7x6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6ypyl7x6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ypyl7x6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ypyl7x6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6ypyl7x6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6ypyl7x6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ypyl7x6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ypyl7x6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6ypyl7x6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp6ypyl7x6.jl:15\n   [2"
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        cnt =\
    \ 0\n        for c in txt\n            idx = ord(c) - ord('a')\n            if\
    \ idx % 2 == 1\n                cnt += 1\n            end\n        end\n     \
    \   return cnt\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpy8gpe5oo.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpy8gpe5oo.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy8gpe5oo.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy8gpe5oo.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy8gpe5oo.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpy8gpe5oo.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy8gpe5oo.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy8gpe5oo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy8gpe5oo.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpy8gpe5oo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008939
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespace = [x for x in txt if isspace(x)]\n    if whitespace\
    \ != []\n        return split(txt, r\"\\s+\")\n    else\n        commas = [x for\
    \ x in txt if x == ',']\n        if commas != []\n            return split(txt,\
    \ \",\")\n        else\n            alphabet = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z']\n            counter = 0\n            for x in alphabet\n\
    \                if occursin(x, txt)\n                    index = findfirst(txt,\
    \ x)\n                    if index % 2 == 1\n                        counter +=\
    \ 1\n                    end\n                end\n            end\n         \
    \   return counter\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpdhsk410k.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdhsk410k.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdhsk410k.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdhsk410k.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdhsk410k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdhsk410k.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdhsk410k.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdhsk410k.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdhsk410k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008939
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        split(txt, ' ')\n    elseif occursin(txt,\
    \ ',')\n        split(txt, ',')\n    else\n        sum(i -> isodd(i) ? 1 : 0,\
    \ [findfirst(lowercase(txt), i) for i in lowercase('abcdefghijklmnopqrstuvwxyz')])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gpphbgm.jl:19\nin expression\
    \ starting at /tmp/tmp7gpphbgm.jl:19\n"
  stdout: ''
  timestamp: 1660008936
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(regexp(\"\\\\s\", txt)) > 0\n        return split(txt)\n\
    \    elseif length(regexp(\",\", txt)) > 0\n        return split(txt, \",\")\n\
    \    else\n        return sum(ord.(lowercase(txt)) .% 2 .== 1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6qcp657u.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp6qcp657u.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp6qcp657u.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6qcp657u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6qcp657u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6qcp657u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6qcp657u.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6qcp657u.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6qcp657u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6qcp657u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6qcp657u.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6qcp657u.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6qcp657u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6qcp657u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp6qcp657u.jl:14\n   [2"
  timestamp: 1660008938
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        sum_odd\
    \ = 0\n        for i in txt\n            if islower(i) && ord(i) % 2 == 1\n  \
    \              sum_odd += 1\n            end\n        end\n        return sum_odd\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6kvdhnbn.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp6kvdhnbn.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6kvdhnbn.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kvdhnbn.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kvdhnbn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6kvdhnbn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6kvdhnbn.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kvdhnbn.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kvdhnbn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6kvdhnbn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008939
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # there's probably a better way to do this, but I don't know regex\n\
    \    if length(txt) == 0\n        return 0\n    end\n    if match(r\"\\s\", txt)\
    \ == nothing\n        if match(r\",\", txt) == nothing\n            letters =\
    \ [Int64(ord(txt[i]) - ord('a')) for i in 1:length(txt)]\n            odds = count(j\
    \ -> j % 2 == 1, letters)\n            return odds\n        else\n           \
    \ return split(txt, \",\")\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps7fnn094.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmps7fnn094.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps7fnn094.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7fnn094.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7fnn094.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps7fnn094.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmps7fnn094.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7fnn094.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7fnn094.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps7fnn094.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008939
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else\n        counter = 0\n        for a\
    \ in txt\n            if ord(a) % 2 == 1\n                counter += 1\n     \
    \       end\n        end\n        return counter\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8f14r_x6.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp8f14r_x6.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8f14r_x6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8f14r_x6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8f14r_x6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp8f14r_x6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8f14r_x6.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8f14r_x6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8f14r_x6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp8f14r_x6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008940
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #your code here\n    words = split(txt, r\"\\s\")\n    if length(words)\
    \ > 1\n        return words\n    else\n        words = split(txt, r\",\")\n  \
    \      if length(words) > 1\n            return words\n        else\n        \
    \    return length(filter(x -> x == Int(x), [Int(i) for i in lowercase(txt)]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp7eg7zlf2.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7eg7zlf2.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7eg7zlf2.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7eg7zlf2.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7eg7zlf2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7eg7zlf2.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7eg7zlf2.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7eg7zlf2.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7eg7zlf2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008940
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # HINT: use split\n    return split(txt, [\" \", \",\"])\nend\n\
    \"\"\"\n    Given a string of words, return a vector of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmptmbocme0.jl:17\nin expression starting at /tmp/tmptmbocme0.jl:17\n"
  stdout: ''
  timestamp: 1660008937
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_char = ' '\n    if length(txt) == 1\n        if txt[1] ==\
    \ ' '\n            return [txt]\n        else\n            return sum(txt .==\
    \ 'a':'z') \n        end\n    end\n    if length(txt) > 1\n        lst = findall(txt,\
    \ r\"[^$split_char]\")\n        if length(lst) == 1\n            return [txt]\n\
    \        else\n            if length(findall(txt, r\"[^,]\")) == 1\n         \
    \       return [txt]\n            else\n                return sum(txt .== 'a':'z')\n\
    \            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2rshw1lu.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp2rshw1lu.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findall(::String, ::Regex)\n  Closest candidates are:\n \
    \   findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2rshw1lu.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rshw1lu.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rshw1lu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2rshw1lu.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findall(::String, ::Regex)\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2rshw1lu.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2rshw1lu.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2rshw1lu.jl:39\ntest set:\
    \ Error Du"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = lowercase(txt)\n    if ' ' in txt \n        return split(txt)\n\
    \    elseif ',' in txt\n        return split(txt, ',')\n    else \n        v =\
    \ count(i -> i % 2 == 1, [ord(i) for i in txt])\n        return v\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmph8fjzw68.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmph8fjzw68.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph8fjzw68.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8fjzw68.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8fjzw68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph8fjzw68.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph8fjzw68.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8fjzw68.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8fjzw68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph8fjzw68.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #[1] R - ifelse()\n    #[2] Julia - ?\n    #[3] Python - if, elif,\
    \ else\n    @show txt\n    txt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpk74c9xah.jl:22

    '
  stdout: "txt = \"Hello world!\"\ntest set: Error During Test at /tmp/tmpk74c9xah.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"]\n  MethodError: Cannot `convert` an object of type \n    String\
    \ to an object of type \n    Union{Int64, Vector{String}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpk74c9xah.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk74c9xah.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk74c9xah.jl:24\ntxt = \"Hello,world!\"\
    \ntest set: Error During Test at /tmp/tmpk74c9xah.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpk74c9xah.jl:18\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk74c9xah.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk74c9xah.jl:24\ntxt = \"Hello\
    \ world,!\"\ntest set: Error During Test at /tmp/tmpk74c9xah.jl:27\n  Test threw\
    \ exception\n  Expression: candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ]\n  MethodError: Cannot `convert` an object of type \n    String to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentia"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        # count the number of\
    \ lower-case letters with odd order in the alphabet\n        odd_count = 0\n \
    \       for i = 1:length(txt)\n            if txt[i] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                if (ord(txt[i]) - ord('a')) % 2 == 1\n                    odd_count\
    \ += 1\n                end\n            end\n        end\n        return odd_count\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8e4zjefn.jl:22\nin expression\
    \ starting at /tmp/tmp8e4zjefn.jl:22\n"
  stdout: ''
  timestamp: 1660008938
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \") == true\n        return split(txt, \" \"\
    )\n    elseif contains(txt, \",\") == true\n        return split(txt, \",\")\n\
    \    else\n        n = 0\n        for i in 1:length(txt)\n            if islower(txt[i])\
    \ == true && isodd(i) == true\n                n = n + 1\n            end\n  \
    \      end\n        return n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplo8z_1rk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmplo8z_1rk.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplo8z_1rk.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8z_1rk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8z_1rk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplo8z_1rk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplo8z_1rk.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo8z_1rk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo8z_1rk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplo8z_1rk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt,r\"[[:space:]]+\"))>1\n        return split(txt,r\"\
    [[:space:]]+\")\n    elseif length(split(txt,r\"[,]\"))>1\n        return split(txt,r\"\
    [,]\")\n    else\n        counter=0\n        for i in 1:length(txt)\n        \
    \    if txt[i]<='z' && txt[i]>='a' && isodd(Int(txt[i])-Int('a'))\n          \
    \      counter+=1\n            end\n        end\n        return counter\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_dqj2meo.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp_dqj2meo.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_dqj2meo.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_dqj2meo.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_dqj2meo.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_dqj2meo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_dqj2meo.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_dqj2meo.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_dqj2meo.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_dqj2meo.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) != nothing\n        return split(txt)\n\
    \    elseif search(r\",\", txt) != nothing\n        return split(txt, \",\")\n\
    \    else\n        odd = 1:2:length(txt)\n        sum = 0\n        for i in odd\n\
    \            if islower(txt[i])\n                sum += 1\n            end\n \
    \       end\n        return sum\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmg1j4aft.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpmg1j4aft.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpmg1j4aft.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1j4aft.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg1j4aft.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmg1j4aft.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmg1j4aft.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1j4aft.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg1j4aft.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmg1j4aft.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmg1j4aft.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1j4aft.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg1j4aft.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmg1j4aft.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpmg1j4aft.jl:14\n   [2"
  timestamp: 1660008941
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) == 1\n    \
    \    letters = split(txt, r\",\")\n        if length(letters) == 1\n         \
    \   return countodd(map(x -> x - ord('a'), collect(letters)))\n        else\n\
    \            return letters\n        end\n    else\n        return words\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpu16zrjo5.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpu16zrjo5.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu16zrjo5.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu16zrjo5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu16zrjo5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu16zrjo5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu16zrjo5.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu16zrjo5.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu16zrjo5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpu16zrjo5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008942
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, ' ')) > 1\n        return split(txt, ' ')\n\
    \    elseif length(split(txt, ',')) > 1\n        return split(txt, ',')\n    else\n\
    \        count = 0\n        for i = 'a':'z'\n            if i == txt[1]\n    \
    \            break\n            end\n            count += 1\n        end\n   \
    \     return count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpdx6pv3a_.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdx6pv3a_.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx6pv3a_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx6pv3a_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdx6pv3a_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdx6pv3a_.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdx6pv3a_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdx6pv3a_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdx6pv3a_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    if length(words) > 1\n        return\
    \ words\n    end\n    words = split(txt, \",\")\n    if length(words) > 1\n  \
    \      return words\n    end\n    return count(x -> isodd(Int(lowercase(x)) -\
    \ Int('a')), collect(txt))\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmptqjal79e.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmptqjal79e.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptqjal79e.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptqjal79e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptqjal79e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptqjal79e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptqjal79e.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptqjal79e.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptqjal79e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptqjal79e.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    for i in txt\n        if i == ' '\n            words = split(txt,\
    \ \" \")\n            return words\n        elseif i == ','\n            words\
    \ = split(txt, \",\")\n            return words\n        else\n            odd_count\
    \ = 0\n            for i in txt\n                if i == lowercase(i)\n      \
    \              indx = ord(i) - ord('a')\n                    if indx % 2 == 1\n\
    \                        odd_count += 1\n                    end\n           \
    \     end\n            end\n            return odd_count\n        end\n    end\n\
    end\n@assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n@assert\
    \ split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n@assert split_words(\"\
    abcdef\") == 3\n@assert split_words(\"Hello, world!\") == [\"Hello\", \"world!\"\
    ]\n@assert split_words(\"aab\") == 2\n@assert split_words(\"aabb\") == 2\n@assert\
    \ split_words(\"ac\") == 2\n@assert split_words(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: ord not defined\nStacktrace:\n [1] split_words(txt::String)\n\
    \   @ Main /tmp/tmp64soss2j.jl:25\n [2] top-level scope\n   @ /tmp/tmp64soss2j.jl:35\n\
    in expression starting at /tmp/tmp64soss2j.jl:35\n"
  stdout: ''
  timestamp: 1660008939
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else\n        #alternative approach using\
    \ arrays\n        #return count(i->((i-1)%2==0)&&(txt[i]==lowercase(txt[i])),\
    \ 1:length(txt))\n        #alt approach using regex\n        return length(match(r\"\
    [^A-Z]*[a-z]\", txt))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpln8axfxt.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpln8axfxt.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpln8axfxt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpln8axfxt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpln8axfxt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpln8axfxt.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpln8axfxt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpln8axfxt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpln8axfxt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) == 1\n    \
    \    words = split(txt, \",\")\n        if length(words) == 1\n            words\
    \ = map(lowercase, txt)\n            return sum(1 for i in 1:length(words) if\
    \ isodd(words[i]))\n        end\n    end\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpq0f83wv2.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpq0f83wv2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq0f83wv2.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0f83wv2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0f83wv2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpq0f83wv2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq0f83wv2.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0f83wv2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0f83wv2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpq0f83wv2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (findnext(txt, r\"\\s+\") != nothing)\n        split(txt, r\"\
    \\s+\")\n    elseif (findnext(txt, r\",\") != nothing)\n        split(txt, \"\
    ,\")\n    else\n        a = [lowercase(x) for x in txt]\n        n = 0\n     \
    \   for i in a\n            n += ord(i) % 2\n        end\n        n\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpafrk5_0z.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpafrk5_0z.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type Regex to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] oftype(x::Int64, y::Regex)\n     @ Base ./essentials.jl:396\n\
    \   [2] findnext(A::String, start::Regex)\n     @ Base ./array.jl:1864\n   [3]\
    \ split_words(txt::String)\n     @ Main /tmp/tmpafrk5_0z.jl:14\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpafrk5_0z.jl:32 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpafrk5_0z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpafrk5_0z.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type Regex to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] oftype(x::Int64, y::Regex)\n     @ Base ./essentials.jl:396\n\
    \   [2] findnext(A::String, start::Regex)\n     @ Base ./array.jl:1864\n   [3]\
    \ split_words(txt::String)\n     @ Main /tmp/tmpafrk5_0z.jl:14\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]"
  timestamp: 1660008943
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        num =\
    \ 0\n        for i in txt\n            if isletter(i) && (ord(i)%2 != 0)\n   \
    \             num += 1\n            end\n        end\n        return num\n   \
    \ end\nend\n@assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\
    @assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n@assert split_words(\"\
    abcdef\") == 3\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type \n  Vector{SubString{String}}\
    \ to an object of type \n  Union{Int64, Vector{String}}\nClosest candidates are:\n\
    \  convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmp0wxj_ozn.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmp0wxj_ozn.jl:28\nin expression starting at\
    \ /tmp/tmp0wxj_ozn.jl:28\n"
  stdout: ''
  timestamp: 1660008943
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    # convert to string\n    x = string(txt)\n    \n    # try\
    \ whitespace\n    if x in split(x, \" \")\n        return split(x, \" \")\n  \
    \  else\n        # try comma\n        if x in split(x, \",\")\n            return\
    \ split(x, \",\")\n        else\n            # find lower-case letter odd order\n\
    \            res = 0\n            for y in x\n                if y in lowercase(string(y))\
    \ && sum(x -> x % 2 == 0, [ord(y)]) == 0\n                    res += 1\n     \
    \           end\n            end\n            return res\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfinw8r1y.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpfinw8r1y.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfinw8r1y.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfinw8r1y.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfinw8r1y.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfinw8r1y.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfinw8r1y.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfinw8r1y.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfinw8r1y.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfinw8r1y.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfinw8r1y.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfinw"
  timestamp: 1660008943
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 1\n        return Int(!isEven(count_lower_case_odd_order(txt)))\n\
    \    else\n        return words\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpg264aeug.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpg264aeug.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg264aeug.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg264aeug.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg264aeug.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg264aeug.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: count_lower_case_odd_order\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg264aeug.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg264aeug.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg264aeug.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg264aeug.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg264aeug.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expans"
  timestamp: 1660008943
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, ',')\n    else\n        return num_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp34syixaw.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp34syixaw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp34syixaw.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34syixaw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34syixaw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp34syixaw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp34syixaw.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34syixaw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34syixaw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp34syixaw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp34syixaw.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34syixaw.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34syixaw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp34syixaw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        return split(txt)\n    elseif has_comma(txt)\n\
    \        return split(txt, ',')\n    else\n        return odd_chars(txt)\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9ub4oq9f.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp9ub4oq9f.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp9ub4oq9f.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ub4oq9f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ub4oq9f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9ub4oq9f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9ub4oq9f.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ub4oq9f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ub4oq9f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9ub4oq9f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9ub4oq9f.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ub4oq9f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ub4oq9f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9ub4oq9f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008942
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt,',')\n    else\n        cnt = 0\n        for c in txt\n\
    \            if islower(c) && ord(c) % 2 == 1\n                cnt += 1\n    \
    \        end\n        end\n        return cnt\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpq3dal3df.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpq3dal3df.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq3dal3df.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq3dal3df.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3dal3df.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq3dal3df.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq3dal3df.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq3dal3df.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3dal3df.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq3dal3df.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008944
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) > 1\n     \
    \   return words\n    else\n        words = split(txt, r\"[^a-z]+\")\n       \
    \ if length(words) > 1\n            return words\n        else\n            letters\
    \ = countodd_letters(words[1])\n            return letters\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpz_h600q6.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpz_h600q6.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz_h600q6.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_h600q6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_h600q6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz_h600q6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz_h600q6.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_h600q6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_h600q6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz_h600q6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008944
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # check if string has whitespace\n    if contains(txt, \" \") \n\
    \        return split(txt, \" \")\n    elseif contains(txt, \",\")\n        return\
    \ split(txt, \",\")\n    else \n        # find number of characters where ord(c)\
    \ % 2 == 1\n        num_odd_chars = 0\n        for c in txt\n            num_odd_chars\
    \ += ord(c) % 2 == 1\n        end\n        return num_odd_chars\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaqsmggvp.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpaqsmggvp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaqsmggvp.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqsmggvp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsmggvp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaqsmggvp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaqsmggvp.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqsmggvp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqsmggvp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaqsmggvp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008944
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_comma = split(txt, \",\")\n    if length(split_comma) ==\
    \ 1\n        # can't split txt on comma, try space\n        split_space = split(txt,\
    \ \" \")\n        if length(split_space) == 1\n            # can't split txt on\
    \ comma or space, return number of lowercase letters with odd order in alphabet\n\
    \            count = 0\n            for c in txt\n                if c >= 'a'\
    \ && c <= 'z'\n                    if int(ord(c)) % 2 == 1\n                 \
    \       count += 1\n                    end\n                end\n           \
    \ end\n            return count\n        else\n            return split_space\n\
    \        end\n    else\n        return split_comma\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0oqeg54i.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp0oqeg54i.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0oqeg54i.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oqeg54i.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oqeg54i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp0oqeg54i.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0oqeg54i.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oqeg54i.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oqeg54i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp0oqeg54i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008944
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occurances(txt, ' ') == 0\n        if occurances(txt, ',') ==\
    \ 0\n            return count_odd_letters(txt)\n        else\n            return\
    \ split(txt, ',')\n        end\n    else\n        return split(txt, ' ')\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpygw2d0hv.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpygw2d0hv.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ occurances not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n   \
    \  @ Main /tmp/tmpygw2d0hv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygw2d0hv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygw2d0hv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpygw2d0hv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: occurances\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygw2d0hv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygw2d0hv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygw2d0hv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpygw2d0hv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: occurances\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygw2d0hv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygw2d0hv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygw2d0hv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpygw2d0hv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ occurances not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n   \
    \  @ Main /tmp/tmpygw2"
  timestamp: 1660008944
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # Check if spaces, split\n    if findall(isequal(' '), txt) ==\
    \ []\n        # Check if comma, split\n        if findall(isequal(','), txt) ==\
    \ []\n            # return the number of lower-case letters with odd order in\
    \ the alphabet\n            return count(iseven, map(txt -> txt - 'a', txt))\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6pa9llu9.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp6pa9llu9.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6pa9llu9.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pa9llu9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pa9llu9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6pa9llu9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6pa9llu9.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pa9llu9.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pa9llu9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6pa9llu9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008945
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = lstrip(rstrip(txt))\n    if occursin(' ', txt)\n        return(split(txt,\
    \ ' '))\n    elseif occursin(',', txt)\n        return(split(txt, ','))\n    else\n\
    \        ans = 0\n        for i in 1:length(txt)\n            if iseven(ord(txt[i])\
    \ - ord('a'))\n                ans += 1\n            end\n        end\n      \
    \  return(ans)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp9k1jt_4q.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp9k1jt_4q.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9k1jt_4q.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9k1jt_4q.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9k1jt_4q.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9k1jt_4q.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9k1jt_4q.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9k1jt_4q.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9k1jt_4q.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9k1jt_4q.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008945
- exit_code: -1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if length(split(txt)) != 1\n        return split(txt)\n \
    \   elseif length(split(txt, \",\")) != 1\n        return split(txt, \",\")\n\
    \    else\n        num_odd_letters = 0\n        for i in 1:length(txt)\n     \
    \       if islower(txt[i]) && (i % 2 != 0)\n                num_odd_letters +=\
    \ 1\n            end\n        end\n        return num_odd_letters\n    end\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp6840xqyx.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6840xqyx.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6840xqyx.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6840xqyx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6840xqyx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6840xqyx.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6840xqyx.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6840xqyx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6840xqyx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if \" \" in txt\n        return split(txt, ' ')\n    elseif \"\
    ,\" in txt\n        return split(txt, ',')\n    else\n        odd_chars = 0\n\
    \        for char in txt\n            if char[1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n                if (Int(char[1]) - 96) % 2 == 1\n                    odd_chars\
    \ += 1\n                end\n            end\n        end\n        return odd_chars\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpd3so1so_.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpd3so1so_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpd3so1so_.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd3so1so_.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd3so1so_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd3so1so_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpd3so1so_.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd3so1so_.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd3so1so_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd3so1so_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpd3so1so_.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd3so1so_.jl:37 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008945
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if(length(words) == 1)\n   \
    \     letters = split(txt, \",\")\n        if(length(letters) == 1)\n        \
    \    return count(t -> t==tolower(t) && isodd(Int(t)-97), letters[1])\n      \
    \  else\n            return letters\n        end\n    else\n        return words\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpeld0qqkc.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpeld0qqkc.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeld0qqkc.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeld0qqkc.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeld0qqkc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpeld0qqkc.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeld0qqkc.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeld0qqkc.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeld0qqkc.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpeld0qqkc.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 1\n        s = count(x\
    \ -> x in 'abcdefghijklmnopqrstuvwxyz' && x != chr(mod(x, 2) + ord('a')), txt)\n\
    \        s\n    else\n        words\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpgzu_652v.jl:16\nin expression\
    \ starting at /tmp/tmpgzu_652v.jl:16\n"
  stdout: ''
  timestamp: 1660008943
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7m1udg3l.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp7m1udg3l.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7m1udg3l.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7m1udg3l.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7m1udg3l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7m1udg3l.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp7m1udg3l.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7m1udg3l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7m1udg3l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7m1udg3l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     "
  timestamp: 1660008945
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isspace(txt)\n        return split(txt)\n    elseif is(txt,\
    \ \", \")\n        return split(txt, \", \")\n    else\n        return count_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2b7wdndb.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp2b7wdndb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp2b7wdndb.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2b7wdndb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2b7wdndb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2b7wdndb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp2b7wdndb.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2b7wdndb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2b7wdndb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2b7wdndb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp2b7wdndb.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2b7wdndb.jl:29 [inlined]\n\
    \   [4]"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return length(lowercase(txt))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppe2ohmkr.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmppe2ohmkr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppe2ohmkr.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppe2ohmkr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppe2ohmkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppe2ohmkr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppe2ohmkr.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppe2ohmkr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppe2ohmkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppe2ohmkr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (\" \" in txt) && (\"\" != txt)\n        words = split(txt)\n\
    \        return words\n    elseif (\",\" in txt) && (\"\" != txt)\n        words\
    \ = split(txt, \",\")\n        return words\n    else\n        count = 0\n   \
    \     txt = lowercase(txt)\n        for i = 1:length(txt)\n            if (i %\
    \ 2 != 0) && (Int(txt[i]) >= 97) && (Int(txt[i]) <= 122)\n                count\
    \ += 1\n            end\n        end\n        return count\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpz07dflgw.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpz07dflgw.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpz07dflgw.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpz07dflgw.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpz07dflgw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpz07dflgw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpz07dflgw.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpz07dflgw.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpz07dflgw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpz07dflgw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpz07dflgw.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpz07dflgw.jl:38 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) == nothing\n        if search(r\",\",\
    \ txt) == nothing\n            return length(txt[txt .\u2208 ['a':'z']])\n   \
    \     else\n            return split(txt, \",\")\n        end\n    else\n    \
    \    return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnjny8dtf.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpnjny8dtf.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpnjny8dtf.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjny8dtf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjny8dtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnjny8dtf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnjny8dtf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjny8dtf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjny8dtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnjny8dtf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnjny8dtf.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnjny8dtf.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnjny8dtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnjny8dtf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpnjny8dtf.jl:14\n   [2"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    v = 0\n    for (i,char) in enumerate(txt)\n        if char == '\
    \ ' || char == ','\n            v = i\n            break\n        end\n    end\n\
    \    if v != 0\n        return(split(txt, char)[1:2])\n    else\n        count\
    \ = 0\n        for c in txt\n            n = Int64(ord(c) - ord('a'))\n      \
    \      if n % 2 == 1\n                count += 1\n            end\n        end\n\
    \        return(count)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpvo2j3wnz.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpvo2j3wnz.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ char not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpvo2j3wnz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo2j3wnz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo2j3wnz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpvo2j3wnz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: char\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvo2j3wnz.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo2j3wnz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo2j3wnz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpvo2j3wnz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: char\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvo2j3wnz.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo2j3wnz.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo2j3wnz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpvo2j3wnz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ char not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpvo2j3wnz.jl:22\n   [2] macro "
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) == 1\n    \
    \    words = split(txt, r\",\")\n        if length(words) == 1\n            return\
    \ sum(isodd(Int(c)) for c in txt)\n        end\n    end\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcqa01b5d.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcqa01b5d.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcqa01b5d.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqa01b5d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqa01b5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcqa01b5d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcqa01b5d.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqa01b5d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqa01b5d.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcqa01b5d.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    if length(words) > 1\n        return\
    \ words\n    end\n    words = split(txt, \",\")\n    if length(words) > 1\n  \
    \      return words\n    end\n    return length(filter(c -> c < 26, map(c -> ord(c)\
    \ - ord('a'), collect(txt))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpp1gnl_7e.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp1gnl_7e.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp1gnl_7e.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1gnl_7e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1gnl_7e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp1gnl_7e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp1gnl_7e.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1gnl_7e.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1gnl_7e.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp1gnl_7e.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return Vector{String}()\n    end\n    if\
    \ count(isdigit, txt) > 0\n        return -1\n    end\n    if any(txt .== ' ')\n\
    \        return split(txt, ' ')\n    elseif any(txt .== ',')\n        return split(txt,\
    \ ',')\n    else\n        n = 0\n        for i in txt\n            if isalpha(i)\
    \ && ord(i) % 2 == 1\n                n += 1\n            end\n        end\n \
    \       return n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp050b3ih3.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp050b3ih3.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmp050b3ih3.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp050b3ih3.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp050b3ih3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp050b3ih3.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp050b3ih3.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp050b3ih3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp050b3ih3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp050b3ih3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp050b3ih3.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp050b3ih3.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp050b3ih3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp050b3ih3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmp050b3ih3.jl:27\n "
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if haskey(Base.split(txt), ' ')\n        return Base.split(txt)\n\
    \    elseif haskey(Base.split(txt), ',')\n        return Base.split(txt)\n   \
    \ else\n        tmp = 0\n        for i in 1:length(txt)\n            if ord(txt[i])%2\
    \ == 1\n                tmp += 1\n            end\n        end\n        return\
    \ tmp\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpegvxj02y.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpegvxj02y.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching haskey(::Vector{SubString{String}}, ::Char)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.ImmutableDict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:552\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpegvxj02y.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpegvxj02y.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpegvxj02y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpegvxj02y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching haskey(::Vector{SubString{String}}, ::Char)\n  Closest candidates are:\n\
    \    haskey(!Matched::Base.ImmutableDict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:789\n\
    \    haskey(!Matched::WeakKeyDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:179\n\
    \    haskey(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:552\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpegvxj02y.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpegvxj02y.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpegvxj02y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpegvxj02y.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"He"
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\n    for ch in txt\n        if ch == ' '\n   \
    \         return split(txt, ' ')\n        end\n    end\n    for ch in txt\n  \
    \      if ch == ','\n            return split(txt, ',')\n        end\n    end\n\
    \    count = 0\n    for i in 0:25\n        if i % 2 == 1\n            count +=\
    \ countinoccurrences(txt, Char(i + 97))\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp27mkcje6.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp27mkcje6.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp27mkcje6.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp27mkcje6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp27mkcje6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp27mkcje6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp27mkcje6.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp27mkcje6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp27mkcje6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp27mkcje6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008947
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if(\" \" in txt)\n        return split(txt, \" \")\n    elseif(\"\
    ,\" in txt)\n        return split(txt, \",\")\n    else\n        return count_odd(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_it28epg.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp_it28epg.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp_it28epg.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_it28epg.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_it28epg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_it28epg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp_it28epg.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_it28epg.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_it28epg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_it28epg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp_it28epg.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_it28epg.jl:29 [inlined]\n\
    \   [6] macro expan"
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        split(txt, ' ')\n    elseif occursin(',',\
    \ txt)\n        split(txt, ',')\n    else\n        count = 0\n        for i =\
    \ 1:length(txt)\n            if islower(txt[i])\n                if i % 2 == 1\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n        count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7pdl35_v.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp7pdl35_v.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7pdl35_v.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7pdl35_v.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7pdl35_v.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7pdl35_v.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7pdl35_v.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7pdl35_v.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7pdl35_v.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7pdl35_v.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008948
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) > 1\n        return words\n\
    \    elseif length(txt) > 1\n        return split(txt, ',')\n    else\n      \
    \  return length(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_chm17y8.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp_chm17y8.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_chm17y8.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_chm17y8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_chm17y8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_chm17y8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_chm17y8.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_chm17y8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_chm17y8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_chm17y8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008948
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) != 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) != 1\n        return split(txt, \"\
    ,\")\n    else\n        x = 0\n        for (i, c) in enumerate(collect(txt))\n\
    \            if islower(c) && i % 2 == 0\n                x += 1\n           \
    \ end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpz5_e2t5s.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpz5_e2t5s.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz5_e2t5s.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz5_e2t5s.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz5_e2t5s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpz5_e2t5s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpz5_e2t5s.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz5_e2t5s.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz5_e2t5s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpz5_e2t5s.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:2"
  timestamp: 1660008948
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, ' ')) > 1\n        return split(txt, ' ')\n\
    \    elseif length(split(txt, ',')) > 1\n        return split(txt, ',')\n    else\n\
    \        return length(filter(x -> x[1] in 'acegikmoqsuwy', split(txt, '')))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1lz70sn.jl:19\nin expression\
    \ starting at /tmp/tmpf1lz70sn.jl:19\n"
  stdout: ''
  timestamp: 1660008946
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"\\s\", txt) == nothing\n        if search(r\",\",\
    \ txt) == nothing\n            return count(c-> ord(c) % 2 == 1, txt)\n      \
    \  else\n            return split(txt, \",\")\n        end\n    else\n       \
    \ return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnqr3iqp4.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpnqr3iqp4.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpnqr3iqp4.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnqr3iqp4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnqr3iqp4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnqr3iqp4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnqr3iqp4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnqr3iqp4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnqr3iqp4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnqr3iqp4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnqr3iqp4.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnqr3iqp4.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnqr3iqp4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnqr3iqp4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpnqr3iqp4.jl:14\n   [2"
  timestamp: 1660008948
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if has_whitespace(txt)\n        split(txt, \" \")\n    elseif has_comma(txt)\n\
    \        split(txt, \",\")\n    else\n        count_odd_lowers(txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp627ix2sm.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp627ix2sm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp627ix2sm.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp627ix2sm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp627ix2sm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp627ix2sm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp627ix2sm.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp627ix2sm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp627ix2sm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp627ix2sm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: has_whitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp627ix2sm.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp627ix2sm.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp627ix2sm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp627ix2sm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ has_whitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ M"
  timestamp: 1660008948
