name: HumanEval_160_do_algebra
language: jl
prompt: "\"\"\"\n    Given two vectors operator, and operand. The first vector has\
  \ basic algebra operations, and \n    the second vector is a vector of integers.\
  \ Use the two given vectors to build the algebric \n    expression and return the\
  \ evaluation of this expression.\n\n    The basic algebra operations:\n    Addition\
  \ ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division\
  \ ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
  \    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n  \
  \  Note:\n        The length of operator vector is equal to the length of operand\
  \ vector minus one.\n        Operand is a vector of of non-negative integers.\n\
  \        Operator vector has at least one operator, and operand vector has at least\
  \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
  **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
  ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
completions: ["    \n    accumulator = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            accumulator += operand[i+1]\n  \
    \      elseif operator[i] == \"-\"\n            accumulator -= operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            accumulator *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            accumulator //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            accumulator ^= operand[i+1]\n\
    \        end\n    end\n    return accumulator\nend", "  result = operand[1]\n\
    \  for i in 1:length(operator)\n    if operator[i] == \"+\"\n      result += operand[i+1]\n\
    \    elseif operator[i] == \"-\"\n      result -= operand[i+1]\n    elseif operator[i]\
    \ == \"*\"\n      result *= operand[i+1]\n    elseif operator[i] == \"//\"\n \
    \     result = div(result, operand[i+1])\n    elseif operator[i] == \"**\"\n \
    \     result ^= operand[i+1]\n    end\n  end\n  return result\nend", "    result\
    \ = operand[1]\n    for i = 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        end\n    end\n    return result\nend", " \
    \   result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == '+'\n            result += operand[i]\n        elseif operator[i-1] == '-'\n\
    \            result -= operand[i]\n        elseif operator[i-1] == '*'\n     \
    \       result *= operand[i]\n        elseif operator[i-1] == '//'\n         \
    \   result = trunc(Int64, result / operand[i])\n        elseif operator[i-1] ==\
    \ '**'\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    # this is a error.\n    # This is the right way.\n    # the index of\
    \ the first element (the operator) is 1\n    # and the index of the last element\
    \ (the operand) is length(operator) + 1\n    operator = operator[1:length(operator)]\n\
    \    operand = operand[1:length(operand)]\n    result = operand[1]\n    for i\
    \ in 1:length(operator)\n        if operator[i] == '+'\n            result +=\
    \ operand[i+1]\n        elseif operator[i] == '-'\n            result -= operand[i+1]\n\
    \        elseif operator[i] == '*'\n            result *= operand[i+1]\n     \
    \   elseif operator[i] == '//'\n            result = Int(result/operand[i+1])\n\
    \        elseif operator[i] == '**'\n            result ^= operand[i+1]\n    \
    \    end\n    end\n    return result\nend", "    @assert size(operator, 1) + 1\
    \ == size(operand, 1)\n    @assert size(operator, 1) >= 1\n    @assert size(operand,\
    \ 1) >= 2\n    \n    op1 = operand[1]\n    op2 = operand[2]\n    result = 0\n\
    \    \n    if operator[1] == \"+\"\n        result = op1 + op2\n    elseif operator[1]\
    \ == \"-\"\n        result = op1 - op2\n    elseif operator[1] == \"*\"\n    \
    \    result = op1 * op2\n    elseif operator[1] == \"//\"\n        result = op1\
    \ \xF7 op2\n    elseif operator[1] == \"**\"\n        result = op1 ^ op2\n   \
    \ end\n    \n    for i in 2:size(operator, 1)\n        op1 = result\n        op2\
    \ = operand[i+1]\n        if operator[i] == \"+\"\n            result = op1 +\
    \ op2\n        elseif operator[i] == \"-\"\n            result = op1 - op2\n \
    \       elseif operator[i] == \"*\"\n            result = op1 * op2\n        elseif\
    \ operator[i] == \"//\"\n            result = op1 \xF7 op2\n        elseif operator[i]\
    \ == \"**\"\n            result = op1 ^ op2\n        end\n    end\n    \n    return\
    \ result\nend", "    n = size(operator, 1)\n    m = size(operand, 1)\n    assert\
    \ n == m - 1, \"n == m - 1\"\n    for i = 1:n\n        operand[i+1] = do_algebra_operation(operator[i],\
    \ operand[i], operand[i+1])\n    end\n    return operand[n+1]\nend", "    str\
    \ = \"\"\n    for i = 1:length(operator)\n        str = str * string(operand[i])\
    \ * operator[i]\n    end\n    str = str * string(operand[end])\n    return parse(Int64,\
    \ str)\nend", "    # Your code\nend\n# There are three tests:\n#   1 - do_algebra([\"\
    +\"], [4, 5])\n#   2 - do_algebra([\"+\", \"-\"], [1, 2, 3])\n#   3 - do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5])", "    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total = floor(Int64, total / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            total = total ^ operand[i+1]\n        end\n    end\n\
    \    return total\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\n \nassert(do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5]) == 9)\nassert(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 0]) == 2)\nassert(do_algebra([\"+\", \"//\", \"-\"], [2, 3, 4, 5]) ==\
    \ 0)\nassert(do_algebra([\"**\", \"//\", \"-\"], [2, 3, 4, 5]) == -3)\n \n \n\"\
    \"\"\n    Given a vector of non-negative integers, return a vector of their square\
    \ roots.\n    If a number in the given vector is negative, return -1.", "    result\
    \ = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1] == \"\
    +\"\n            result += operand[i]\n        elseif operator[i-1] == \"-\"\n\
    \            result -= operand[i]\n        elseif operator[i-1] == \"*\"\n   \
    \         result *= operand[i]\n        elseif operator[i-1] == \"//\"\n     \
    \       result = floor(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = Int64(result ^ operand[i])\n        end\n  \
    \  end\n    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = eval(string(result, operator[i], operand[i+1]))\n    end\n \
    \   return result\nend", "    \n    # Do some validation checks on the vectors\n\
    \    # Are operator and operand vectors the right lengths?\n    if length(operator)\
    \ != length(operand) - 1\n        println(\"Operator vector and operand vector\
    \ must be of different lengths, with the operator vector being one element shorter\
    \ than the operand vector\")\n        return -1\n    end\n    \n    # Do all of\
    \ the operators in the operator vector match the allowed types?\n    if ismatch(r\"\
    ^[+\\-\\*\\/\\^]$\", join(operator, \"\")) == false\n        println(\"Operator\
    \ vector must only contain + - * / or ^ operators\")\n        return -1\n    end\n\
    \    \n    # Are all of the elements in the operand vector numbers?\n    # Note\
    \ that this will throw an error if there are negative numbers because - is for\
    \ subtraction not for negative numbers\n    if ismatch(r\"^[0-9]+$\", join(map(string,\
    \ operand), \"\")) == false\n        println(\"Operand vector must only contain\
    \ numbers\")\n        return -1\n    end\n    \n    # Make the final array that\
    \ will be evalutated\n    alg_exp = []\n    for (op, val) in zip(operator, operand)\n\
    \        push!(alg_exp, val)\n        push!(alg_exp, op)\n    end\n    push!(alg_exp,\
    \ operand[end])\n    \n    # Evaluate the algabraic expression\n    try\n    \
    \    alg_exp_eval = eval(parse(join(alg_exp, \"\")))\n    catch\n        println(\"\
    The algebraic expression is invalid.\")\n        return -1\n    end\n    \n  \
    \  return alg_exp_eval\nend", "    # your code here\n    return 0\nend", "   \
    \ #Your code goes here\n    return result::Int64\nend", "    # You have to implement\
    \ this function.\n    # Write your code between the two comment blocks.\n    #########################################\n\
    \    # Your code goes here:\n    #########################################\n \
    \   acc = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            acc += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            acc -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          acc *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     acc = floor(Int64, acc/operand[i+1])\n        elseif operator[i] == \"**\"\
    \n            acc = Int64(acc^operand[i+1])\n        end\n    end\n    return\
    \ acc\nend", '    # Returns the evaluation of the algebraic expression', "   \
    \ # create string \n    expression = \"\"\n    # loop through operand and operator\
    \ \n    for i = 1:length(operand)\n        # add operand to expression \n    \
    \    expression *= string(operand[i])\n        # check if there is an operator\
    \ \n        if i <= length(operator)\n            # add operator to expression\
    \ \n            expression *= operator[i]\n        end\n    end\n    # eval\n\
    \    return eval(parse(expression))\nend", "    \n    expression = string(operand[1])",
  "    ...\nend", "    # Your code here\nend", "    result = operand[1]\n    for i\
    \ in 2:length(operand)\n        switch operator[i-1]\n            case \"+\"\n\
    \                result += operand[i]\n            case \"-\"\n              \
    \  result -= operand[i]\n            case \"*\"\n                result *= operand[i]\n\
    \            case \"//\"\n                result //= operand[i]\n            case\
    \ \"**\"\n                result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n  \
    \      if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend", "    # YOUR CODE HERE\n    pass\n\
    \ \nend", "  num_operands = length(operand)\n  num_operators = length(operator)\n\
    \  if num_operands < 2 || num_operators < 1\n    error(\"Wrong input\")\n  end\n\
    \  if num_operands - 1 != num_operators\n    error(\"Wrong input\")\n  end\n \
    \ result = operand[1]\n  for i in 1:num_operators\n    if operator[i] == \"+\"\
    \n      result += operand[i+1]\n    elseif operator[i] == \"-\"\n      result\
    \ -= operand[i+1]\n    elseif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elseif operator[i] == \"//\"\n      result = floor(Int64, result / operand[i+1])\n\
    \    elseif operator[i] == \"**\"\n      result = convert(Int64, result ^ operand[i+1])\n\
    \    else\n      error(\"Wrong input\")\n    end\n  end\n  return result\nend",
  "    expression = string(operand[1])\n    for i = 1:length(operator)\n        expression\
    \ = string(expression, \" \", operator[i], \" \", operand[i+1])\n    end\n   \
    \ return eval(parse(expression))\nend", "    op1 = operand[1]\n    op2 = operand[2]\n\
    \    i = 1\n    while i < length(operator)\n        if operator[i] == \"+\"\n\
    \            op1 = op1 + op2\n        elseif operator[i] == \"-\"\n          \
    \  op1 = op1 - op2\n        elseif operator[i] == \"*\"\n            op1 = op1\
    \ * op2\n        elseif operator[i] == \"//\"\n            op1 = op1 \xF7 op2\n\
    \        elseif operator[i] == \"**\"\n            op1 = op1 ^ op2\n        end\n\
    \        i += 1\n        op2 = operand[i + 1]\n    end\n    return op1\nend",
  "    # The length of operator vector is equal to the length of operand vector minus\
    \ one.\n    if length(operator) != length(operand) - 1\n        return false\n\
    \    end\n    \n    # Operand is a vector of of non-negative integers.\n    if\
    \ any(x -> x < 0, operand)\n        return false\n    end\n    \n    # Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    \    if length(operator) == 0 || length(operand) == 0\n        return false\n\
    \    end\n    \n    result = operand[1]\n    operand = operand[2:end]\n    \n\
    \    for i = 1:length(operator)\n        op = operator[i]\n        oper = operand[i]\n\
    \        \n        if op == \"+\"\n            result += oper\n        elseif\
    \ op == \"-\"\n            result -= oper\n        elseif op == \"*\"\n      \
    \      result *= oper\n        elseif op == \"//\"\n            result = convert(Int64,\
    \ floor(result / oper))\n        elseif op == \"**\"\n            result = convert(Int64,\
    \ floor(result ^ oper))\n        end\n    end\n    \n    return result\nend",
  "    \"\"\"\n    Your Code here\n    \"\"\"\n    # YOUR CODE HERE\n    result =\
    \ operand[1]\n    for i in 2:length(operand)\n        result = eval(string(result,\
    \ operator[i-1], operand[i]))\n    end\n    return result\nend", "    result =\
    \ operand[1]\n    operand = operand[2:end]\n    for i in 1:length(operator)\n\
    \        #println(i)\n        if operator[i] == \"+\"\n            result += operand[i]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i]\n     \
    \   elseif operator[i] == \"*\"\n            result *= operand[i]\n        elseif\
    \ operator[i] == \"//\"\n            result = convert(Int64, result / operand[i])\n\
    \        elseif operator[i] == \"**\"\n            result = convert(Int64, result\
    \ ^ operand[i])\n        end\n    end\n    return result\nend", "    total = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  total += operand[i+1]\n        elseif operator[i] == \"-\"\n            total\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            total *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            total //= operand[i+1]\n  \
    \      elseif operator[i] == \"**\"\n            total ^= operand[i+1]\n     \
    \   end\n    end\n    return total\nend", "    output = 0\n    first = true\n\
    \    operands = [operand[i] for i in 1:length(operand)]\n    for i in 1:length(operator)\n\
    \        if first\n            output = operands[i]\n            first = false\n\
    \        end\n        if operator[i] == \"+\"\n            output += operands[i+1]\n\
    \        elseif operator[i] == \"-\"\n            output -= operands[i+1]\n  \
    \      elseif operator[i] == \"*\"\n            output *= operands[i+1]\n    \
    \    elseif operator[i] == \"//\"\n            output = floor(Int64, output /\
    \ operands[i+1])\n        elseif operator[i] == \"**\"\n            output = floor(Int64,\
    \ output ^ operands[i+1])\n        end\n    end\n    return output\nend", "  \
    \  if length(operator) == length(operand) - 1\n        try\n            expr =\
    \ parse(operand[1])\n            for i in 1:length(operator)\n               \
    \ expr = string(expr, \" \", operator[i], \" \", operand[i+1])\n            end\n\
    \            @show expr\n            return eval(parse(expr))\n        catch error\n\
    \            error(\"Something is wrong with the input\")\n        end\n    else\n\
    \        error(\"Lengths of operator and operand vectors are not equal\")\n  \
    \  end\nend", "    result = operand[1]\n    for i in 1:length(operator)\n    \
    \    if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result //= operand[i+1]\n        elseif operator[i] == \"\
    **\"\n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result \xF7 operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result ^= operand[i+1]\n        end\n   \
    \ end\n    return result\nend", "    \"\"\"\n    Parameters:\n        operator:\
    \ a vector of operators (+, -, *, //, ^)\n        operand: a vector of integers",
  "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", '    pass', "   \n    result = operand[1]\n    for i\
    \ = 1:length(operator)\n        if operator[i] == \"+\"\n            result +=\
    \ operand[i+1]\n        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n   \
    \     elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    \"\"\"\n    Args:\n       \
    \ operator: vector that contains the operations that should be done on operand\
    \ vector\n        operand:  vector of integers \n    \"\"\"\n    \n    algebra\
    \ = []\n    for i = 1:length(operator)\n        algebra = push!(algebra, operator[i])\n\
    \        algebra = push!(algebra, operand[i])\n    end\n    algebra = push!(algebra,\
    \ operand[end])\n    return eval(parse(string(algebra)))\nend", "    result =\
    \ operand[1]\n    for i = 1:length(operator)\n        result = eval(:(result $(parse(operator[i]))\
    \ operand[i+1]))\n    end\n    return result\nend", "    temp = operand[1]\n \
    \   i = 1\n    while i < length(operator) + 1\n        if operator[i] == '+'\n\
    \            temp += operand[i + 1]\n        elseif operator[i] == '-'\n     \
    \       temp -= operand[i + 1]\n        elseif operator[i] == '*'\n          \
    \  temp *= operand[i + 1]\n        elseif operator[i] == '//'\n            temp\
    \ = temp\xF7operand[i + 1]\n        elseif operator[i] == '**'\n            temp\
    \ ^= operand[i + 1]\n        end\n        i += 1\n    end\n    return temp\nend",
  "    \"\"\"\n    TODO: implement this function. \n    \"\"\"\n    \nend\nend\n \n\
    \ ", '    expression = string(operand[1])', "    result = operand[1]\n    for\
    \ i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = result \xF7 operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    \n    exp_t = \"(\"\n    for\
    \ i in 2:length(operand)\n        exp_t *= \"(\" * string(operand[i-1]) * operator[i-1]\
    \ * string(operand[i]) * \")\"\n    end\n    exp_t *= \")\"\n    return eval(parse(exp_t))\n\
    end", "    # Write your code here\nend", "    # your code here\nend", "    expr\
    \ = operand[1]\n    for i = 1:length(operator)\n        expr = eval(Meta.parse(string(expr,\
    \ \" \", operator[i], \" \", operand[i+1])))\n    end\n    return expr\nend",
  "    \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    \n   \
    \ return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", end, '    expression = Expr(:block, [])', "    \nend", "    result\
    \ = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1] == \"\
    +\"\n            result += operand[i]\n        elseif operator[i-1] == \"-\"\n\
    \            result -= operand[i]\n        elseif operator[i-1] == \"*\"\n   \
    \         result *= operand[i]\n        elseif operator[i-1] == \"//\"\n     \
    \       result //= operand[i]\n        elseif operator[i-1] == \"**\"\n      \
    \      result ^= operand[i]\n        end\n    end\n    return result\nend", " \
    \   result = operand[1]\n    for i in 2:length(operand)\n        for j in 1:length(operator)\n\
    \            if operator[j] == '+'\n                result += operand[i]\n   \
    \         elseif operator[j] == '-'\n                result -= operand[i]\n  \
    \          elseif operator[j] == '*'\n                result *= operand[i]\n \
    \           elseif operator[j] == '//'\n                result //= operand[i]\n\
    \            elseif operator[j] == '**'\n                result = result ^ operand[i]\n\
    \            end\n        end\n    end\n    return result\nend", "    result =\
    \ operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        end\n    end\n    return result\nend", " \
    \   if length(operator) == 0 \n        return operand[1]\n    end \n    if length(operator)\
    \ == 1\n        if operator[1] == \"+\"\n            return operand[1] + operand[2]\n\
    \        elseif operator[1] == \"-\"\n            return operand[1] - operand[2]\n\
    \        elseif operator[1] == \"*\"\n            return operand[1] * operand[2]\n\
    \        elseif operator[1] == \"//\"\n            return operand[1] \xF7 operand[2]\n\
    \        elseif operator[1] == \"**\"\n            return operand[1] ^ operand[2]\n\
    \        end\n    end \n    if length(operator) == 2\n        if operator[1] ==\
    \ \"+\"\n            if operator[2] == \"+\"\n                return operand[1]\
    \ + operand[2] + operand[3]\n            elseif operator[2] == \"-\"\n       \
    \         return operand[1] + operand[2] - operand[3]\n            elseif operator[2]\
    \ == \"*\"\n                return operand[1] + operand[2] * operand[3]\n    \
    \        elseif operator[2] == \"//\"\n                return operand[1] + operand[2]\
    \ \xF7 operand[3]\n            elseif operator[2] == \"**\"\n                return\
    \ operand[1] + operand[2] ^ operand[3]\n            end\n        elseif operator[1]\
    \ == \"-\"\n            if operator[2] == \"+\"\n                return operand[1]\
    \ - operand[2] + operand[3]\n            elseif operator[2] == \"-\"\n       \
    \         return operand[1] - operand[2] - operand[3]\n            elseif operator[2]\
    \ == \"*\"\n                return operand[1] - operand[2] * operand[3]\n    \
    \        elseif operator[2] == \"//\"\n                return operand[1] - operand[2]\
    \ \xF7 operand[3]\n            elseif operator[2] == \"**\"\n                return\
    \ operand[1] - operand[2] ^ operand", '    result = operand[1]', "    res = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ res += operand[i+1]\n        elseif operator[i] == \"-\"\n            res -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            res *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            res //= operand[i+1]\n    \
    \    elseif operator[i] == \"**\"\n            res ^= operand[i+1]\n        end\n\
    \    end\n    return res\nend", "    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            total ^= operand[i+1]\n        end\n    end\n    return total\n\
    end", "    if length(operator) == 0 \n        return operand[1]\n    end \n  \
    \  if length(operator) + 1 != length(operand)\n        error(\"Invalid input vector\
    \ size.\")\n    end \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = div(result, operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        else\n            error(\"\
    Invalid operator.\")\n        end \n    end \n    return result\nend", "    #\
    \ Store the total result\n    total = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            total ^= operand[i+1]\n        end\n    end\n    total\nend", " \
    \   result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n   \
    \     if operator[i] == '+'\n            result += operand[i+1]\n        elseif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator[i] == '//'\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ '**'\n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    expression = string(operand[1])\n    for i in 1:length(operator)\n\
    \        expression = string(expression, operator[i], operand[i+1])\n    end\n\
    \    eval(Meta.parse(expression))\nend", "    sum = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            sum += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            sum -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            sum *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            sum = floor(Int64, sum / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            sum = sum ^ operand[i+1]\n        end\n    end\n    return\
    \ sum\nend", "    \n    result = operand[1]\n    operand = operand[2:end]\n  \
    \  \n    for (i, op) in enumerate(operator)\n        if op == \"+\"\n        \
    \    result += operand[i]\n        elseif op == \"-\"\n            result -= operand[i]\n\
    \        elseif op == \"*\"\n            result *= operand[i]\n        elseif\
    \ op == \"//\"\n            result //= operand[i]\n        elseif op == \"**\"\
    \n            result ^= operand[i]\n        end\n    end\n    \n    return result\n\
    end", "    result = operand[1]\n    # ...\n    return result\nend", "    # TODO\n\
    \    \"\"\"\n    Use your function here.\n    \"\"\"\n    \n    return 0\nend\n\
    \ \n# Execute the script\nmain()", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\n \nfor i = 1:length(operator)\n    println(do_algebra(operator[i],\
    \ operand[i]) == result[i])\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    # Your Code here\n    # start with the first operand.\n    result =\
    \ operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result = convert(Int64, result) // convert(Int64, operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n        end\n\
    \    end\n    return result\nend", "    # Write your code here!\n    # Remember\
    \ to use shift() to remove the first operator and operand in your loop!\nend\n\
    \ \n@testset \"3.3\" begin\n    @test do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9\n    @test do_algebra([\"-\", \"*\", \"**\", \"+\"], [2, 3, 4, 5,\
    \ 6]) == -6\n    @test do_algebra([\"+\", \"*\", \"**\", \"-\"], [2, 3, 4, 5,\
    \ 6]) == -178\nend\n ", "    a = operand[1]\n    b = operand[2]\n    c = operand[3]\n\
    \    i = 1\n    op = operator[i]\n    if op == \"+\"\n        a = a + b\n    elseif\
    \ op == \"-\"\n        a = a - b\n    elseif op == \"*\"\n        a = a * b\n\
    \    elseif op == \"//\"\n        a = a // b\n    elseif op == \"**\"\n      \
    \  a = a ^ b\n    end\n    while i < length(operator)\n        op = operator[i]\n\
    \        if op == \"+\"\n            a = a + c\n        elseif op == \"-\"\n \
    \           a = a - c\n        elseif op == \"*\"\n            a = a * c\n   \
    \     elseif op == \"//\"\n            a = a // c\n        elseif op == \"**\"\
    \n            a = a ^ c\n        end\n        i = i + 1\n        c = operand[i+1]\n\
    \    end\n    return a\nend\n# build_SIC (SIC_Machine)\n# Test: build_SIC()",
  "    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end", "    # Base case of recursion (last operation in the vector)\n    if size(operator,\
    \ 1) == 1\n        if operator[1] == \"+\"\n            return operand[1] + operand[2]\n\
    \        elseif operator[1] == \"-\"\n            return operand[1] - operand[2]\n\
    \        elseif operator[1] == \"*\"\n            return operand[1] * operand[2]\n\
    \        elseif operator[1] == \"//\"\n            return operand[1] \xF7 operand[2]\n\
    \        elseif operator[1] == \"**\"\n            return operand[1] ^ operand[2]\n\
    \        end\n    else\n        # First check if there are exponentiation operations,\
    \ if yes, do them first\n        if findfirst(x -> x == \"**\", operator) != nothing\n\
    \            idx = findfirst(x -> x == \"**\", operator)\n            operand[idx]\
    \ = operand[idx] ^ operand[idx + 1]\n            operator = deleteat!(operator,\
    \ idx)\n            operand = deleteat!(operand, idx + 1)\n            return\
    \ do_algebra(operator, operand)\n        end\n        # Second, check if there\
    \ are multiplication operations, if yes, do them second\n        if findfirst(x\
    \ -> x == \"*\", operator) != nothing\n            idx = findfirst(x -> x == \"\
    *\", operator)\n            operand[idx] = operand[idx] * operand[idx + 1]\n \
    \           operator = deleteat!(operator, idx)\n            operand = deleteat!(operand,\
    \ idx + 1)\n            return do_algebra(operator, operand)\n        end\n  \
    \      # Third, check if there are division operations, if yes, do them third\n\
    \        if findfirst(x -> x == \"//\", operator) != nothing\n            idx\
    \ = findfirst(x -> x == \"//\", operator)\n            operand[idx] = operand[idx]\
    \ \xF7 operand[idx + 1]\n            operator = deleteat!(operator, idx)\n   \
    \         operand = deleteat!(operand, idx + 1)\n", "    # N = length(operator)\n\
    \    # result = operand[1]\n    # for i = 1:N\n    #     if operator[i] == \"\
    +\"\n    #         result += operand[i+1]\n    #     elseif operator[i] == \"\
    -\"\n    #         result -= operand[i+1]\n    #     elseif operator[i] == \"\
    *\"\n    #         result *= operand[i+1]\n    #     elseif operator[i] == \"\
    //\"\n    #         result = floor(Int64, result / operand[i+1])\n    #     elseif\
    \ operator[i] == \"**\"\n    #         result = result ^ operand[i+1]\n    # \
    \    end\n    # end\n    # return result\n    #\n    # Another one\n    #\n  \
    \  # result = operand[1]\n    # for i = 1:length(operator)\n    #     result =\
    \ eval(parse(result, operator[i], operand[i+1]))\n    # end\n    # return result\n\
    \    #\n    # More readable version\n    #\n    result = operand[1]\n    for i\
    \ = 1:length(operator)\n        eval(parse(result, operator[i], operand[i+1]))\n\
    \    end\n    return result\nend", end, "    \"\"\"\n    Write your code here\
    \ ...\n    \"\"\"\n    assert(length(operator) == length(operand) - 1)\n    if\
    \ length(operator) == 0\n        return 0\n    end\n    if length(operator) ==\
    \ 1\n        if operator[1] == \"+\"\n            return operand[1] + operand[2]\n\
    \        elseif operator[1] == \"-\"\n            return operand[1] - operand[2]\n\
    \        elseif operator[1] == \"*\"\n            return operand[1] * operand[2]\n\
    \        elseif operator[1] == \"//\"\n            return operand[1] // operand[2]\n\
    \        elseif operator[1] == \"**\"\n            return operand[1] ^ operand[2]\n\
    \        end\n    end\n    \n    if length(operator) > 1\n        subop = operator[1]\n\
    \        if subop == \"+\"\n            operand[2] = operand[1] + operand[2]\n\
    \        elseif subop == \"-\"\n            operand[2] = operand[1] - operand[2]\n\
    \        elseif subop == \"*\"\n            operand[2] = operand[1] * operand[2]\n\
    \        elseif subop == \"//\"\n            operand[2] = operand[1] // operand[2]\n\
    \        elseif subop == \"**\"\n            operand[2] = operand[1] ^ operand[2]\n\
    \        end\n        op = operator[2:end]\n        opd = operand[2:end]\n   \
    \     return do_algebra(op, opd)\n    end\nend", "    result = operand[1]\n  \
    \  operand_idx = 2\n    for op in operator\n        if op == \"+\"\n         \
    \   result += operand[operand_idx]\n        elseif op == \"-\"\n            result\
    \ -= operand[operand_idx]\n        elseif op == \"*\"\n            result *= operand[operand_idx]\n\
    \        elseif op == \"//\"\n            result //= operand[operand_idx]\n  \
    \      elseif op == \"**\"\n            result = result ^ operand[operand_idx]\n\
    \        end\n        operand_idx += 1\n    end\n    return result\nend", "  \
    \  result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = operand[i+1] ^ result\n        end\n    end\n\
    \    return result\nend", "    \"\"\"\n    This function takes in a vector of\
    \ string operators, and a vector of integers. \n    Use these two vectors to build\
    \ an algebraic expression and return the evaluation of this expression.\n    \"\
    \"\"\n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result \xF7= operand[i]\n        elseif operator[i-1] == \"**\"\n\
    \            result ^= operand[i]\n        end\n    end\n    return result\nend",
  "    #   Add your code here\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    e = parse(Int64, string(operand[1]))\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"-\"\n            e -= operand[i+1]\n        elseif\
    \ operator[i] == \"+\"\n            e += operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            e *= operand[i+1]\n        elseif operator[i] == \"//\"\
    \n            e \xF7= operand[i+1]\n        elseif operator[i] == \"**\"\n   \
    \         e ^= operand[i+1]\n        end\n    end\n    return e\nend", '    result
    = operand[1]', "    result = operand[1]\n   \n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    \n   \
    \ return result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n\
    \        op = operator[i]\n        arg = operand[i+1]\n        if op == \"+\"\n\
    \            result += arg\n        elseif op == \"-\"\n            result -=\
    \ arg\n        elseif op == \"*\"\n            result *= arg\n        elseif op\
    \ == \"//\"\n            result //= arg\n        elseif op == \"**\"\n       \
    \     result = result ^ arg\n        end\n    end\n    return result\nend", " \
    \   # Your code here\nend\n# Test", "    expression = operand[1]\n    for i =\
    \ 1:length(operator)\n        expression = eval(parse(string(expression, operator[i],\
    \ operand[i+1])))\n    end\n    return expression\nend", "    # Your code here\n\
    \    exp = \"\"\n    for i in 1:length(operator)\n        exp = exp * string(operand[i])\
    \ * operator[i]\n    end\n    exp = exp * string(operand[end])\n    return eval(parse(exp))\n\
    end", "    # Your code here\n    n=length(operator)\n    k=length(operand)\n \
    \   x=0\n    while(k-1>=1)\n        if operator[n]==\"+\"\n            operand[k-1]=operand[k-1]+operand[k]\n\
    \        elseif operator[n]==\"-\"\n            operand[k-1]=operand[k-1]-operand[k]\n\
    \        elseif operator[n]==\"*\"\n            operand[k-1]=operand[k-1]*operand[k]\n\
    \        elseif operator[n]==\"//\"\n            operand[k-1]=operand[k-1]//operand[k]\n\
    \        elseif operator[n]==\"**\"\n            operand[k-1]=operand[k-1]^operand[k]\n\
    \        end\n        n=n-1\n        k=k-1\n    end\n    return operand[1]\nend\n\
    \ \n \n \n ", "    temp = operand[1]\n    for i = 1:length(operator)\n       \
    \ if operator[i] == \"+\"\n            temp += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            temp -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            temp *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            temp //= operand[i+1]\n        elseif operator[i] == \"**\"\n   \
    \         temp ^= operand[i+1]\n        end\n    end\n    return temp\nend", " \
    \   #Given two vectors operator, and operand. The first vector has basic algebra\
    \ operations, and the second vector is a vector of integers. Use the two given\
    \ vectors to build the algebric expression and return the evaluation of this expression.\n\
    \    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == '+'\n            result += operand[i+1]\n        elseif operator[i] == '-'\n\
    \            result -= operand[i+1]\n        elseif operator[i] == '*'\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == '//'\n         \
    \   result = div(result, operand[i+1])\n        elseif operator[i] == '**'\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for (op, ind) in enumerate(operator)\n   \
    \     if op == \"+\"\n            result += operand[ind+1]\n        elseif op\
    \ == \"-\"\n            result -= operand[ind+1]\n        elseif op == \"*\"\n\
    \            result *= operand[ind+1]\n        elseif op == \"//\"\n         \
    \   result = floor(Int64, result/operand[ind+1])\n        elseif op == \"**\"\n\
    \            result ^= operand[ind+1]\n        end\n    end\n    return result\n\
    end", "    # Write your code here\n    # If you get stuck, uncomment the line\
    \ above to load a correction in this cell (then you can execute this code).\n\
    \    \n    pass # remove this line when you write your code\nend", "    \"\"\"\
    \n    Given two vectors operator, and operand. The first vector has basic algebra\
    \ operations, and \n    the second vector is a vector of integers. Use the two\
    \ given vectors to build the algebric \n    expression and return the evaluation\
    \ of this expression.", "    \n    # TODO\n   \n    return 0\nend", "    \n  \
    \  result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end", "    \nend\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for (i, op) in enumerate(operator)\n        if op == \"+\"\n            result\
    \ += operand[i+1]\n        elseif op == \"-\"\n            result -= operand[i+1]\n\
    \        elseif op == \"*\"\n            result *= operand[i+1]\n        elseif\
    \ op == \"//\"\n            result = floor(Int64, result / operand[i+1])\n   \
    \     elseif op == \"**\"\n            result ^= operand[i+1]\n        end\n \
    \   end\n    return result\nend\ndo_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])",
  "    \"\"\"\n    Args:\n        operator: Vector of basic algebra operations\n \
    \       operand: Vector of integers\n    Returns:\n        The result of algebraic\
    \ expression\n    \"\"\"\n    algebra = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        if op == \"+\"\n            algebra += operand[i+1]\n\
    \        elseif op == \"-\"\n            algebra -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            algebra *= operand[i+1]\n        elseif op == \"//\"\
    \n            algebra = convert(Int64, algebra / operand[i+1])\n        elseif\
    \ op == \"**\"\n            algebra = convert(Int64, algebra ^ operand[i+1])\n\
    \        end\n    end\n    return algebra\nend", "    n = length(operator)\n \
    \   result = operand[1]\n    for i = 1:n\n        if operator[i] == \"+\"\n  \
    \          result += operand[i+1]\n        elseif operator[i] == \"-\"\n     \
    \       result -= operand[i+1]\n        elseif operator[i] == \"*\"\n        \
    \    result *= operand[i+1]\n        elseif operator[i] == \"//\"\n          \
    \  result \xF7= operand[i+1]\n        elseif operator[i] == \"**\"\n         \
    \   result ^= operand[i+1]\n        end\n    end\n    return result\nend\n    ",
  "    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i+1])\n        end\n\
    \    end\n    return result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    value = operand[1]\n    for i in 2:length(operand)\n    \
    \    if operator[i-1] == \"+\"\n            value += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            value -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            value *= operand[i]\n        elseif operator[i-1] == \"\
    //\"\n            value = floor(Int64, value / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            value = floor(Int64, value^operand[i])\n        end\n\
    \    end\n    return value\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == '+'\n            result += operand[i+1]\n        elseif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator[i] == '//'\n\
    \            result //= operand[i+1]\n        elseif operator[i] == '**'\n   \
    \         result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = div(result, operand[i])\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    \n    i = length(operator)\n    n = length(operand)\n    result = operand[1]\n\
    \    \n    for j in 1:i\n        if operator[j] == \"+\"\n            result =\
    \ result + operand[j+1]\n        elseif operator[j] == \"-\"\n            result\
    \ = result - operand[j+1]\n        elseif operator[j] == \"*\"\n            result\
    \ = result * operand[j+1]\n        elseif operator[j] == \"//\"\n            result\
    \ = result \xF7 operand[j+1]\n        elseif operator[j] == \"**\"\n         \
    \   result = result ^ operand[j+1]\n        end\n    end\n    \n    return result\n\
    \    \nend", "    result = operand[1]\n    for i = 1:length(operator)\n      \
    \  a = operand[i+1]\n        if operator[i] == \"+\"\n            result += a\n\
    \        elseif operator[i] == \"-\"\n            result -= a\n        elseif\
    \ operator[i] == \"*\"\n            result *= a\n        elseif operator[i] ==\
    \ \"//\"\n            result //= a\n        elseif operator[i] == \"**\"\n   \
    \         result = result ^ a\n        end\n    end\n    return result\nend",
  "    if (length(operator) != length(operand) - 1)\n        throw(ArgumentError(\"\
    Wrong input\"))\n    end\n    if (length(operator) == 0 || length(operand) ==\
    \ 0)\n        throw(ArgumentError(\"Wrong input\"))\n    end\n    answer = operand[1]\n\
    \    for (index, val) in enumerate(operator)\n        oper = val\n        if (oper\
    \ == \"+\")\n            answer += operand[index + 1]\n        elseif (oper ==\
    \ \"-\")\n            answer -= operand[index + 1]\n        elseif (oper == \"\
    *\")\n            answer *= operand[index + 1]\n        elseif (oper == \"//\"\
    )\n            answer = div(answer, operand[index + 1])\n        elseif (oper\
    \ == \"**\")\n            answer = answer ^ operand[index + 1]\n        else\n\
    \            throw(ArgumentError(\"Wrong operator\"))\n        end\n    end\n\
    \    return answer\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for (i, op) in enumerate(operator)\n\
    \        if op == '+'\n            result += operand[i+1]\n        elseif op ==\
    \ '-'\n            result -= operand[i+1]\n        elseif op == '*'\n        \
    \    result *= operand[i+1]\n        elseif op == '//'\n            result //=\
    \ operand[i+1]\n        elseif op == '**'\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    \"\"\"\n    Implement your\
    \ answer here\n    \"\"\"\nend", "    \n    length(operator) != length(operand)\
    \ - 1 && error(\"invalid operand length\")\n    length(operator) < 1 && error(\"\
    invalid operator length\")\n    any(operand .< 0) && error(\"invalid operand value\"\
    )\n    \n    result = operand[1]\n    for (op, i) in enumerate(operator)\n   \
    \     if op == \"+\"\n            result += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n    \
    \        result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ = result \xF7 operand[i+1]\n        elseif op == \"**\"\n            result\
    \ ^= operand[i+1]\n        else\n            error(\"invalid operator\")\n   \
    \     end\n    end\n    \n    return result\nend", "    res = operand[1]\n   \
    \ for (i, o) in enumerate(operator)\n        if o == \"+\"\n            res +=\
    \ operand[i+1]\n        elseif o == \"-\"\n            res -= operand[i+1]\n \
    \       elseif o == \"*\"\n            res *= operand[i+1]\n        elseif o ==\
    \ \"//\"\n            res = floor(Int64, res/operand[i+1])\n        elseif o ==\
    \ \"**\"\n            res = res^operand[i+1]\n        end\n    end\n    return\
    \ res\nend", "    \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n   \
    \     if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = convert(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\n \nprint(do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5]))", "    out = operand[1]\n    for i = 1:length(operator)\n\
    \        out = eval(string(out, operator[i], operand[i+1]))\n    end\n    return\
    \ out\nend", "    for i in 1:length(operator)\n        if operator[i] == \"+\"\
    \n            operand[i] = operand[i] + operand[i+1]\n            pop!(operand,\
    \ i+1)\n            pop!(operator, i)\n            i = i - 1\n        elseif operator[i]\
    \ == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n            pop!(operand,\
    \ i+1)\n            pop!(operator, i)\n            i = i - 1\n        elseif operator[i]\
    \ == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            pop!(operand,\
    \ i+1)\n            pop!(operator, i)\n            i = i - 1\n        elseif operator[i]\
    \ == \"//\"\n            operand[i] = operand[i] \xF7 operand[i+1]\n         \
    \   pop!(operand, i+1)\n            pop!(operator, i)\n            i = i - 1\n\
    \        elseif operator[i] == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n\
    \            pop!(operand, i+1)\n            pop!(operator, i)\n            i\
    \ = i - 1\n        end\n    end\n    return operand[1]\nend\noperator = [\"+\"\
    , \"*\", \"-\"]\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)",
  "    start = 1\n    end = length(operand)\n    while start < end\n        if operator[start]\
    \ == \"+\"\n            operand[start] = operand[start] + operand[start + 1]\n\
    \        elseif operator[start] == \"-\"\n            operand[start] = operand[start]\
    \ - operand[start + 1]\n        elseif operator[start] == \"*\"\n            operand[start]\
    \ = operand[start] * operand[start + 1]\n        elseif operator[start] == \"\
    //\"\n            operand[start] = operand[start] \xF7 operand[start + 1]\n  \
    \      elseif operator[start] == \"**\"\n            operand[start] = operand[start]\
    \ ^ operand[start + 1]\n        end\n        pop!(operand)\n        pop!(operator)\n\
    \    end\n    return operand[1]\nend", "    expression = \"\"\n    for i in 1:length(operator)\n\
    \        expression *= string(operand[i]) * operator[i]\n    end\n    expression\
    \ *= string(operand[end])\n    return eval(parse(expression))\nend", "    res\
    \ = operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"\
    +\"\n            res += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          res -= operand[i+1]\n        elseif operator[i] == \"*\"\n        \
    \    res *= operand[i+1]\n        elseif operator[i] == \"//\"\n            res\
    \ = floor(Int64, res/operand[i+1])\n        elseif operator[i] == \"**\"\n   \
    \         res = floor(Int64, res^operand[i+1])\n        end\n    end\n    return\
    \ res\nend", "    result = operand[1]\n    for i in 1:length(operator)\n     \
    \   println(operator[i], operand[i+1])\n        if operator[i] == \"+\"\n    \
    \        result += operand[i+1]\n        elseif operator[i] == \"-\"\n       \
    \     result -= operand[i+1]\n        elseif operator[i] == \"*\"\n          \
    \  result *= operand[i+1]\n        elseif operator[i] == \"//\"\n            result\
    \ //= operand[i+1]\n        elseif operator[i] == \"**\"\n            result ^=\
    \ operand[i+1]\n        end\n    end\n    return result\nend", "    result = operand[1]\n\
    \    for i in 2:length(operand)\n        if operator[i-1] == '+'\n           \
    \ result += operand[i]\n        elseif operator[i-1] == '-'\n            result\
    \ -= operand[i]\n        elseif operator[i-1] == '*'\n            result *= operand[i]\n\
    \        elseif operator[i-1] == '//'\n            result = floor(Int64, result/operand[i])\n\
    \        elseif operator[i-1] == '**'\n            result = floor(Int64, result^operand[i])\n\
    \        end\n    end\n    return result\nend", "    if length(operator) != length(operand)\
    \ - 1\n        error(\"Invalid Input\")\n    end\n    expression = \"\"\n    for\
    \ i = 1:length(operator)\n        expression = expression * string(operand[i])\
    \ * \" \" * operator[i] * \" \"\n    end\n    expression = expression * string(operand[end])\n\
    \    return eval(expression)\nend\n ", "    \n    #### BEGIN SOLUTION\n    out\
    \ = operand[1]\n    for i in 1:length(operator)\n        if operator[i] == '+'\n\
    \            out += operand[i+1]\n        elseif operator[i] == '-'\n        \
    \    out -= operand[i+1]\n        elseif operator[i] == '*'\n            out *=\
    \ operand[i+1]\n        elseif operator[i] == '//'\n            out = out \xF7\
    \ operand[i+1]\n        elseif operator[i] == '**'\n            out ^= operand[i+1]\n\
    \        end\n    end\n    return out\n    #### END SOLUTION\nend", "    result\
    \ = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n  \
    \      if op == \"+\"\n            result += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n    \
    \        result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ //= operand[i+1]\n        elseif op == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n \
    \       elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n   \
    \     end\n    end\n    return result\nend", "    \n    result = operand[1]",
  "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == '+'\n            result += operand[i+1]\n        elseif operator[i] == '-'\n\
    \            result -= operand[i+1]\n        elseif operator[i] == '*'\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == '//'\n         \
    \   result //= operand[i+1]\n        elseif operator[i] == '**'\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    i = 1\n    while i < length(operator) + 1\n        if operator[i]\
    \ == \"+\"\n            result += operand[i + 1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i + 1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i + 1]\n        elseif operator[i] == \"//\"\
    \n            result //= operand[i + 1]\n        elseif operator[i] == \"**\"\n\
    \            result ^= operand[i + 1]\n        end\n        i += 1\n    end\n\
    \    return result\nend", "    # in Julia, use `#` for comments\n    result =\
    \ operand[1]\n    # Loop over the vector with indices\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = result \xF7 operand[i]\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for (op, num) in zip(operator, operand[2:end])\n\
    \        if op == \"+\"\n            result += num\n        elseif op == \"-\"\
    \n            result -= num\n        elseif op == \"*\"\n            result *=\
    \ num\n        elseif op == \"//\"\n            result = floor(Int64, result/num)\n\
    \        elseif op == \"**\"\n            result = result^num\n        end\n \
    \   end\n    return result\nend\n@testset \"vector of algebra operations to int\"\
    \ begin\n    @test do_algebra(['+', '-', '*', '//', '**'], [2, 2, 2, 2, 2]) ==\
    \ 4\n    @test do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    @test do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6]) == 13\n    @test do_algebra(['+', '*', '-', '*'],\
    \ [2, 3, 4, 5, 6]) == 11\n    @test do_algebra(['*', '*', '*', '*'], [2, 3, 4,\
    \ 5, 6]) == 720\n    @test do_algebra(['//', '+', '*', '-'], [2, 3, 4, 5, 6])\
    \ == -1\n    @test do_algebra(['//', '+', '*', '-', '//'], [2, 3, 4, 5, 6, 7])\
    \ == -2\n    @test do_algebra(['+', '-', '*', '//', '**'], [2, 2, 2, 2, 2]) ==\
    \ 0\n    @test do_algebra(['*', '*', '*', '*', '*'], [2, 2, 2, 2, 2]) == 32\n\
    \    @test do_algebra(['+', '*', '-', '*', '//'], [2, 3, 4, 5, 6, 7]) == -19\n\
    \    @test do_algebra(['+', '*', '*', '", "    # Writing your code here ...\n\
    end", "    \n    ################################################################################\n\
    \    # \n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction\
    \ ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation\
    \ ( ** ) \n    #\n    ################################################################################\n\
    \    \n    # Creating empty expression\n    expr = Expr(:empty)\n    \n    # Check\
    \ for correct lengths\n    if length(operator) == length(operand) - 1 && length(operator)\
    \ > 0 && length(operand) > 1\n        \n        # For each operator, create an\
    \ expression with operand 1 and operand 2\n        for i in 1:length(operator)\n\
    \            \n            # For the first operator, create the expression with\
    \ two operands\n            if i == 1\n                expr = Expr(:call, Symbol(operator[i]),\
    \ operand[i], operand[i+1])\n                \n            # For the other operators,\
    \ create the expression with the current expression,\n            # and the next\
    \ operand\n            else\n                expr = Expr(:call, Symbol(operator[i]),\
    \ expr, operand[i+1])\n            end\n            \n        end\n        \n\
    \        # Return the evaluation of the expression\n        return eval(expr)\n\
    \        \n    else\n        # Return error\n        return \"ERROR: Length of\
    \ operator vector is equal to the length of operand vector minus one. Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\"\
    \n    end\n    \nend", "    # your code here\n    operand1 = operand[1]\n    for\
    \ i in 2:length(operand)\n        if operator[i-1] == \"+\"\n            operand1\
    \ += operand[i]\n        elseif operator[i-1] == \"-\"\n            operand1 -=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            operand1 *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            operand1 = floor(Int64, operand1/operand[i])\n\
    \        elseif operator[i-1] == \"**\"\n            operand1 = operand1^operand[i]\n\
    \        end\n    end\n    return operand1\nend", "    # your code here\n    return\
    \ 0\nend", "    result = operand[1]\n    for i in 1:length(operator)\n       \
    \ if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n  \
    \      if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend", "    # your code here\n    return\
    \ 0\nend\n \n \n \n \n \n \n \n \n \n \n@test do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9\n@test do_algebra([\"+\", \"*\", \"-\"], [2, 2, 3, 3, 4,\
    \ 4, 5, 5]) == 9\n@test do_algebra([\"*\", \"//\", \"-\"], [5, 2, 1, 8, 3, 10])\
    \ == -18\n@test do_algebra([\"*\", \"**\", \"-\"], [2, 3, 4, 5]) == 6\n \n \n\
    \ \n \n\"\"\"\n    Given two vectors of integers; source and destination. Return\
    \ if there is a way to move the contents of the source vector to the destination\
    \ vector.", "    \"\"\"\"\n    Operates a sequence of arithmetic operations\n\
    \    \"\"\"\n    result = operand[1]\n    for i in 2:length(operand)\n       \
    \ result = eval(string(result, operator[i-1], operand[i]))\n    end\n    return\
    \ result\nend", "    \n    # create empty output vector of size 1\n    out = zeros(Int64,\
    \ 1)\n    \n    # Insert first element of operand vector into output vector\n\
    \    out[1] = operand[1]\n    \n    # iterate through operator vector\n    for\
    \ i in 2:length(operand)\n        \n        # if operator is \"+\"\n        if\
    \ operator[i-1] == \"+\"\n            # insert addition of operand vector i and\
    \ output vector\n            out = [out[1] + operand[i]]\n            \n     \
    \   # if operator is \"-\"\n        elseif operator[i-1] == \"-\"\n          \
    \  # insert subtraction of operand vector i and output vector\n            out\
    \ = [out[1] - operand[i]]\n            \n        # if operator is \"*\"\n    \
    \    elseif operator[i-1] == \"*\"\n            # insert multiplication of operand\
    \ vector i and output vector\n            out = [out[1] * operand[i]]\n      \
    \      \n        # if operator is \"//\"\n        elseif operator[i-1] == \"//\"\
    \n            # insert floor division of operand vector i and output vector\n\
    \            out = [floor(Int64, out[1] / operand[i])]\n            \n       \
    \ # if operator is \"**\"\n        elseif operator[i-1] == \"**\"\n          \
    \  # insert exponantion of operand vector i and output vector\n            out\
    \ = [out[1] ^ operand[i]]\n            \n        end\n    end\n    \n    # return\
    \ output vector\n    return out[1]\nend\ndo_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5])", "    temp = operand[1]\n    for i = 1:length(operator)\n       \
    \ if operator[i] == \"+\"\n            temp += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            temp -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            temp *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            temp //= operand[i+1]\n        elseif operator[i] == \"**\"\n   \
    \         temp ^= operand[i+1]\n        end\n    end\n    return temp\nend", '    @assert
    nops(operator) == nops(operand) - 1', "  result = operand[1]\n  for i in 1:length(operator)\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elseif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elseif operator[i] == \"*\"\n  \
    \    result *= operand[i+1]\n    elseif operator[i] == \"//\"\n      result =\
    \ div(result, operand[i+1])\n    elseif operator[i] == \"**\"\n      result ^=\
    \ operand[i+1]\n    end\n  end\n  return result\nend", "    \n    result = operand[1]\n\
    \    for i in 2:length(operand)\n        if operator[i-1] == \"+\"\n         \
    \   result += operand[i]\n        elseif operator[i-1] == \"-\"\n            result\
    \ -= operand[i]\n        elseif operator[i-1] == \"*\"\n            result *=\
    \ operand[i]\n        elseif operator[i-1] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i])\n        elseif operator[i-1] == \"**\"\n            result\
    \ = result^operand[i]\n        end\n    end\n    return result\nend", "    \"\"\
    \"\n    Generic function for a sequence of operations", "    n = size(operator,\
    \ 1)\n    res = operand[1]\n    for i = 1:n\n        if operator[i] == \"+\"\n\
    \            res += operand[i+1]\n        elseif operator[i] == \"-\"\n      \
    \      res -= operand[i+1]\n        elseif operator[i] == \"*\"\n            res\
    \ *= operand[i+1]\n        elseif operator[i] == \"//\"\n            res = floor(Int64,\
    \ res / operand[i+1])\n        elseif operator[i] == \"**\"\n            res =\
    \ res ^ operand[i+1]\n        end\n    end\n    return res\nend", "    result\
    \ = operand[1]\n    for i = 1:length(operator)\n        op = operator[i]\n   \
    \     r = operand[i+1]\n        if op == \"+\"\n            result += r\n    \
    \    elseif op == \"-\"\n            result -= r\n        elseif op == \"*\"\n\
    \            result *= r\n        elseif op == \"//\"\n            result = trunc(Int64,\
    \ result/r)\n        elseif op == \"**\"\n            result = trunc(Int64, result^r)\n\
    \        end\n    end\n    return result\nend", "    # YOUR CODE HERE \n    result\
    \ = operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"\
    +\"\n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n\
    \            result -= operand[i+1]\n        elseif operator[i] == \"*\"\n   \
    \         result *= operand[i+1]\n        elseif operator[i] == \"//\"\n     \
    \       result = div(result, operand[i+1])\n        elseif operator[i] == \"**\"\
    \n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    \"TODO\"\nend", "    # Your code here\n    return 0\nend\n ", "   \
    \ expresion = \"\"\n    for i in 1:length(operator)\n        expresion *= operand[i]\
    \ * operator[i]\n    end\n    expresion *= operand[end]\n    return eval(parse(expresion))\n\
    end\ndo_algebra([\"*\",\"//\",\"+\",\"-\"], [5,5,5,5])", "    \n    #Initialize\
    \ answer and the operation count\n    answer = operand[1]\n    operation_count\
    \ = 0\n    \n    #Loop through operator\n    for i = 1:length(operator)\n    \
    \    \n        #Update operands\n        operand_a = answer\n        operand_b\
    \ = operand[i+1]\n        \n        #Update answer based on operator\n       \
    \ if operator[i] == \"+\"\n            answer = operand_a + operand_b\n      \
    \      operation_count += 1\n        elseif operator[i] == \"-\"\n           \
    \ answer = operand_a - operand_b\n            operation_count += 1\n        elseif\
    \ operator[i] == \"*\"\n            answer = operand_a * operand_b\n         \
    \   operation_count += 1\n        elseif operator[i] == \"//\"\n            answer\
    \ = operand_a // operand_b\n            operation_count += 1\n        elseif operator[i]\
    \ == \"**\"\n            answer = operand_a ^ operand_b\n            operation_count\
    \ += 1\n        end\n        \n    end\n    \n    #Return answer and operation\
    \ count\n    return answer, operation_count\n    \nend", "    op = operand[1]\n\
    \    for i in 1:length(operator)\n        op = get(operator[i], operand[i+1],\
    \ op)\n    end\n    return op\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    # your code here\n    sum = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            sum += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            sum -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            sum *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            sum = floor(Int64, sum/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            sum = sum^operand[i+1]\n        end\n    end\n    return\
    \ sum\nend", '    """Implement your solution here"""', "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    \"\"\"The length of operator\
    \ vector is equal to the length of operand vector minus one.\"\"\"\n    if length(operator)\
    \ != length(operand) - 1\n        error(\"The length of operator vector is equal\
    \ to the length of operand vector minus one.\")\n    end\n    \"\"\"Operand is\
    \ a vector of of non-negative integers.\"\"\"\n    if !all(operand .>= 0)\n  \
    \      error(\"Operand is a vector of of non-negative integers.\")\n    end\n\
    \    \"\"\"Operator vector has at least one operator, and operand vector has at\
    \ least two operands.\"\"\"\n    if !(length(operator) >= 1 && length(operand)\
    \ >= 2)\n        error(\"Operator vector has at least one operator, and operand\
    \ vector has at least two operands.\")\n    end\n    result = operand[1]\n   \
    \ for i = 1:length(operator)\n        op = operator[i]\n        r2 = operand[i+1]\n\
    \        \"\"\"Addition ( + )\"\"\"\n        if op == \"+\"\n            result\
    \ += r2\n        end\n        \"\"\"Subtraction ( - )\"\"\"\n        if op ==\
    \ \"-\"\n            result -= r2\n        end\n        \"\"\"Multiplication (\
    \ * )\"\"\"\n        if op == \"*\"\n            result *= r2\n        end\n \
    \       \"\"\"Floor division ( // )\"\"\"\n        if op == \"//\"\n         \
    \   result //= r2\n        end\n        \"\"\"Exponentiation ( ** )\"\"\"\n  \
    \      if op == \"**\"\n            result ^= r2\n        end\n    end\n    return\
    \ result\nend\n \n \n \n@testset \"Basic Tests\" begin\n    @test do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n    @test do_algebra([\"+\", \"-\"], [2,\
    \ 3, 4]) == -1\n    @test do_algebra([\"+\", \"+\", \"-\"], [1, 2, 3, 5]) == 1\n\
    \    @test do_algebra([\"//\", \"*\", \"-\"], [1000, 100, 2, 7]) == 100\n    @test\
    \ do_algebra([\"//\", \"//\", \"*\", \"-\"], [5", "    operator = operator\n \
    \   operand = operand\n    # Write your code here...\nend\n ", "    # YOUR CODE\
    \ HERE\n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result = result^operand[i+1]\n        end\n    end\n    return result\n\
    end\ndo_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])", "    # Write your code\
    \ here!\nend", "    \"\"\"\n    Build the algebraic expression \n    \"\"\"\n\
    \    if length(operator) != length(operand) - 1\n        throw(ArgumentError(\"\
    The length of operator vector is equal to the length of operand vector minus one.\"\
    ))\n    end\n    if length(operator) == 0\n        throw(ArgumentError(\"Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\"\
    ))\n    end\n    expression = \"\"\n    for i = 1:length(operator)\n        expression\
    \ = string(expression, operand[i], operator[i])\n    end\n    expression = string(expression,\
    \ operand[end])\n    return eval(Meta.parse(expression))\nend", '    # Your code
    here', "    res = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            res += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            res -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          res *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     res = floor(Int64, res / operand[i+1])\n        elseif operator[i] == \"\
    **\"\n            res = res ^ operand[i+1]\n        end\n    end\n    return res\n\
    end", "    index = 1\n    result = operand[index]\n    index += 1\n    for op\
    \ in operator\n        if op == \"+\"\n            result += operand[index]\n\
    \        elseif op == \"-\"\n            result -= operand[index]\n        elseif\
    \ op == \"*\"\n            result *= operand[index]\n        elseif op == \"//\"\
    \n            result = trunc(Int64, result / operand[index])\n        elseif op\
    \ == \"**\"\n            result = result ^ operand[index]\n        end\n     \
    \   index += 1\n    end\n    return result\nend", "\nend\n ", "    length_operator\
    \ = length(operator)\n    if length_operator == length(operand) - 1\n        result\
    \ = operand[1]\n        for i in 1:length_operator\n            if operator[i]\
    \ == \"+\"\n                result += operand[i+1]\n            elseif operator[i]\
    \ == \"-\"\n                result -= operand[i+1]\n            elseif operator[i]\
    \ == \"*\"\n                result *= operand[i+1]\n            elseif operator[i]\
    \ == \"//\"\n                result = floor(Int64, result / operand[i+1])\n  \
    \          elseif operator[i] == \"**\"\n                result = floor(Int64,\
    \ result ^ operand[i+1])\n            end\n        end\n        return result\n\
    \    else\n        return -1\n    end\nend", "    \n    do_calculation(operand[1],\
    \ operand[2], operator[1])\nend", "    expr = operand[1]\n    for (i, op) in enumerate(operator)\n\
    \        if op == \"+\"\n            expr += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            expr -= operand[i+1]\n        elseif op == \"*\"\n      \
    \      expr *= operand[i+1]\n        elseif op == \"//\"\n            expr \xF7\
    = operand[i+1]\n        elseif op == \"**\"\n            expr ^= operand[i+1]\n\
    \        end\n    end\n    return expr\nend\n\"\"\"\n    Given an integer n, return\
    \ an n x n matrix with the following pattern:", "    if length(operator) != length(operand)\
    \ - 1 \n        throw(ArgumentError(\"Operator size must be one less than operand\
    \ size.\"))\n    end\n    if !all(x -> x in [\"+\", \"-\", \"*\", \"//\", \"**\"\
    ], operator)\n        throw(ArgumentError(\"Operator must be only +, -, *, //,\
    \ ** .\"))\n    end\n    if !all(x -> x >= 0, operand)\n        throw(ArgumentError(\"\
    Operand must be a vector of non-negative integers.\"))\n    end\n    algebra_str\
    \ = string(operand[1])\n    for i in 1:length(operator)\n        algebra_str *=\
    \ \" \" * operator[i] * \" \" * string(operand[i+1])\n    end\n    return eval(Meta.parse(algebra_str))\n\
    end\ndo_algebra([\"*\"], [1, 2])", "    # Base case\n    if length(operator) ==\
    \ 0\n        return operand[1]\n    end\n    \n    # Recursion\n    return do_algebra(operator[2:end],\
    \ [eval(operand[1], operator[1], operand[2]) operand[3:end]])\nend", "    result\
    \ = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1] == '+'\n\
    \            result += operand[i]\n        elseif operator[i-1] == '-'\n     \
    \       result -= operand[i]\n        elseif operator[i-1] == '*'\n          \
    \  result *= operand[i]\n        elseif operator[i-1] == '//'\n            result\
    \ //= operand[i]\n        elseif operator[i-1] == '**'\n            result ^=\
    \ operand[i]\n        end\n    end\n    return result\nend", "    \n    result\
    \ = operand[1]\n    for i = 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        end\n    end\n    return result\nend", " \
    \   \"\"\"\n    Given two vectors operator, and operand. The first vector has\
    \ basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.", "    result = operand[1]\n    for (i, j)\
    \ in enumerate(2:length(operand))\n        op = operator[i]\n        op_val =\
    \ operand[j]\n        if op == \"+\"\n            result += op_val\n        elseif\
    \ op == \"-\"\n            result -= op_val\n        elseif op == \"*\"\n    \
    \        result *= op_val\n        elseif op == \"//\"\n            result //=\
    \ op_val\n        elseif op == \"**\"\n            result = result ^ op_val\n\
    \        end\n    end\n    return result\nend\n \n ", "    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = result\
    \ \xF7 operand[i+1]\n        elseif operator[i] == \"**\"\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    for (i, oper) in enumerate(operator)\n        if oper == \"\
    +\"\n            result += operand[i+1]\n        elseif oper == \"-\"\n      \
    \      result -= operand[i+1]\n        elseif oper == \"*\"\n            result\
    \ *= operand[i+1]\n        elseif oper == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif oper == \"**\"\n            result ^=\
    \ operand[i+1]\n        end\n    end\n    return result\nend", "    # YOUR CODE\
    \ HERE\n    alg = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            alg += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            alg -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          alg *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     alg = floor(alg/operand[i+1])\n        elseif operator[i] == \"**\"\n  \
    \          alg ^= operand[i+1]\n        end\n    end\n    return alg\nend", " \
    \   result = operand[1]\n    for i in 1:length(operator)\n        result = eval(string(result,\
    \ operator[i], operand[i+1]))\n    end\n    return result\nend", "    result =\
    \ operand[1]\n    for i = 1:length(operator)\n        a = operand[i]\n       \
    \ b = operand[i+1]\n        op = operator[i]\n        result = eval(result, op,\
    \ b)\n    end\n    return result\nend", "    # Note:\n    #   - the length of\
    \ operator vector is equal to the length of operand vector minus one.\n    # \
    \  - operand is a vector of of non-negative integers.\n    #   - operator vector\
    \ has at least one operator, and operand vector has at least two operands.\n \
    \   @assert length(operator) == length(operand) - 1\n    @assert length(operator)\
    \ >= 1\n    @assert length(operand) >= 2\n    # Your code here ...\n    raise\
    \ NotImplementedError(\"do_algebra needs to be implemented before this test can\
    \ be run.\")\nend", "    if length(operator) != length(operand) - 1\n        error(\"\
    Operator vector is not one element shorter than operand vector\")\n    end\n \
    \   if length(operator) < 1\n        error(\"Operator vector is empty\")\n   \
    \ end\n    if length(operand) < 2\n        error(\"Operand vector is empty\")\n\
    \    end\n    for operator in operator\n        if operator != '+' && operator\
    \ != '-' && operator != '*' && operator != '//' && operator != '**'\n        \
    \    error(\"Operator vector contains invalid operator\")\n        end\n    end\n\
    \    for operand in operand\n        if operand < 0\n            error(\"Operand\
    \ vector contains invalid operand\")\n        end\n    end\n    result = operand[1]\n\
    \    for i = 1:length(operator)\n        operator_type = operator[i]\n       \
    \ if operator_type == '+'\n            result += operand[i+1]\n        elseif\
    \ operator_type == '-'\n            result -= operand[i+1]\n        elseif operator_type\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator_type ==\
    \ '//'\n            result //= operand[i+1]\n        elseif operator_type == '**'\n\
    \            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\n ", "    result = operand[1]\n    for (i, op) in enumerate(operator)\n  \
    \      if op == \"+\"\n            result += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n    \
    \        result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ = convert(Int64, result) \xF7 operand[i+1]\n        elseif op == \"**\"\n  \
    \          result ^= operand[i+1]\n        end\n    end\n    return result\nend",
  "    result = operand[1]\n    for (i, op) in enumerate(operator)\n        if op\
    \ == \"+\"\n            result += operand[i+1]\n        elseif op == \"-\"\n \
    \           result -= operand[i+1]\n        elseif op == \"*\"\n            result\
    \ *= operand[i+1]\n        elseif op == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif op == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for op = 1:length(operator)\n        if operator[op] == \"+\"\n            result\
    \ += operand[op+1]\n        elseif operator[op] == \"-\"\n            result -=\
    \ operand[op+1]\n        elseif operator[op] == \"*\"\n            result *= operand[op+1]\n\
    \        elseif operator[op] == \"//\"\n            result //= operand[op+1]\n\
    \        elseif operator[op] == \"**\"\n            result ^= operand[op+1]\n\
    \        end\n    end\n    return result\nend", "    # Your code here!\nend\n ",
  "    vector = [operand[1]]\n    operand = operand[2:end]\n    for (i, j) in zip(operator,\
    \ operand)\n        if i == \"+\"\n            push!(vector, j)\n        elseif\
    \ i == \"-\"\n            push!(vector, -j)\n        elseif i == \"*\"\n     \
    \       push!(vector, vector[end] * j)\n            pop!(vector)\n        elseif\
    \ i == \"//\"\n            push!(vector, vector[end] \xF7 j)\n            pop!(vector)\n\
    \        elseif i == \"**\"\n            push!(vector, vector[end] ^ j)\n    \
    \        pop!(vector)\n        end\n    end\n    sum(vector)\nend", "    result\
    \ = operand[1]\n    for i = 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        end\n    end\n    return result\nend", " \
    \   \nend", "    res = operand[1]\n    for i in 2:length(operand)\n        if\
    \ operator[i-1] == \"+\"\n            res += operand[i]\n        elseif operator[i-1]\
    \ == \"-\"\n            res -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            res *= operand[i]\n        elseif operator[i-1] == \"//\"\n \
    \           res = floor(Int64, res / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            res = floor(Int64, res ^ operand[i])\n        end\n \
    \   end\n    return res\nend", "    pass\nend\n# Test\n@testset \"Algebra\" begin\n\
    \    @testset \"Simple\" begin\n        @test do_algebra([\"+\"], [1, 2]) == 3\
    \ end\n        @test do_algebra([\"+\", \"-\"], [1, 2, 3]) == 0 end\n        @test\
    \ do_algebra([\"+\", \"-\"], [2, 3, 4]) == 1 end\n        @test do_algebra([\"\
    +\", \"-\", \"*\"], [2, 3, 4, 5]) == -3 end\n        @test do_algebra([\"+\",\
    \ \"-\", \"*\", \"//\"], [2, 3, 4, 5, 6]) == 3 end\n        @test do_algebra([\"\
    +\", \"-\", \"*\", \"//\", \"**\"], [2, 3, 4, 5, 6, 7]) == 6 end\n    end\n  \
    \  @testset \"Advanced\" begin\n        @test do_algebra([\"*\", \"-\"], [2, 3,\
    \ 4]) == 2 end\n        @test do_algebra([\"*\", \"-\", \"+\"], [1, 2, 3, 4])\
    \ == 2 end\n        @test do_algebra([\"*\", \"-\", \"+\", \"//\"], [1, 2, 3,\
    \ 4, 5]) == -2 end\n        @test do_algebra([\"*\", \"-\", \"+\", \"//\", \"\
    **\"], [1, 2, 3, 4, 5, 6]) == -4 end\n    end\nend;\n ", "    # Your code here...\n\
    \    return 0 # Your return value.\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
