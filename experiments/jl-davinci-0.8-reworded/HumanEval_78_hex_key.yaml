name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    primes = [2, 3, 5, 7, 11, 13]\n    return count(x -> parse(Int64,\
    \ x, base=16) in primes, split(num, \"\"))\nend", "    k = 0\n    for c in num\n\
    \        if [2,3,5,7,11,13] in convert(Int64, c)\n            k += 1\n       \
    \ end\n    end\n    return k\nend", "    nums = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    count\
    \ = 0\n    for i in num\n        if i in nums[0:10]\n            if isprime(parse(Int64,i))\n\
    \                count += 1\n            end\n        elseif i in nums[10:16]\n\
    \            if isprime(parse(Int64,i, base=16))\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    # convert\
    \ hex to decimal\n    decimal = parse(Int64, num, base=16)\n    # get the number\
    \ of primes\n    length(get_prime_numbers(decimal))\nend", "    res = 0\n    for\
    \ i = 1:length(num)\n        res += isprime(parse(Int64, num[i], base=16))\n \
    \   end\n    return res\nend", "    total = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            total += 1\n        end\n\
    \    end\n    return total\nend", "    prime_hex_digits = [2, 3, 5, 7, 11, 13]\n\
    \    prime_hex_digits_string = map(string, prime_hex_digits)\n    return length(filter(x\
    \ -> x in prime_hex_digits_string, vec(num)))\nend", "    if num == \"\"\n   \
    \     return 0\n    end\n    _num = uppercase(num)\n    if _num == \"A\" || _num\
    \ == \"B\" || _num == \"D\"\n        return 1\n    end\n    if _num == \"C\" ||\
    \ _num == \"E\" || _num == \"F\"\n        return 0\n    end\n    if _num == \"\
    2\" || _num == \"3\" || _num == \"5\" || _num == \"7\"\n        return 1\n   \
    \ end\n    if _num == \"0\" || _num == \"1\" || _num == \"4\" || _num == \"6\"\
    \ || _num == \"8\" || _num == \"9\"\n        return 0\n    end\n    if length(_num)\
    \ == 1\n        return 0\n    end\n    if length(_num) == 2\n        return hex_key(_num[1])\
    \ + hex_key(_num[2])\n    end\n    return hex_key(_num[1]) + hex_key(_num[2])\
    \ + hex_key(_num[3:end])\nend\n# Example test\nprintln(hex_key(\"AB\"))", "  \
    \  p = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n            p = p + 1\n        end\n    end\n    return p\nend", "    \"\
    \"\"Function determines a number of the following digits: \n        2, 3, 5, 7,\
    \ B (=decimal 11), D (=decimal 13)\n        @param: num: the hexadecimal number\
    \ as a string\n        @return: the number of hexadecimal digits that are primes\n\
    \    \"\"\"", "    prime_numbers = [2, 3, 5, 7, 11, 13]\n    digits = Dict(\"\
    A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15)\n\
    \    numbers = map(x -> digits[x] == nothing ? parse(Int64, x) : digits[x],\n\
    \                 collect(num))\n    count = 0\n    for i in numbers\n       \
    \ if i in prime_numbers\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for digit\
    \ in num\n        for prime in primes\n            if parse(Int, digit) == prime\n\
    \                counter += 1\n                break\n            end\n      \
    \  end\n    end\n    return counter\nend\n ", "    if num == \"\"\n        return\
    \ 0\n    end\n    # First, we create a list of primes hexadecimal digits. \n \
    \   # Then, we count the number of occurrences \n    # of each digit in the given\
    \ number. \n    # Finally, we sum up the number of occurrences \n    # of each\
    \ digit in the list.\n    sum([count(num,ch) for ch in ['2','3','5','7','B','D']])\n\
    end", "    for ch in num\n        if ch in (\"0\",\"1\",\"4\",\"6\",\"8\",\"9\"\
    ,\"C\",\"E\",\"F\")\n            continue\n        elseif ch in (\"2\",\"3\",\"\
    5\",\"7\",\"B\",\"D\")\n            count = count + 1\n            continue\n\
    \        end\n    end\n    return count\nend", "    using Primes\n    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for i in num\n        i = parse(Int64,\
    \ i, radix=16)\n        if i in primes\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    primes = 0 \n    hexa = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    for i in num\n        for j in hexa\n     \
    \       if i == j\n                primes += 1\n            end\n        end\n\
    \    end\n    return primes\nend", "    cnt = 0\n    for i in num\n        if\
    \ i in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n            cnt += 1\n    \
    \    end\n    end\n    return cnt\nend", "    if isempty(num) == true\n      \
    \  return 0\n    end\n    # create a dictionary with hexadecimal digits\n    hex_digits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    hex_symbols =\
    \ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        'A', 'B', 'C',\
    \ 'D', 'E', 'F']\n    hex_digits_dict = Dict()\n    for i in 1:length(hex_digits)\n\
    \        hex_digits_dict[hex_symbols[i]] = hex_digits[i]\n    end\n    # function\
    \ to test whether number is prime or not\n    function is_prime(number::Int64)::Bool\n\
    \        if number < 2\n            return false\n        end\n        if number\
    \ == 2\n            return true\n        end\n        if number % 2 == 0\n   \
    \         return false\n        end\n        max_divisor = convert(Int64, ceil(sqrt(number)))\n\
    \        for divisor in 3:2:max_divisor\n            if number % divisor == 0\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    counter = 0\n    for i in 1:length(num)\n        digit = hex_digits_dict[num[i]]\n\
    \        if is_prime(digit) == true\n            counter += 1\n        end\n \
    \   end\n    return counter\nend", "    # declaring hexadecimal digits\n    hexa_digits\
    \ = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]\n    # declaring prime numbers\n    prime_numbers = [2,3,5,7,11,13]\n\
    \    # count of prime numbers\n    prime_count = 0\n    # for each letter in the\
    \ number\n    for i = 1:length(num)\n        # check if the digit is a prime number\
    \ \n        if num[i] in prime_numbers\n            # if yes add to the count\n\
    \            prime_count += 1\n        end\n    end\n    # return the count\n\
    \    return prime_count\nend", "    # your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
