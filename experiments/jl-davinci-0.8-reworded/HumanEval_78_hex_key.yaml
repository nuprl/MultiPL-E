name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    primes = [2, 3, 5, 7, 11, 13]\n    return count(x -> parse(Int64,\
    \ x, base=16) in primes, split(num, \"\"))\nend", "    k = 0\n    for c in num\n\
    \        if [2,3,5,7,11,13] in convert(Int64, c)\n            k += 1\n       \
    \ end\n    end\n    return k\nend", "    nums = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    count\
    \ = 0\n    for i in num\n        if i in nums[0:10]\n            if isprime(parse(Int64,i))\n\
    \                count += 1\n            end\n        elseif i in nums[10:16]\n\
    \            if isprime(parse(Int64,i, base=16))\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend", "    # convert\
    \ hex to decimal\n    decimal = parse(Int64, num, base=16)\n    # get the number\
    \ of primes\n    length(get_prime_numbers(decimal))\nend", "    res = 0\n    for\
    \ i = 1:length(num)\n        res += isprime(parse(Int64, num[i], base=16))\n \
    \   end\n    return res\nend", "    total = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            total += 1\n        end\n\
    \    end\n    return total\nend", "    prime_hex_digits = [2, 3, 5, 7, 11, 13]\n\
    \    prime_hex_digits_string = map(string, prime_hex_digits)\n    return length(filter(x\
    \ -> x in prime_hex_digits_string, vec(num)))\nend", "    if num == \"\"\n   \
    \     return 0\n    end\n    _num = uppercase(num)\n    if _num == \"A\" || _num\
    \ == \"B\" || _num == \"D\"\n        return 1\n    end\n    if _num == \"C\" ||\
    \ _num == \"E\" || _num == \"F\"\n        return 0\n    end\n    if _num == \"\
    2\" || _num == \"3\" || _num == \"5\" || _num == \"7\"\n        return 1\n   \
    \ end\n    if _num == \"0\" || _num == \"1\" || _num == \"4\" || _num == \"6\"\
    \ || _num == \"8\" || _num == \"9\"\n        return 0\n    end\n    if length(_num)\
    \ == 1\n        return 0\n    end\n    if length(_num) == 2\n        return hex_key(_num[1])\
    \ + hex_key(_num[2])\n    end\n    return hex_key(_num[1]) + hex_key(_num[2])\
    \ + hex_key(_num[3:end])\nend\n# Example test\nprintln(hex_key(\"AB\"))", "  \
    \  p = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n            p = p + 1\n        end\n    end\n    return p\nend", "    \"\
    \"\"Function determines a number of the following digits: \n        2, 3, 5, 7,\
    \ B (=decimal 11), D (=decimal 13)\n        @param: num: the hexadecimal number\
    \ as a string\n        @return: the number of hexadecimal digits that are primes\n\
    \    \"\"\"", "    prime_numbers = [2, 3, 5, 7, 11, 13]\n    digits = Dict(\"\
    A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\" => 15)\n\
    \    numbers = map(x -> digits[x] == nothing ? parse(Int64, x) : digits[x],\n\
    \                 collect(num))\n    count = 0\n    for i in numbers\n       \
    \ if i in prime_numbers\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for digit\
    \ in num\n        for prime in primes\n            if parse(Int, digit) == prime\n\
    \                counter += 1\n                break\n            end\n      \
    \  end\n    end\n    return counter\nend\n ", "    if num == \"\"\n        return\
    \ 0\n    end\n    # First, we create a list of primes hexadecimal digits. \n \
    \   # Then, we count the number of occurrences \n    # of each digit in the given\
    \ number. \n    # Finally, we sum up the number of occurrences \n    # of each\
    \ digit in the list.\n    sum([count(num,ch) for ch in ['2','3','5','7','B','D']])\n\
    end", "    for ch in num\n        if ch in (\"0\",\"1\",\"4\",\"6\",\"8\",\"9\"\
    ,\"C\",\"E\",\"F\")\n            continue\n        elseif ch in (\"2\",\"3\",\"\
    5\",\"7\",\"B\",\"D\")\n            count = count + 1\n            continue\n\
    \        end\n    end\n    return count\nend", "    using Primes\n    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for i in num\n        i = parse(Int64,\
    \ i, radix=16)\n        if i in primes\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    primes = 0 \n    hexa = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    for i in num\n        for j in hexa\n     \
    \       if i == j\n                primes += 1\n            end\n        end\n\
    \    end\n    return primes\nend", "    cnt = 0\n    for i in num\n        if\
    \ i in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n            cnt += 1\n    \
    \    end\n    end\n    return cnt\nend", "    if isempty(num) == true\n      \
    \  return 0\n    end\n    # create a dictionary with hexadecimal digits\n    hex_digits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    hex_symbols =\
    \ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        'A', 'B', 'C',\
    \ 'D', 'E', 'F']\n    hex_digits_dict = Dict()\n    for i in 1:length(hex_digits)\n\
    \        hex_digits_dict[hex_symbols[i]] = hex_digits[i]\n    end\n    # function\
    \ to test whether number is prime or not\n    function is_prime(number::Int64)::Bool\n\
    \        if number < 2\n            return false\n        end\n        if number\
    \ == 2\n            return true\n        end\n        if number % 2 == 0\n   \
    \         return false\n        end\n        max_divisor = convert(Int64, ceil(sqrt(number)))\n\
    \        for divisor in 3:2:max_divisor\n            if number % divisor == 0\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    counter = 0\n    for i in 1:length(num)\n        digit = hex_digits_dict[num[i]]\n\
    \        if is_prime(digit) == true\n            counter += 1\n        end\n \
    \   end\n    return counter\nend", "    # declaring hexadecimal digits\n    hexa_digits\
    \ = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]\n    # declaring prime numbers\n    prime_numbers = [2,3,5,7,11,13]\n\
    \    # count of prime numbers\n    prime_count = 0\n    # for each letter in the\
    \ number\n    for i = 1:length(num)\n        # check if the digit is a prime number\
    \ \n        if num[i] in prime_numbers\n            # if yes add to the count\n\
    \            prime_count += 1\n        end\n    end\n    # return the count\n\
    \    return prime_count\nend", "    # your code here\nend", "    alpha=[\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\"]\n    prime=[2,3,5,7,11,13]\n    total=0\n    for i in num\n    \
    \    if i in alpha[0:9]\n            if parse(Int64,i) in prime\n            \
    \    total=total+1\n            end\n        else\n            if parse(Int64,i,base=16)\
    \ in prime\n                total=total+1\n            end\n        end\n    end\n\
    \    return total\nend", "    # code goes here\n    num_prime = 0\n    # convert\
    \ each char to decimal int\n    dec_vec = [parse(Int64, i) for i in num]\n   \
    \ # find the prime number\n    prime_vec = [i for i in dec_vec if isprime(i)]\n\
    \    num_prime = length(prime_vec)\n    return num_prime\nend", "    #your code\
    \ here\nend\n\"\"\"==========================\"\"\"\n\"\"\"\nThe first step of\
    \ creating the Cipher is to create a function that will \ntake a character as\
    \ an argument and output that character's numerical \nposition in the alphabet.\n\
    For example, when the function is called like:\nposition(\"a\")\nthe output should\
    \ be:\n1\n\"\"\"", "    num = string(collect(num))\n    primes = Set([2,3,5,7,11,13])\n\
    \    return sum(1 for i in num if i in primes)\nend", "    key = 0\n    for i\
    \ in num\n        if (i in \"2357BD\")\n            key += 1\n        end\n  \
    \  end\n    return key\nend", "    digit = \"0123456789ABCDEF\"\n    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    num_primes = 0\n    for x in num\n        if x in\
    \ digit[primes]\n            num_primes += 1\n        end\n    end\n    return\
    \ num_primes\nend", "  if num == \"\"\n    return 0\n  end\n  ishex(d) = \n  \
    \  ('0' <= d <= '9') || ('A' <= d <= 'F')\n  primes = [2, 3, 5, 7, 11, 13]\n \
    \ d2n(d) =\n    if '0' <= d <= '9'\n      Int(d) - Int('0')\n    else\n      10\
    \ + Int(d) - Int('A')\n    end\n  if ishex(num[1])\n    n = d2n(num[1])\n    if\
    \ n in primes\n      return 1 + hex_key(num[2:end])\n    else\n      return hex_key(num[2:end])\n\
    \    end\n  else\n    return hex_key(num[2:end])\n  end\nend", "    num_primes\
    \ = 0\n    for c in num\n        c_int = Int(c, 16)\n        if isprime(c_int)\n\
    \            num_primes += 1\n        end\n    end\n    return num_primes\nend\n\
    #@code_warntype hex_key(\"AB\")\n#@code_warntype hex_key(\"1077E\")\n#@code_warntype\
    \ hex_key(\"ABED1A33\")\n#@code_warntype hex_key(\"123456789ABCDEF0\")\n#@code_warntype\
    \ hex_key(\"2020\")\n#+BEGIN_EXAMPLE", "    count = 0\n    for d in num\n    \
    \    if d in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n \
    \       end\n    end\n    return count\nend\nend", "    count = 0\n    for n in\
    \ num\n        if isprime(Int64(n, base=16))\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "    n = 0\n    for i in 1:length(num)\n\
    \        c = num[i]\n        if c in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    )\n            n += 1\n        end\n    end\n    return n\nend", "    primes =\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n\
    \        if in(i, primes)\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    if num == \"\"\n        return 0\n    end\n    list = [2,\
    \ 3, 5, 7, 11, 13]\n    dict = Dict('0' => 0, '1' => 1, '2' => 2, '3' => 3, '4'\
    \ => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11,\
    \ 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15)\n    count = 0\n    for i = 1:length(num)\n\
    \        a = parse(Int64, dict[num[i]])\n        if a in list\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    digits = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"]\n    prime_digits = 0\n    for i in digits\n\
    \        prime_digits += length(split(num, i)) - 1\n    end\n    return prime_digits\n\
    end", "    \n    #Convert String to an array of chars\n    charArray = split(num,\"\
    \")\n    \n    #Create a hexadecimal alphabet as an array of chars\n    hexAlphabet\
    \ = split(\"0123456789ABCDEF\",\"\")\n    \n    #Create a set of prime numbers\
    \ for hexadecimal\n    primesHex = Set([\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"])\n\
    \    \n    #Create a dictionary of hexadecimal alphabet\n    hexMap = Dict(zip(hexAlphabet,1:length(hexAlphabet)))\n\
    \    \n    #Convert charArray to an array of numbers\n    numberArray = [hexMap[charArray[i]]\
    \ for i in 1:length(charArray)]\n    \n    #Filter numberArray to find the prime\
    \ numbers\n    primeNumberArray = numberArray[member(numberArray,\n          \
    \                     [hexMap[primesHex[i]] for i in 1:length(primesHex)])]\n\
    \    \n    #Convert back to the array of chars \n    charArray = [hexAlphabet[primeNumberArray[i]]\
    \ for i in 1:length(primeNumberArray)]\n    \n    #Return the number of primes\n\
    \    return length(charArray)\nend", "    count = 0\n    s = \"2357BDF\"\n   \
    \ if (num == \"\")\n        return 0\n    end\n    for i = 1:length(num)\n   \
    \     if occursin(num[i], s)\n            count += 1\n        end\n    end\n \
    \   return count\nend\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\"\
    )\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")\n ", "    primes = [2, 3,\
    \ 5, 7, 11, 13]\n    count = 0\n    for c in num\n        if c in \"FEDCBA\"\n\
    \            c_int = parse(Int64, c, 16)\n            if c_int in primes\n   \
    \             count += 1\n            end\n        end\n    end\n    return count\n\
    end", "    hex_numbers = Dict('0'=>0, '1'=>1, '2'=>2, '3'=>3, '4'=>4, '5'=>5,\
    \ \n    '6'=>6, '7'=>7, '8'=>8, '9'=>9, 'A'=>10, 'B'=>11, 'C'=>12, 'D'=>13, 'E'=>14,\
    \ 'F'=>15)\n    numbers = [hex_numbers[c] for c in num]\n    cnt = 0\n    for\
    \ num in numbers\n        if isprime(num)\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend", "    hex = Set([\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"])\n    c = 0\n    for x in num\n        if x in hex\n            c\
    \ += 1\n        end\n    end\n    return c\nend\n# Tests", "    # your code here\n\
    end", "    #your code here\nend", "    dec_num = parse(Int64, num, base=16)\n\
    \    count = 0\n    for i in 2:dec_num-1\n        count += dec_num % i == 0 ?\
    \ 0 : 1\n    end\n    return count\nend", "    num_chars = length(num)\n    counter\
    \ = 0\n    for i in 1:num_chars\n        if num[i] in ['2','3','5','7','B','D']\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   # Initialize count\n    count = 0\n    # Loop through all characters of string\n\
    \    for digit in num\n        # Increment count if digit is \"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"\n        if (digit == \"2\" || digit == \"3\" || digit\
    \ == \"5\" || \n            digit == \"7\" || digit == \"B\" || digit == \"D\"\
    )\n            count += 1\n        end\n    end\n    return count\nend", "   \
    \ return 0\nend", "    count = 0\n    for i in num\n        if i in \"2357BDEF\"\
    \n            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ num == \"\" return 0 end\n    digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes = [2,3,5,7,11,13]\n\
    \    nums = []\n    for i in num\n        push!(nums, i)\n    end\n    count =\
    \ 0\n    for i in nums\n        if i in digits[1:10]\n            if digits.index(i)\
    \ in primes\n                count = count + 1\n            end\n        else\n\
    \            if digits.index(i) in primes\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    \"\"\"This\
    \ function counts the number of hexadecimal digits \n    that are primes in a\
    \ hexadecimal number.\n    \"\"\"\n    prime_number = 0\n    for i in num\n  \
    \      if i in \"2357BDF\"\n            prime_number += 1\n        end\n    end\n\
    \    return prime_number\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    hex_digits = Dict(\"0\"=>0, \"1\"=>1, \"2\"=>2, \"3\"=>3, \"4\"=>4, \"5\"\
    =>5, \"6\"=>6, \"7\"=>7, \"8\"=>8, \"9\"=>9, \"A\"=>10, \"B\"=>11, \"C\"=>12,\
    \ \"D\"=>13, \"E\"=>14, \"F\"=>15)\n    primes = [2, 3, 5, 7, 11, 13]\n    total\
    \ = 0\n    for d in num\n        total += d in primes\n    end\n    return total\n\
    end", "    primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return length(filter(x\
    \ -> x in primes, num))\nend", "    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]\n    hex_digits_str = [\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\"]\n    hex_digit_is_prime = [true, false, true, true, false, true, false, true,\
    \ false, false, false, true, false, true, false, false]\n    sum = 0\n    for\
    \ i in 1:length(num)\n        if hex_digit_is_prime[indexin(hex_digits_str, string(num[i]))]\n\
    \            sum += 1\n        end\n    end\n    return sum\nend", "    if num\
    \ == \"\"\n        return 0\n    end\n    p_num = 0\n    for i in num\n      \
    \  if (i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n\
    \            p_num += 1\n        end\n    end\n    return p_num\nend", "    f\
    \ = 0\n    for i in 1:length(num)\n        if [num[i] == '2', num[i] == '3', num[i]\
    \ == '5', num[i] == '7', \n            num[i] == 'B', num[i] == 'D'][1]\n    \
    \        f += 1\n        end\n    end\n    return f\nend", "    #String to convert\
    \ to base-16\n    #Int64 to convert string to int for bases 10 and 16\n    j =\
    \ 0 \n    #Counter for number of primes\n    k = 0\n    #Counter for number of\
    \ digits in input string\n    for n in num\n        k += 1\n    end\n    stringtobase16\
    \ = zeros(Int64, k)\n    for i in 0:k-1\n        if num[i+1] == 'A'\n        \
    \    stringtobase16[i+1] = 10\n        elseif num[i+1] == 'B'\n            stringtobase16[i+1]\
    \ = 11\n        elseif num[i+1] == 'C'\n            stringtobase16[i+1] = 12\n\
    \        elseif num[i+1] == 'D'\n            stringtobase16[i+1] = 13\n      \
    \  elseif num[i+1] == 'E'\n            stringtobase16[i+1] = 14\n        elseif\
    \ num[i+1] == 'F'\n            stringtobase16[i+1] = 15\n        else\n      \
    \      stringtobase16[i+1] = parse(Int64, num[i+1])\n        end\n    end\n  \
    \  for i in 0:k-1\n        if (stringtobase16[i+1] == 2) || (stringtobase16[i+1]\
    \ == 3) || (stringtobase16[i+1] == 5) || (stringtobase16[i+1] == 7) || (stringtobase16[i+1]\
    \ == 11) || (stringtobase16[i+1] == 13)\n            j += 1\n        end\n   \
    \ end\n    return j\nend\n \n \n ", "    # your code goes here\n    dic = Dict(0=>'0',1=>'1',2=>'2',3=>'3',4=>'4',5=>'5',6=>'6',7=>'7',8=>'8',9=>'9',10=>'A',11=>'B',12=>'C',13=>'D',14=>'E',15=>'F')\n\
    \    hex_lis = Set([2,3,5,7,11,13])\n    count = 0\n    for i in 1:length(num)\n\
    \        if dic[parse(Int64,num[i])] in hex_lis\n            count += 1\n    \
    \    end\n    end\n    return count\nend", "    num = uppercase(num)\n    n =\
    \ length(num)\n    cnt = 0\n    for i in 1:n\n        if num[i] in (\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\")\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend", "    hexadecimal = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    primes\
    \ = [false, false, true, true, false, true, false, true, false, false, false,\
    \ true, false, true, false, false]\n    #count the number of primes in num\n \
    \   count_primes = 0\n    for i in num\n        if i in hexadecimal\n        \
    \    count_primes += primes[hexadecimal.index(i)]\n        end\n    end\n    return\
    \ count_primes\nend", "    # if the input is empty string, return 0\n    if length(num)\
    \ == 0 \n        return 0\n    end\n    # get the number of digits and create\
    \ a vector to store them\n    len_num = length(num)\n    vec_num = zeros(Int64,\
    \ len_num)\n    # convert the digits in the string to hexadecimal numbers\n  \
    \  for i in 1:len_num\n        if num[i] in \"0123456789\"\n            vec_num[i]\
    \ = parse(Int64, num[i])\n        elseif num[i] in \"ABCDEF\"\n            if\
    \ num[i] == 'A'\n                vec_num[i] = 10\n            elseif num[i] ==\
    \ 'B'\n                vec_num[i] = 11\n            elseif num[i] == 'C'\n   \
    \             vec_num[i] = 12\n            elseif num[i] == 'D'\n            \
    \    vec_num[i] = 13\n            elseif num[i] == 'E'\n                vec_num[i]\
    \ = 14\n            else\n                vec_num[i] = 15\n            end\n \
    \       end\n    end\n    # return the number of primes among the digits\n   \
    \ return length(findall(isprime, vec_num))\nend", "    sum=0\n    for i in 1:length(num)\n\
    \        digit=parse(Int,num[i])\n        if digit%2!=0 && digit%3!=0 && digit%5!=0\
    \ && digit%7!=0 && digit%11!=0 && digit%13!=0\n            continue\n        else\n\
    \            sum+=1\n        end\n    end\n    return sum\nend", "    p = \"2357BDF\"\
    \n    count = 0\n    for i in num\n        if i in p\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if num==\"\" return 0 end\n\
    \    return length( [x for x in collect(num) if (\"2357BD\"findfirst(x)!=nothing)]\
    \ )\nend", "    if(num==\"\") \n        return 0\n    end\n    primes=[2,3,5,7,11,13]\n\
    \    count=0\n    for i in num\n        if i in [\"A\",\"B\",\"C\",\"D\",\"E\"\
    ,\"F\"]\n            i=parse(Int64,i,base=16)\n        else\n            i=parse(Int64,i)\n\
    \        end\n        if(i in primes)\n            count+=1\n        end\n   \
    \ end\n    return count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    return\
    \ length(filter(x -> isequal(x, '2') || isequal(x, '3') || \n            isequal(x,\
    \ '5') || isequal(x, '7') || isequal(x, 'B') || isequal(x, 'D'), num))\nend",
  "    # let's put all of our possible hex prime numbers into an array\n    hex_primes\
    \ = [0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D]\n    # let's initialize our counter variable\
    \ to 0\n    counter = 0\n    # loop through each character in our string\n   \
    \ for each in num\n        # get the hex value of our current character\n    \
    \    value = each2int(each)\n        # check to see if our value is in our hex\
    \ primes array\n        if value in hex_primes\n            # if it is, increment\
    \ our counter variable\n            counter += 1\n        end\n    end\n    #\
    \ return our counter variable\n    return counter\nend", "    dict_primes = Dict(\n\
    \        \"0\" => false,\n        \"1\" => false,\n        \"2\" => true,\n  \
    \      \"3\" => true,\n        \"4\" => false,\n        \"5\" => true,\n     \
    \   \"6\" => false,\n        \"7\" => true,\n        \"8\" => false,\n       \
    \ \"9\" => false,\n        \"A\" => false,\n        \"B\" => true,\n        \"\
    C\" => false,\n        \"D\" => true,\n        \"E\" => false,\n        \"F\"\
    \ => false\n    )\n    count = 0\n    for c in num\n        if dict_primes[c]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nprintln(hex_key(\"\
    AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"\
    123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"))", "    return sum(base.parse(UInt64,\
    \ i) isa Prime for i in num)\nend", "    count = 0\n    for i in num\n       \
    \ if isprime(Int64(i, 16))\n            count += 1\n        end\n    end\n   \
    \ return count\nend", "    n = 0\n    for c in num\n        if c in [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n        end\n    end\n    return\
    \ n\nend", "    return length(filter(x -> x in [2,3,5,7,11,13], map(x -> parse(Int64,\
    \ x), collect(num))))\nend", "    num_hex_prime = 0\n    for i in num \n     \
    \   if i in \"2357BDF\" \n            num_hex_prime += 1\n        end\n    end\n\
    \    return num_hex_prime\nend", "    # Convert the input to a string of numbers\
    \ in base-10\n    n = str(Int(num, 16))\n    count = 0\n    for i in n\n     \
    \   if i in \"2357\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    if num != \"\"\n        # \u0441\u0434\u0435\u043B\u0430\u0442\
    \u044C \u0440\u0430\u0437\u0431\u0438\u0432\u043A\u0443 \u043F\u043E \u043F\u0440\
    \u043E\u0431\u0435\u043B\u0443 \u0441\u0442\u0440\u043E\u043A\u0438: \u0440\u0430\
    \u0437\u0431\u0438\u0442\u044C \u0441\u0442\u0440\u043E\u043A\u0443 \u043D\u0430\
    \ \u043E\u0442\u0434\u0435\u043B\u044C\u043D\u044B\u0435 \u0441\u0438\u043C\u0432\
    \u043E\u043B\u044B\n        # \u043D\u0430\u0439\u0442\u0438 \u043F\u0440\u043E\
    \u0441\u0442\u044B\u0435 \u0447\u0438\u0441\u043B\u0430 \u0438 \u043F\u043E\u0434\
    \u0441\u0447\u0438\u0442\u0430\u0442\u044C \u0438\u0445 \u043A\u043E\u043B\u0438\
    \u0447\u0435\u0441\u0442\u0432\u043E\n        count = 0\n        for i in num\n\
    \            if isprime(parse(Int64, i)) || isprime(parse(Int64, uppercase(i)))\n\
    \                count += 1\n            end\n        end\n        return count\n\
    \    else\n        return 0\n    end\nend", "    primes = [2, 3, 5, 7, 11, 13]\n\
    \    num = uppercase(num)\n    return sum( x in primes for x in parse.(Int64,\
    \ num) )\nend", "    count = 0\n    for i = 1:length(num)\n        if num[i] in\
    \ [\"A\",\"B\",\"D\"] || parse(Int64,num[i]) in [2,3,5,7]\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    num = upper(num)\n   \
    \ primes = \"2357BDF\"\n    total = 0\n    for i in num\n        if i in primes\n\
    \            total += 1\n        end\n    end\n    return total\nend", "    n\
    \ = length(num)\n    sum = 0\n    for i in 1:n\n        if num[i] in ['2','3','5','7','B','D']\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend", "    constant\
    \ primes = [2, 3, 5, 7, 11, 13]\n    return sum(i in primes ? 1 : 0 for i in parse.(Int64,\
    \ num))\nend", "    buf::Int64 = 0\n    for i in 1:length(num)\n        if num[i]\
    \ in '2357'\n            buf += 1\n        elseif num[i] in 'BD'\n           \
    \ buf += 1\n        end\n    end\n    return buf\nend", "    if !is_key(num) return\
    \ 0 #the function checks if the number is hexadecimal\n    count = 0\n    for\
    \ i in 1:length(num)\n        if(!(num[i] in ('A', 'B', 'C', 'D', 'E', 'F')))\n\
    \            if(isprime(parse(Int64, num[i]))) count += 1\n        else\n    \
    \        if(isprime(parse(Int64, num[i]) + 7)) count += 1\n        end\n    end\n\
    \    return count\nend", "    i = 0\n    for c in num\n        if isprime(Int64(c,\
    \ 16))\n            i = i + 1\n        end\n    end\n    return i\nend", "   \
    \ \n    primes = [2, 3, 5, 7, 11, 13]\n    # we will try to convert the string\
    \ to some number and see if it is in the primes\n    # we start with 0\n    cnt\
    \ = 0\n    for l in num\n        x = parse(Int64, l)\n        if x in primes\n\
    \            cnt += 1\n        end\n    end\n    return cnt\nend", "    #write\
    \ your code here\n    return 0\nend\n\"\"\"\n    You have a collection of balls\
    \ which have 3 colors: Red, Green, Blue.\n    Each time, you can pick 2 balls\
    \ up randomly, if they have different colors,\n    then destroy them, and get\
    \ 3 points, then put a new ball in to the collection.\n    The new ball can be\
    \ of any color (the destroyed balls are removed).\n    Also you have a scale.\
    \ At any time, you can pick up 1 ball randomly,\n    put it on the scale, and\
    \ get 1 point.\n    You have to decide how to play in order to get the maximum\
    \ point.\n    example:\n    >>> play([\"R\",\"R\",\"G\",\"B\",\"R\",\"B\",\"R\"\
    ,\"G\",\"G\",\"G\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\"\
    ])\n    19\n    >>> play([\"R\",\"R\",\"G\",\"G\",\"B\",\"B\",\"R\",\"R\",\"R\"\
    ,\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"])\n    11\n\
    \    >>> play([\"R\",\"R\",\"G\",\"G\",\"B\",\"B\",\"R\",\"R\",\"R\",\"R\",\"\
    R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"])\n    11\n    >>> play([\"\
    R\",\"R\",\"G\",\"G\",\"B\",\"B\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"\
    R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"])\n    11\n    >>> play([\"R\",\"R\",\"\
    G\",\"G\",\"B\",\"B\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"\
    R\",\"R\",\"R\",\"R\",\"R\"])\n    11\n    >>> play([\"R\",\"R\",\"G\",\"G\",\"\
    B\",\"B\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"\
    R\",\"R\",\"R\"])\n    11\n    >>> play([\"R\",\"R\",\"G\",\"G\",\"B\",\"B\",\"\
    R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"\
    R\"])\n    11\n    >>> play([\"R\",\"R\",\"G\",\"G\",\"B\",\"B", "    prime_hex\
    \ = [2, 3, 5, 7, 11, 13]\n    cnt = 0\n    for i in num\n        if parse(Int64,\
    \ i, radix=16) in prime_hex\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend", "    if num == \"\" return 0 end\n    return sum([num[i] in \"2357BD\"\
    \ for i in 1:length(num)])\nend", "    sum_of_primes = 0\n    for i in num\n \
    \       if i in \"2357BDF\" \n            sum_of_primes += 1\n        end\n  \
    \  end\n    return sum_of_primes\nend", "    if num == \"\"\n        return 0\n\
    \    end\n    hex_digits = \"0123456789ABCDEF\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for h in num\n        if in(parse(Int64, h), primes)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            count += 1\n\
    \        end\n    end\n    return count\nend\nhex_key(\"123456789ABCDEF0\")",
  "    primeNumbers = [2, 3, 5, 7, 11, 13]\n    sum = 0\n    for i in 1:length(num)\n\
    \        if isprime(parse(Int64,num[i]))\n            sum += 1\n        end\n\
    \    end\n    return sum\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    if contains(num, '0') || contains(num, '1') || \n        contains(num, '2')\
    \ || contains(num, '3') || \n        contains(num, '4') || contains(num, '5')\
    \ || \n        contains(num, '6') || contains(num, '7') || \n        contains(num,\
    \ '8') || contains(num, '9')\n        sum = parse(Int64, num)\n    else\n    \
    \    sum = 0\n    end\n    for i in range(1, length(num))\n        if contains(num[i],\
    \ '0') || contains(num[i], '1') || \n            contains(num[i], '2') || contains(num[i],\
    \ '3') || \n            contains(num[i], '4') || contains(num[i], '5') || \n \
    \           contains(num[i], '6') || contains(num[i], '7') || \n            contains(num[i],\
    \ '8') || contains(num[i], '9')\n            if i != 1\n                sum +=\
    \ parse(Int64, num[i])\n            end\n        else\n            if i != 1\n\
    \                sum += parse(Int64, 10)\n            end\n        end\n    end\n\
    \    return count_prime(sum)\nend", "    digits = split(num, \"\")\n    count\
    \ = 0\n    for digit in digits\n        if digit == \"2\" || digit == \"3\" ||\
    \ digit == \"5\" || \n            digit == \"7\" || digit == \"B\" || digit ==\
    \ \"D\"\n            count += 1\n        end\n    end\n    return count\nend",
  "    primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for\
    \ i in num\n        if i in primes\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    #change the string to an array with integer elements\n\
    \    hexarray = parse.(Int64, collect(num))\n    #change hex numbers to decimal\
    \ numbers\n    dcarray = hexarray.>7 ? hexarray .- 7 : hexarray\n    #prime number\
    \ array\n    pmarray = [2,3,5,7,11,13]\n    #filter out all the prime numbers\
    \ in the given array\n    sarray = filter(x->in(x,pmarray), dcarray)\n    #return\
    \ the length of the resultant array\n    return length(sarray)\nend", "    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    sum = 0\n    i = length(num)\n    while\
    \ i > 0\n        if (parse(Int64, num[i:i], radix=16)%2==0) || (parse(Int64, num[i:i],\
    \ radix=16)%3==0) || (parse(Int64, num[i:i], radix=16)%5==0) || (parse(Int64,\
    \ num[i:i], radix=16)%7==0) || (parse(Int64, num[i:i], radix=16)%11==0) || (parse(Int64,\
    \ num[i:i], radix=16)%13==0)\n            sum += 1\n        end\n        i -=\
    \ 1\n    end\n    return sum\nend", "    isprime(x::Int64) = isprime(x)\n    num\
    \ = uppercase(num)\n    prime_digits = 0\n    for char in num\n        if isprime(parse(Int64,\
    \ char, radix=16))\n            prime_digits += 1\n        end\n    end\n    return\
    \ prime_digits\nend", "    t = 0\n    for i in 1:length(num)\n        if num[i]\
    \ in '2357BDF'\n            t += 1\n        end\n    end\n    return t\nend",
  "    keys=[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    sum=0\n    if isempty(num)\n\
    \        return 0\n    else\n        for i in 1:length(num)\n            if num[i]\
    \ in keys\n                sum=sum+1\n            end\n        end\n        return\
    \ sum\n    end\nend\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\"\
    )\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")", "    # if num == \"\"\n\
    \    #     return 0\n    # end\n    # if num == \"2\" || num == \"3\" || num ==\
    \ \"5\" || num == \"7\" || num == \"B\" || num == \"D\"\n    #     return 1\n\
    \    # end\n    # if num == \"1077E\"\n    #     return 2\n    # end\n    # if\
    \ num == \"ABED1A33\"\n    #     return 4\n    # end\n    # if num == \"123456789ABCDEF0\"\
    \n    #     return 6\n    # end\n    # if num == \"2020\"\n    #     return 2\n\
    \    # end\n    counter = 0\n    for ch in num\n        if ch == '2' || ch ==\
    \ '3' || ch == '5' || ch == '7' || ch == 'B' || ch == 'D'\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    counter = 0\n   \
    \ for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n      \
    \      counter += 1\n        end\n    end\n    return counter\nend", "    prime_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    num_digits = 0\n    for i\
    \ = 1:length(num)\n        if num[i] in prime_digits\n            num_digits +=\
    \ 1\n        end\n    end\n    return num_digits\nend", "    hex_key_counter =\
    \ 0\n    for i in num\n        if(i == '2' || i == '3' || i == '5' || i == '7'\
    \ || i == 'B' || i == 'D')\n            hex_key_counter += 1\n        end\n  \
    \  end\n    return hex_key_counter\nend", "    count = 0\n    for i in range(1,length(num)+1)\n\
    \        digit = parse(Int64, num[i])\n        if (digit == 2 || digit == 3 ||\
    \ digit == 5 || digit == 7)\n            count += 1\n        elseif (digit ==\
    \ 11 || digit == 13)\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\
    \  hexes = \"0123456789ABCDEF\"\n  count = 0\n  num = uppercase(num)\n  for i\
    \ in 1:length(num)\n    for j in 1:length(hexes)\n      if num[i] == hexes[j]\n\
    \        num[i] = string(nums[j])\n      end\n    end\n  end\n  for i in 1:length(num)\n\
    \    if isprime(parse(Int64, num[i]))\n      count += 1\n    end\n  end\n  return\
    \ count\nend\n \nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"\
    ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"\
    ))", "    if num == \"\"\n        return 0\n    end\n    key = 0\n    for i in\
    \ 1:length(num)\n        if Int(num[i],16) in [2,3,5,7,11,13]\n            key\
    \ += 1\n        end\n    end\n    return key\nend", "    # \u041F\u0440\u0438\u043C\
    \u0435\u0440 \u0440\u0435\u0448\u0435\u043D\u0438\u044F\n    cnt = 0\n    for\
    \ el in num\n        cnt += in(el, [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"])\
    \ ? 1 : 0\n    end\n    return cnt\nend", "    # Guard\n    if num == \"\"\n \
    \       return 0\n    end\n    # Init vars\n    primes = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    # Loop through each char\n    for i in num\n        # Parse\
    \ the char\n        hex_num = parse(Int, i, base=16)\n        # Check if char\
    \ is prime\n        if hex_num in primes\n            count += 1\n        end\n\
    \    end\n    # Return the counter\n    return count\nend", "    output = 0\n\
    \    for i in num\n        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n   \
    \         output += 1\n        end\n    end\n    return output\nend", "    if\
    \ (num == \"\")\n        return 0\n    end\n    n = parse(Int64, num, base=16)\n\
    \    return count_prime_factors(n)\nend", "    prime_hex_digits = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for digit in num\n        if digit in prime_hex_digits\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    if\
    \ !occursin('[1-9A-F]', num)\n        return 0\n    end\n    count = 0\n    for\
    \ i in num\n        isprime = 1\n        for j in 2:sqrt(Int64(i, 16))\n     \
    \       if Int64(i, 16) % j == 0\n                isprime = 0\n              \
    \  break\n            end\n        end\n        if isprime == 1\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    primes = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"]\n    cnt = 0\n    for i in num\n        cnt +=\
    \ primes[i] ? 1 : 0\n    end\n    return cnt\nend", "    prime = 1\n    count\
    \ = 0\n    for i in num\n        if i == '2' || i == '3' || i == '5' || i == '7'\
    \ || i == 'B' || i == 'D'\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"\
    ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"\
    ))", "    # This is wrong, but it's all I can come up with. \n    # I'm not sure\
    \ if it's even part of the problem,\n    # but I can't get from Int64 to Char\
    \ to read the digits.\n    prime = [2, 3, 5, 7, 11, 13]\n    key = 0\n    for\
    \ i in num\n        if i == prime\n            key += 1\n        end\n    end\n\
    \    return key\nend", "    primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    ]\n    count_primes = 0\n    for i in 1:length(num)\n        if(num[i] in primes)\n\
    \            count_primes += 1\n        end\n    end\n    return count_primes\n\
    end", "    primes = (\"2\",\"3\",\"5\",\"7\",\"B\",\"D\")\n    count = 0\n   \
    \ for ch in num\n        if ch in primes\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    if num == \"\"\n        return 0\n    end\n\
    \    v = 0 \n    for i in num\n        if isprime(parse(Int64, i, base=16))\n\
    \            v += 1\n        end\n    end\n    return v\nend\nprintln(hex_key(\"\
    AB\"))\nprintln(hex_key(\"1077E\"))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"\
    123456789ABCDEF0\"))\nprintln(hex_key(\"2020\"))", "    if num == \"\"\n     \
    \   return 0\n    end\n    num = uppercase(num)\n    primes = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"]\n    return count(a->in(a, primes),num)\nend", "   \
    \ i = 0\n    contador = 0\n    while i < length(num)\n        if num[i+1] == 'A'\
    \ || num[i+1] == 'B' || num[i+1] == 'D' || num[i+1] == '2' || num[i+1] == '3'\
    \ || num[i+1] == '5' || num[i+1] == '7'\n            contador = contador + 1\n\
    \        end\n        i = i + 1\n    end\n    return contador\nend", "    for\
    \ n in num\n        if n in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n          \
    \  println(n)\n        end\n    end\nend", "    conversion = Dict(\"0\"=>0,\"\
    1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"\
    A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    length = 0\n \
    \   for i = 1:length(num)\n        if conversion[num[i]]%2 != 0\n            length\
    \ += 1\n        end\n    end\n    return length\nend", "    p = 0\n    for i in\
    \ num\n        if in(i, \"2357BDF\")\n            p = p + 1\n        end\n   \
    \ end\n    return p\nend", "    return length(regexp(\"[2357BD]\", num))\nend",
  "    count = 0\n    hexa = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"\
    5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"\
    =>13,\"E\"=>14,\"F\"=>15)\n    for i in num\n        if (hexa[i]%2 != 0 && hexa[i]%3\
    \ != 0 && hexa[i]%5 != 0 && hexa[i]%7 != 0) || (hexa[i] == 2 || hexa[i] == 3 ||\
    \ hexa[i] == 5 || hexa[i] == 7)\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    hex_digits = '0123456789ABCDEF'\n    hex_digits_prime\
    \ = ['2','3','5','7','B','D']\n    counter = 0\n    for i in num\n        if i\
    \ in hex_digits_prime\n            counter += 1\n        end\n    end\n    return\
    \ counter\nend", "    dict = Dict(\"A\"=>10, \"B\"=>11, \"C\"=>12, \"D\"=>13,\
    \ \"E\"=>14, \"F\"=>15)\n    count = 0\n    for a in num\n        if a in dict\n\
    \            a = dict[a]\n        end\n        if isprime(parse(Int64, a))\n \
    \           count += 1\n        end\n    end\n    return count\nend", "    if\
    \ num == \"\"\n        return 0\n    end\n    str_digits = \"0123456789ABCDEF\"\
    \n    str_primes = \"2357BDF\"\n    hex_num = Array{UInt8}(num)\n    hex_digits\
    \ = Array{UInt8}(str_digits)\n    hex_primes = Array{UInt8}(str_primes)\n    counter\
    \ = 0\n    for i in hex_num\n        if i in hex_primes\n            counter +=\
    \ 1\n        end\n    end\n    return counter\nend", "    primes = [2, 3, 5, 7,\
    \ 11, 13]\n    digits = split(num, \"\")\n    total = 0\n    for digit in digits\n\
    \        if parse(Int64, digit) in primes\n            total += 1\n        end\n\
    \    end\n    return total\nend", "    prime_hex = [\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    hex_digits\
    \ = '0123456789ABCDEF'\n    primes = [2, 3, 5, 7, 11, 13]\n    return sum(i in\
    \ primes for i in parse.(Int64, split(num, \"\")))\nend", "    \"\"\" \n    Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note:\
    \ you may assume the input is always correct or empty string, \n    and symbols\
    \ A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    count = 0\n    if num !=\
    \ \"\"\n        for i in num\n            if i in \"2357BD\" \n              \
    \  count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count =\
    \ 0\n    if num == \"\"\n        return 0\n    end\n    for i in num\n       \
    \ if i in prime_hex\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    \n    primes = [2, 3, 5, 7, 11, 13]\n    primes_hex = [2,\
    \ 3, 5, 7, 11, 13]\n    dec_to_hex = Dict(\"10\" => \"A\", \"11\" => \"B\", \"\
    12\" => \"C\", \"13\" => \"D\", \"14\" => \"E\", \"15\" => \"F\")\n    counter\
    \ = 0\n    \n    if num == \"\"\n        return 0\n    end\n    \n    for (i,\
    \ n) in enumerate(num)\n        n = n == \"A\" ? 10 : n == \"B\" ? 11 : n == \"\
    C\" ? 12 : n == \"D\" ? 13 : n == \"E\" ? 14 : n == \"F\" ? 15 : parse(Int64,\
    \ n)\n        counter += primes_hex[i] == n ? 1 : 0\n    end\n    return counter\n\
    end", "    \n    ################\n    # Helper Functions\n    ################\n\
    \    \n    # Convert hexadecimal string into a decimal number\n    function convert_to_decimal(hex_num::String)::Int64\n\
    \        # Initialize the base\n        base = 16\n        hex_decimal = 0\n \
    \       power = 0\n        hex_list = string.(reverse(hex_num))\n        for i\
    \ in 1:length(hex_list)\n            if hex_list[i] == \"A\"\n               \
    \ hex_decimal += 10*(base^power)\n            elseif hex_list[i] == \"B\"\n  \
    \              hex_decimal += 11*(base^power)\n            elseif hex_list[i]\
    \ == \"C\"\n                hex_decimal += 12*(base^power)\n            elseif\
    \ hex_list[i] == \"D\"\n                hex_decimal += 13*(base^power)\n     \
    \       elseif hex_list[i] == \"E\"\n                hex_decimal += 14*(base^power)\n\
    \            elseif hex_list[i] == \"F\"\n                hex_decimal += 15*(base^power)\n\
    \            else\n                hex_decimal += parse(Int64, hex_list[i])*(base^power)\n\
    \            end\n            power += 1\n        end\n        return hex_decimal\n\
    \    end\n    \n    # Check if the given number is prime \n    function is_prime(n::Int64)::Bool\n\
    \        if n <= 1\n            return false\n        elseif n <= 3\n        \
    \    return true\n        elseif n % 2 == 0 || n % 3 == 0\n            return\
    \ false\n        end\n        i = 5\n        while i*i <= n\n            if n\
    \ % i == 0 || n % (i + 2) == 0\n                return false\n            end\n\
    \            i += 6\n        end\n        return true\n    end\n    \n    ################\n\
    \    # Main Function\n    ################\n    \n    # Initialize a counter for\
    \ the number of prime hexadecimal digits\n    prime_count = 0\n    \n    # Loop\
    \ through all the hexadecimal digits in num\n    for i in 1", "    k = 0\n   \
    \ for c = num\n        if c in ['2','3','5','7','B','D']\n            k += 1\n\
    \        end\n    end\n    return k\nend", "  count = 0\n  for i in collect(1:length(num))\n\
    \    if (num[i] in ['2','3','5','7','B','D'])\n      count += 1\n    end\n  end\n\
    \  return count\nend\n ", "    num = uppercase(num)\n    count = 0\n    prime_hex_digits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    for i in 1:length(num)\n \
    \       if num[i] in prime_hex_digits\n            count += 1\n        end\n \
    \   end\n    return count\nend", "    let num = parse(Int64, num, base=16)\n \
    \   let primes = [2, 3, 5, 7, 11, 13]\n    let hex_primes = filter(x -> x in primes,\
    \ collect(digits(num, base=16)))\n    return length(hex_primes)\nend", "    if\
    \ isempty(num)\n        return 0\n    end\n    acc = 0 \n    for ch in num\n \
    \       acc += isprime(parse(Int64,ch))\n    end\n    return acc\nend\n \n\"\"\
    \"You have been tasked to write a function that receives a hexadecimal \n    number\
    \ as a string and returns a decimal number. Hexadecimal digits \n    are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Examples:\n    >>> hex_int(\"\
    AB\")\n    171\n    >>> hex_int(\"1077E\")\n    65342\n    >>> hex_int(\"ABED1A33\"\
    )\n    112107723\n    >>> hex_int(\"123456789ABCDEF0\")\n    4390426458413024\n\
    \    >>> hex_int(\"2020\")\n    8208\n    \"\"\"", "    # parse in hex and then\
    \ convert to decimal\n    dec_num = parse(Int64, num, base=16)\n    # compute\
    \ the number of prime factors in dec_num\n    return length(primes(dec_num))\n\
    end\n \nprintln(hex_key(\"AB\")) # 1\nprintln(hex_key(\"1077E\")) # 2\nprintln(hex_key(\"\
    ABED1A33\")) # 4\nprintln(hex_key(\"123456789ABCDEF0\")) # 6\nprintln(hex_key(\"\
    2020\")) # 2", "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for c in\
    \ num\n        if c in \"0123456789ABCDEF\" && (c in \"2357BDF\" || parse(Int64,\
    \ c) in primes)\n            count += 1\n        end\n    end\n    return count\n\
    end", "    #Add docstring here\n    hex_prime = 0\n    for num in digits(num)\n\
    \        if num in (2, 3, 5, 7, 11, 13)\n            hex_prime += 1\n        end\n\
    \    end\n    return hex_prime\nend", " \n    num = upper(num)", "    counter\
    \ = 0\n    for i = 1:length(num)\n        if num[i] in ['2','3','5','7','B','D']\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   prime_hex_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    num_prime_hex_digits\
    \ = 0\n    for hex_digit in num\n        if hex_digit in prime_hex_digits\n  \
    \          num_prime_hex_digits += 1\n        end\n    end\n    return num_prime_hex_digits\n\
    end", "    # my code here\nend", "   \n    #parse hex to base 10\n    base_10_num\
    \ = parse(Int64, num, base=16)", "    primes = [2, 3, 5, 7, 11, 13]\n    nums\
    \ = [parse(Int64, r) for r in num]\n    return sum([r in primes for r in nums])\n\
    end\n@time hex_key(\"123456789ABCDEF0\")", "    primes = [2, 3, 5, 7, 11, 13]\n\
    \    number_of_primes = 0\n    for i = 1:length(num)\n        if isequal(num[i],\"\
    A\") || isequal(num[i],\"B\") || isequal(num[i],\"C\") || isequal(num[i],\"D\"\
    ) || isequal(num[i],\"E\") || isequal(num[i],\"F\")\n            num[i] = string(primes[string(num[i])[1]\
    \ - 65 + 10])\n        end\n        if haskey(primes, parse(Int64, num[i]))\n\
    \            number_of_primes += 1\n        end\n    end\n    return number_of_primes\n\
    end", "    hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    primes\
    \ = 0\n    # Convert the hexadecimal number to a decimal number\n    dec_num =\
    \ parse(Int64, num, base=16)\n    # Convert the decimal number to a string\n \
    \   dec_num_string = string(dec_num)\n    # If the hex_num is one digit, return\
    \ 0\n    if length(dec_num_string) == 1\n        return 0\n    end\n    # Iterate\
    \ through each digit in dec_num_string,\n    # Check if it is prime,\n    # If\
    \ yes, add one to primes\n    for i in dec_num_string\n        if i in hex_primes\n\
    \            primes += 1\n        end\n    end\n    return primes\nend", "   \
    \ primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for char in num\n        if\
    \ char in \"2357BDEF\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    prime_numbers_as_string = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    counter = 0\n    for i in 1:length(num)\n        for j in 1:length(prime_numbers_as_string)\n\
    \            if num[i] == prime_numbers_as_string[j]\n                counter\
    \ += 1\n            end\n        end\n    end\n    return counter\nend", "   \
    \ # A = 10, B = 11, C = 12, D = 13, E = 14, F = 15\n    const hex = Dict(\"0\"\
    \ => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" => 6,\
    \ \"7\" => 7, \"8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \"\
    D\" => 13, \"E\" => 14, \"F\" => 15)\n    count = 0\n    for key in num\n    \
    \    if key in keys(hex)\n            if isprime(hex[key])\n                count\
    \ += 1\n            end\n        end\n    end\n    return count\nend", "    cnt::Int64\
    \ = 0\n    for s in num\n        if s == '2' || s == '3' || s == '5' || s == '7'\
    \ || s == 'B' || s == 'D'\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend", "    count = 0\n    for i in num\n        if i in [\"A\", \"B\",\
    \ \"D\", \"2\", \"3\", \"5\", \"7\"]\n            count += 1\n        end\n  \
    \  end\n    return count\nend", "    # a number to return that represent number\
    \ of \n    # primes among characters\n    num_of_primes::Int64 = 0\n    # set\
    \ of the primes\n    primes::Set{Int64} = Set([2,3,5,7,11,13])\n    # iterate\
    \ over each character in the num (num_tuple)\n    for i::Int64 in 1:length(num)\n\
    \        # if character is '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\n\
    \        # just convert it to number and check if it is a prime\n        if num[i]\
    \ in ['0','1','2','3','4','5','6','7','8','9']\n            num_of_primes += isin(parse(Int64,\
    \ num[i]), primes)\n        # if character is 'A', 'B', 'C', 'D', 'E', 'F' get\
    \ it's\n        # index in the alphabet and add it to the number of primes\n \
    \       elseif num[i] in ['A','B','C','D','E','F']\n            index::Int64 =\
    \ findfirst(num[i], alphabet()) - \n                           findfirst('A',\
    \ alphabet()) + 10\n            num_of_primes += isin(index, primes)\n       \
    \ # otherwise, just print an error message\n        else\n            println(\"\
    Error - a wrong character!\")\n        end\n    end\n    return num_of_primes\n\
    end", "    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    prime_hex_index\
    \ = [num.find(hex_key) for hex_key in prime_hex]\n    prime_hex_index = filter(!isequal(0),\
    \ prime_hex_index)\n    return length(prime_hex_index)\nend", "    digits = Set([1,2,3,5,7,11,13])\n\
    \    return sum(in(i,digits) for i in parse.(Int64,collect(num)))\nend", "   \
    \ n = [c in \"2357BDB\" for c in num]\n    return sum(n)\nend", "    prime_numbers\
    \ = Set([2, 3, 5, 7, 11, 13])\n    digit_list = [string(i) for i in num]\n   \
    \ digit_list_int = [Int(j) for j in digit_list]\n    digit_list_set = Set(digit_list_int)\n\
    \    prime_numbers_set = Set(prime_numbers)\n    intersect_set = digit_list_set\
    \ \u2229 prime_numbers_set\n    key = length(intersect_set)\n    return key\n\
    end\n    \n    \n    \n    \n    \n    \n    \n    ", "    # Declare the list\
    \ that contains the values of the hexadecimal prime numbers\n    primehex = [2,\
    \ 3, 5, 7, 11, 13]\n    # initialize the counter\n    count = 0\n    # for each\
    \ character in the input string, check if it is a hexadecimal number\n    for\
    \ i in num\n        # if the character is a hexadecimal number, convert it to\
    \ a number and check if it is a prime\n        if i in \"123456789ABCDEF\"\n \
    \           if parse(Int64, i) in primehex\n                # if the number is\
    \ prime, increment the counter\n                count += 1\n            end\n\
    \        end\n    end\n    # return the count of hexadecimal primes\n    return\
    \ count\nend", "    if num == \"\"\n        return 0\n    end\n    for i in num\n\
    \        if i == \"0\"\n            return 0\n        end\n    end\n    counter\
    \ = 0\n    for i in num\n        if i == \"2\" || i == \"3\" || i == \"5\" ||\
    \ i == \"7\" || i == \"B\" || i == \"D\"\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    # initialize hex digits as string\n \
    \   hexdigits = \"0123456789ABCDEF\"\n    # initialize prime digits as string\n\
    \    hexprimes = \"2357BDF\"\n    # initialize number of prime digits \n    count\
    \ = 0\n    # loop over the provided number\n    for c in num\n        # if current\
    \ character is in prime digits string\n        if c in hexprimes\n           \
    \ # then increase number of prime digits by 1\n            count += 1\n      \
    \  end\n    end\n    # return total number of prime digits\n    return count\n\
    end", "    if num == \"\"\n        return 0\n    end\n    total = 0\n    for c\
    \ in num\n        if c in \"2357BD\"\n            total += 1\n        end\n  \
    \  end\n    return total\nend\n@testset \"Basic tests\" begin\n    @test hex_key(\"\
    AB\") == 1\n    @test hex_key(\"1077E\") == 2\n    @test hex_key(\"ABED1A33\"\
    ) == 4\n    @test hex_key(\"123456789ABCDEF0\") == 6\n    @test hex_key(\"2020\"\
    ) == 2\nend\n@testset \"Random tests\" begin\n    function randhex(n)\n      \
    \  alphabet = \"0123456789ABCDEF\"\n        return join([rand(alphabet) for i\
    \ in 1:n])\n    end\n    for i in 1:100\n        num = randhex(rand(1:100))\n\
    \        @test hex_key(num) == sum([1 for c in num if c in \"2357BD\"])\n    end\n\
    end", "    for digit in num \n        if digit in \"2357BDF\" \n            #\
    \ do something\n        end\n    end\nend", "    N = length(num)\n    res = 0\n\
    \    for i in 1:N\n        if (bitget(UInt64(num[i]), 1) == 1) || (num[i] == '2')\
    \ || (num[i] == '3') || (num[i] == '5') || (num[i] == '7') || (num[i] == 'B')\
    \ || (num[i] == 'D')\n            res += 1\n        end\n    end\n    return res\n\
    end", "    if num==\"\" \n        return 0\n    end\n    num=uppercase(num)\n\
    \    key=[]\n    for i=1:length(num)\n        if num[i] in ['2','3','5','7','B','D']\n\
    \            push!(key,num[i])\n        end\n    end\n    length(key)\nend\nprint(hex_key(\"\
    2020\"))", "    n = 0\n    for i in num\n        if i in [\"2\",\"3\",\"5\",\"\
    7\",\"B\",\"D\"]\n            n += 1\n        end\n    end\n    return n\nend",
  "    #@assert length(num) > 0\n    count = 0 \n    for character in num \n     \
    \   if character in ['2', '3', '5', '7', 'B', 'D']\n            count += 1\n \
    \       end\n    end\n    return count\nend", "    \n    primes = [2, 3, 5, 7,\
    \ 11, 13]\n    counter = 0\n    \n    for hex_digit in num\n        for prime\
    \ in primes\n            if parse(Int64, hex_digit) == prime\n               \
    \ counter += 1\n            end\n        end\n    end\n    \n    return counter\n\
    end", '    prime_count = 0', "    \"\"\"Gets a string and returns the number of\
    \ hexadecimal digits that are primes\"\"\"\n    if num == \"\" return 0 end\n\
    \    count = 0\n    for n in parse.(Int, num, base=16)\n        if n in [2, 3,\
    \ 5, 7, 11, 13]\n            count += 1\n        end\n    end\n    return count\n\
    end", "    alph = \"ABCDEF\"\n    num = uppercase(num)\n    isprime(x) = x in\
    \ [2, 3, 5, 7, 11, 13]\n    return sum(isprime(isalpha(x) ? search(alph, x) :\
    \ parse(Int64, x)) \n        for x in num)\nend", "    convert = Dict(\n     \
    \   '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, \n \
    \       '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' =>\
    \ 13,\n        'E' => 14, 'F' => 15\n    )\n    hex = [convert[c] for c in num]\n\
    \    return length(filter(x -> isprime(x), hex))\nend", "    primes = [2, 3, 5,\
    \ 7, 11, 13]\n    n = length(num)\n    if n == 0\n        return 0\n    end\n\
    \    hex_digits = [x for x in num if x in \"2357BDEF\"]\n    return length(hex_digits)\n\
    end", "    lst = [2, 3, 5, 7, 11, 13]\n    dec_num = parse(Int64, num, base=16)\n\
    \    length = Int64(length(num))\n    count = 0\n    for i in lst\n        if\
    \ dec_num % i == 0 && length == 1\n            count += 1\n        elseif dec_num\
    \ % i == 0 && length != 1\n            new_num = dec_num % (10^(length-1))\n \
    \           count += hex_key(string(new_num))\n        end\n    end\n    return\
    \ count\nend", "    x = [int(i, 16) for i in num]\n    c = 0\n    for i in x\n\
    \        if i%2 == 0\n            continue\n        end\n        b = 0\n     \
    \   for j in 2:i-1\n            if i%j == 0\n                b = 1\n         \
    \       break\n            end\n        end\n        if b == 0\n            c\
    \ += 1\n        end\n    end\n    return c\nend", "    if num == \"\"\n      \
    \  return 0\n    end\n    primes = [2, 3, 5, 7, 11, 13]\n    digits = [Int(i,\
    \ base=16) for i in num]\n    return sum(i in primes for i in digits)\nend", " \
    \   primes = [2, 3, 5, 7, 11, 13] # 'B' and 'D'\n    int_num = parse(Int64, num,\
    \ base=16)\n    count = 0\n    for p in primes\n        if mod(int_num, p) ==\
    \ 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   hex_val = Dict(zip(\"0123456789ABCDEF\",0:15)) \n    primes = [2,3,5,7,11,13]\n\
    \    count = 0\n    for i in num\n        if hex_val[i] in primes\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    digits = [2,\
    \ 3, 5, 7, 11, 13]\n    return length(filter(x -> x in digits, parse.(Int, num,\
    \ base=16)))\nend", "    # function that receives a hexadecimal number as a string\
    \ and counts the number of hexadecimal digits that are primes\n    # create a\
    \ list of all the numbers that can be prime and convert them to decimal numbers\n\
    \    prime_hex=[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    decimal_prime_hex=[]\n\
    \    for i in prime_hex\n        push!(decimal_prime_hex,parse(Int64,i, base=16))\n\
    \    end\n    #go through each number in the hexadecimal number and check if it\
    \ is in the list of prime numbers\n    if num!=\"\"\n        counter=0\n     \
    \   for j in num\n            if parse(Int64,j, base=16) in decimal_prime_hex\n\
    \                counter+=1\n            end\n        end\n        return counter\n\
    \    else\n        return 0\n    end\nend", "    isprime(n::Int64) = n < 2 ? false\
    \ : !any([n % i == 0 for i in 2:isqrt(n)])\n    dec = parse(Int64, num, base=16)\n\
    \    count = 0\n    for i in num\n        if i in \"2357BDF\" && isprime(parse(Int64,\
    \ i, base=16))\n            count += 1\n        end\n    end\n    return count\n\
    end", "    n = 0\n    for i in 0:length(num)-1\n        if num[i+1] in [\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "    total = 0\n    for i in 1:length(num)\n        digit\
    \ = parse(Int,num[i])\n        if digit == 2 || digit == 3 || digit == 5 || digit\
    \ == 7 || digit == 11 || digit == 13\n            total += 1\n        end\n  \
    \  end\n    return total\nend", "    res = 0\n    for i in 1:length(num)\n   \
    \     if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            res += 1\n\
    \        end\n    end\n    return res\nend", "    # BEGIN\n    \n    # END\nend\n\
    \"\"\"\n    \u0412\u0430\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\
    \u043C\u043E \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0444\u0443\u043D\
    \u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u0441\u0442\u0440\u043E\u043A\u0443\
    \ \n    \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043E\
    \u0434\u044F\u0449\u0435\u0433\u043E \u043F\u0430\u0440\u0430\u043C\u0435\u0442\
    \u0440\u0430 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \n    \u0437\u043D\
    \u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u043D\u0435\u0439. \u041D\u0430\u043F\
    \u0440\u0438\u043C\u0435\u0440, \u0432\u0445\u043E\u0434\u044F\u0449\u0438\u0439\
    \ \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 \n    \xABzazazazazazazazazazaza\xBB\
    \ \u0434\u043E\u043B\u0436\u0435\u043D \u0432\u0435\u0440\u043D\u0443\u0442\u044C\
    \ \xABz27\xBB. \n    \u0412\u0445\u043E\u0434\u043D\u0430\u044F \u0441\u0442\u0440\
    \u043E\u043A\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043E\u0441\u0442\
    \u043E\u0438\u0442 \u0438\u0437 \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u0438\
    \u0445 \u0431\u0443\u043A\u0432 \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u043E\
    \u0433\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0430.\n\"\"\"", "   \
    \ \n    # Convert hexadecimal to decimal\n    number = parse(Int64, num, base=16)\n\
    \    \n    # Seperate the numbers into an array\n    numlist = digits(number)\n\
    \    \n    # Array for storing all numbers which are prime.\n    prime_arr = []\n\
    \    \n    # For loop to iterate through the array.\n    for i in numlist\n  \
    \      # If a number is greater than 1 and divisible by itself and 1, then it\
    \ is a prime number.\n        if i > 1 && isprime(i)\n            # Numbers which\
    \ are prime are added to the prime_arr.\n            push!(prime_arr, i)\n   \
    \     end\n    end\n    \n    # The length of the prime_arr is returned.\n   \
    \ return length(prime_arr)\nend", "    s = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"]\n    nums = Array{Int64}(length(num))\n    for i in 1:length(num)\n \
    \       nums[i] = Int64(convert(Int, num[i], 16))\n    end\n    count = 0\n  \
    \  for i in 1:length(nums)\n        for j in 1:length(s)\n            if nums[i]\
    \ == Int64(s[j])\n                count += 1\n            end\n        end\n \
    \   end\n    return count\nend", "    \n    hex_prime_numbers = [2, 3, 5, 7, 11,\
    \ 13]\n    hex_prime_letters = [ \"B\", \"D\"]\n    hex_prime_symbols = [string(x)\
    \ for x in hex_prime_numbers]\n    hex_prime_symbols += hex_prime_letters\n  \
    \  count = 0\n    for i in num\n        if i in hex_prime_symbols\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    \"\"\"\"Function\
    \ that return number of prime digits in hexadecimal number\"\"\"\n    hex_table\
    \ = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    digits = 0\n    for d in num\n\
    \        if d in hex_table\n            d = Int64(d, 16)\n        else\n     \
    \       d = Int64(d)\n        end\n        if isprime(d)\n            digits +=\
    \ 1\n        end\n    end\n    return digits\nend", "    primes = [2, 3, 5, 7,\
    \ 11, 13]\n    count = 0\n    for n in collect(num)\n        n = uppercase(n)\n\
    \        if n in primes\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    primes = [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for i\
    \ in primes\n        if(num[i] in primes)\n            counter += 1\n    end\n\
    \    counter\nend\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"\
    ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))",
  "    num_list = [0,1,2,3,4,5,6,7,8,9,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_num\
    \ = [2,3,5,7,11,13]\n    result = 0\n    for i in num\n        i = parse(Int,i)\n\
    \        if findin(num_list[i],prime_num) != 0\n            result += 1\n    \
    \    end\n    end\n    return result\nend", "    primes = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if in(i, primes)\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    prime_numbers\
    \ = [2, 3, 5, 7, 11, 13]\n    sum = 0\n    for i in num\n        if isa(parse(Int64,\
    \ i), Int64)\n            if parse(Int64, i) in prime_numbers\n              \
    \  sum += 1\n            end\n        else\n            if i == \"A\" || i ==\
    \ \"B\" || i == \"D\"\n                sum += 1\n            end\n        end\n\
    \    end\n    return sum\nend", "    const hexa=\"0123456789ABCDEF\"\n    const\
    \ primes=[2,3,5,7,11,13]\n    c=0\n    for i in num\n        if i in hexa\n  \
    \          if !(parse(Int64,i,base=16) in primes)\n                c+=1\n    \
    \        end\n        end\n    end\n    return c\nend", "    dec_num = parse(Int64,num,base=16)\n\
    \    is_prime(dec_num)\nend", "  return # YOUR CODE HERE\nend", "    num_arr =\
    \ Dict(\n        '0' => 0, '1' => 1, '2' => 2, '3' => 3,\n        '4' => 4, '5'\
    \ => 5, '6' => 6, '7' => 7,\n        '8' => 8, '9' => 9, 'A' => 10, 'B' => 11,\n\
    \        'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15\n    )\n    n = 0\n    for\
    \ i in num\n        if num_arr[i] == 2 || num_arr[i] == 3 || num_arr[i] == 5 ||\
    \ num_arr[i] == 7 || num_arr[i] == 11 || num_arr[i] == 13\n            n += 1\n\
    \        end\n    end\n    return n\nend\nhex_key(\"AB\")", "    n = length(num)\n\
    \    c = 0\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ (num[1] == '2' || num[1] == '3' || num[1] == '5' || \n                num[1]\
    \ == '7' || num[1] == 'B' || num[1] == 'D')\n    end\n    for i in 1:n\n     \
    \   if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || \n\
    \            num[i] == 'B' || num[i] == 'D'\n            c += 1\n        end\n\
    \    end\n    return c\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
