name: HumanEval_35_max_element
language: jl
prompt: "\"\"\"Return maximum element in the vector.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    m::Int64 = l[1]\n    for i in l\n        if i > m\n           \
    \ m = i\n        end\n    end\n    return m\nend", "    max = 0\n    for i in\
    \ l\n        if max < i\n            max = i\n        end\n    end\n    return\
    \ max\nend", "    max = l[1]\n    for i in l\n        if i > max\n           \
    \ max = i\n        end\n    end\n    return max\nend", "    n = length(l)\n  \
    \  local max_l = l[1]\n    for i = 2:n\n        if l[i] > max_l\n            max_l\
    \ = l[i]\n        end\n    end\n    return max_l\nend", "    max = l[1]\n    for\
    \ e in l\n        if e > max\n            max = e\n        end\n    end\n    return\
    \ max\nend", "    max = l[1]\n    for i in l\n        if i > max\n           \
    \ max = i\n        end\n    end\n    return max\nend", "    maximum = l[1]\n \
    \   for i in l\n        if maximum < i\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend", "    if length(l) == 0\n        return 0\n\
    \    end\n    if length(l) == 1\n        return l[1]\n    end\n    m::Int64 =\
    \ max_element(l[2:end])\n    if l[1] > m\n        return l[1]\n    else\n    \
    \    return m\n    end\nend", "    max = l[1]\n    for i in l[2:end]\n       \
    \ if i > max\n            max = i\n        end\n    end\n    return max\nend",
  "    max_el=0\n    for i=1:length(l)\n        if l[i]>max_el\n            max_el=l[i]\n\
    \        end\n    end\n    return max_el\nend", "    max = l[1]\n    for i in\
    \ 1:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n  \
    \  end\n    return max\nend", "    mx = l[1]\n    for i in 2:length(l)\n     \
    \   if l[i] > mx\n            mx = l[i]\n        end\n    end\n    return mx\n\
    end", "    if length(l) == 0\n        error(\"Vector is empty!\")\n    end\n \
    \   max = l[1]\n    for i in 2:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    m = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > m\n            m = l[i]\n        end\n   \
    \ end\n    return m\nend", "    max = l[1]\n    for e in l\n        if e > max\n\
    \            max = e\n        end\n    end\n    return max\nend", "    max = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    max\
    \ = 0\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])", "    max_elem = 0\n    for i in l\n        if i > max_elem\n       \
    \     max_elem = i\n        end\n    end\n    return max_elem\nend", "    max_val\
    \ = 0\n    for i in l\n        if i > max_val\n            max_val = i\n     \
    \   end\n    end\n    return max_val\nend", "    max_element = l[1]\n    for i\
    \ in l\n        if max_element < i\n            max_element = i\n        end\n\
    \    end\n    return max_element\nend", "    max = l[1]\n    for e in l\n    \
    \    if e > max\n            max = e\n        end\n    end\n    return max\nend",
  "    max = l[1]\n    for i = 2:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    max::Int64 = 0\n  \
    \  for i in l\n        if i > max\n            max = i\n        end\n    end\n\
    \    return max\nend", "    result = l[1]\n    for i in l\n        if i > result\n\
    \            result = i\n        end\n    end\n    return result\nend", "    mx\
    \ = -Inf\n    for i in l\n        if i > mx\n            mx = i\n        end\n\
    \    end\n    return mx\nend", "    m = l[1]\n    for i = 2:length(l)\n      \
    \  if l[i] > m\n            m = l[i]\n        end\n    end\n    return m\nend",
  "    n = length(l)\n    max = 0\n    for i in 1:n\n        if l[i] > max\n     \
    \       max = l[i]\n        end\n    end\n    return max\nend", "    max = 0\n\
    \    for i = 1:length(l)\n        if l[i] > max\n            max = l[i]\n    \
    \    end\n    end\n    return max\nend", "    max = 0\n    for i in l\n      \
    \  if i > max\n            max = i\n        end\n    end\n    return max\nend",
  "    \"\"\"Return maximum element in the vector.\n    >>> max_element([1, 2, 3])\n\
    \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    \"\"\"\n    max_i = -1\n    max_j = -1\n    max_sum = -1\n    for i = 1:length(l)\n\
    \        for j = i:length(l)\n            sum = 0\n            for k = i:j\n \
    \               sum += l[k]\n            end\n            if sum > max_sum\n \
    \               max_sum = sum\n                max_i = i\n                max_j\
    \ = j\n            end\n        end\n    end\n    max_sum\nend\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    m = l[1]\n    for x in l[2:end]\n\
    \        if x > m\n            m = x\n        end\n    end\n    return m\nend",
  "    return maximum(l)\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    The vector is empty!\"))\n    end\n    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    p = l[1]\n    for i in l[2:end]\n        if p < i\n        \
    \    p = i\n        end\n    end\n    return p\nend", "    idx = 1\n    maxval\
    \ = l[1]\n    for i in 1:length(l)\n        if l[i] > maxval\n            maxval\
    \ = l[i]\n            idx = i\n        end\n    end\n    return idx\nend", " \
    \   max=l[1]\n    for i in 2:length(l)\n        if l[i]>max\n            max=l[i]\n\
    \        end\n    end\n    return max\nend", "    m = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > m\n            m = l[i]\n        end\n    end\n    return m\n\
    end", "    return reduce(max, l)\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    if length(l) == 0\n        error(\"No element to compare\")\n\
    \    end\n    max = l[1]\n    for i in l\n        if i > max\n            max\
    \ = i\n        end\n    end\n    return max\nend", "    maximum = zero(l[1])\n\
    \    for value in l\n        if value > maximum\n            maximum = value\n\
    \        end\n    end\n    return maximum\nend", "  mx = l[1]\n  for i in l[2:end]\n\
    \    if i > mx\n      mx = i\n    end\n  end\n  return mx\nend", "    m = -Inf\n\
    \    for i in l\n        if i > m\n            m = i\n        end\n    end\n \
    \   return m\nend", "    m = l[1]\n    for i in l\n        if i > m\n        \
    \    m = i\n        end\n    end\n    return m\nend\nmax_element([1, 2, 3])\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    N = length(l)\n  \
    \  m = l[1]\n    for i in 2:N\n        if m < l[i]\n            m = l[i]\n   \
    \     end\n    end\n    return m\nend", "    max = l[1]\n    for i in 1:length(l)\n\
    \        if max < l[i]\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    max = l[1]\n    for i in l[2:end]\n\
    \        if i > max\n            max = i\n        end\n    end\n    return max\n\
    end", "    return findmax(l)[1]\nend", "    res = l[1]\n    for el in l[2:end]\n\
    \        if el > res\n            res = el\n        end\n    end\n    return res\n\
    end", "    max = l[1]\n    for i in l\n        if i > max\n            max = i\n\
    \        end\n    end\n    return max\nend", "    return l[maximum(l)]\nend",
  "    max = l[1]\n    for i in l\n        if i > max\n            max = i\n     \
    \   end\n    end\n    return max\nend", "    maximum = 0\n    for i in l\n   \
    \     if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    max = -Inf\n    for i in 1:length(l)\n        if l[i] >\
    \ max\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   m = l[1]\n    for i in l\n        if i > m\n            m = i\n        end\n\
    \    end\n    return m\nend", "    max_value = l[1]\n    for i in l[2:end]\n \
    \       if i > max_value\n            max_value = i\n        end\n    end\n  \
    \  return max_value\nend", "    max::Int64 = -Inf\n    for i in l\n        if\
    \ i > max\n            max = i\n        end\n    end\n    return max\nend", " \
    \   max_el=l[1]\n    for i in 2:length(l)\n        if l[i]>max_el\n          \
    \  max_el=l[i]\n        end\n    end\n    return max_el\nend\nmax_element([1,\
    \ 2, 3])", "    j = 0 \n    k = 0\n    for i in 1:length(l)\n        if l[i] >\
    \ j\n            j = l[i]\n            k = i\n        end\n    end\n    k\nend",
  "    mx::Int64 = 0 \n    for i = 1:length(l)\n        if mx < l[i]\n           \
    \ mx = l[i]\n        end\n    end\n    return mx\nend", "    max = l[1]\n    for\
    \ i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    imax = 1\n    max_value = l[1]\n    for i\
    \ = 2:length(l)\n        if l[i] > max_value\n            max_value = l[i]\n \
    \           imax = i\n        end\n    end\n    return max_value\nend", "    max\
    \ = l[1]\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend", "    max = l[1]\n    for element in l[2:end]\n\
    \        if element > max\n            max = element\n        end\n    end\n \
    \   return max\nend", "    max = l[1]\n    for i in 1:length(l)\n        if l[i]\
    \ > max\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   ret = l[1]\n    for el in l\n        if el > ret\n            ret = el\n \
    \       end\n    end\n    return ret\nend\nmax_element([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])", "    mx = -Inf\n    for i in 1:length(l)\n        if l[i]\
    \ > mx\n            mx = l[i]\n        end\n    end\n    return mx\nend", "  \
    \  temp=l[1]\n    for i in 2:length(l)\n        if l[i]>temp\n            temp=l[i]\n\
    \        end\n    end\n    return temp\nend", "    m::Int64 = l[1]\n    for i\
    \ in l\n        if i > m\n            m = i\n        end\n    end\n    return\
    \ m\nend", "    m = l[1]\n    for i = 2:length(l)\n        if m < l[i]\n     \
    \       m = l[i]\n        end\n    end\n    return m\nend", "    current_max =\
    \ l[1]\n    for i in l\n        if i > current_max\n            current_max =\
    \ i\n        end\n    end\n    return current_max\nend", "    return maximum(l)\n\
    end", "    m = 0\n    for i in 1:length(l)\n        if l[i]>m\n            m =\
    \ l[i]\n        end\n    end\n    return m\nend", "    for i in 1:length(l)\n\
    \        if l[i]>l[i+1]\n            temp=l[i]\n            l[i]=l[i+1]\n    \
    \        l[i+1]=temp\n        end\n    end\n    temp\nend", "    # \u0441\u043E\
    \u0437\u0434\u0430\u0435\u043C \u043F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\
    \u0443\u044E \u0434\u043B\u044F \u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\
    \ \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 \n    max_el=0 \n    # \u0446\
    \u0438\u043A\u043B \u043F\u043E \u0432\u0441\u0435\u043C \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\u0430\u043C \u0432\u0435\u043A\u0442\u043E\u0440\u0430\n  \
    \  for i in 1:length(l)\n        # \u0435\u0441\u043B\u0438 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442 \u0432\u0435\u043A\u0442\u043E\u0440\u0430 \u0431\u043E\
    \u043B\u044C\u0448\u0435 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\
    \u043D\u043E\u0433\u043E, \u0442\u043E \u0437\u0430\u043C\u0435\u043D\u044F\u0435\
    \u043C \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u043D\u0430 \u044D\u0442\u043E\u0442\
    \n        if l[i]>max_el\n            max_el=l[i]\n        end\n    end\n    #\
    \ \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C \u043C\u0430\u043A\
    \u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\n    return max_el\nend", "    max_element = l[1]\n    for\
    \ e in l\n        if max_element < e\n            max_element = e\n        end\n\
    \    end\n    return max_element\nend", "    \n    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    return maximum(l)\nend", "    i::Int64 = l[1]\n    for k in\
    \ l\n        if k > i\n            i = k\n        end\n    end\n    return i\n\
    end", "    return maximum(l)\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    max::Int64 = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > max\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   maximum = 0\n    for i in l\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend", "    max = 0\n    for item\
    \ in l\n        if max < item\n            max = item\n        end\n    end\n\
    \    return max\nend", "  mx = l[1] \n  for i = 2:length(l) \n    if l[i] > mx\
    \ \n      mx = l[i] \n    end \n  end \n  return mx \nend \n \nmax_element([1,\
    \ 2, 3])\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    max_element\
    \ = l[1]\n    for i in l\n        if i > max_element\n            max_element\
    \ = i\n        end\n    end\n    return max_element\nend", "    n = length(l)\n\
    \    if n == 1 \n        return l[1]\n    else\n        m = max_element(l[1:n-1])\n\
    \        if m > l[n]\n            return m\n        else\n            return l[n]\n\
    \        end\n    end\nend", "    if length(l) == 0\n        error(\"Empty vector.\"\
    );\n    end\n    max = l[1]\n    for i in l\n        if i > max\n            max\
    \ = i\n        end\n    end\n    return max\nend\nprintln(max_element([1, 2, 3]))\n\
    println(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    a = 0\n \
    \   for i in l\n        if i > a\n            a = i\n        end\n    end\n  \
    \  return a\nend", "    max = l[1]\n    for i = 2:length(l)\n        if l[i] >\
    \ max\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   max = l[1]\n    for i = 2:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    t = l[1]\n    for i\
    \ in l\n        if t < i\n            t = i\n        end\n    end\n    return\
    \ t\nend", "    m::Int64 = l[1]\n    for i in l[2:end]\n        if i > m\n   \
    \         m = i\n        end\n    end\n    return m\nend", "    \"\"\"\n    This\
    \ function takes a vector and return the maximum element in it.\n    \"\"\"\n\
    \    max_element = l[1]\n    for i in l\n        if max_element <= i\n       \
    \     max_element = i\n        end\n    end\n    return max_element\nend", " \
    \   m::Int64 = l[1]\n    for i in 2:length(l)\n        if l[i] > m\n         \
    \   m = l[i]\n        end\n    end\n    return m\nend", "    return maximum(l)\n\
    end", "    if length(l) == 0\n        return -1\n    end\n    max = l[1]\n   \
    \ for i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n      \
    \  end\n    end\n    return max\nend", "    n = length(l)\n    if n == 1\n   \
    \     return l[1]\n    else\n        mid = n \xF7 2\n        return max(max_element(l[1:mid]),\
    \ max_element(l[mid+1:n]))\n    end\nend\n@show max_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])", "    max_value = l[1]\n    for i = 2:length(l)\n  \
    \      if l[i] > max_value\n            max_value = l[i]\n        end\n    end\n\
    \    return max_value\nend", "    max = l[1]\n    for i in 2:length(l)\n     \
    \   if l[i] > max\n            max = l[i]\n        end\n    end\n    return max\n\
    end", "    # Initialize max as first element\n    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    tmp = -Inf\n    for i = 1:length(l)\n        if l[i] > tmp\n\
    \            tmp = l[i]\n        end\n    end\n    return tmp\nend", "    res\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > res\n            res = l[i]\n\
    \        end\n    end\n    return res\nend", "    if size(l, 1) == 0\n       \
    \ return 0\n    end\n    max_l = l[1]\n    for element in l[2:end]\n        if\
    \ element > max_l\n            max_l = element\n        end\n    end\n    return\
    \ max_l\nend\nprintln(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
  "    m = l[1]\n    for e in l\n        if e > m\n            m = e\n        end\n\
    \    end\n    return m\nend", "    max = l[1]\n    for i in l\n        if i >\
    \ max\n            max = i\n        end\n    end\n    return max\nend", "    max\
    \ = 0\n    for i = 1:length(l)\n        if l[i] > max\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "    newmax = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > newmax\n            newmax = l[i]\n        end\n\
    \    end\n    return newmax\nend\nprintln(max_element([1, 2, 3]))\nprintln(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    m = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > m\n            m = l[i]\n        end\n    end\n    return m\n\
    end", "    \"\"\"Returns maximum element in the array using `reduce` function.\"\
    \"\"\n    return reduce(max, l)\nend", "    _max = 0\n    for i = 1:length(l)\n\
    \        if l[i] > _max\n            _max = l[i]\n        end\n    end\n    return\
    \ _max\nend", "    max = l[1]\n    for i in 2:length(l)\n        if max < l[i]\n\
    \            max = l[i]\n        end\n    end\n    return max\nend;\nprintln(max_element([1,\
    \ 2, 3]))\nprintln(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", " \
    \   maxval = 0\n    for i in l\n        if i > maxval\n            maxval = i\n\
    \        end\n    end\n    return maxval\nend", "    local max::Int64\n    max\
    \ = l[1]\n    for v in l[2:end]\n        if v > max\n            max = v\n   \
    \     end\n    end\n    return max\nend", "    m = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > m\n            m = l[i]\n        end\n    end\n    return m\n\
    end\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    max = l[1]\n\
    \    for i in 1:length(l)\n        if l[i] > max\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "    mx = l[1]\n    for i in l\n   \
    \     if i > mx\n            mx = i\n        end\n    end\n    return mx\nend",
  "  return maximum(l)\nend", "    max = l[1]\n    for i in l\n        if i > max\n\
    \            max = i\n        end\n    end\n    return max\nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) == 1\n        return l[1]\n\
    \    end\n    m = max_element(l[2:end])\n    if l[1] >= m\n        return l[1]\n\
    \    else\n        return m\n    end\nend", "    \"\"\"\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\n    result = l[1]\n    for i in 2:length(l)\n        if\
    \ l[i] > result\n            result = l[i]\n        end\n    end\n    return result\n\
    end", "    ma= l[1]\n    for i in l\n        if i > ma\n            ma = i\n \
    \       end\n    end\n    return ma\nend", "    \n    max = l[1]\n    for i in\
    \ 1:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n  \
    \  end\n    return max\nend", "    max_value = Int64[]\n    for i in l\n     \
    \   if i > max_value\n            max_value = i\n        end\n    end\n    return\
    \ max_value\nend\n    ", "    max_elem = l[1]\n    for i in l\n        if i >\
    \ max_elem\n            max_elem = i\n        end\n    end\n    return max_elem\n\
    end", "    i = 1\n    max_val = l[1]\n    while i <= length(l)\n        max_val\
    \ = max(max_val, l[i])\n        i = i + 1\n    end\n    return max_val\nend",
  "    y = l[1]\n    for i in 2:length(l)\n        if l[i] > y\n            y = l[i]\n\
    \        end\n    end\n    return y\nend", "    cur_max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > cur_max\n            cur_max = l[i]\n        end\n    end\n\
    \    return cur_max\nend", "    max = 0\n    for i in l\n        if i > max\n\
    \            max = i\n        end\n    end\n    return max\nend", "    max = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "    max_element = l[1]\n    for i in\
    \ 1:length(l)\n        if l[i] > max_element\n            max_element = l[i]\n\
    \        end\n    end\n    return max_element\nend", "    x = 0\n    j = 0\n \
    \   for i = 1:length(l)\n        if l[i] > x\n            x = l[i]\n         \
    \   j = i\n        end\n    end\n    return x\nend", "    m = -Inf\n    for i\
    \ in l\n        if m < i\n            m = i\n        end\n    end\n    return\
    \ m\nend\nmax_element([1, 2, 3])", "    return maximum(l)\nend\n \n \n@testset\
    \ \"Testing the function\" begin\n    @test max_element([1, 2, 3]) == 3\n    @test\
    \ max_element([-5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\nend\n \n \n@testset\
    \ \"Testing the function with statistics\" begin\n    @test statistics(max_element,\
    \ Float64[i for i in 1:100000])\nend\n \n \n@testset \"A wrong test\" begin\n\
    \    @test max_element([1, 2, 3]) == 1\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    max = l[1]\n    for i in l\n        if max < i\n           \
    \ max = i\n        end\n    end\n    return max\nend", "    if length(l) == 0\n\
    \        return 0\n    end\n    if length(l) == 1\n        return l[1]\n    end\n\
    \    m1 = l[1]\n    m2 = max_element(l[2:end])\n    if m1 > m2\n        return\
    \ m1\n    else\n        return m2\n    end\nend", "    return reduce(max, l)\n\
    end", "    \n    maximum = 0\n    for i in l\n        if i > maximum\n       \
    \     maximum = i\n        end\n    end\n    return maximum\nend", "    m = l[1]\n\
    \    for i = 2:length(l)\n        if l[i] > m\n            m = l[i]\n        end\n\
    \    end\n    return m\nend", "  #set initial max\n  max::Int64 = l[1]\n  for\
    \ i in l\n    if i > max\n      max = i\n    end\n  end\n  return max\nend", " \
    \   max = -10000000000\n    for i = 1:length(l)\n        if l[i] > max\n     \
    \       max = l[i]\n        end\n    end\n    return max\nend\n    \n# Here is\
    \ a test cell to check if `max_element` is correct. It is good practice to make\
    \ sure your code is correct\n# before submitting it!", "    i = l[1]\n    for\
    \ j in l\n        if j > i\n            i = j\n        end\n    end\n    return\
    \ i\nend", "    m = l[1]\n    for e in l[2:end]\n        if e > m\n          \
    \  m = e\n        end\n    end\n    return m\nend", "    return l[argmax(l)]\n\
    end", "    return maximum(l)\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    max = l[1]\n    for i in 2:length(l)\n        if l[i] > max\n\
    \            max = l[i]\n        end\n    end\n    return max\nend", "    max_value\
    \ = l[1]\n    i = 2\n    while i<=length(l)\n        if l[i]>max_value\n     \
    \       max_value = l[i]\n        end\n        i = i+1\n    end\n    return max_value\n\
    end", "    return maximum(l)\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    current_max = l[1]\n    for i in l\n        if i > current_max\n\
    \            current_max = i\n        end\n    end\n    return current_max\nend",
  "    # the vector is non empty and contains integers\n    # so we can begin by taking\
    \ the first element as the maximum\n    # and then compare with the others elements\n\
    \    max_elm = l[1]\n    for i in l[2:end]\n        if i > max_elm\n         \
    \   max_elm = i\n        end\n    end\n    return max_elm\nend", "    c_max =\
    \ -2^63\n    for i in 1:length(l)\n        if l[i] > c_max\n            c_max\
    \ = l[i]\n        end\n    end\n    return c_max\nend", "    m::Int64 = 0\n  \
    \  for i::Int64 in 1:length(l)\n        if l[i] > m\n            m = l[i]\n  \
    \      end\n    end\n    return m\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    x = l[1]\n    for i in l\n        if i > x\n            x =\
    \ i\n        end\n    end\n    return x\nend", "  m = l[1]\n  for i in l[2:end]\n\
    \    if i > m\n      m = i\n    end\n  end\n  return m\nend", "    m = l[1] \n\
    \    for e in l \n        if e > m \n            m = e \n        end \n    end\
    \ \n    return m \nend \nmax_element([1, 2, 3])\nmax_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n\"\"\"Return sum of elements in the vector.\n    >>>\
    \ sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n    145\n    \"\"\"", "    maxtmp = 0\n    max_val = 0\n \
    \   i = 1\n    while i <= length(l)\n        maxtmp = l[i]\n        if (maxtmp\
    \ >= max_val)\n            max_val = maxtmp\n        end\n        i = i + 1\n\
    \    end\n    return max_val\nend", "    for i in l\n        if i == maximum(l)\n\
    \            return i\n        end\n    end\nend", "    if length(l) == 0\n  \
    \      return -1\n    end\n    res = l[1]\n    for i = 2:length(l)\n        if\
    \ l[i] > res\n            res = l[i]\n        end\n    end\n    return res\nend\n\
    \ ", "    return maximum(l)\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    m = l[1]\n    for e in l\n        if e > m\n            m =\
    \ e\n        end\n    end\n    return m\nend", "    max::Int64 = 0\n    for i\
    \ in l\n        if i > max\n            max = i\n        end\n    end\n    return\
    \ max\nend", "    t = l[1]\n    for i = 2:length(l)\n        if l[i] > t\n   \
    \         t = l[i]\n        end\n    end\n    return t\nend", "    \n    x=0\n\
    \    for i in l\n        if i>x\n            x=i\n        end\n    end\n    return\
    \ x\nend", "    x=0\n    for i in l\n        if i>x\n            x=i\n       \
    \ end\n    end\n    return x\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    if length(l) < 1\n        error(\"Cannot find max of an empty\
    \ vector.\")\n    end\n    max = l[1]\n    for e in l\n        if e > max\n  \
    \          max = e\n        end\n    end\n    return max\nend", "    max_element\
    \ = l[1]\n    for i in l[2:end]\n        if i > max_element\n            max_element\
    \ = i\n        end\n    end\n    return max_element\nend", "    if length(l) ==\
    \ 0\n        return 0\n    end\n    if length(l) == 1\n        return l[1]\n \
    \   end\n    m = l[1]\n    for i in l[2:end]\n        if i > m\n            m\
    \ = i\n        end\n    end\n    return m\nend", "    return l[1] + sum([max(0,\
    \ x) for x in l[2:end]])\nend", "    for i in l\n        if i > max_element(l)\n\
    \            return i\n        end\n    end\nend\nmax_element([1, 2, 3])", " \
    \   return max(l)\nend", "    m = l[1]\n    for i = 2:length(l)\n        if l[i]\
    \ > m\n            m = l[i]\n        end\n    end\n    return m\nend", "    \"\
    \"\"Return maximum element in the vector.\n    >>> max_element([1, 2, 3])\n  \
    \  3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    \"\"\"\n    m = l[1]\n    for x in l[2:end]\n        if x > m\n         \
    \   m = x\n        end\n    end\n    return m\nend", "    a = 0\n    for i in\
    \ l\n        if i > a\n            a = i\n        end\n    end\n    return a\n\
    end", "    n = length(l)\n    current_max = l[1]\n    for k = 2:n\n        if\
    \ current_max < l[k]\n            current_max = l[k]\n        end\n    end\n \
    \   return current_max\nend", "    s = 0\n    for i in l\n        if i > s\n \
    \           s = i\n        end\n    end\n    return s\nend\n    \n    ", "   \
    \ max = l[1]\n    for x in l\n        if x > max\n            max = x\n      \
    \  end\n    end\n    return max\nend", "    maximum = l[1]\n    for i in l\n \
    \       if maximum < i\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    \"\"\"\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max = l[1]\n\
    \    for i in l[2:end]\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend\n# If a function is not supposed to return a value,\
    \ we use the\n# `Void` type (`return` is optional).", "    max = l[1]\n    for\
    \ i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    return maximum(l)\nend", "    max_elm = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > max_elm\n            max_elm = l[i]\n\
    \        end\n    end\n    return max_elm\nend", "    max_num = 0\n    for i in\
    \ l\n        if i > max_num\n            max_num = i\n        end\n    end\n \
    \   return max_num\nend", "    out = l[1]\n    for i = 2:length(l)\n        if\
    \ l[i] > out\n            out = l[i]\n        end\n    end\n    return out\nend",
  "    elt = l[1]\n    for i in l\n        if i > elt\n            elt = i\n     \
    \   end\n    end\n    return elt\nend", "    max=l[1]\n    for e in l[2:end]\n\
    \        if e>max\n            max=e\n        end\n    end\n    return max\nend",
  "    max = l[1]\n    for i in l\n        if i > max\n            max = i\n     \
    \   end\n    end\n    return max\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    x = 0\n    for i = 1:length(l)\n        if l[i] > x\n      \
    \      x = l[i]\n        end\n    end\n    return x\nend\n \nmax_element([1, 2,\
    \ 3])\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "    l_max = l[1]\n\
    \    for x in l\n        if x > l_max\n            l_max = x\n        end\n  \
    \  end\n    return l_max\nend\nprintln(max_element([1, 2, 3]))\nprintln(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    max = l[1]\n    for x in l\n  \
    \      if x > max\n            max = x\n        end\n    end\n    return max\n\
    end", "    m = l[1]\n    for e in l[2:end]\n        if e > m\n            m =\
    \ e\n        end\n    end\n    return m\nend", "    element = l[1]\n    for i\
    \ in 1:length(l)\n        if l[i] > element\n            element = l[i]\n    \
    \    end\n    end\n    return element\nend", "    max_elem = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > max_elem\n            max_elem = l[i]\n     \
    \   end\n    end\n    return max_elem\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
