name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["   is_bored = 0\n   last_sep = ' '\n   for c in S\n      if (last_sep\
    \ in ['.', '?', '!']) & (c == 'I')\n         is_bored += 1\n      end\n      last_sep\
    \ = c\n   end\n   return is_bored\nend", "    boredoms = 0\n    i = 1\n    while\
    \ i <= length(S)\n        while i <= length(S) && S[i] != 'I' && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!'\n            i += 1\n        end\n        if i >\
    \ length(S)\n            break\n        end\n        if S[i] == 'I'\n        \
    \    if i == 1 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!'\n          \
    \      boredoms += 1\n            end\n        end\n        i += 1\n    end\n\
    \    return boredoms\nend", "    split = split(S, [\".\", \"?\", \"!\"])\n   \
    \ boredoms = 0\n    for sentence in split\n        if sentence[1] == \"I\"\n \
    \           boredoms += 1\n        end\n    end\n    return boredoms\nend", " \
    \   count = 0\n    lines = split(S, ['.', '?', '!'])\n    for i in lines\n   \
    \     if starts_with(i, \"I\")\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for w in split(S, \".\")\n      \
    \  count += (w[1] == 'I')\n    end\n    return count\nend", "    return count(map(x->x[1]=='I',split(S,\"\
    .?!\")))\nend\n ", "    sentences = split(S, \"!\")\n    num_boredoms = 0\n  \
    \  for s in sentences\n        num_boredoms += sum(1 for word in split(s, \" \"\
    ) if word == \"I\")\n    end\n    return num_boredoms\nend", "    words = split(S,\
    \ r\" |\\.\" | '?' | '!') \n    cnt = 0 \n    for i in words \n        if \"I\"\
    \ == i[1] \n            cnt += 1 \n        end \n    end \n    return cnt \nend",
  "    sentences = split(S, r\"[!.?]\")\n    boredoms = 0\n    for sentence in sentences\n\
    \        if occursin(\"I\", sentence)\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend", "    return count(s -> occursin(\"I \", split(s,\
    \ \".!?\"))[1], split(S, \".!?\"))\nend", "    num_boredoms = 0\n    split_str\
    \ = split(S, [\".\", \"?\", \"!\"])\n    for s in split_str\n        if s[1] ==\
    \ \"I\"\n            num_boredoms += 1\n        end\n    end\n    return num_boredoms\n\
    end\nprintln(is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    ))", "    num_boredoms = 0\n    for (index, word) in enumerate(S)\n        if\
    \ word == \"I\"\n            num_boredoms += 1\n        end\n    end\n    return\
    \ num_boredoms\nend", "    len_S = length(S)\n    count_bored = 0\n    for i in\
    \ 1:len_S-1\n        if S[i] == 'I' && (S[i+1] == ' ' || S[i+1] == '.' || S[i+1]\
    \ == '?' || S[i+1] == '!')\n            count_bored += 1\n        end\n    end\n\
    \    return count_bored\nend", "    bored_num = 0\n    for word in split(S)\n\
    \        if word == \"I\"\n            bored_num += 1\n        end\n    end\n\
    \    return bored_num\nend", "  b=0\n  for word in split(S, ['.', '?', '!'])\n\
    \    word=split(word)\n    if (word[1]==\"I\")\n      b+=1\n    end\n  end\n \
    \ return b\nend", "    return 0\nend", "    boredoms = 0\n    words = split(S,\
    \ r\"[.?!]\")\n    for w in words\n        w = split(w)\n        if length(w)\
    \ > 0 && w[1] == \"I\"\n            boredoms += 1\n        end\n    end\n    return\
    \ boredoms\nend", "    return sum(is_bored(s) for s in split(S, r\"\\.|\\!|\\\
    ?\"))\nend", "    arr = split(S, r\"[.!?]\")\n    i = 0\n    for a in arr\n  \
    \      if contains(a, \"I\") \n            i += 1\n        end\n    end\n    return\
    \ i\nend ", "    n = count(split(S, r\"[!.?]\"), s -> s[1] == 'I')\n    return\
    \ n\nend", "    words = split(S, r\"[.!?]\")\n    boredoms = 0\n    for word in\
    \ words\n        if startswith(word, \"I\")\n            boredoms += 1\n     \
    \   end\n    end\n    return boredoms\nend", "    \n    # Split string by !,?,.\n\
    \    q = split(S, [\"!\",\"?\",\".\"])\n    \n    # Split by whitespace and get\
    \ the first value, then count the matches\n    boredom = [split(i, \" \")[1] for\
    \ i in q]\n    boredom_count = length(findall(r\"^I.*\", boredom))\n    \n   \
    \ return boredom_count\nend", "    num_boredoms = 0 \n    flag = false\n    for\
    \ word in split(S, [\".\", \"!\", \"?\"])\n        if flag == true\n         \
    \   num_boredoms += 1\n            flag = false\n        end\n        if word[1]\
    \ == 'I'\n            flag = true\n        end\n    end\n    return num_boredoms\n\
    end", "    \n    # split the string by \".\"\n    c = split(S, \".\")\n    \n\
    \    # initialize a counter\n    counter = 0\n    \n    # loop over each element\
    \ of c and look for \"I\"\n    for s in c\n        if occursin(\"I\", s)\n   \
    \         counter += 1\n        end\n    end\n    \n    # return the counter\n\
    \    return counter\nend\n \nis_bored(\"The sky is blue. The sun is shining. I\
    \ love this weather\")", "    sentences = split(S, r\"[.!?]\") # Split sentences\
    \ by punctuation mark\n    count = 0\n    for sentence in sentences\n        first_word\
    \ = split(sentence)[1] # Split first word from sentence\n        if first_word\
    \ == \"I\"\n            count += 1\n        end\n    end\n    return count\nend",
  "    # Your code here\nend\n ", "    total_boredom = 0\n    sentences = split(S,\
    \ ['.', '?', '!'])\n    for s in sentences\n        words = split(s)\n       \
    \ if words[1] == \"I\"\n            total_boredom += 1\n        end\n    end\n\
    \    return total_boredom\nend\n ", "    return length(split(S, r\"\\.|\\?|\\\
    !\"))-1\nend\n \n@test is_bored(\"Hello world\") == 0\n@test is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\") == 1", "    n = length(S)\n\
    \    k = 0\n    for i in S\n        if i == 'I'\n            k += 1\n        end\n\
    \    end\n    return k\nend", "    count = 0\n    if length(S) < 2 \n        return\
    \ count\n    end\n    for word in split(S)\n        if word == \"I\"\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "    boredoms\
    \ = 0\n    sentence = split(S, ['.', '?', '!'])\n    for sentence in sentence\n\
    \        words = split(sentence)\n        if length(words) > 0 && uppercase(words[1])\
    \ == \"I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    n = 0\n    for x in split(S, r\"\\.|\\?|\\!\")\n        if startswith(strip(x),\
    \ \"I\")\n            n = n + 1\n        end\n    end\n    return n\nend", " \
    \ sentences = split(S, \".!?\")\n  count = 0\n  for i in sentences\n    if split(i)[1]\
    \ == \"I\"\n      count += 1\n    end\n  end\n  return count\nend\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")", "    return length(split(S,\
    \ ['I', ' '], keep=false)) - 1 \nend\n    \n    \n    \n    \n    \n    \n   \
    \ \"\"\"\n    You'll be given a string of words, and your task is to calculate\
    \ the boredom\n    score of the string. The boredom score of a string is the sum\
    \ of each\n    consecutive pair of words. Two words are considered a pair if the\
    \ last\n    character of one word matches the first character of the other word.",
  "    sentances = split(S, r\"[.?!]\")\n    count = 0\n    for i = 1:length(sentances)\n\
    \        words = split(sentances[i])\n        if words[1] == \"I\"\n         \
    \   count += 1\n        end\n    end\n    return count\nend", "    num_boredoms\
    \ = 0\n    num_periods = 0\n    for i in S\n        if i == 'I' && num_periods\
    \ < 1\n            num_boredoms += 1\n        end\n        if i == '.' || i ==\
    \ '?' || i == '!'\n            num_periods += 1\n        else\n            num_periods\
    \ = 0\n        end\n    end\n    return num_boredoms\nend", "    s = split(S,\
    \ \".!?\", keepempty=false)\n    count = 0\n    for i in s\n        if startswith(i,\
    \ \"I\")\n            count += 1\n        end\n    end\n    return count\nend",
  "    sentences = split(S, r\"[\\.!\\?]+\")\n    boredoms = 0\n    for sentence in\
    \ sentences\n        if sentence[1] == 'I'\n            boredoms += 1\n      \
    \  end\n    end\n    return boredoms\nend", "    b = 0\n    for w in eachmatch(r\"\
    ([^.!?]*?I[^.!?]*?[.!?])\", S)\n        b += 1\n    end\n    return b\nend\nprintln(is_bored(\"\
    Hello world\"))\nprintln(is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\"))", "    boredoms = 0\n    for word in split(S, ['.', '?', '!'])\n\
    \        if word[1] == 'I' \n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend", "  w = split(S, '.')\n  c = 0\n  for i in w\n    if\
    \ first(i) == 'I'\n      c += 1\n    end\n  end\n  return c\nend", "    words\
    \ = split(S,r\"\\.|\\?|\\!\")\n    count = 0\n    for word in words\n        if\
    \ word[1] == 'I'\n            count += 1\n        end\n    end\n    return count\n\
    end\n\"\"\"\n    You'll be given a string containing only lowercase letters.\n\
    \    You'll need to remove the least number of letters to make the string a palindrome.\n\
    \    There are a few rules.\n   \n    - You can't rearrange the letters.\n   \
    \ - You can only remove one letter at a time.\n    - You are only allowed to remove\
    \ letters that are adjacent to one another.\n   \n    For example:\n    >>> make_palindrome(\"\
    a\")\n    0\n    >>> make_palindrome(\"ab\")\n    1\n    >>> make_palindrome(\"\
    abca\")\n    1\n    >>> make_palindrome(\"abcba\")\n    0\n    >>> make_palindrome(\"\
    abcda\")\n    2\n    \"\"\"", "    # Split S into sentences \n    sentences =\
    \ split(S, ['.', '?', '!'])\n    # Split each sentence into words \n    words\
    \ = [split(sentence) for sentence in sentences]\n    # Count the sentences that\
    \ start with \"I\"\n    return count(x -> x[1] == \"I\", words)\nend\n \n# Example\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n ", " \
    \   sentences = split(S, \"\\\\.\")\n    b = 0\n    for sentence in sentences\n\
    \        if sentence[1] == 'I'\n            b += 1\n        end\n    end\n   \
    \ return b\nend", "    count = 0\n    sentence = split(S, [\".\" \"?\" \"!\"])\n\
    \    for i in sentence\n        word = split(i)\n        if length(word) > 0\n\
    \            if word[1] == \"I\"\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend", "    return length(split(lowercase(S),r\"\
    i\\b\")) - 1\nend", "    if S == \"\"\n        return 0\n    end\n    words =\
    \ split(S, [',', ' ', '!', '.', '?', ';', ':'])\n    cnt = 0\n    for i in 1:length(words)\n\
    \        if length(words[i]) > 0 && words[i][1] == 'I'\n            cnt += 1\n\
    \        end\n    end\n    return cnt\nend", "    boredoms = 0\n    i = 1\n  \
    \  while i < length(S)\n        if S[i] == 'I'\n            if S[i-1] == ' '\n\
    \                boredoms += 1\n            end\n        end\n        i += 1\n\
    \    end\n    return boredoms\nend", "    split_sentence = split(S,'.')\n    count_boredom\
    \ = 0\n    for sent in split_sentence\n        if is_bored_sentence(sent)\n  \
    \          count_boredom += 1\n        end\n    end\n    return count_boredom\n\
    end", "    cnt = 0\n    for t in split(S, \".\")\n        if startswith(t, \"\
    I\")\n            cnt += 1\n        end\n    end\n    return cnt\nend", "    boredom_count\
    \ = 0\n    sent_end = [\".\", \"?\", \"!\"]\n    sentences = split(S, sent_end)\n\
    \    for sent in sentences\n        if startswith(lowercase(sent), \"i\")\n  \
    \          boredom_count += 1\n        end\n    end\n    return boredom_count\n\
    end", "   count = 0\n   for token in split(S, r\"[!.?]\")\n       if starts_with(lowercase(token),\
    \ \"i\") == true\n           count += 1\n       end\n   end\n   return count\n\
    end", "    return count(s -> (lowercase(s) == \"i\"), split(S, r\"\\!|\\.|\\?\"\
    ))\nend", "    \n    # Match I + word/whitespace + .?!\n    m = match(r\"(I)(\\\
    s)(\\w+)(\\.)|(I)(\\s)(\\w+)(\\?)|(I)(\\s)(\\w+)(\\!)\", S)\n    \n    # Count\
    \ number of matches\n    n_matches = length(m)\n    \n    return n_matches\nend",
  "    n = 0\n    str_array = split(S,\".\")\n    for s in str_array\n        str_s\
    \ = split(s, \" \")\n        if str_s[1] == \"I\"\n            n = n + 1\n   \
    \     end\n    end\n    return n\nend", "    count = 0\n    for i = 1:length(S)\n\
    \        if S[i] == 'I'\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    return count(split(S, r\"(?<=[!?.])\"), \"I\")\nend", "  \
    \  count = 0\n    flag = false\n    for i in S\n        if flag == true\n    \
    \        if i == '.' || i == '?' || i == '!'\n                flag = false\n \
    \           end\n        else\n            if i == 'I'\n                flag =\
    \ true\n                count += 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    boredoms = 0\n    sentences = split(S, [\".\", \"\
    !\", \"?\"])\n    for s in sentences\n        if startswith(lowercase(s), \"i\"\
    )\n            boredoms += 1\n        end\n    end\n    return boredoms\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    x = split(S,r\"\
    [!\\.\\?]\")\n    bored = 0\n    for i in x\n        if (i[1] == 'I') \n     \
    \       bored = bored + 1\n        end\n    end\n    return bored\nend ", "  \
    \  count = 0 \n    i = 1\n    while i <= length(S)\n        while i <= length(S)\
    \ && !(S[i] == ' ')\n            i += 1\n        end\n        count += (S[i-2]\
    \ == 'I')\n        i += 1\n    end\n    return count\nend\nS = readline()\nprintln(is_bored(S))\n\
    \ ", "  return count(s->s[1]=='I', split(S, [',' '.' '!' '?']))\nend", "    n\
    \ = length(S)\n    count = 0\n    for i in 1:n\n        if S[i] == 'I'\n     \
    \       count += 1\n        end\n    end\n    return count\nend", "    n = 0\n\
    \    for s in split(S, [';', '!', '.', '?'])\n        if first(split(s)) == \"\
    I\"\n            n += 1\n        end\n    end\n    return n\nend", "    boredoms\
    \ = 0\n    for (i,s) in enumerate(S)\n        if S[i] == 'I' && S[i-1] == ' '\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend", " \
    \   counter = 0\n    for (index, value) in enumerate(S)\n        if index != 1\n\
    \            if value == \"I\"\n                counter = counter + 1\n      \
    \      end\n        end\n    end\n    return counter\nend\nend", "    c = 0\n\
    \    ss = split(S, [\".\" , \"?\" , \"!\"])\n    for s in ss\n        if split(s)[1]\
    \ == \"I\"\n            c += 1\n        end\n    end\n    return c\nend", "  \
    \  # your code here\n    boredoms = 0\n    i = 0\n    while i < length(S)\n  \
    \      if S[i] == 'I'\n            for j in i+1:length(S)\n                if\
    \ S[j] == '.' || S[j] == '?' || S[j] == '!'\n                    i = j\n     \
    \               boredoms += 1\n                    break\n                end\n\
    \            end\n        end\n        i += 1\n    end\n    return boredoms\n\
    end", "    N = length(S)\n    count = 0\n    i = 1\n    while i <= N\n       \
    \ if i <= N-1 && S[i] == 'I' && S[i+1] == ' '\n            count += 1\n      \
    \  end\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\n            i +=\
    \ 1\n        end\n        i += 1\n    end\n    return count\nend", "    j = 0\n\
    \    for i in 1:length(S)\n        if S[i] == '.'\n            if S[i-4:i-1] ==\
    \ \"I am\"\n                j = j + 1\n            end\n        end\n    end\n\
    \    return j\nend", "    sentences = split(S, [';','?','.'])\n    boredoms =\
    \ 0\n    for sentence in sentences\n        if startswith(sentence,\"I\")\n  \
    \          boredoms += 1\n        end\n    end\n    return boredoms\nend", " \
    \   return count(x->x[1]=='I', split(S, [';',',','.','!','?']))\nend", "    return\
    \ length(matchall(r\"(?<=\\.)\\s*I\", S))\nend", "    boredoms = 0\n    for s\
    \ in split(S, r\"[.?!]\")\n        if starts_with(s, \"I\")\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    if occursin(r\"\
    (?i)^i\\s\", S)\n        return 1\n    else\n        return 0\n    end\nend",
  "    num_bored = 0 \n    num_end = 0\n    for i = 1:length(S)\n        if S[i] ==\
    \ 'I'\n            for j = i+1:length(S)\n                if S[j] == '.' || S[j]\
    \ == '?' || S[j] == '!'\n                    num_end += 1\n                  \
    \  break\n                end\n            end\n            if num_end != 0\n\
    \                num_bored += 1\n                num_end = 0\n            end\n\
    \        end\n    end\n    return num_bored\nend", "    count = 0\n    for word\
    \ in split(S)\n        if word == \"I\"\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    sentence = split(S,\".\")\n    boredoms\
    \ = 0\n    for i in sentence\n        if startswith(i,\"I\")\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    cnt = 0\n    if\
    \ length(S) > 2\n        if S[1] == 'I'\n            cnt += 1\n        end\n \
    \   end\n    return cnt\nend", "  counter = 0 \n  for token in split(S, [\".\"\
    ,\"!\",\"?\"])\n    if startswith(token, \"I\")\n      counter += 1\n    end\n\
    \  end\n  return counter\nend", "    boredoms = 0\n    for sentence in split(S,\
    \ [\".\", \"?\", \"!\"])\n        for word in split(sentence)\n            if\
    \ word == \"I\"\n                boredoms += 1\n            end\n        end\n\
    \    end\n    return boredoms\nend", "    n = 0\n    for sentence in split(S,\
    \ [\".\", \"!\", \"?\"])\n        if startswith(sentence, \"I\")\n           \
    \ n = n + 1\n        end\n    end\n    return n\nend", "    # S = tolowercase(S)\
    \ # convert to lower case\n    N = length(S)\n    idx = 0\n    for i in 1:N\n\
    \        if i < N-2 && S[i] == 'i' && S[i+1] == ' '\n            idx += 1\n  \
    \      end\n    end\n    return idx\nend", "    words = split(S,r\"(\\.|\\?|!)\\\
    s\")\n    boredoms = 0\n    for i in words\n        if i != \"\"\n           \
    \ if i[1] == \"I\"\n                boredoms += 1\n            end\n        end\n\
    \    end\n    return boredoms\nend", "    S1 = split(S, \".?!\")\n    count =\
    \ 0\n    for s in S1\n        for t in split(s)\n            if t == \"I\"\n \
    \               count += 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    sentences = split(S, ['.', '?', '!'])\n    boredoms = 0\n\
    \    for s in sentences\n        if startswith(s, \"I\")\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    \n    s = strip(S)\n\
    \    S1 = split(s, [';', '.', '?', '!'])\n    #S1 = split(S, [';', '.', '?', '!'])\n\
    \    b = 0\n    #println(S1)\n    for i = 1:length(S1)\n        Si = split(S1[i])\n\
    \        #println(Si)\n        if (length(Si) > 0) & (Si[1] == \"I\")\n      \
    \      b += 1\n        end\n    end\n    \n    return b\nend", "    c = count(S,r\"\
    I\")\n    for i in S\n        if i == \"!\" || i == \"?\" || i == \".\"\n    \
    \        c += 1\n        end\n    end\n    return c\nend", "    sum(split(S, r\"\
    [.?!]\") .== \"I\")\nend", "    return length(filter(x->x, split(S, '.', '?' or\
    \ '!')))\nend", "    count_bored = 0\n    if occursin(\"I\", S)\n        last_dot\
    \ = findlast(x -> x == '.', S)\n        last_q = findlast(x -> x == '?', S)\n\
    \        last_ex = findlast(x -> x == '!', S)\n        if last_dot != 0\n    \
    \        if occursin(\"I\", S[last_dot+1:end])\n                count_bored +=\
    \ 1\n            end\n        end\n        if last_q != 0\n            if occursin(\"\
    I\", S[last_q+1:end])\n                count_bored += 1\n            end\n   \
    \     end\n        if last_ex != 0\n            if occursin(\"I\", S[last_ex+1:end])\n\
    \                count_bored += 1\n            end\n        end\n    end\n   \
    \ count_bored\nend", "    sum(S.split(['.', '?', '!']))\n    .map(s -> s.trim())\n\
    \    .map(s -> s[1:end])\n    .filter(s -> length(s) != 0)\n    .map(s -> s[1]\
    \ == 'I')\n    .map(b -> ifelse(b, 1, 0))\n    |> sum\nend", "    return length(split(S,r\"\
    [\\?\\!\\.]\")) - length(split(S,r\"[\\?\\!\\.]I\"))\nend", "    i = 1\n    count\
    \ = 0\n    while i <= length(S)\n        while i <= length(S) && !(S[i] in ['.',\
    \ '?', '!'])\n            i += 1\n        end\n        if i > length(S)\n    \
    \        break\n        end\n        i += 1\n        if i <= length(S) && S[i]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend",
  "    n = 0\n    for i in 1:length(S)\n        if S[i] == 'I' && (i == 1 || S[i-1]\
    \ == '.' || S[i-1] == '?' || S[i-1] == '!')\n            n += 1\n        end\n\
    \    end\n    return n\nend\nprintln(is_bored(\"Hello world\"))\nprintln(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))", "    return length(split(S,r\"\
    \\?|\\!|\\.\"))-1\nend", "    return length(findall(r\"^I \\w+\",split(S,\"[.!?]\"\
    )))\nend", "    result = []\n    words = split(S, '.')\n    for word in words\n\
    \        temp = split(word, '?')\n        for item in temp\n            if beginswith(item,\
    \ \"I\")\n                push!(result, item)\n            end\n        end\n\
    \    end\n    return length(result)\nend", "    return length(collect(eachmatch(r\"\
    (?m)(^I)\", S)))\nend", "    count = 0\n    for s in split(S, ['.', '?', '!'])\n\
    \        if strip(s)[1] == 'I'\n            count += 1\n        end\n    end\n\
    \    return count\nend\n \n\"\"\"\n    You are given a list of friends and a dictionary.\n\
    \    The dictionary tells you how much time each friend spends on different activities.\n\
    \    Your task is to find the friend who has the most time available to spend\
    \ on new activities.\n   \n    For example:\n    >>> most_time([('Bob', {\"sleeping\"\
    : 8, \"dancing\": 6, \"tv\": 7}),\n    ...            ('Alice', {\"studying\"\
    : 10, \"tv\": 8, \"dancing\": 2}),\n    ...            ('Jess', {\"studying\"\
    : 3, \"tv\": 6, \"sleeping\": 12})])\n    'Jess'\n    \"\"\"", "    split = split(S,'.\
    \ ? !') \n    count = 0\n    for i in split \n        if i[1] == 'I'\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "    boredoms\
    \ = 0\n    start = 1\n    for (i,char) in enumerate(S)\n        if char == '.'\
    \ || char == '?' || char == '!'\n            if i - start > 1 && S[start] == 'I'\n\
    \                boredoms += 1\n            end\n            start = i + 2\n \
    \       end\n    end\n    return boredoms\nend", "    s = split(S, [\".\",\"?\"\
    ,\"!\"])\n    num = 0\n    for i = 1:length(s)\n        if split(s[i], \" \")[1]\
    \ == \"I\"\n            num += 1\n        end\n    end\n    return num\nend",
  "    return count(x->(x[1]=='I'), split(S,r\"[.?!]\"))\nend", "    # the string\
    \ is made up of sentences and\n    # each sentence begins with a character in\n\
    \    # either '.', '?', or '!'\n    # so: split on '.', '?' or '!'\n    # then\
    \ determine which sentences begin with 'I'\n    # then count the number of sentences\
    \ that begin with 'I'\n    # this should be the output\n    split_on_dot = split(S,\
    \ '.')\n    split_on_question = split(S, '?')\n    split_on_exclamation = split(S,\
    \ '!')\n    split_string = vcat(split_on_dot, split_on_question, split_on_exclamation)\n\
    \    split_string = deleteat!(split_string, findall(x -> x == \"\", split_string))\n\
    \    x = length(findall(x -> first(x) == 'I', split_string))\n    x\nend", " \
    \   \n    bored = 0\n    start = 1\n    end = 0\n    S = replace(S, \".\", \"\"\
    )\n    S = replace(S, \"?\", \"\")\n    S = replace(S, \"!\", \"\")\n    S = lowercase(S)\n\
    \    words = split(S, \" \")\n    while end <= length(words)\n        # iterate\
    \ through the words, adding to the boredom \n        # counter each time we come\
    \ across a sentence that starts with I.\n        if words[start] == \"i\"\n  \
    \          bored += 1\n        end += 1\n        start += 1\n    end\n    return\
    \ bored\nend", "    sentences = split(S, re\"\\?|!|\\.\")\n    boredoms = 0\n\
    \    for sentence in sentences\n        if startswith(sentence, \"I\")\n     \
    \       boredoms += 1\n        end\n    end\n    return boredoms\nend", "    count\
    \ = 0\n    for word in split(S, r\"\\?|\\!|\\.\")\n        word = word[1:end]\n\
    \        if (word == \"I\") \n            count = count + 1\n        end\n   \
    \ end\n    return count\nend", "    is_bored=0\n    i=1\n    while i<=length(S)\n\
    \        if (S[i]=='I')&(S[i-1]==' ')\n            is_bored=is_bored+1\n     \
    \   end\n        i=i+1\n    end\n    return is_bored\nend", "    sentence = split(S,\
    \ '.')\n    boredoms = 0\n    for i in sentence\n        if i[1] == 'I'\n    \
    \        boredoms += 1\n        end\n    end\n    return boredoms\nend", " \n\
    \    # Split the string on '.', '?' or '!' delimiters\n    sentences = split(S,\
    \ \".[?!]\")\n    boredoms = 0\n    for sentence in sentences\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    return length(split(S, r\"\\bI\")) - 1\nend", "    if (S[1] == 'I')\n\
    \        return 1\n    else\n        return 0\n    end\nend", "  spl = split(S,\
    \ r\"[\\.!?]\")\n  for x in spl\n    if (startswith(x, \"I\"))\n      return 1\n\
    \    end\n  end\n  return 0\nend", "    counter::Int64 = 0\n    words::Vector{SubString{String}}\
    \ = split(S, r\"\\.|\\?|\\!\")\n    for word in words\n        if word[1] == 'I'\n\
    \            counter += 1\n        end\n    end\n    return counter\nend", " \
    \   # Your code goes here\n    i = 0\n    count = 0\n    while i < length(S) \n\
    \        if S[i] == 'I'\n            count += 1\n        end\n        i += 1\n\
    \    end\n    return count\nend", "    S = lc(S) #converts string to lowercase\n\
    \    S = split(S) #splits the string into a word array\n    counter = 0\n    for\
    \ word in S\n        if word == \"i\"\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    total_boredoms = 0\n    #add code here\
    \    \n    return total_boredoms\nend\nprintln(is_bored(\"Hello world\"))\nprintln(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))", "    counter =\
    \ 0\n    for i in split(S, ['.', '?', '!'])\n        if startsWith(i, \"I\") counter\
    \ += 1 end\n    end\n    return counter\nend", "    return split(S, r\"(?=[.!?])\"\
    ).filter(x->trim(x)[1] == 'I').length\nend", "    boredoms = 0\n    for sentence\
    \ in split(S, '!')\n        s = split(sentence, '.')\n        s = [s[i] for i\
    \ in 1:length(s)]\n        for sub_sentence in s\n            if strip(split(sub_sentence,\
    \ '?')[1])[1] == 'I'\n                boredoms += 1\n            end\n       \
    \ end\n    end\n    return boredoms\nend", "    P = split(S, \".\" | \"?\" | \"\
    !\")\n    counter = 0\n    for i in P\n        a = split(i)\n        if a[1] ==\
    \ \"I\"\n            counter += 1\n        end\n    end\n    return counter\n\
    end\n    \n    \n    # YOUR CODE HERE\n    #raise NotImplementedError()\nend",
  "    return length(split(split(S,\". \")[2],\". \"))\nend\n#print(is_bored(\"I am\
    \ bored.\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\"))", "    is_I(S) ? return 1 : return 0\nend", "    splitted = split(S,\
    \ \".?!\")\n    return sum(s[1] == 'I' for s in splitted)\nend\nprintln(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))", "    j = 0\n  \
    \  for s in split(S, \".\")\n        s = s.strip(\" \")\n        if(s[1] == 'I')\n\
    \            j += 1\n        end\n    end\n    return j\nend", "    # START SOLUTION\n\
    \    boredoms = 0\n    for line in split(S, r\"[.!?]\")\n        if startswith(line,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    \    # END SOLUTION\nend", "    # Put your code here\n    return 0\nend", "  \
    \  (result, _) =  is_bored_with_state(S)\n    return result\nend", "    s = S\
    \ + ' '\n    num_boredoms = 0\n    i = 1\n    while i <= length(s)\n        if\
    \ s[i] == 'I' && (s[i-1] == '.' || s[i-1] == '?' || s[i-1] == '!')\n         \
    \   num_boredoms += 1\n        end\n        i += 1\n    end\n    return num_boredoms\n\
    end", "    count = 0\n    for sen in split(S, ['.', '?', '!'])\n        if occursin(\"\
    I\",sen)\n            count += 1\n        end\n    end\n    return count\nend",
  "    # TODO\nend", "    n = 0\n    L = split(S, \".\")\n    for L_i in L\n     \
    \   L_i = split(L_i, \"?\")\n        for L_i_j in L_i\n            L_i_j = split(L_i_j,\
    \ \"!\")\n            for L_i_j_k in L_i_j\n                if L_i_j_k[1] == 'I'\n\
    \                    n += 1\n                end\n            end\n        end\n\
    \    end\n    return n\nend", "    S = split(S, \".!?\")\n    boredoms = 0\n \
    \   for sentence in S\n        if beginswith(sentence, \"I\")\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "  sentences = split(S,\
    \ \"!.?\")\n  boredoms = filter(t -> t[1] == 'I', sentences)\n  return length(boredoms)\n\
    end\nend", "    c::Int64 = 0\n    s::Array{Any,1} = split(S, [';', '!', '?', '.'])\n\
    \    for i=1:length(s)\n        if split(s[i], ' ')[1] == \"I\"\n            c\
    \ += 1\n        end\n    end\n    return c\nend\n \n \n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of curses. A curse\
    \ is a sentence that contains a word from the list\n    (\"shit\", \"fuck\", \"\
    damn\").\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_curse(\"Hello world\")\n    0\n    >>> is_curse(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    0\n    >>> is_curse(\"The sky\
    \ is blue. The sun is shining. What the fuck!\")\n    1\n    \"\"\"", "    list=split(S,\"\
    .\")\n    count=0\n    for k in list\n        list1=split(k,\"!\")\n        for\
    \ j in list1\n            list2=split(j,\"?\")\n            for i in list2\n \
    \               if i[1]=='I'\n                    count=count+1\n            \
    \    end\n            end\n        end\n    end\n    return count\nend", "   \
    \ boredoms::Int64 = 0\n    for sentence in split(S, r\"\\.|\\?|\\!\")\n      \
    \  if findfirst(r\"^\\s*I\", sentence) != nothing\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend", "    i = 0\n    for sentence\
    \ in split(S, [';', '.', '!', '?'])\n        for word in split(sentence)\n   \
    \         if word == \"I\"\n                i += 1\n            end\n        end\n\
    \    end\n    return i\nend", "    numBoredoms = 0\n    sentences = split(S, r\"\
    [.?!]\")\n    for s in sentences\n        if startswith(strip(s), \"I\")\n   \
    \         numBoredoms += 1\n        end\n    end\n    return numBoredoms\nend\n\
    is_bored(\"Hello world\")\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")", "    \n    len = length(S)\n    sentence = 1\n    boredom\
    \ = 0\n    \n    if S[1] == 'I'\n        boredom += 1\n    end", "    boredoms\
    \ = 0\n    for s in split(S, \"!\")\n        for ss in split(s, \"?\")\n     \
    \       for sss in split(ss, \".\")\n                boredoms += (is_bored(sss)\
    \ + startswith(strip(sss), \"I\"))\n            end\n        end\n    end\n  \
    \  return boredoms\nend", "    splitS = split(S, ' ')\n    boredoms = 0\n    for\
    \ i in 1:length(splitS)\n        if splitS[i] == \"I\"\n            boredoms +=\
    \ 1\n        end\n    end\n    return boredoms\nend", "    return length(split(S,\
    \ \".\")) - length(filter(x -> x[1] != 'I', split(S, \".\")))\nend", "    # Only\
    \ consider lines that have 'I'\n    I_lines = split(S, [\".\", \"!\", \"?\"])\n\
    \    I_lines = filter(I_lines) do line \n        startswith(line, \"I\")\n   \
    \ end\n    # Return the count\n    return length(I_lines)\nend", "    words =\
    \ split(S)\n    num = 0\n    for word in words\n        if word == \"I\"\n   \
    \         num += 1\n        end\n    end\n    return num\nend", "    # Split the\
    \ string into sentences, and check each sentence,\n    # and see if it starts\
    \ with \"I\"\n    # S::String = \"The sky is blue. The sun is shining. I love\
    \ this weather\"\n    # S = \"Hello world\"\n    # sentences = split(S, \".?!\"\
    )\n    # for sentence in sentences\n    #     if startswith(sentence, \"I\")\n\
    \    #         return 1\n    #     end\n    # end\n    # return 0\n    count =\
    \ 0\n    for (index, character) in enumerate(S)\n        if character == 'I'\n\
    \            if index == 1\n                count += 1\n            elseif S[index-1]\
    \ == ' '\n                count += 1\n            end\n        end\n    end\n\
    \    return count\nend", "    sentence = split(S, r\"(?<=[.?!])\\s+(?=[A-Z])\"\
    )\n    bored = 0\n    for i in sentence\n        if i[1] == 'I'\n            bored\
    \ = bored + 1\n        end\n    end\n    return bored\nend", "    count = 0\n\
    \    for i in split(S, \".\")\n        if findfirst(r\"I\", i) == 1\n        \
    \    count += 1\n        end\n    end\n    return count\nend", "    sentend =\
    \ [\".\",\".\",\"!\",\"?\"]\n    ctr = 0\n    for word in split(lowercase(S),'\
    \ ')\n        if word == \"i\"\n            ctr += 1\n        end\n    end\n \
    \   return ctr\nend", "    # S is the input string\n    # Your code here\n   \
    \ end\n    \n    \n    \"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    start = findfirst(S, \"I\")\n    if(start == nothing)\n        return 0\n \
    \   else\n        return 1 + is_bored(S[start+2:end])\n    end\nend", "    bored\
    \ = 0 \n    words = split(S, r\"[\\.?!\\s]\")\n    for word in words\n       \
    \ if word[1] == 'I'\n            bored += 1\n        end\n    end\n    return\
    \ bored\nend", "    num_of_boredoms = 0\n    for i in 1:count(S, '!')\n      \
    \  if i == 1\n            num_of_boredoms += count(S[1:findnext(S, '!')-1], 'I')\n\
    \        else\n            num_of_boredoms += count(S[findnext(S, '!', start=i-1)+1:findnext(S,\
    \ '!', start=i)-1], 'I')\n        end\n    end\n    for i in 1:count(S, '?')\n\
    \        if i == 1\n            num_of_boredoms += count(S[1:findnext(S, '?',\
    \ start=i)-1], 'I')\n        else\n            num_of_boredoms += count(S[findnext(S,\
    \ '?', start=i-1)+1:findnext(S, '?', start=i)-1], 'I')\n        end\n    end\n\
    \    for i in 1:count(S, '.')\n        if i == 1\n            num_of_boredoms\
    \ += count(S[1:findnext(S, '.', start=i)-1], 'I')\n        else\n            num_of_boredoms\
    \ += count(S[findnext(S, '.', start=i-1)+1:findnext(S, '.', start=i)-1], 'I')\n\
    \        end\n    end\n    return num_of_boredoms\nend", "    return length(findall(r\"\
    I\", S))\nend", "    return length(split(S, r\"\\.|\\?|\\!\"))-1\nend\n \n\"\"\
    \"\n    You'll be given a list of integers, and your task is to return their sum.\n\
    \    However, if you start adding numbers at the beginning of the list, you'll\n\
    \    get a value bigger than 100. So, you should add the numbers from the end\n\
    \    of the list, and only proceed towards the beginning if the sum is less\n\
    \    than or equal to 100. If the sum is greater than 100 at any point, stop\n\
    \    adding numbers from the list.\n   \n    For example:\n    >>> stop_at_100([99,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    100\n    >>> stop_at_100([99, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    99\n    \"\"\"", "    # your solution\
    \ here\n    count = 0\n    s = split(S,r\"[!\\.]\")\n    for str in s\n      \
    \  if str != \"\" && str[1] == 'I'\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    split_sentence = split(S, ['.', '?', '!'])\n   \
    \ count = 0\n    for sentence in split_sentence\n        sentence = sentence\n\
    \        if sentence[1] == 'I'\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    S = lcase(S)\n    boredoms = 0\n    sentence = isdefined(findnext(r\"\
    ^\\s*I\", S))\n    if sentence != false\n        boredoms += 1\n    end\n    return\
    \ boredoms\nend", "    (count(x->x=='I', split(S, '.')) + count(x->x=='I', split(S,\
    \ '?')) + count(x->x=='I', split(S, '!'))) -1\nend", "    n_boredoms = 0\n   \
    \ tokenized = split(S)\n    for (i,w) in enumerate(tokenized)\n        if w[1]\
    \ == 'I'\n            n_boredoms += 1\n        end\n    end\n    return n_boredoms\n\
    end\n ", "    split_S = split(S, \".\")\n    count = 0\n    for s in split_S\n\
    \        if s[1] == 'I'\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    i = 0 \n    count = 0 \n    while i < length(S)\n        if\
    \ (S[i] == 'I') && !(i > 1 && S[i-1] == ' ' && S[i-2] == '.')\n            count\
    \ += 1 \n        end \n        i += 1 \n    end \n    return count \nend ", " \
    \   # split sentences\n    a = split(S, '.')\n    a = filter(x -> !isempty(x),\
    \ a)\n    # find first word\n    b = [x[1] for x in a]\n    # count\n    return\
    \ sum(y -> y == \"I\", b)\nend", "    first_words = split(S, \".!?\")\n    filter(s\
    \ -> startswith(s, \"I\"), first_words) |> length\nend", "    sentences = split(S,\
    \ [\".\", \"?\", \"!\"])\n    boredoms = 0\n    for sentence in sentences\n  \
    \      words = split(sentence)\n        if words[1] == \"I\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    boredoms::Int64\
    \ = 0\n    start_pos::Int64 = 0\n    while start_pos != length(S)\n        end_pos\
    \ = search(r\"\\.|\\?|\\!\", S, start_pos)\n        sentence = S[start_pos:end_pos\
    \ - 1]\n        boredoms += isbored(sentence)\n        start_pos = end_pos + 1\n\
    \    end\n    return boredoms\nend", "    sentences = split(S, \".!?\")\n    boredoms\
    \ = count(s -> first(s) == 'I', sentences)\n    return boredoms\nend", "    if\
    \ S[1] == 'I'\n        return 1\n    else\n        return 0\n    end\nend", " \
    \   counter = 0\n    for s in split(S, r\"[.?!]\")\n        if strip(s)[1] ==\
    \ 'I'\n            counter += 1\n        end\n    end\n    return counter\nend",
  "    return length(split(S, r\"I [A-Za-z]+ [.!?]\"))\nend", "  tokens = split(S)\n\
    \  bored = 0 \n  for i in tokens \n      if i == \"I\"\n        bored = bored\
    \ + 1\n      end\n  end\n  return bored\nend", "    n = length(S)\n    count =\
    \ 0\n    for i in 1:n\n        if S[i] == 'I'\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    bored_count = 0\n    n = length(S)\n\
    \    i = 1\n    while i <= n\n        if S[i] == 'I' && (i == 1 || S[i-1] == '\
    \ ')\n            bored_count += 1\n        end\n        i += 1\n    end\n   \
    \ return bored_count\nend", "    return length(split(S,'!')[2:end]) + length(split(S,'.')[2:end])\
    \ + length(split(S,'?')[2:end]) \nend", "    boredom = split(S, [\"!\", \".\"\
    , \"?\"])\n    boredoms = 0\n    for statement in boredom\n        words = split(statement)\n\
    \        if words[1] == \"I\"\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend", "    count = 0\n    sentence = split(S, r\"[.!?]\"\
    )\n    for i in sentence\n        if startswith(i, \"I\")\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", '    # ', "  sentence_list\
    \ = split(S, [\".\", \"?\", \"!\"])\n  bored_counter = 0\n  for sentence in sentence_list\n\
    \    if startswith(sentence, \"I\")\n      bored_counter += 1\n    end\n  end\n\
    \  return bored_counter\nend", "    return length(matchall(r\"I.*(?=[\\.\\?\\\
    !])\", S))\nend", "    dum=split(S, \".\")\n    c=0\n    for j in dum\n      \
    \  dum2=split(j, \"?\")\n        for i in dum2\n            dum3=split(i, \"!\"\
    )\n            for i in dum3\n                if i[1]=='I'\n                 \
    \   c+=1\n                end\n            end\n        end\n    end\n    return\
    \ c\nend", "    s = split(S, r\"[!\\?\\.]\")\n    bored = 0\n    for x in s\n\
    \        if first(x) == 'I'\n            bored += 1\n        end\n    end\n  \
    \  return bored\nend", "    count = 0\n    char = Char[]\n    push!(char,split(S))\n\
    \    for i = 1:length(char)\n        if char[i] == \"I\"\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "    n = 0\n    idxs\
    \ = findfirst(t -> t == '.' || t == '?' || t == '!', S)\n    while length(idxs)\
    \ != 0\n        if S[1:idxs[1]-1] == \"I\"\n            n += 1\n        end\n\
    \        idxs = findfirst(t -> t == '.' || t == '?' || t == '!', S[idxs[1]+1:end])\n\
    \    end\n    if S[end-1:end] != \".\" && S[end-1:end] != \"?\" && S[end-1:end]\
    \ != \"!\"\n        if S[1:end] == \"I\"\n            n += 1\n        end\n  \
    \  end\n    return n\nend\n    \n\"\"\"\n    You'll be given a string, and you\
    \ need to return a list of strings, each\n    containing the same character. Each\
    \ character from the string should be\n    repeated as many times as its index,\
    \ where 0 is the index of the first\n    character. You can assume that the string\
    \ contains lowercase letters only.\n   \n    For example:\n    >>> repeat_char(\"\
    abc\")\n    [\"a\", \"bb\", \"ccc\"]\n    \"\"\"", "    # split the string at\
    \ \".\" \"?\" \"!\"\n    sentences = split(S, [\".\", \"?\", \"!\"])\n    boredoms\
    \ = 0\n    for sentence in sentences\n        # ignore case\n        if lowercase(split(sentence)[1])\
    \ == \"i\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    boredoms = 0\n    for word in split(S,'.')\n        words = split(word,\
    \ ' ')\n        if words[1] == \"I\"\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend", "    string = split(S, ['.', '?', '!'])\n\
    \    counter = 0\n    for i in 1:length(string)\n        if(issubstring(\"I\"\
    , string[i]))\n            counter += 1\n        end\n    end\n    return counter\n\
    end", "    count = 0\n    for word in split(S, r\"[!?.]\")\n        if word[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend",
  "    boredoms = 0\n    for sentence in split(S, \".!?\")\n        for word in split(sentence)\n\
    \            if word == \"I\"\n                boredoms += 1\n            end\n\
    \        end\n    end\n    return boredoms\nend", "    sent = split(S, \".!?\"\
    )\n    boredoms = 0\n    for s in sent\n        if s[1] == 'I'\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    sentences = split(S,\
    \ [',', '.', '?', '!'])\n    boredoms = 0\n    for sentence in sentences\n   \
    \     words = split(sentence)\n        if words[1] == \"I\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    sentences = split(S,\
    \ [\".\", \"?\", \"!\"]) \n    n_boredoms = count(sentences, sentence -> sentence[1]\
    \ == 'I')\n    return n_boredoms\nend", "    S = split(S, ['.', '?', '!'])\n \
    \   count = 0\n    for i in S\n        if startsWith(i, \"I\")\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    if occursin(\"I\",\
    \ S)\n        return 1\n    else \n        return 0\n    end\nend", "    count\
    \ = 0\n    S = split(S,'.!?')\n    for i in S\n        j = split(i)\n        count\
    \ += j[1] == \"I\"\n    end\n    return count\nend", "    counter = 0\n    for\
    \ word in split(S, r\"[.?!]\") \n        if word[1] == 'I' \n            counter\
    \ += 1\n        end\n    end\n    return counter\nend", "    answer = 0\n    sentences\
    \ = split(S, \".\")\n    for s in sentences\n        if split(s, \" \")[1] ==\
    \ \"I\"\n            answer += 1\n        end\n    end\n    return answer\nend",
  "    for s in split(S, ['.', '?', '!'])\n        if split(s, [' '])[1] == \"I\"\n\
    \            return 1\n        end\n    end\n    return 0\nend", "    return length(split(S,\
    \ \"I\")) - 1\nend", "    return length(filter(s -> first(s) == 'I', split(S,\
    \ r\"[\\.\\?\\!]\", keep=false)))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
