name: HumanEval_11_string_xor
language: jl
results:
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if(length(a) != length(b))\n        error(\"String\
    \ length does not match\")\n    end\n    res = \"\"\n    for i in 1:length(a)\n\
    \        res = res * xor(a[i], b[i])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnwshlchn.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwshlchn.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwshlchn.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwshlchn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwshlchn.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwshlchn.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwshlchn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwshlchn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for (t,s) in zip(a,b)\n        c *= xor(parse(Int,t),parse(Int,s))\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoiuewpx9.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(\"111000\", \"101010\") == \"010010\"\\\
    n  MethodError: no method matching *(::String, ::Int64)\\n  Closest candidates\
    \ are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] string_xor(a::String, b::String)\\n     @ Main /tmp/tmpoiuewpx9.jl:9\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpoiuewpx9.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpoiuewpx9.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    m, n = length(a), length(b)\n    c = Array(Char, max(m,\
    \ n))\n    for i in 1:max(m, n)\n        if i > m\n            c[i] = b[i]\n \
    \       elseif i > n\n            c[i] = a[i]\n        else\n            c[i]\
    \ = ((a[i] == '1') != (b[i] == '1')) ? '1' : '0'\n        end\n    end\n    return\
    \ string(c)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwls1souw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching Array(::Type{Char}, ::Int64)\n  Closest candidates are:\n\
    \    Array(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwls1souw.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwls1souw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwls1souw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwls1souw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching Array(::Type{Char},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwls1souw.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwls1souw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwls1souw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwls1souw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ Array(::Type{Char}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwls1souw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in aind(a)\n        if a[i] ==\
    \ b[i]\n            push!(c, \"0\")\n        else\n            push!(c, \"1\"\
    )\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9gkm688.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ aind not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmpi9gkm688.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpi9gkm688.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: aind not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi9gkm688.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpi9gkm688.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: aind not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi9gkm688.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9gkm688.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n  return join([a[i] ^ b[i] for i in 1:min(length(a), length(b))]...)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxl2krgao.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n\
    \     @ ./array.jl:724 [inlined]\n   [4] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpxl2krgao.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxl2krgao.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxl2krgao.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpxl2krgao.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching ^(::Char,\
    \ ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n\
    \     @ ./array.jl:724 [inlined]\n   [4] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpxl2krgao.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxl2krgao.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxl2krgao.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpxl2krgao.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::Char, ::Char)\n  Cl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxl2krgao.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        a_bit\
    \ = Int(a[i])\n        b_bit = Int(b[i])\n        result = result * string(bitxor(a_bit,\
    \ b_bit))\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpibr6p7co.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpibr6p7co.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpibr6p7co.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpibr6p7co.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpibr6p7co.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpibr6p7co.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibr6p7co.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    ans = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            ans = ans * \"0\"\n        else\n            ans = ans\
    \ * \"1\"\n        end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(length(a))\n    @inbounds for i in 1:length(a)\n\
    \        c[i] = xor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6utyom5v.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n    ...\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp6utyom5v.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6utyom5v.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6utyom5v.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6utyom5v.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp6utyom5v.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6utyom5v.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6utyom5v.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6utyom5v.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Clos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6utyom5v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for (ai, bi) in zip(a, b)\n    \
    \    if ai == bi\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    xor_output = \"\"\n    for i in\
    \ 1:n\n        if a[i] != b[i]\n            xor_output = string(xor_output, \"\
    1\")\n        else\n            xor_output = string(xor_output, \"0\")\n     \
    \   end\n    end\n    return xor_output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    xor_result = \"\"\n    for i\
    \ = 1:length(a)\n        if a[i] == b[i]\n            xor_result *= \"0\"\n  \
    \      else\n            xor_result *= \"1\"\n        end\n    end\n    return\
    \ xor_result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    l = length(a)\n    xor = \"\"\n    for i = 1:l\n  \
    \      xor = string(xor, (parse(Int,a[i]) + parse(Int,b[i])) % 2)\n    end\n \
    \   return xor\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a == b\n        return \"0\"\n    else\n       \
    \ return \"1\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_2jqhh6.jl:18\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"1\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_2jqhh6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_2jqhh6.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp5_2jqhh6.jl:20\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"1\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_2jqhh6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_2jqhh6.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_2jqhh6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for i in 1:length(a)\n        if\
    \ a[i] != b[i]\n            push!(c, \"1\")\n        else\n            push!(c,\
    \ \"0\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Lengths of input strings not equal\"))\n    end\n    res = copy(a)\n    for i\
    \ in 1:length(a)\n        if a[i] == b[i]\n            res[i] = \"0\"\n      \
    \  else\n            res[i] = \"1\"\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxvl7554i.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpxvl7554i.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvl7554i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvl7554i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxvl7554i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpxvl7554i.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvl7554i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    s = String[]\n    for i in 1:length(a)\n        if\
    \ a[i] != b[i]\n            push!(s, \"1\")\n        else\n            push!(s,\
    \ \"0\")\n        end\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"the string\
    \ must be the same length\")\n    end\n    output = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            output = output * \"0\"\n        else\n\
    \            output = output * \"1\"\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Convert strings to integers\n    A = int(a,2)\n \
    \   B = int(b,2)\n    # Compute XOR, convert to string, pad with zeros to len(a)\
    \ if necessary\n    # Return\n    return string(a,\"\\n\",b,\"\\n\",string(Int64(A\
    \ \u22BB B,2),'0',length(a)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl8_cowal.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpl8_cowal.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl8_cowal.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpl8_cowal.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl8_cowal.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpl8_cowal.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8_cowal.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return 1 .== a .== b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy18nfvxs.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Bool to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpy18nfvxs.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy18nfvxs.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy18nfvxs.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpy18nfvxs.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Bool to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpy18nfvxs.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy18nfvxs.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy18nfvxs.jl:11\n"
  exit_code: 1
  status: SyntaxError
