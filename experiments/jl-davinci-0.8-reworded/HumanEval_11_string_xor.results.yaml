language: jl
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if(length(a) != length(b))\n        error(\"String\
    \ length does not match\")\n    end\n    res = \"\"\n    for i in 1:length(a)\n\
    \        res = res * xor(a[i], b[i])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnwshlchn.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpnwshlchn.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwshlchn.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwshlchn.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwshlchn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwshlchn.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwshlchn.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwshlchn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnwshlchn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   ["
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for (t,s) in zip(a,b)\n        c *= xor(parse(Int,t),parse(Int,s))\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpoiuewpx9.jl:18\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmpoiuewpx9.jl:9\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoiuewpx9.jl:18 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoiuewpx9.jl:17\n'''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    m, n = length(a), length(b)\n    c = Array(Char, max(m,\
    \ n))\n    for i in 1:max(m, n)\n        if i > m\n            c[i] = b[i]\n \
    \       elseif i > n\n            c[i] = a[i]\n        else\n            c[i]\
    \ = ((a[i] == '1') != (b[i] == '1')) ? '1' : '0'\n        end\n    end\n    return\
    \ string(c)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwls1souw.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpwls1souw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching Array(::Type{Char}, ::Int64)\n  Closest candidates are:\n\
    \    Array(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwls1souw.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwls1souw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwls1souw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwls1souw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching Array(::Type{Char},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwls1souw.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwls1souw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwls1souw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwls1souw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ Array(::Type{Char}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n  "
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in aind(a)\n        if a[i] ==\
    \ b[i]\n            push!(c, \"0\")\n        else\n            push!(c, \"1\"\
    )\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi9gkm688.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpi9gkm688.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ aind not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmpi9gkm688.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpi9gkm688.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: aind not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi9gkm688.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpi9gkm688.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: aind not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi9gkm688.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9gkm688.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9gkm688.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n  return join([a[i] ^ b[i] for i in 1:min(length(a), length(b))]...)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxl2krgao.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpxl2krgao.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n\
    \     @ ./array.jl:724 [inlined]\n   [4] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpxl2krgao.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxl2krgao.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxl2krgao.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpxl2krgao.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching ^(::Char,\
    \ ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n\
    \     @ ./array.jl:724 [inlined]\n   [4] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpxl2krgao.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxl2krgao.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxl2krgao.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpxl2krgao.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::Char, ::Char)\n  Cl"
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        a_bit\
    \ = Int(a[i])\n        b_bit = Int(b[i])\n        result = result * string(bitxor(a_bit,\
    \ b_bit))\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpibr6p7co.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpibr6p7co.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpibr6p7co.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpibr6p7co.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpibr6p7co.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpibr6p7co.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpibr6p7co.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibr6p7co.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibr6p7co.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    ans = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            ans = ans * \"0\"\n        else\n            ans = ans\
    \ * \"1\"\n        end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(length(a))\n    @inbounds for i in 1:length(a)\n\
    \        c[i] = xor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6utyom5v.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp6utyom5v.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n    ...\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp6utyom5v.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6utyom5v.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6utyom5v.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6utyom5v.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp6utyom5v.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6utyom5v.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6utyom5v.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6utyom5v.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Clos"
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for (ai, bi) in zip(a, b)\n    \
    \    if ai == bi\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    xor_output = \"\"\n    for i in\
    \ 1:n\n        if a[i] != b[i]\n            xor_output = string(xor_output, \"\
    1\")\n        else\n            xor_output = string(xor_output, \"0\")\n     \
    \   end\n    end\n    return xor_output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    xor_result = \"\"\n    for i\
    \ = 1:length(a)\n        if a[i] == b[i]\n            xor_result *= \"0\"\n  \
    \      else\n            xor_result *= \"1\"\n        end\n    end\n    return\
    \ xor_result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    l = length(a)\n    xor = \"\"\n    for i = 1:l\n  \
    \      xor = string(xor, (parse(Int,a[i]) + parse(Int,b[i])) % 2)\n    end\n \
    \   return xor\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a == b\n        return \"0\"\n    else\n       \
    \ return \"1\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5_2jqhh6.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp5_2jqhh6.jl:18\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"1\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_2jqhh6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_2jqhh6.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp5_2jqhh6.jl:20\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"1\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_2jqhh6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_2jqhh6.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for i in 1:length(a)\n        if\
    \ a[i] != b[i]\n            push!(c, \"1\")\n        else\n            push!(c,\
    \ \"0\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Lengths of input strings not equal\"))\n    end\n    res = copy(a)\n    for i\
    \ in 1:length(a)\n        if a[i] == b[i]\n            res[i] = \"0\"\n      \
    \  else\n            res[i] = \"1\"\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxvl7554i.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpxvl7554i.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpxvl7554i.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvl7554i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvl7554i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxvl7554i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::LinearAlgebra.Hessenberg{<:Any,\
    \ <:LinearAlgebra.UpperHessenberg}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \    copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \    copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpxvl7554i.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expa"
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    s = String[]\n    for i in 1:length(a)\n        if\
    \ a[i] != b[i]\n            push!(s, \"1\")\n        else\n            push!(s,\
    \ \"0\")\n        end\n    end\n    return join(s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"the string\
    \ must be the same length\")\n    end\n    output = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            output = output * \"0\"\n        else\n\
    \            output = output * \"1\"\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Convert strings to integers\n    A = int(a,2)\n \
    \   B = int(b,2)\n    # Compute XOR, convert to string, pad with zeros to len(a)\
    \ if necessary\n    # Return\n    return string(a,\"\\n\",b,\"\\n\",string(Int64(A\
    \ \u22BB B,2),'0',length(a)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl8_cowal.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpl8_cowal.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpl8_cowal.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl8_cowal.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpl8_cowal.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl8_cowal.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpl8_cowal.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl8_cowal.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl8_cowal.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return 1 .== a .== b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy18nfvxs.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpy18nfvxs.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Bool to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpy18nfvxs.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy18nfvxs.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy18nfvxs.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpy18nfvxs.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Bool to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpy18nfvxs.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy18nfvxs.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = minimum(length(a), length(b))\n    res = \"\"\n\
    \    for i in 1:n\n        res *= a[i] == b[i] ? \"0\" : \"1\"\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2t8t6c2n.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp2t8t6c2n.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp2t8t6c2n.jl:7\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp2t8t6c2n.jl:19 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp2t8t6c2n.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp2t8t6c2n.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n   \
    \  @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp2t8t6c2n.jl:7\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp2t8t6c2n.jl:20 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp2t8t6c2n.jl:18\ntest "
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a, b = convert_to_bitarray(a), convert_to_bitarray(b)\n\
    \    l = min(length(a), length(b))\n    a, b = a[1:l], b[1:l]\n    r = bitarray(l)\n\
    \    for i in 1:l\n        r[i] = (a[i] != b[i]) ? 1 : 0\n    end\n    r = convert_to_string(r)\n\
    \    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjcem7dyg.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpjcem7dyg.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ convert_to_bitarray not defined\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpjcem7dyg.jl:7\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjcem7dyg.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcem7dyg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjcem7dyg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: convert_to_bitarray not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpjcem7dyg.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjcem7dyg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcem7dyg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjcem7dyg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: convert_to_bitarray\
    \ not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @\
    \ Main /tmp/tmpjcem7dyg.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjcem7dyg.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcem7dyg.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i = 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Strings\
    \ must be of equal length\")\n    end\n    s = String(length(a))\n    for i in\
    \ 1:length(a)\n        s[i] = (a[i] != b[i]) ? '1' : '0'\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmm4pr7ko.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpmm4pr7ko.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpmm4pr7ko.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmm4pr7ko.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmm4pr7ko.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmm4pr7ko.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpmm4pr7ko.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmm4pr7ko.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmm4pr7ko.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpmm4pr7ko.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    length = min(length(a), length(b))\n\
    \    for i = 1:length\n        if a[i] == b[i]\n            result *= \"0\"\n\
    \        else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpurnxscpa.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpurnxscpa.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpurnxscpa.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurnxscpa.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurnxscpa.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpurnxscpa.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpurnxscpa.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurnxscpa.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurnxscpa.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpurnxscpa.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpurnxscpa.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurnxscpa.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurnxscpa.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    x = parse(Int, a, base=2)\n    y = parse(Int, b, base=2)\n\
    \    return string(convert(UInt8, x \u22BB y), base=2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo6m2c8vw.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpo6m2c8vw.jl:16\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo6m2c8vw.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo6m2c8vw.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpo6m2c8vw.jl:18\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo6m2c8vw.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpo6m2c8vw.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(length(a))\n    for i = 1:length(a)\n  \
    \      if a[i] == b[i]\n            c[i] = \"0\"\n        else\n            c[i]\
    \ = \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp39c719x0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp39c719x0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp39c719x0.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39c719x0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39c719x0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp39c719x0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp39c719x0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39c719x0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39c719x0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp39c719x0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String) a"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = []\n    for i in 1:length(a)\n        pa = parse(Int,\
    \ a[i])\n        pb = parse(Int, b[i])\n        push!(c, pa \u22BB pb)\n    end\n\
    \    return join(string.(c))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        return \"Strings\
    \ are not the same length.\"\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    l1 = length(a)\n    l2 = length(b)\n    if l1 < l2\n\
    \        a = string(\"0\", l2-l1) * a\n    elseif l2 < l1\n        b = string(\"\
    0\", l1-l2) * b\n    end\n    c = \"\"\n    for i in 1:length(a)\n        c =\
    \ string(c, xor(parse(Int, a[i]), parse(Int, b[i])))\n    end\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result::String = \"\"\n    for i in eachindex(a)\n\
    \        if a[i] != b[i]\n            append!(result, \"1\")\n        else\n \
    \           append!(result, \"0\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpd9jz_2kt.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpd9jz_2kt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching append!(::String, ::String)\n  Closest candidates are:\n\
    \    append!(!Matched::BitVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n\
    \    append!(!Matched::AbstractVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n\
    \    append!(!Matched::AbstractVector, ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpd9jz_2kt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9jz_2kt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9jz_2kt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd9jz_2kt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching append!(::String,\
    \ ::String)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n    append!(!Matched::AbstractVector,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n    append!(!Matched::AbstractVector,\
    \ ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpd9jz_2kt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9jz_2kt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9jz_2kt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd9jz_2kt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ appe"
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c=String[]\n    if length(a)>length(b)\n       pad=a[1:length(a)-length(b)]\n\
    \       b=pad*\"0\"*b\n    elseif length(a)<length(b)\n       pad=b[1:length(b)-length(a)]\n\
    \       a=pad*\"0\"*a\n    end\n    for i=1:length(a)\n        if a[i]==b[i]\n\
    \            push!(c,\"0\")\n        else\n            push!(c,\"1\")\n      \
    \  end\n    end\n    return(join(c))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b)\n        c = []\n       \
    \ for i in 1:length(a)\n            if a[i] == '0' && b[i] == '0'\n          \
    \      push!(c, '0')\n            elseif a[i] == '1' && b[i] == '1'\n        \
    \        push!(c, '0')\n            else\n                push!(c, '1')\n    \
    \        end\n        end\n        return join(c, \"\")\n    else\n        println(\"\
    Binary strings are not of the same length.\")\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    assert(length(a) == length(b))\n    a = [int(x) for\
    \ x in a]\n    b = [int(x) for x in b]\n    return string(xor.(a, b))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_lf9sr2b.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp_lf9sr2b.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp_lf9sr2b.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_lf9sr2b.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_lf9sr2b.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_lf9sr2b.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_lf9sr2b.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_lf9sr2b.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_lf9sr2b.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_lf9sr2b.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_lf9sr2b.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_lf9sr2b.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_lf9sr2b.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    str = \"\"\n    for i = 1:length(a)\n       \
    \ if a[i] == '0' && b[i] == '0'\n            str = str * \"0\"\n        elseif\
    \ a[i] == '1' && b[i] == '1'\n            str = str * \"0\"\n        else\n  \
    \          str = str * \"1\"\n        end\n    end\n    \n    return str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length!\")\n    end\n    ret = String(\"\")\n    for i in 1:length(a)\n\
    \        ret *= Int(a[i] != b[i])\n    end\n    return ret\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp97nkrh42.jl:21\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmp97nkrh42.jl:12\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp97nkrh42.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp97nkrh42.jl:20\n'''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    inputs must be same length\"))\n    end\n    return join([a[i] != b[i] ? \"1\"\
    \ : \"0\" for i in 1:length(a)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    b1 = a .> \"0\"\n    b2 = b .> \"0\"\n    return string(b1\
    \ \u22BB b2)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbfzoa0vn.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpbfzoa0vn.jl:16\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"false\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfzoa0vn.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfzoa0vn.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpbfzoa0vn.jl:17\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"false\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbfzoa0vn.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbfzoa0vn.jl:15\ntest set: Test Failed at /tmp/tmpbfzoa0vn.jl:18\n\
    \  Expression: candidate(\"0101\", \"0000\") == \"0101\"\n   Evaluated: \"false\"\
    \ == \"0101\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfzoa0vn.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfzoa0vn.jl:15\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    if length(a) == length(b)\n    \
    \    for i = 1:length(a)\n            if a[i] == b[i]\n                result\
    \ = result * \"0\"\n            else\n                result = result * \"1\"\n\
    \            end\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = \"\"\n    for i in 1:length(a)\n        res =\
    \ res * (string((parse(Int,a[i]) + parse(Int,b[i])) % 2))\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    x = [parse(Int, a[i]) for i = 1:length(a)]\n    y =\
    \ [parse(Int, b[i]) for i = 1:length(b)]\n    z = xor(x, y)\n    return join(map(string,\
    \ z))\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2vzj06xg.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp2vzj06xg.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp2vzj06xg.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vzj06xg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vzj06xg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2vzj06xg.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Vector{Int64},\
    \ ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp2vzj06xg.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vzj06xg.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vzj06xg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2vzj06xg.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp2vzj06xg.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = binary_to_decimal(a)\n    b = binary_to_decimal(b)\n\
    \    return decimal_to_binary(bitxor(a, b))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplvd4f9hg.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmplvd4f9hg.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ binary_to_decimal not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmplvd4f9hg.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvd4f9hg.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplvd4f9hg.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplvd4f9hg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: binary_to_decimal not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmplvd4f9hg.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvd4f9hg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplvd4f9hg.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplvd4f9hg.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: binary_to_decimal\
    \ not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @\
    \ Main /tmp/tmplvd4f9hg.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvd4f9hg.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplvd4f9hg.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    out = \"\"\n    for i = 1:min(length(a), length(b))\n\
    \        if a[i] == b[i]\n            out *= \"0\"\n        else\n           \
    \ out *= \"1\"\n        end\n    end\n    return out\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b)\n        res = \"\"\n   \
    \     for i in 1:length(a)\n            res *= xor(parse(Int, a[i]), parse(Int,\
    \ b[i]))\n        end\n        return res\n    else\n        error(\"Input strings\
    \ are not of the same length\")\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpv09etpjj.jl:22\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmpv09etpjj.jl:10\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv09etpjj.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv09etpjj.jl:21\n'''
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    assert(length(a) == length(b))\n    (l, result) = (length(a),\
    \ \"\")\n    for i = 1:l\n        a_i = Int(a[i])\n        b_i = Int(b[i])\n \
    \       result *= string(Int(a_i != b_i))\n    end\n    return result\nend\n \
    \       \n@assert string_xor(\"0101\", \"0101\") == \"0000\"\n@assert string_xor(\"\
    0101\", \"0000\") == \"0101\"\n@assert string_xor(\"0101\", \"1111\") == \"1010\"\
    \n@assert string_xor(\"0101\", \"1010\") == \"1111\"\n@assert string_xor(\"0101\"\
    , \"0110\") == \"0011\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: assert not defined\nStacktrace:\n [1]\
    \ string_xor(a::String, b::String)\n   @ Main /tmp/tmpzk45wdr9.jl:7\n [2] top-level\
    \ scope\n   @ /tmp/tmpzk45wdr9.jl:17\nin expression starting at /tmp/tmpzk45wdr9.jl:17\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        x = parse(Int,\
    \ a[i])\n        y = parse(Int, b[i])\n        z = xor(x, y)\n        append!(c,\
    \ z)\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7ecsei75.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp7ecsei75.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching append!(::String, ::Int64)\n  Closest candidates are:\n \
    \   append!(!Matched::BitVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n\
    \    append!(!Matched::AbstractVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n\
    \    append!(!Matched::AbstractVector, ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp7ecsei75.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ecsei75.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ecsei75.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7ecsei75.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching append!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n    append!(!Matched::AbstractVector,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n    append!(!Matched::AbstractVector,\
    \ ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp7ecsei75.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ecsei75.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ecsei75.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7ecsei75.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ append"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for (i, j) in zip(a, b)\n       \
    \ append!(c, xor(i, j))\n    end\n    return join(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz_pid4cm.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpz_pid4cm.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpz_pid4cm.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_pid4cm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_pid4cm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpz_pid4cm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpz_pid4cm.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_pid4cm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_pid4cm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpz_pid4cm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpz_pid4cm.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_pid4cm."
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    xored = \"\"\n    for i in 1:length(a)\n        # XOR\
    \ bit by bit\n        xored = xored * string(xor(parse(Int,a[i]), parse(Int,b[i])))\n\
    \    end\n    return xored\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be the same length.\"))\n    end\n    return [a[i] == b[i] ? \"0\"\
    \ : \"1\" for i in 1:length(a)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7n4ewit5.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp7n4ewit5.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Vector{String} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp7n4ewit5.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7n4ewit5.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7n4ewit5.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7n4ewit5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Vector{String} to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp7n4ewit5.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7n4ewit5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Strings\
    \ are not of equal length\")\n    end\n    string_result = String(length(a)) #\
    \ a bit hacky ...\n    for i = 1:length(a)\n        if a[i] == b[i]\n        \
    \    string_result[i] = \"0\"\n        else\n            string_result[i] = \"\
    1\"\n        end\n    end\n    return string_result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpr7lthe23.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpr7lthe23.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpr7lthe23.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7lthe23.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7lthe23.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpr7lthe23.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpr7lthe23.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7lthe23.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7lthe23.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpr7lthe23.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) > length(b)\n        b = string(\"0\"\
    , b)\n    elseif length(a) < length(b)\n        a = string(\"0\", a)\n    end\n\
    \    r = String[]\n    for i in 1:length(a)\n        push!(r, xor(parse(Int, a[i]),\
    \ parse(Int, b[i])))\n    end\n    join(map(string, r))\nend\n#\n# # TODO: make\
    \ these tests pass\n# using Test\n# @test string_xor(\"010\", \"110\") == \"100\"\
    \n# @test string_xor(\"011\", \"100\") == \"111\"\n#\n\"\"\" Now we have a function\
    \ that combines two bit strings with XOR.\n    Write a function that XORs a number\
    \ of strings together.\n    >>> xor_n([\"101\", \"010\", \"011\"])\n    \"000\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp22ksb7pd.jl:24\nin expression starting at /tmp/tmp22ksb7pd.jl:24\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"string_xor():\
    \ input strings are not of equal length\")\n    end\n    out = String(length(a))\n\
    \    for (i,x) in enumerate(a)\n        if x != b[i]\n            out[i] = '1'\n\
    \        else\n            out[i] = '0'\n        end\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6cq9xa80.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp6cq9xa80.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp6cq9xa80.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cq9xa80.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6cq9xa80.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6cq9xa80.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp6cq9xa80.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6cq9xa80.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6cq9xa80.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6cq9xa80.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = zeros(length(a))\n    for i = 1:length(a)\n   \
    \     if a[i] == b[i]\n            c[i] = \"0\"\n        else\n            c[i]\
    \ = \"1\"\n        end\n    end\n    return join(c, \"\")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn9u7rg8m.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpn9u7rg8m.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Float64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Float64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn9u7rg8m.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn9u7rg8m.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn9u7rg8m.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn9u7rg8m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Float64\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Float64}, x::String, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn9u7rg8m.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn9u7rg8m.jl:23 [inli"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    len_a = length(a)\n    len_b = length(b)\n    if len_a\
    \ != len_b\n        throw(ArgumentError(\"string_xor(): inputs must be the same\
    \ length\"))\n    end\n    c = String(undef, len_a)\n    for i in 1:len_a\n  \
    \      c[i] = '0'\n        if a[i] != b[i]\n            c[i] = '1'\n        end\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpaz8buxv9.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpaz8buxv9.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1]\
    \ string_xor(a::String, b::String)\n     @ Main /tmp/tmpaz8buxv9.jl:12\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaz8buxv9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaz8buxv9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaz8buxv9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::UndefInitializer,\
    \ ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpaz8buxv9.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaz8buxv9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaz8buxv9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaz8buxv9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpaz8buxv9.jl:12\n   [2] macro expansion\n   \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaz8buxv9.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaz8buxv9.jl:25\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    l = length(a)\n    z = zeros(Int, l)\n    @simd for\
    \ i in 1:l\n        if a[i] == b[i]\n            z[i] = 0\n        else\n    \
    \        z[i] = 1\n        end\n    end\n    return join(z, \"\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977961
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\" Input are two strings a and b consisting only\
    \ of 1s and 0s.\n    Perform binary XOR on these inputs and return result also\
    \ as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result = result * \"0\"\n        else\n            result = result * \"\
    1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    @assert length(a) == length(b) \"Error:\
    \ input strings must be of equal length.\"\n    for i = 1:length(a)\n        a_i\
    \ = parse(Int, a[i])\n        b_i = parse(Int, b[i])\n        c = c * string(xor(a_i,\
    \ b_i))\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for i in 1:length(a)\n        push!(c,\
    \ xor(a[i], b[i]))\n    end\n    return join(c)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbhmoahw_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpbhmoahw_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpbhmoahw_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhmoahw_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhmoahw_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbhmoahw_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpbhmoahw_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhmoahw_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhmoahw_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbhmoahw_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpbhmoahw_.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhmoahw_."
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in eachindex(a)\n        if a[i]\
    \ == b[i]\n            push!(c, \"0\")\n        else\n            push!(c, \"\
    1\")\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn1k53hxw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpn1k53hxw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn1k53hxw.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn1k53hxw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1k53hxw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn1k53hxw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn1k53hxw.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn1k53hxw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1k53hxw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn1k53hxw.jl:24\n  T"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for (i, j) in zip(a, b)\n       \
    \ push!(c, i \u22BB j)\n    end\n    return join(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3i7wggcc.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp3i7wggcc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp3i7wggcc.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i7wggcc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i7wggcc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3i7wggcc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp3i7wggcc.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i7wggcc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i7wggcc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3i7wggcc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp3i7wggcc.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i7wggcc."
  timestamp: 1659977966
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    if length(a) != length(b)\n    \
    \    throw(DomainError(\"StringXOR: string lengths must be equal!\"))\n    end\n\
    \    for i = 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\
    \n        else\n            result *= \"1\"\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    assert(length(a) == length(b))\n    c = []\n    for\
    \ i in 1:length(a)\n        if a[i] == '0'\n            if b[i] == '0'\n     \
    \           push!(c, '0')\n            else\n                push!(c, '1')\n \
    \           end\n        else\n            if b[i] == '0'\n                push!(c,\
    \ '1')\n            else\n                push!(c, '0')\n            end\n   \
    \     end\n    end\n    return join(c)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1461_3e5.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp1461_3e5.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp1461_3e5.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1461_3e5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1461_3e5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp1461_3e5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp1461_3e5.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1461_3e5.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1461_3e5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp1461_3e5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp1461_3e5.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1461_3e5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1461_3e5.jl:30\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        result\
    \ = string(parse(Int, result), xor(parse(Int, a[i]), parse(Int, b[i])))\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4a7wz5ns.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4a7wz5ns.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  ArgumentError:\
    \ input string is empty or only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:109\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] string_xor(a::String, b::String)\n     @ Main /tmp/tmp4a7wz5ns.jl:9\n \
    \  [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4a7wz5ns.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4a7wz5ns.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4a7wz5ns.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  ArgumentError: input string is empty or\
    \ only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:109\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] string_xor(a::String, b::String)\n     @ Main /tmp/tmp4a7wz5ns.jl:9\n \
    \  [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp4a7wz5ns.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp4a7wz5ns.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4a7wz5ns.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  ArgumentError: input string is\
    \ empty or only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::In"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    aa = convert(Array{Int},a)\n    bb = convert(Array{Int},b)\n\
    \    if(length(aa) > length(bb))\n        bb = vcat(bb, zeros(length(aa)-length(bb)))\n\
    \    elseif(length(aa) < length(bb))\n        aa = vcat(aa, zeros(length(bb)-length(aa)))\n\
    \    end\n    return join(map(xor, aa, bb))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphueqn46x.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmphueqn46x.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type \n    String to an object of type \n    Array{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmphueqn46x.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphueqn46x.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphueqn46x.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphueqn46x.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type \n    String to an object of type \n    Array{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmphueqn46x.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphueqn46x.jl:22 [inlined]\n\
    \   [4] macro expans"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a_b_pairs = collect(zip(a, b))\n    return join([xor(a,\
    \ b) for (a, b) in a_b_pairs])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps8oqj1hy.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmps8oqj1hy.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(::Tuple{Char, Char})\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] string_xor(a::String, b::String)\n     @ Main /tmp/tmps8oqj1hy.jl:8\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmps8oqj1hy.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmps8oqj1hy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps8oqj1hy.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(::Tuple{Char, Char})\n     @ Main ./none:0\n   [2] iterate\n\
    \     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n\
    \   [4] string_xor(a::String, b::String)\n     @ Main /tmp/tmps8oqj1hy.jl:8\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmps8oqj1hy.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmps8oqj1hy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps8oqj1hy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !"
  timestamp: 1659977966
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    @assert length(a) == length(b)\n    out = \"\"\n  \
    \  for i in 1:length(a)\n        if a[i] == b[i]\n            out = out * \"0\"\
    \n        else\n            out = out * \"1\"\n        end\n    end\n    return\
    \ out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\"\n    >>> string_xor(\"010\", \"110\")\n    \"\
    100\"\n    \"\"\"\n    as_bytes = map(byte, a)\n    bs_bytes = map(byte, b)\n\
    \    xord_bytes = map(xor, as_bytes, bs_bytes)\n    return string(xord_bytes)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi0ifqm_a.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpi0ifqm_a.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ byte not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmpi0ifqm_a.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ifqm_a.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ifqm_a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi0ifqm_a.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: byte not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi0ifqm_a.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ifqm_a.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ifqm_a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi0ifqm_a.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: byte not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpi0ifqm_a.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ifqm_a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ifqm_a.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for (a_ch, b_ch) in zip(a, b)\n\
    \        result *= string_xor(a_ch, b_ch)\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsynvoh8z.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsynvoh8z.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching string_xor(::Char, ::Char)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpsynvoh8z.jl:9\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsynvoh8z.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsynvoh8z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsynvoh8z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching string_xor(::Char,\
    \ ::Char)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpsynvoh8z.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsynvoh8z.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsynvoh8z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsynvoh8z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ string_xor(::Char, ::Char)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpsynvoh8z.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsynvoh8z.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsynvoh8z.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Length of the two strings must be equal\"))\n    end\n    n = length(a)\n    c\
    \ = String(\" \"^n)\n    for i in 1:n\n        c[i] = xor(Int(a[i]), Int(b[i]))\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyg8ee1qo.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpyg8ee1qo.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching setindex!(::String, ::Int64, ::Int64)\n  Stacktrace:\n  \
    \ [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpyg8ee1qo.jl:13\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg8ee1qo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8ee1qo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyg8ee1qo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Int64, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpyg8ee1qo.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg8ee1qo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8ee1qo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyg8ee1qo.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ setindex!(::String, ::Int64, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpyg8ee1qo.jl:13\n   [2] macro expansion\n   \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyg8ee1qo.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg8ee1qo.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in range(1, min(length(a),\
    \ length(b)) + 1)\n        result *= a[i] != b[i] ? \"1\" : \"0\"\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgaq_2sft.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpgaq_2sft.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  BoundsError:\
    \ attempt to access 6-codeunit String at index [7]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ string_xor(a::String, b::String)\n     @ Main /tmp/tmpgaq_2sft.jl:9\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpgaq_2sft.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgaq_2sft.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpgaq_2sft.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpgaq_2sft.jl:9\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpgaq_2sft.jl:19 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpgaq_2sft.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpgaq_2sft.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  BoundsError: attempt to access\
    \ 4-codeunit String at index [5]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpgaq_2sft.jl:9\n   [5] macro expansion\n    \
    \ @"
  timestamp: 1659977966
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"String length\
    \ not equal\")\n    end\n    result = Vector{Char}(undef, length(a))\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result[i] = '0'\n   \
    \     else\n            result[i] = '1'\n        end\n    end\n    return join(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    lena = length(a)\n    lenb = length(b)\n    if lena\
    \ > lenb\n        b = \"0\"^(lena-lenb) * b\n    elseif lenb > lena\n        a\
    \ = \"0\"^(lenb-lena) * a\n    end\n    r = \"\"\n    for i in 1:length(a)\n \
    \       if a[i] == b[i]\n            r = r * \"0\"\n        else\n           \
    \ r = r * \"1\"\n        end\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = string(a)\n    b = string(b)\n    x = []\n    for\
    \ i in 1:length(a)\n        if a[i] == \"1\" && b[i] == \"1\"\n            push!(x,\
    \ \"0\")\n        elseif a[i] == \"0\" && b[i] == \"0\"\n            push!(x,\
    \ \"0\")\n        elseif a[i] == \"1\" && b[i] == \"0\"\n            push!(x,\
    \ \"1\")\n        else\n            push!(x, \"1\")\n        end\n    end\n  \
    \  return join(x)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj8fu5x2t.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpj8fu5x2t.jl:28\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"111111\" == \"010010\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8fu5x2t.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8fu5x2t.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj8fu5x2t.jl:29\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"1\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8fu5x2t.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8fu5x2t.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpj8fu5x2t.jl:30\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"1111\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj8fu5x2t.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj8fu5x2t.jl:27\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) > length(b)\n        b = string(zeros(Bool,\
    \ length(a) - length(b))) * b\n    elseif length(a) < length(b)\n        a = string(zeros(Bool,\
    \ length(b) - length(a))) * a\n    end\n    return(string(Int.(a) .^ Int.(b)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb7t7twyr.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpb7t7twyr.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [4] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [5] getindex\n      @ ./broadcast.jl:597\
    \ [inlined]\n    [6] copy\n      @ ./broadcast.jl:875 [inlined]\n    [7] materialize\n\
    \      @ ./broadcast.jl:860 [inlined]\n    [8] string_xor(a::String, b::String)\n\
    \      @ Main /tmp/tmpb7t7twyr.jl:12\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpb7t7twyr.jl:19 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpb7t7twyr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpb7t7twyr.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching Int64(::String)\n\
    \  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar) where T<:Union{Int32,\
    \ Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n\
    \    (::Type{T})(!Matched::BigInt) where T<:Union{Int128, Int16, Int32, Int64,\
    \ Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n    "
  timestamp: 1659977968
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    l = length(a)\n    res = \"\"\n    for i = 1:l\n  \
    \      res *= (a[i] == b[i] ? \"0\" : \"1\")\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    String lengths are not equal\"))\n    end\n    r = \"\"\n    for i in 1:length(a)\n\
    \        a_i = parse(Int, a[i])\n        b_i = parse(Int, b[i])\n        r = r\
    \ * string(a_i \u22BB b_i)\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    r = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            r = r * \"0\"\n        else\n            r = r * \"1\"\n\
    \        end\n    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977964
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    s = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ != b[i]\n            s = s * \"1\"\n        else\n            s = s * \"0\"\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    xor = zip(str2bits(a), str2bits(b))\n    xor = map(xor,\
    \ (x,y) -> xor(x,y))\n    return join(bits2str(xor))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx3599oj0.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpx3599oj0.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ str2bits not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpx3599oj0.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3599oj0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx3599oj0.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpx3599oj0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: str2bits not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpx3599oj0.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3599oj0.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx3599oj0.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpx3599oj0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: str2bits not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpx3599oj0.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3599oj0.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx3599oj0.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    m, n = length(a), length(b)\n    if m < n \n      \
    \  a = \"0\" * (n - m) * a\n    elseif n < m\n        b = \"0\" * (m - n) * b\n\
    \    end\n    res = \"\"\n    for i in 1:length(a)\n        res *= (a[i] ^ b[i])\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9y6zdhl_.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp9y6zdhl_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp9y6zdhl_.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y6zdhl_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9y6zdhl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9y6zdhl_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching ^(::Char,\
    \ ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp9y6zdhl_.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9y6zdhl_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9y6zdhl_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9y6zdhl_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp9y6zdhl_.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  timestamp: 1659977968
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string(parse(Int,a[i]) \u22BB parse(Int,b[i]))\n    end\n    return c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\";\n    for i in collect(1:length(a))\n\
    \        if a[i] == b[i]\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    out = String(n)\n    for i in 1:n\n\
    \        if a[i] == b[i]\n            out[i] = \"0\"\n        else\n         \
    \   out[i] = \"1\"\n        end\n    end\n    return out\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbrnyll8s.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpbrnyll8s.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpbrnyll8s.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrnyll8s.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrnyll8s.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbrnyll8s.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpbrnyll8s.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrnyll8s.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrnyll8s.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbrnyll8s.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String) a"
  timestamp: 1659977969
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = \"\"\n    for i in 1:length(a)\n        res *=\
    \ xor(Int(a[i]), Int(b[i]))\n    end\n    return res\nend\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp0cctogqj.jl:19\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmp0cctogqj.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cctogqj.jl:19 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cctogqj.jl:18\n'''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    binary_a = parse(Int, a, base=2)\n    binary_b = parse(Int,\
    \ b, base=2)\n    xor_result = xor(binary_a, binary_b)\n    binary_result = string(xor_result,\
    \ base=2)\n    return binary_result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptags0330.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmptags0330.jl:18\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptags0330.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptags0330.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptags0330.jl:20\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptags0330.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptags0330.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Type assert\n    @assert length(a) == length(b)\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq57_m817.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq57_m817.jl:1\n\
    in expression starting at /tmp/tmpq57_m817.jl:1\n"
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Both strings\
    \ must be the same length.\")\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(result, \"0\")\n        else\n   \
    \         push!(result, \"1\")\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp90xi5myn.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp90xi5myn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp90xi5myn.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp90xi5myn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90xi5myn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp90xi5myn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp90xi5myn.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp90xi5myn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90xi5myn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp90xi5myn.jl:27\n  T"
  timestamp: 1659977969
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs should be of same length\"))\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if(a[i] == b[i])\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of the same length\")\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(result, \"0\")\n        else\n   \
    \         push!(result, \"1\")\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiwl3q1mk.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpiwl3q1mk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpiwl3q1mk.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiwl3q1mk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiwl3q1mk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiwl3q1mk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpiwl3q1mk.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiwl3q1mk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiwl3q1mk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiwl3q1mk.jl:27\n  T"
  timestamp: 1659977969
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = \"\"\n    for i in 1:length(a)\n        res *=\
    \ sum([parse(Int, a[i]), parse(Int, b[i])]) % 2\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp8ao8a6g7.jl:18\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmp8ao8a6g7.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ao8a6g7.jl:18 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ao8a6g7.jl:17\n'''
  timestamp: 1659977970
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in range(1, length(a))\n      \
    \  if a[i] != b[i]\n            c = c * \"1\"\n        else\n            c = c\
    \ * \"0\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(eltype(a))\n    for (i, j) in zip(a, b)\n\
    \        push!(c, xor(i, j))\n    end\n    return c\nend\n \nc1 = string_xor(ciphertext,\
    \ \"0000\")\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: ciphertext not defined\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckco70at.jl:14\nin expression starting at\
    \ /tmp/tmpckco70at.jl:14\n"
  stdout: ''
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        println(\"Arguments\
    \ should be of the same length. Returning first argument.\")\n        return a\n\
    \    end\n    c = \"\"\n    for i in 1:length(a)\n        push!(c, xor(parse(Int,\
    \ a[i]), parse(Int, b[i])))\n    end\n    return join(c)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3k12_qaw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp3k12_qaw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::Int64)\n  Closest candidates are:\n   \
    \ push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp3k12_qaw.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3k12_qaw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3k12_qaw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3k12_qaw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp3k12_qaw.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3k12_qaw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3k12_qaw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3k12_qaw.jl:24\n  Tes"
  timestamp: 1659977970
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = max(length(a), length(b))\n    a = \"0\"*(n-length(a))*a\n\
    \    b = \"0\"*(n-length(b))*b\n    return join([ a[i] \u2260 b[i] ? \"1\" : \"\
    0\" for i in 1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp88q9_2dz.jl:17\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    *(::String, ::Int64, ::String)\n     @ Base ./operators.jl:655\n   [2] string_xor(a::String,
    b::String)\n     @ Main /tmp/tmp88q9_2dz.jl:8\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp88q9_2dz.jl:17 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp88q9_2dz.jl:16\n'''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ XOR(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg_knpp3i.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpg_knpp3i.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ XOR not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpg_knpp3i.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_knpp3i.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_knpp3i.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpg_knpp3i.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: XOR not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpg_knpp3i.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_knpp3i.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_knpp3i.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpg_knpp3i.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: XOR not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpg_knpp3i.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_knpp3i.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_knpp3i.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Length of\
    \ both strings must be the same.\")\n    end\n    output = repeat('0', length(a))\n\
    \    for i in 1:length(a)\n        if a[i] == b[i]\n            output[i] = '0'\n\
    \        else\n            output[i] = '1'\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp24u1vjw3.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp24u1vjw3.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1]\
    \ string_xor(a::String, b::String)\n     @ Main /tmp/tmp24u1vjw3.jl:13\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp24u1vjw3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp24u1vjw3.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp24u1vjw3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmp24u1vjw3.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp24u1vjw3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp24u1vjw3.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp24u1vjw3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp24u1vjw3.jl:13\n   [2] macro expansion\n   \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp24u1vjw3.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp24u1vjw3.jl:24\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a_bin = parse(Int, a, base=2)\n    b_bin = parse(Int,\
    \ b, base=2)\n    # print(a_bin)\n    # print(b_bin)\n    x = bitxor(a_bin, b_bin)\n\
    \    return dec2bin(x)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyla1sbsv.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyla1sbsv.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpyla1sbsv.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyla1sbsv.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyla1sbsv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyla1sbsv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpyla1sbsv.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyla1sbsv.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyla1sbsv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyla1sbsv.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpyla1sbsv.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyla1sbsv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyla1sbsv.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    bits = []\n    for i in zip(a, b)\n        push!(bits,\
    \ xor(Char(i[1]), Char(i[2])))\n    end\n    return reduce(*, bits)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpss7li96w.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpss7li96w.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpss7li96w.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss7li96w.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss7li96w.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpss7li96w.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpss7li96w.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss7li96w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss7li96w.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpss7li96w.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpss7li96w.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss7li96w."
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = parse(Int, a, base=2)\n    b = parse(Int, b, base=2)\n\
    \    c = xor(a, b)\n    c = bin(c, prefix=\"\")\n    c = replace(c, \"0b\", \"\
    \")\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq97l000p.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpq97l000p.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bin not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpq97l000p.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq97l000p.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq97l000p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq97l000p.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bin not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpq97l000p.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq97l000p.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq97l000p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpq97l000p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bin not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpq97l000p.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq97l000p.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq97l000p.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string( int(a[i]) \u22BB int(b[i]) )\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3pr4p1n7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp3pr4p1n7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmp3pr4p1n7.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3pr4p1n7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3pr4p1n7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3pr4p1n7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp3pr4p1n7.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3pr4p1n7.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3pr4p1n7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3pr4p1n7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp3pr4p1n7.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3pr4p1n7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3pr4p1n7.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(DimensionMismatch(\"\
    Binary strings must be same length.\"))\n    end\n    c = copy(a)\n    for i =\
    \ 1:length(a)\n        c[i] = xor(a[i], b[i])\n    end\n    return c\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp24_xheio.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp24_xheio.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp24_xheio.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp24_xheio.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp24_xheio.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp24_xheio.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp24_xheio.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp24_xheio.jl:22 [inlined]\n\
    \   [4"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    assert(length(a) == length(b))\n    r = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            r = r * \"0\"\n     \
    \   else\n            r = r * \"1\"\n        end\n    end\n    return r\nend\n\
    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ modulo addition (XOR) on these inputs and return result also as a string.\n\
    \    >>> string_add(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp108xxi2f.jl:18\nin expression starting at /tmp/tmp108xxi2f.jl:18\n"
  stdout: ''
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in zip(a, b)\n        push!(c,\
    \ \"1\"^i[1]^i[2])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy0oapbbi.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpy0oapbbi.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpy0oapbbi.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0oapbbi.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0oapbbi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy0oapbbi.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching ^(::Char,\
    \ ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpy0oapbbi.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0oapbbi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0oapbbi.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy0oapbbi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::Char, ::Char)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpy0oapbbi.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro e"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"The two\
    \ strings must have the same length.\")\n    end\n    result = \"\"\n    for i\
    \ in 1:length(a)\n        result *= string(Int(a[i]) != Int(b[i]))\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbhu_gbqj.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpbhu_gbqj.jl:21\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"falsetruefalsefalsetruefalse\"\
    \ == \"010010\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbhu_gbqj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbhu_gbqj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbhu_gbqj.jl:22\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"false\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbhu_gbqj.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbhu_gbqj.jl:20\ntest set: Test Failed at /tmp/tmpbhu_gbqj.jl:23\n\
    \  Expression: candidate(\"0101\", \"0000\") == \"0101\"\n   Evaluated: \"falsetruefalsetrue\"\
    \ == \"0101\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbhu_gbqj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbhu_gbqj.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # c will be the result of the XOR\n    c = String(a)\n\
    \    # check that the strings have the same length\n    if length(a) != length(b)\n\
    \        error(\"Inputs must have the same length!\")\n    end\n    # compute\
    \ the XOR for each digit in the string\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c[i] = \"0\"\n        else\n            c[i] = \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfph1jtf_.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpfph1jtf_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching setindex!(::String, ::String, ::Int64)\n  Stacktrace:\n \
    \  [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpfph1jtf_.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfph1jtf_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfph1jtf_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfph1jtf_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching setindex!(::String,\
    \ ::String, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpfph1jtf_.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfph1jtf_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfph1jtf_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfph1jtf_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ setindex!(::String, ::String, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpfph1jtf_.jl:16\n   [2] macro expansion\n   \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfph1jtf_.jl:30 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfph1jtf_.jl:27\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977971
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ need to be of equal length\")\n    end\n    n = length(a)\n    result = \"\"\
    ;\n    for i in 1:n\n        if a[i] == '0'\n            if b[i] == '0'\n    \
    \            result = result * \"0\"\n            elseif b[i] == '1'\n       \
    \         result = result * \"1\"\n            else\n                error(\"\
    Input strings contain illegal characters\")\n            end\n        elseif a[i]\
    \ == '1'\n            if b[i] == '0'\n                result = result * \"1\"\n\
    \            elseif b[i] == '1'\n                result = result * \"0\"\n   \
    \         else\n                error(\"Input strings contain illegal characters\"\
    )\n            end\n        else\n            error(\"Input strings contain illegal\
    \ characters\")\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    ret = \"\"\n    for i in range(n):\n\
    \        if a[i] != b[i]:\n            ret = ret * \"1\"\n        else:\n    \
    \        ret = ret * \"0\"\n    return ret\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvizri8k7.jl:10\nin expression starting at\
    \ /tmp/tmpvizri8k7.jl:10\n"
  stdout: ''
  timestamp: 1659977969
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        return false\n \
    \   end\n    c = 0\n    for i in 1:length(a)\n        c += parse(Int,a[i])*(1-2*parse(Int,b[i]))\n\
    \    end\n    return \"1\"*(c>0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpgh8wjk1f.jl:21\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Bool)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:183\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmpgh8wjk1f.jl:14\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgh8wjk1f.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgh8wjk1f.jl:20\n'''
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        println(\"Error:\
    \ lengths do not match\")\n        return \"\"\n    end\n    result = \"\"\n \
    \   for i in 1:length(a)\n        if a[i] == b[i]\n            result = result\
    \ * \"0\"\n        else\n            result = result * \"1\"\n        end\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppi8gaiqw.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmppi8gaiqw.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmppi8gaiqw.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppi8gaiqw.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppi8gaiqw.jl:13\ntest set:\
    \ Error During Test at /tmp/tmppi8gaiqw.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmppi8gaiqw.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppi8gaiqw.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /t"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    N = length(a)\n    assert(N == length(b))\n    c =\
    \ String(\"\")\n    for i = 1:N\n        c = string(c, xor(parse(Int, a[i]), parse(Int,\
    \ b[i])))\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgk1tbhu5.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgk1tbhu5.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpgk1tbhu5.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgk1tbhu5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgk1tbhu5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgk1tbhu5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpgk1tbhu5.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgk1tbhu5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgk1tbhu5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgk1tbhu5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpgk1tbhu5.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgk1tbhu5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgk1tbhu5.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for k = 1:length(a)\n        if(a[k]\
    \ == b[k])\n            c = c * \"0\"\n        else\n            c = c * \"1\"\
    \n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in range(length(a))\n    \
    \    achar = a[i]\n        bchar = b[i]\n        if achar == bchar\n         \
    \   result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpw7oxxrmc.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw7oxxrmc.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  ArgumentError:\
    \ Cannot construct range from arguments:\n  start = 6\n  step = nothing\n  stop\
    \ = nothing\n  length = nothing\n  Try specifying more arguments.\n  \n  Stacktrace:\n\
    \   [1] range_error(start::Int64, step::Nothing, stop::Nothing, length::Nothing)\n\
    \     @ Base ./range.jl:199\n   [2] _range(start::Int64, step::Nothing, stop::Nothing,\
    \ len::Nothing)\n     @ Base ./range.jl:125\n   [3] range(start::Int64; stop::Nothing,\
    \ length::Nothing, step::Nothing)\n     @ Base ./range.jl:109\n   [4] range(start::Int64)\n\
    \     @ Base ./range.jl:109\n   [5] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpw7oxxrmc.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpw7oxxrmc.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpw7oxxrmc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw7oxxrmc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  ArgumentError: Cannot construct range from\
    \ arguments:\n  start = 1\n  step = nothing\n  stop = nothing\n  length = nothing\n\
    \  Try specifying more arguments.\n  \n  Stacktrace:\n   [1] range_error(start::Int64,\
    \ step::Nothing, stop::Nothing, length::Nothing)\n     @ Base ./range.jl:199\n\
    \   [2] _range(start::Int64, step::Nothing, stop::Nothing, len::Nothing)\n   \
    \  @ Base ./range.jl:125\n   [3] range(start::Int64; stop::Nothing, length::Nothing,\
    \ step::Nothing)\n     @ Base ./range.jl:109\n   [4] range(start::Int64)\n   \
    \  @ Base ./range.jl:109\n   [5] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpw7oxxrmc.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpw7oxxrmc.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    tmp = \"\"\n    for i in 1:length(a)\n        x = parse(Int,\
    \ a[i])\n        y = parse(Int, b[i])\n        tmp = tmp * string(bitxor(x, y))\n\
    \    end\n    return tmp\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjtr3n7h4.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjtr3n7h4.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpjtr3n7h4.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtr3n7h4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtr3n7h4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjtr3n7h4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpjtr3n7h4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtr3n7h4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtr3n7h4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjtr3n7h4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpjtr3n7h4.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtr3n7h4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtr3n7h4.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    aa = [parse(Int, x) for x in a]\n    bb = [parse(Int,\
    \ x) for x in b]\n    return \"\".join([string(1-integer(int_xor(aa[i], bb[i])))\
    \ for i in 1:length(aa)])\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp85836hzf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp85836hzf.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  type String\
    \ has no field join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmp85836hzf.jl:9\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp85836hzf.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp85836hzf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp85836hzf.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp85836hzf.jl:9\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp85836hzf.jl:17 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp85836hzf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp85836hzf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp85836hzf.jl:9\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp85836hzf.jl:18 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp85836hzf.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in eachindex(a)\n        c *= xor(a[i],\
    \ b[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkiyh1721.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpkiyh1721.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpkiyh1721.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiyh1721.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkiyh1721.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkiyh1721.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpkiyh1721.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiyh1721.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkiyh1721.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkiyh1721.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpkiyh1721.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkiyh1721."
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\" The strings should be of the same length, or\
    \ else error is thrown. \"\"\"\n    if length(a) != length(b)\n        error(\"\
    The input strings should be of the same length.\")\n    end\n    \"\"\" Convert\
    \ both strings to bitarrays. \"\"\"\n    bitarray_a = bitarray(a)\n    bitarray_b\
    \ = bitarray(b)\n    \"\"\" Apply XOR and convert back to string. \"\"\"\n   \
    \ bitarray_xor = bitarray_a .^ bitarray_b\n    xor_string = string(bitarray_xor)\n\
    \    return xor_string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb6vw0q2u.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpb6vw0q2u.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitarray not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpb6vw0q2u.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vw0q2u.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vw0q2u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb6vw0q2u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitarray not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpb6vw0q2u.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vw0q2u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vw0q2u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb6vw0q2u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitarray not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpb6vw0q2u.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb6vw0q2u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb6vw0q2u.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    ch = \"\"\n    for i in 1:length(a)\n        if (a[i]\
    \ == '0' && b[i] == '0') || (a[i] == '1' && b[i] == '1')\n            ch = ch\
    \ * \"0\"\n        else\n            ch = ch * \"1\"\n        end\n    end\n \
    \   return ch\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return string(Int.(a.=='1') .\u22BB Int.(b.=='1'))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr2n3yz9f.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpr2n3yz9f.jl:14\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"0\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2n3yz9f.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2n3yz9f.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpr2n3yz9f.jl:16\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"0\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr2n3yz9f.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr2n3yz9f.jl:13\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Length of inputs must be the same.\"))\n    end\n    c = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            c *= \"0\"\n        else\n            c\
    \ *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = zero(Bool)\n    for i in range(1,length(a))\n \
    \       c = c \u22BB (a[i]=='1') \u22BB (b[i]=='1')\n        push!(a, c ? '1'\
    \ : '0')\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8ikzzrpo.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp8ikzzrpo.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any,\
    \ ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp8ikzzrpo.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ikzzrpo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ikzzrpo.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8ikzzrpo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::Char)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at\
    \ ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp8ikzzrpo.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ikzzrpo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ikzzrpo.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8ikzzrpo.jl:21\n  Test "
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # If the two strings are not of the same length, \n\
    \    # raise an exception\n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    The strings are not of equal length.\"))\n    end\n    \n    # Convert the two\
    \ strings to vectors of bits\n    a_bits = string_to_bits(a)\n    b_bits = string_to_bits(b)\n\
    \    \n    # Compute the XOR between the two inputs\n    xor_result = xor_bits(a_bits,\
    \ b_bits)\n    \n    # Convert the vector of bits to a string and return it\n\
    \    return bits_to_string(xor_result)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2tc92w2s.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp2tc92w2s.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ string_to_bits not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp2tc92w2s.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2tc92w2s.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2tc92w2s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2tc92w2s.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: string_to_bits not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp2tc92w2s.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2tc92w2s.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2tc92w2s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2tc92w2s.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: string_to_bits not\
    \ defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp2tc92w2s.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2tc92w2s.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2tc92w2s.jl:27\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977973
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # todo\n    return \"\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpudftnw5i.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpudftnw5i.jl:15\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudftnw5i.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudftnw5i.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpudftnw5i.jl:16\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudftnw5i.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudftnw5i.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpudftnw5i.jl:17\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpudftnw5i.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpudftnw5i.jl:14\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  timestamp: 1659977972
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c *= ((parse(Int,\
    \ a[i]) + parse(Int, b[i])) % 2)\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppsrki2ef.jl:18\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmppsrki2ef.jl:9\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsrki2ef.jl:18 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsrki2ef.jl:17\n'''
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if (length(a) != length(b))\n        error(\"\
    Input strings must be of the same length.\")\n    end\n    a = convert(Int,a)\n\
    \    b = convert(Int,b)\n    s = []\n    for i in 1:length(a)\n        push!(s,\
    \ mod(a[i] + b[i], 2))\n    end\n    s = convert(String, s)\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp70ry3ozq.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp70ry3ozq.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp70ry3ozq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70ry3ozq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70ry3ozq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp70ry3ozq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp70ry3ozq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70ry3ozq.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70ry3ozq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp70ry3ozq.jl:27\n "
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = string(length(a))\n    for i in 1:length(a)\n\
    \        res[i] = XOR(a[i], b[i])\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiqztsceo.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpiqztsceo.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ XOR not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpiqztsceo.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqztsceo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqztsceo.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpiqztsceo.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: XOR not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiqztsceo.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqztsceo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqztsceo.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpiqztsceo.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: XOR not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiqztsceo.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqztsceo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqztsceo.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    #find min length between string a and b\n    if length(a)\
    \ < length(b)\n        short = a\n        long = b\n    else\n        short =\
    \ b\n        long = a\n    end\n    #create the output string\n    output = \"\
    \"\n    #iterate over short string\n    for i in 1:length(short)\n        #xor\
    \ the numbers in a and b\n        if short[i] == long[i]\n            output =\
    \ output * \"0\"\n        else\n            output = output * \"1\"\n        end\n\
    \    end\n    #add the rest of the long string\n    output = output * long[length(short)+1:end]\n\
    \    return output\nend\n# Problem 3\n\"\"\" Input is a string of 1s and 0s.\n\
    \    Return the hamming weight, i.e. the number of 1s, in the string.\n    >>>\
    \ hamming_weight(\"10010011\")\n    5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8pxs4c5u.jl:31\nin expression starting at /tmp/tmp8pxs4c5u.jl:31\n"
  stdout: ''
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = parse(Int, a, base=2)\n    b = parse(Int, b, base=2)\n\
    \    c = a\u22BBb\n    return string(c, base=2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpriluxlpp.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpriluxlpp.jl:17\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpriluxlpp.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpriluxlpp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpriluxlpp.jl:19\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpriluxlpp.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpriluxlpp.jl:16\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    #convert both strings to arrays of integers\n    A\
    \ = str2array(a)\n    B = str2array(b)\n    #XOR A and B\n    C = xor(A,B)\n \
    \   return array2str(C)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppg5txppa.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmppg5txppa.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ str2array not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmppg5txppa.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppg5txppa.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppg5txppa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppg5txppa.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: str2array not defined\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmppg5txppa.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppg5txppa.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppg5txppa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppg5txppa.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: str2array not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmppg5txppa.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppg5txppa.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppg5txppa.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977974
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Arguments must be of the same length\"))\n    end\n    c = String[]\n    for i\
    \ in 1:length(a)\n        if a[i] == b[i]\n            push!(c, \"0\")\n     \
    \   else\n            push!(c, \"1\")\n        end\n    end\n    join(c)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"length of\
    \ inputs must be equal\")\n    end\n    c = []\n    for i in 1:length(a)\n   \
    \     c = append!(c, xor(parse(Int, a[i]), parse(Int, b[i])))\n    end\n    string(c)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0dksay2v.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp0dksay2v.jl:21\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"Any[0, 1, 0, 0, 1, 0]\" ==\
    \ \"010010\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dksay2v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dksay2v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0dksay2v.jl:22\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"Any[0]\" == \"0\"\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0dksay2v.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0dksay2v.jl:20\ntest set: Test Failed at /tmp/tmp0dksay2v.jl:23\n\
    \  Expression: candidate(\"0101\", \"0000\") == \"0101\"\n   Evaluated: \"Any[0,\
    \ 1, 0, 1]\" == \"0101\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0dksay2v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0dksay2v.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977973
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = String(a)\n    for i in 1:length(a)\n    \
    \    result[i] = a[i] ^ b[i]\n    end\n    return result\nend\nstring_xor(\"010\"\
    , \"110\")\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching ^(::Char, ::Char)\nClosest
    candidates are:\n  ^(::Union{AbstractChar, AbstractString}, !Matched::Integer)
    at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:721\nStacktrace:\n
    [1] '''
  stdout: None
  timestamp: 1659977976
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        if (a[i]\
    \ == b[i])\n            c = c * \"0\"\n        else\n            c = c * \"1\"\
    \n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    s = \"\"\n    for i in 1:length(a)\n        if (a[i]\
    \ == '0' && b[i] == '0') || (a[i] == '1' && b[i] == '1')\n            s = s *\
    \ \"0\"\n        else\n            s = s * \"1\"\n        end\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for (x, y) in zip(a, b)\n       \
    \ push!(c, string(int(x) \u22BB int(y)))\n    end\n    return join(c, \"\")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps7wdgwlm.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmps7wdgwlm.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmps7wdgwlm.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7wdgwlm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7wdgwlm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmps7wdgwlm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmps7wdgwlm.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7wdgwlm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7wdgwlm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmps7wdgwlm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmps7wdgwlm.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7wdgwlm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7wdgwlm.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977975
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\" Performs XOR on two strings.\n        >>> string_xor(\"\
    10010011\", \"0101\")\n        \"10010110\"\n        \"\"\"\n    return string(z\
    \ for (x, y, z) in zip(a, b, ' ' * max(length(a), length(b))) if x \u2260 y)\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmyar3sep.jl:18\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::Char, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmpmyar3sep.jl:11\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmyar3sep.jl:18 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmyar3sep.jl:17\n'''
  timestamp: 1659977977
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    z = \"\"\n    for i = 1:length(a)\n        if a[i]\
    \ == b[i]\n            z = z * \"0\"\n        else\n            z = z * \"1\"\n\
    \        end\n    end\n    return z\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977972
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        c = c *\
    \ (a[i]==b[i] ? \"0\" : \"1\")\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"your code goes here\"\nend\n \n\"\"\" Input is a\
    \ string a consisting only of 1s and 0s.\n    Flip all the bits in a and return\
    \ result also as a string.\n    >>> flip_all_bits(\"101\")\n    \"010\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpo46jqa9o.jl:10\nin expression starting at /tmp/tmpo46jqa9o.jl:10\n"
  stdout: ''
  timestamp: 1659977974
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = Array{UInt8}(length(a))\n    for i = 1:length(a)\n\
    \        c[i] = convert(UInt8, parse(Int, a[i]) \u22BB parse(Int, b[i]))\n   \
    \ end\n    return string(c)\nend\n \nstring_xor(\"010\", \"110\")\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching (Array{UInt8})(::Int64)\nClosest
    candidates are:\n  (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,
    Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n  (Array{T})(!Matched::LinearAlgebra.UniformScaling,
    !Matched::Integer, !Matched::Integer) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n  (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T,
    S} where S<:AbstractMatrix{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n  ...\nStacktrace:\n
    [1] '''
  stdout: None
  timestamp: 1659977977
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for (ai, bi) in zip(a, b)\n        if\
    \ ai == bi\n            c = c * \"0\"\n        else\n            c = c * \"1\"\
    \n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    L = length(a)\n    c = \"\"\n    for i = 1:L\n    \
    \    if a[i] == b[i]\n            append!(c, \"0\")\n        else\n          \
    \  append!(c, \"1\")\n        end\n    end\n    return c\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0paylr6m.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp0paylr6m.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching append!(::String, ::String)\n  Closest candidates are:\n\
    \    append!(!Matched::BitVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n\
    \    append!(!Matched::AbstractVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n\
    \    append!(!Matched::AbstractVector, ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp0paylr6m.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0paylr6m.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0paylr6m.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0paylr6m.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching append!(::String,\
    \ ::String)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n    append!(!Matched::AbstractVector,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1050\n    append!(!Matched::AbstractVector,\
    \ ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1053\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp0paylr6m.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0paylr6m.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0paylr6m.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0paylr6m.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ appe"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = Array{Int}(length(a))\n    for i = 1:length(a)\n\
    \        c[i] = bitxor(Int(a[i]), Int(b[i]))\n    end\n    return join(c, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa3vh37pz.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpa3vh37pz.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpa3vh37pz.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3vh37pz.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3vh37pz.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpa3vh37pz.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpa3vh37pz.jl:7\n   [2] macro exp"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\" 2.1.1.1 \"\"\"\n    # Error checking:\n    if\
    \ length(a) != length(b)\n        println(\"Strings should be the same length\"\
    )\n        return \"\"\n    end\n    # Convert strings to unsigned integers:\n\
    \    a_int = UInt(parse(Int, a, base=2))\n    b_int = UInt(parse(Int, b, base=2))\n\
    \    # Binary XOR:\n    a_xor_b = bitxor(a_int, b_int)\n    # Convert back to\
    \ string:\n    return string(a_xor_b, base=2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpo9450bvt.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpo9450bvt.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpo9450bvt.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9450bvt.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9450bvt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpo9450bvt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpo9450bvt.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9450bvt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9450bvt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpo9450bvt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpo9450bvt.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9450bvt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9450bvt.jl:25\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    x, y = 0, 0\n    for i in a\n        x = 2*x + parse(Int,\
    \ i)\n    end\n    for i in b\n        y = 2*y + parse(Int, i)\n    end\n    return\
    \ dec2bin(xor(x, y))\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq_prl6ph.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpq_prl6ph.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ dec2bin not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpq_prl6ph.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_prl6ph.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_prl6ph.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq_prl6ph.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: dec2bin not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpq_prl6ph.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_prl6ph.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_prl6ph.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq_prl6ph.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: dec2bin not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpq_prl6ph.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_prl6ph.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_prl6ph.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977975
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    out = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            out = out * \"0\"\n        else\n            out = out\
    \ * \"1\"\n        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\"\n    >>> string_xor(\"010\", \"110\")\n    \"\
    100\"\n    \"\"\"\n    if length(a) != length(b)\n        error(\"string_xor:\
    \ invalid input length.\")\n    end\n    n = length(a)\n    result = \"\"\n  \
    \  for i in 1:n\n        result = result * Int(xor(parse(Char, a[i]), parse(Char,\
    \ b[i])))\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_av5tr32.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp_av5tr32.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching parse(::Type{Char}, ::Char)\n  Closest candidates are:\n\
    \    parse(!Matched::Type{T}, ::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_av5tr32.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_av5tr32.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_av5tr32.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_av5tr32.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching parse(::Type{Char},\
    \ ::Char)\n  Closest candidates are:\n    parse(!Matched::Type{T}, ::AbstractChar;\
    \ base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_av5tr32.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_av5tr32.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_av5tr32.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_av5tr32.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ parse(::Type{Char}, ::Char)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ ::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_av5tr32.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\"\n    v = Vector{Int64}(a)\n    y = Vector{Int64}(b)\n\
    \    x = v .^ y\n    return join(x, \"\")\n    \"\"\"\n    return join(parse.(Int,\
    \ (a .== b)).*2 .- 1, \"\")\n    # return join(map(parse, (a .== b)).*2 .- 1,\
    \ \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnkhdwxos.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpnkhdwxos.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching parse(::Type{Int64}, ::Bool)\n  Closest candidates are:\n\
    \    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:653 [inlined]\n\
    \    [3] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [4] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [5] _getindex\n      @ ./broadcast.jl:666\
    \ [inlined]\n    [6] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n\
    \    [7] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [8] copy\n      @\
    \ ./broadcast.jl:875 [inlined]\n    [9] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n   [10] string_xor(a::String, b::String)\n      @ Main /tmp/tmpnkhdwxos.jl:13\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpnkhdwxos.jl:21 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpnkhdwxos.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnkhdwxos.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::Bool)\n  Closest candidates are:\n    parse(::Type{T}, !Matched::AbstractChar;\
    \ base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Ma"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    a = Bits(a)\n    b = Bits(b)\n \
    \   result = 0\n    for i = 0:n-1\n        if (a[i]==1 && b[i]==0) || (a[i]==0\
    \ && b[i]==1)\n            result += 2^(n-i-1)\n        end\n    end\n    return\
    \ Int(result)\nend\n \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnzm_yl32.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpnzm_yl32.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ Bits not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmpnzm_yl32.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzm_yl32.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzm_yl32.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnzm_yl32.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: Bits not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnzm_yl32.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzm_yl32.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzm_yl32.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnzm_yl32.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: Bits not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpnzm_yl32.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzm_yl32.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzm_yl32.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # convert binary strings to array of integers (e.g.\
    \ \"101\" -> [1, 0, 1])\n    a_int = int(a, base=2)\n    b_int = int(b, base=2)\n\
    \    xor_int = bitxor(a_int, b_int)\n    # convert back to binary string\n   \
    \ return \"{0:b}\".format(xor_int)\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1m488qs.jl:14\nin expression starting at\
    \ /tmp/tmpw1m488qs.jl:14\n"
  stdout: ''
  timestamp: 1659977974
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    output = \"\"\n    for i in 1:length(a)\n        if\
    \ (a[i] == b[i])\n            output = output * \"0\"\n        else\n        \
    \    output = output * \"1\"\n        end\n    end\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = Int(a, base=2)\n    b = Int(b, base=2)\n    c =\
    \ a \u22BB b\n    return string(Base.digits(c, 2))\nend\n \n \n \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1zuhai7f.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp1zuhai7f.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching Int64(::String; base=2)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\
    \ got unsupported keyword argument \"base\"\n    ...\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp1zuhai7f.jl:7\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1zuhai7f.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1zuhai7f.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1zuhai7f.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching Int64(::String;\
    \ base=2)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\
    \ got unsupported keyword argument \"base\"\n    ...\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp1zuhai7f.jl:7\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in eachindex(a)\n        if a[i]\
    \ == b[i]\n            push!(c, \"0\")\n        else\n            push!(c, \"\
    1\")\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn1k53hxw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpn1k53hxw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn1k53hxw.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn1k53hxw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1k53hxw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn1k53hxw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpn1k53hxw.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn1k53hxw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1k53hxw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn1k53hxw.jl:24\n  T"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # make sure that the two input strings are the same\
    \ length\n    maxlen = max(length(a), length(b))\n    a = string(zeros(Int8, maxlen\
    \ - length(a))) * a\n    b = string(zeros(Int8, maxlen - length(b))) * b\n   \
    \ new_string = \"\"\n    for i in range(1, maxlen + 1)\n        if(a[i] == b[i])\n\
    \            new_string = new_string * \"0\"\n        else\n            new_string\
    \ = new_string * \"1\"\n        end\n    end\n    return new_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxlchbm1x.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpxlchbm1x.jl:26\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"0000000\" == \"010010\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxlchbm1x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxlchbm1x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxlchbm1x.jl:27\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"00\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxlchbm1x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxlchbm1x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxlchbm1x.jl:28\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"00000\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxlchbm1x.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxlchbm1x.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  timestamp: 1659977976
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return join([a[i] == b[i] ? \"0\" : \"1\" for i in\
    \ eachindex(a)])\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string(int(a[i]) \u22BB int(b[i]))\n    end\n    return c\nend\n    \n\"\"\"\
    \ Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary\
    \ AND on these inputs and return result also as a string.\n    >>> string_and(\"\
    011\", \"101\")\n    \"001\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpo1no7ooa.jl:14\nin expression starting at /tmp/tmpo1no7ooa.jl:14\n"
  stdout: ''
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\" Input are two strings a and b consisting only\
    \ of 1s and 0s.\n    Perform binary XOR on these inputs and return result also\
    \ as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\n\
    \    xor_val = zeros(Int8, length(a))\n    for i = 1:length(a)\n        if a[i]\
    \ == '1' && b[i] == '0' || a[i] == '0' && b[i] == '1'\n            xor_val[i]\
    \ = 1\n        end\n    end\n    return string(xor_val)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn03j9l4a.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpn03j9l4a.jl:25\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"Int8[0, 1, 0, 0, 1, 0]\"\
    \ == \"010010\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn03j9l4a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn03j9l4a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpn03j9l4a.jl:26\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"Int8[0]\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn03j9l4a.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn03j9l4a.jl:24\ntest set: Test Failed at /tmp/tmpn03j9l4a.jl:27\n\
    \  Expression: candidate(\"0101\", \"0000\") == \"0101\"\n   Evaluated: \"Int8[0,\
    \ 1, 0, 1]\" == \"0101\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn03j9l4a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn03j9l4a.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977976
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length.\")\n    end\n    return [a[i] == b[i] ? \"0\" : \"\
    1\" for i in 1:length(a)] |> join\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977974
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    @assert n == length(b)\n    result\
    \ = \"\"\n    for i in 1:n\n        if a[i] == b[i]\n            result *= \"\
    0\"\n        else\n            result *= \"1\"\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmptgkrn_97.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmptgkrn_97.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmptgkrn_97.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptgkrn_97.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgkrn_97.jl:13\ntest set:\
    \ Error During Test at /tmp/tmptgkrn_97.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmptgkrn_97.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptgkrn_97.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgkrn_97.jl:13\ntest set:\
    \ Error During Test at /tmp/tmptgkrn_97.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmptgkrn_97.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptgkrn_97.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgkrn_97.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    al = length(a)\n    bl = length(b)\n    ml = max(al,\
    \ bl)\n    res = \"\"\n    for i in 1:ml\n        c = todigit(a[i])\n        d\
    \ = todigit(b[i])\n        if isempty(c)\n            c = 0\n        end\n   \
    \     if isempty(d)\n            d = 0\n        end\n        if c == d\n     \
    \       res = res * \"0\"\n        else\n            res = res * \"1\"\n     \
    \   end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpf5l3rhvj.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpf5l3rhvj.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ todigit not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpf5l3rhvj.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5l3rhvj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5l3rhvj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf5l3rhvj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: todigit not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpf5l3rhvj.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5l3rhvj.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5l3rhvj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf5l3rhvj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: todigit not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpf5l3rhvj.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5l3rhvj.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5l3rhvj.jl:32\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977977
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a == b\n        return \"0\" * length(a)\n    elseif\
    \ length(a) == length(b)\n        res = String(\"0\") * length(a)\n        for\
    \ i = 1:length(a)\n            res[i] = \"0\" + a[i] * b[i]\n        end\n   \
    \     return res\n    else\n        return -1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7j873a4g.jl:24\n  Test threw
    exception\n  Expression: candidate("111000", "101010") == "010010"\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    string_xor(a::String, b::String)\n     @ Main /tmp/tmp7j873a4g.jl:10\n   [2] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7j873a4g.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7j873a4g.jl:23\n'''
  timestamp: 1659977979
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        if a[i]\
    \ == b[i]\n            push!(c, \"0\")\n        else\n            push!(c, \"\
    1\")\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpu4hfpt01.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpu4hfpt01.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpu4hfpt01.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4hfpt01.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4hfpt01.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu4hfpt01.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpu4hfpt01.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu4hfpt01.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu4hfpt01.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu4hfpt01.jl:24\n  T"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = min(length(a), length(b))\n    p = Array{Int8}(n)\n\
    \    for i in 1:n\n        p[i] = a[i] == b[i] ? 0 : 1\n    end\n    return reduce(*,\
    \ p)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpesoohs6l.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpesoohs6l.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching (Array{Int8})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpesoohs6l.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpesoohs6l.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpesoohs6l.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpesoohs6l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching (Array{Int8})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpesoohs6l.jl:8\n   [2] macro expan"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # convert to vectors of bits\n    a = parse(a,2)\n\
    \    b = parse(b,2)\n    # perform xor on each bit and assemble result\n    return\
    \ join( xor(a[i],b[i]) for i in eachindex(a) )\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvhw8a2zn.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpvhw8a2zn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching parse(::String, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpvhw8a2zn.jl:8\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhw8a2zn.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhw8a2zn.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvhw8a2zn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching parse(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpvhw8a2zn.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhw8a2zn.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhw8a2zn.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvhw8a2zn.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ parse(::String, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpvhw8a2zn.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhw8a2zn.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhw8a2zn.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Input strings are both binary\n    a_dec = Int(a,\
    \ base=2)\n    b_dec = Int(b, base=2)\n    xor_dec = xor(a_dec, b_dec)\n    xor_bin\
    \ = string(xor_dec, base=2)\n    return xor_bin\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdmygcnmi.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpdmygcnmi.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching Int64(::String; base=2)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\
    \ got unsupported keyword argument \"base\"\n    ...\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpdmygcnmi.jl:8\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdmygcnmi.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmygcnmi.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdmygcnmi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching Int64(::String;\
    \ base=2)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\
    \ got unsupported keyword argument \"base\"\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\
    \ got unsupported keyword argument \"base\"\n    ...\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpdmygcnmi.jl:8\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        c = c *\
    \ xor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxm5vhhad.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpxm5vhhad.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpxm5vhhad.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxm5vhhad.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxm5vhhad.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxm5vhhad.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpxm5vhhad.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxm5vhhad.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxm5vhhad.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxm5vhhad.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpxm5vhhad.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxm5vhhad."
  timestamp: 1659977979
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b)\n        res = String[]\n\
    \        for i in 1:length(a)\n            push!(res, xor(a[i], b[i]))\n     \
    \   end\n        return join(res)\n    else\n        error(\"a and b are not of\
    \ the same length\")\n    end\nend\nstring_xor(\"010\", \"110\")\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching xor(::Char, ::Char)\nClosest
    candidates are:\n  xor(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\nStacktrace:\n
    [1] string_xor('''
  stdout: None
  timestamp: 1659977980
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    s = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            s = s * \"0\"\n        else\n            s = s * \"1\"\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Strings\
    \ must be the same length\")\n    end\n    c = \"\"\n    for i = 1:length(a)\n\
    \        c *= xor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpk2mjwo2o.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpk2mjwo2o.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpk2mjwo2o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2mjwo2o.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2mjwo2o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpk2mjwo2o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpk2mjwo2o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2mjwo2o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2mjwo2o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpk2mjwo2o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpk2mjwo2o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2mjwo"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(undef, length(a))\n    for i = 1:length(a)\n\
    \        c[i] = \"0\"\n        if a[i] != b[i]\n            c[i] = \"1\"\n   \
    \     end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq974x68i.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpq974x68i.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1]\
    \ string_xor(a::String, b::String)\n     @ Main /tmp/tmpq974x68i.jl:7\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq974x68i.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq974x68i.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq974x68i.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::UndefInitializer,\
    \ ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpq974x68i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq974x68i.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq974x68i.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq974x68i.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpq974x68i.jl:7\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpq974x68i.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq974x68i.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        println(\"Lengths\
    \ of the two input strings do not match\")\n        return \"Error\"\n    end\n\
    \    result = \"\"\n    for i in eachindex(a)\n        if a[i] == b[i]\n     \
    \       push!(result, \"0\")\n        else\n            push!(result, \"1\")\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyf3bkw5h.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpyf3bkw5h.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpyf3bkw5h.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyf3bkw5h.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf3bkw5h.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyf3bkw5h.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpyf3bkw5h.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyf3bkw5h.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf3bkw5h.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyf3bkw5h.jl:28\n  T"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    n = length(a)\n    xor_result = Array{Int64}(n)\n \
    \   for i in 1:n\n        xor_result[i] = parse(Int64, a[i]) + parse(Int64, b[i])\n\
    \    end\n    return join(convert(Array{String},xor_result-1), \"\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsh0th2b0.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpsh0th2b0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpsh0th2b0.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsh0th2b0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsh0th2b0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpsh0th2b0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpsh0th2b0.jl:8\n   [2] macro exp"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \"\"\"This function takes two strings as input and\
    \ returns another string after performing XOR\"\"\"\n    c = \"\";\n    if (length(a)\
    \ != length(b))\n        return \"Inputs have to be of same length\"\n    end\n\
    \    for i in eachindex(a)\n        if (a[i] == b[i])\n            push!(c, \"\
    0\")\n        else\n            push!(c, \"1\")\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj5r36jfd.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpj5r36jfd.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching push!(::String, ::String)\n  Closest candidates are:\n  \
    \  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpj5r36jfd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj5r36jfd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj5r36jfd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpj5r36jfd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching push!(::String,\
    \ ::String)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpj5r36jfd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj5r36jfd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj5r36jfd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpj5r36jfd.jl:28\n  T"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string_xor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp09fxa75s.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp09fxa75s.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching string_xor(::Char, ::Char)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp09fxa75s.jl:9\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp09fxa75s.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fxa75s.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp09fxa75s.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching string_xor(::Char,\
    \ ::Char)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp09fxa75s.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09fxa75s.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fxa75s.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp09fxa75s.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ string_xor(::Char, ::Char)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp09fxa75s.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09fxa75s.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09fxa75s.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:minimum(length(a), length(b))\n\
    \        bit1 = parse(Int, a[i])\n        bit2 = parse(Int, b[i])\n        c =\
    \ c * string(bit1 \u22BB bit2)\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9jh73mhg.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9jh73mhg.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp9jh73mhg.jl:8\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp9jh73mhg.jl:20 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp9jh73mhg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9jh73mhg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n   \
    \  @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp9jh73mhg.jl:8\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp9jh73mhg.jl:21 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp9jh73mhg.jl:19\ntest "
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    length = length(a)\n    if length != length(b)\n  \
    \      println(\"Inputs must be of same length\")\n        return \"\"\n    end\n\
    \    result = \"\"\n    for i = 1:length\n        if a[i] == b[i]\n          \
    \  result = result * \"0\"\n        else\n            result = result * \"1\"\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8vwn1al3.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp8vwn1al3.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp8vwn1al3.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8vwn1al3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8vwn1al3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8vwn1al3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp8vwn1al3.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8vwn1al3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8vwn1al3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8vwn1al3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp8vwn1al3.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8vwn1al3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8vwn1al3.jl:26\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length.\"))\n    end\n    # We know a, b are of\
    \ equal length, and that length(a) == length(b)\n    out = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == '0' && b[i] == '0'\n            push!(out, '0')\n\
    \        elseif a[i] == '1' && b[i] == '1'\n            push!(out, '0')\n    \
    \    else\n            push!(out, '1')\n        end\n    end\n    return out\n\
    end\nstring_xor(\"010\", \"110\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching push!(::String, ::Char)\n\
    Closest candidates are:\n  push!(::Any, ::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2970\n\
    \  push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2971\n\
    \  push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at ~/.conda/envs/polyglot/share/julia/base/task.jl:605\n\
    \  ...\nStacktrace:\n [1] string_xor(a::String, b::String)\n   @ Main /tmp/tmpf3eu73a_.jl:18\n\
    \ [2] top-level scope\n   @ /tmp/tmpf3eu73a_.jl:23\nin expression starting at\
    \ /tmp/tmpf3eu73a_.jl:23\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    xor = 0\n    c = \"\"\n    for i in 1:length(a)\n \
    \       xor = str2int(a[i]) \u22BB str2int(b[i])\n        push!(c, Int(xor))\n\
    \    end\n    return join(c)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpw1izljdy.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpw1izljdy.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ str2int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpw1izljdy.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1izljdy.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1izljdy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpw1izljdy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: str2int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpw1izljdy.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1izljdy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1izljdy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpw1izljdy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: str2int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpw1izljdy.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1izljdy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1izljdy.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    assert(length(a) == length(b))\n    \n    result\
    \ = Vector{Char}(undef, length(a))\n    \n    for i in 1:length(a)\n        result[i]\
    \ = xor(a[i], b[i])\n    end\n    \n    return join(result)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsox852p9.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpsox852p9.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpsox852p9.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsox852p9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsox852p9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpsox852p9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: assert not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpsox852p9.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsox852p9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsox852p9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpsox852p9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpsox852p9.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsox852p9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsox852p9.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977980
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            push!(c, \"0\")\n        else\n            push!(c,\
    \ \"1\")\n        end\n    end\n    join(c)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977977
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = []\n    for (i, v) in enumerate(a)\n        if\
    \ b[i] == v\n            push!(c, \"0\")\n        else\n            push!(c, \"\
    1\")\n        end\n    end\n    return(join(c))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Lengths\
    \ must be equal\")\n    end\n    c = copy(a)\n    for i in 1:length(a)\n     \
    \   c[i] = bitxor(a[i], b[i])\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3o99vumg.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp3o99vumg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching copy(::String)\n  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp3o99vumg.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3o99vumg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3o99vumg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3o99vumg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching copy(::String)\n\
    \  Closest candidates are:\n    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv})\
    \ where Tv<:Union{Float64, ComplexF64} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:504\n\
    \    copy(!Matched::SuiteSparse.CHOLMOD.Sparse{Tv}, !Matched::Integer, !Matched::Integer)\
    \ where Tv<:Float64 at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:507\n\
    \    copy(!Matched::T) where T<:SHA.SHA2_CTX at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SHA/src/types.jl:212\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp3o99vumg.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3o99vumg.jl:22 [inlined]\n\
    \   [4"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(length(a))\n    @inbounds for i in 1:length(a)\n\
    \        c[i] = a[i] ^ b[i]\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpib9mkze_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpib9mkze_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n    ...\n \
    \ Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpib9mkze_.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpib9mkze_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpib9mkze_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpib9mkze_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpib9mkze_.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpib9mkze_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpib9mkze_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpib9mkze_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Closest candidates are:\n    String(!Matched::String) a"
  timestamp: 1659977981
- exit_code: -1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Start with the empty string\n    result = \"\"\n\
    \    for (x, y) in zip(a, b)\n        result *= xor(parse(Int, x), parse(Int,\
    \ y))\n    end\n    return result\nend\na = \"101010101\"\nb = \"010010010\"\n\
    string_xor(a, b)\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching *(::String, ::Int64)'''
  stdout: None
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = String(zeros(String, length(a)))\n    for i =\
    \ 1:length(a)\n        c = int(a[i]) ^ int(b[i])\n        res[i] = string(c)\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyrbr8b0e.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpyrbr8b0e.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching zero(::Type{String})\n  Closest candidates are:\n    zero(!Matched::Union{Type{P},\
    \ P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpyrbr8b0e.jl:7\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpyrbr8b0e.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpyrbr8b0e.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpyrbr8b0e.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching zero(::Type{String})\n\
    \  Closest candidates are:\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    zero(!Matched::AbstractIrrational) at ~/.conda/envs/polyglot/share/julia/base/irrationals.jl:150\n\
    \    ...\n  Stacktrace:\n   [1] zeros(#unused#::Type{String}, dims::Tuple{Int64})\n\
    \     @ Base ./array.jl:526\n   [2] zeros(#unused#::Type{String}, dims::Int64)\n\
    \     @ Base ./array.jl:521\n   [3] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpyrbr8b0e.jl:7\n   [4] macro expan"
  timestamp: 1659977981
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for (i, j) in zip(a, b)\n        c *=\
    \ (i == j) ? \"0\" : \"1\"\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # Convert to Int\n    a = parse(Int, a, base=2)\n \
    \   b = parse(Int, b, base=2)\n    # xor\n    c = a \u22BB b\n    # Convert back\
    \ to String\n    return pad(string(c, base=2), length(a))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppqk0m68h.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmppqk0m68h.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ pad not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmppqk0m68h.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqk0m68h.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqk0m68h.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppqk0m68h.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: pad not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmppqk0m68h.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqk0m68h.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqk0m68h.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppqk0m68h.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: pad not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmppqk0m68h.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqk0m68h.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqk0m68h.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977981
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    out = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            out = out * \"0\"\n        else\n            out = out\
    \ * \"1\"\n        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    res = \"\"\n    for i = 1:length(a)\n        res *=\
    \ string(parse(Int, a[i]) \u22BB parse(Int, b[i]))\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    a = parse(Int, a, base=2)\n    b = parse(Int, b, base=2)\n\
    \    return string(a \u22BB b, base=2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5i8u99rm.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5i8u99rm.jl:16\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5i8u99rm.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5i8u99rm.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp5i8u99rm.jl:18\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5i8u99rm.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5i8u99rm.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    out = String(undef, length(a))\n    for i in 1:length(a)\n\
    \        out[i] = a[i] == b[i] ? '0' : '1'\n    end\n    return out\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnzsfu1lv.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpnzsfu1lv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1]\
    \ string_xor(a::String, b::String)\n     @ Main /tmp/tmpnzsfu1lv.jl:7\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzsfu1lv.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzsfu1lv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpnzsfu1lv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::UndefInitializer,\
    \ ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpnzsfu1lv.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzsfu1lv.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzsfu1lv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpnzsfu1lv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::UndefInitializer, ::Int64)\n  Stacktrace:\n   [1] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpnzsfu1lv.jl:7\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnzsfu1lv.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzsfu1lv.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    function xor(a::Bool, b::Bool)::Bool\n        if a\
    \ == b\n            return false\n        else\n            return true\n    \
    \    end\n    end\n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    inputs must be of same length\"))\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        result = result * string(xor(a[i] == '1', b[i] == '1'))\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5itkqtdg.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp5itkqtdg.jl:28\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"falsetruefalsefalsetruefalse\"\
    \ == \"010010\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5itkqtdg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5itkqtdg.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp5itkqtdg.jl:29\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"false\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5itkqtdg.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5itkqtdg.jl:27\ntest set: Test Failed at /tmp/tmp5itkqtdg.jl:30\n\
    \  Expression: candidate(\"0101\", \"0000\") == \"0101\"\n   Evaluated: \"falsetruefalsetrue\"\
    \ == \"0101\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5itkqtdg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5itkqtdg.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    if length(a) == length(b)\n     \
    \   for i in eachindex(a)\n            if a[i] == '0' && b[i] == '0'\n       \
    \         push!(c, '0')\n            elseif a[i] == '1' && b[i] == '1'\n     \
    \           push!(c, '0')\n            else\n                push!(c, '1')\n \
    \           end\n        end\n    end\n    join(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzdbd2ce6.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpzdbd2ce6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmpzdbd2ce6.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzdbd2ce6.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzdbd2ce6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzdbd2ce6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmpzdbd2ce6.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzdbd2ce6.jl:27 [inlined]\n\
    \   "
  timestamp: 1659977983
