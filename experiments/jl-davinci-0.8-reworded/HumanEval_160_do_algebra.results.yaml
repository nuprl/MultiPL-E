name: HumanEval_160_do_algebra
language: jl
results:
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    accumulator = operand[1]\n    for\
    \ i = 1:length(operator)\n        if operator[i] == \"+\"\n            accumulator\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            accumulator\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            accumulator\
    \ *= operand[i+1]\n        elseif operator[i] == \"//\"\n            accumulator\
    \ //= operand[i+1]\n        elseif operator[i] == \"**\"\n            accumulator\
    \ ^= operand[i+1]\n        end\n    end\n    return accumulator\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3jowrxu_.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3jowrxu_.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3jowrxu_.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp3jowrxu_.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3jowrxu_.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3jowrxu_.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3jowrxu_.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jowrxu_.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  result = operand[1]\n  for i in 1:length(operator)\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elseif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elseif operator[i] == \"*\"\n  \
    \    result *= operand[i+1]\n    elseif operator[i] == \"//\"\n      result =\
    \ div(result, operand[i+1])\n    elseif operator[i] == \"**\"\n      result ^=\
    \ operand[i+1]\n    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8ygzhx5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8ygzhx5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8ygzhx5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8ygzhx5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmulqw1a1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulqw1a1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulqw1a1.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmulqw1a1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmulqw1a1.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmulqw1a1.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmulqw1a1.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmulqw1a1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == '+'\n            result += operand[i]\n        elseif\
    \ operator[i-1] == '-'\n            result -= operand[i]\n        elseif operator[i-1]\
    \ == '*'\n            result *= operand[i]\n        elseif operator[i-1] == '//'\n\
    \            result = trunc(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == '**'\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpjrn3hd5y.jl:34\nin expression\
    \ starting at /tmp/tmpjrn3hd5y.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # this is a error.\n    # This is the right\
    \ way.\n    # the index of the first element (the operator) is 1\n    # and the\
    \ index of the last element (the operand) is length(operator) + 1\n    operator\
    \ = operator[1:length(operator)]\n    operand = operand[1:length(operand)]\n \
    \   result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == '+'\n            result += operand[i+1]\n        elseif operator[i] == '-'\n\
    \            result -= operand[i+1]\n        elseif operator[i] == '*'\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == '//'\n         \
    \   result = Int(result/operand[i+1])\n        elseif operator[i] == '**'\n  \
    \          result ^= operand[i+1]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpop3_e255.jl:40\nin expression\
    \ starting at /tmp/tmpop3_e255.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    @assert size(operator, 1) + 1 == size(operand,\
    \ 1)\n    @assert size(operator, 1) >= 1\n    @assert size(operand, 1) >= 2\n\
    \    \n    op1 = operand[1]\n    op2 = operand[2]\n    result = 0\n    \n    if\
    \ operator[1] == \"+\"\n        result = op1 + op2\n    elseif operator[1] ==\
    \ \"-\"\n        result = op1 - op2\n    elseif operator[1] == \"*\"\n       \
    \ result = op1 * op2\n    elseif operator[1] == \"//\"\n        result = op1 \xF7\
    \ op2\n    elseif operator[1] == \"**\"\n        result = op1 ^ op2\n    end\n\
    \    \n    for i in 2:size(operator, 1)\n        op1 = result\n        op2 = operand[i+1]\n\
    \        if operator[i] == \"+\"\n            result = op1 + op2\n        elseif\
    \ operator[i] == \"-\"\n            result = op1 - op2\n        elseif operator[i]\
    \ == \"*\"\n            result = op1 * op2\n        elseif operator[i] == \"//\"\
    \n            result = op1 \xF7 op2\n        elseif operator[i] == \"**\"\n  \
    \          result = op1 ^ op2\n        end\n    end\n    \n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpz_zamwb3.jl:70\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_zamwb3.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_zamwb3.jl:68\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_zamwb3.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    n = size(operator, 1)\n    m = size(operand,\
    \ 1)\n    assert n == m - 1, \"n == m - 1\"\n    for i = 1:n\n        operand[i+1]\
    \ = do_algebra_operation(operator[i], operand[i], operand[i+1])\n    end\n   \
    \ return operand[n+1]\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpk2tu2122.jl:25 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2tu2122.jl:28\n\
    in expression starting at /tmp/tmpk2tu2122.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    str = \"\"\n    for i = 1:length(operator)\n\
    \        str = str * string(operand[i]) * operator[i]\n    end\n    str = str\
    \ * string(operand[end])\n    return parse(Int64, str)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplebxw2p8.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  ArgumentError:\
    \ invalid base 10 digit '*' in \"2**3*4+5\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmplebxw2p8.jl:31\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplebxw2p8.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplebxw2p8.jl:37\ntest set:\
    \ Error During Test at /tmp/tmplebxw2p8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  ArgumentError: invalid\
    \ base 10 digit '+' in \"2+3*4-5\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmplebxw2p8.jl:31\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplebxw2p8.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplebxw2p8.jl:37\ntest set:\
    \ Error During Test at /tmp/tmplebxw2p8.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  ArgumentError: invalid base 10\
    \ digit '/' in \"7//3*4\"\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplebxw2p8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code\nend\n# There are three tests:\n\
    #   1 - do_algebra([\"+\"], [4, 5])\n#   2 - do_algebra([\"+\", \"-\"], [1, 2,\
    \ 3])\n#   3 - do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4eafr79.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4eafr79.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4eafr79.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4eafr79.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt4eafr79.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4eafr79.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4eafr79.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4eafr79.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total = floor(Int64, total / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            total = total ^ operand[i+1]\n        end\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0uiv6ky.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0uiv6ky.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0uiv6ky.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0uiv6ky.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\n \nassert(do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5]) == 9)\nassert(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 0]) == 2)\nassert(do_algebra([\"+\", \"//\", \"-\"], [2, 3, 4, 5]) ==\
    \ 0)\nassert(do_algebra([\"**\", \"//\", \"-\"], [2, 3, 4, 5]) == -3)\n \n \n\"\
    \"\"\n    Given a vector of non-negative integers, return a vector of their square\
    \ roots.\n    If a number in the given vector is negative, return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: assert not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmphmf4kt_c.jl:43\nin expression starting at /tmp/tmphmf4kt_c.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = Int64(result ^ operand[i])\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwuju590v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwuju590v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwuju590v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwuju590v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = eval(string(result, operator[i], operand[i+1]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpssbz62sn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpssbz62sn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpssbz62sn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpssbz62sn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Do some validation checks on the\
    \ vectors\n    # Are operator and operand vectors the right lengths?\n    if length(operator)\
    \ != length(operand) - 1\n        println(\"Operator vector and operand vector\
    \ must be of different lengths, with the operator vector being one element shorter\
    \ than the operand vector\")\n        return -1\n    end\n    \n    # Do all of\
    \ the operators in the operator vector match the allowed types?\n    if ismatch(r\"\
    ^[+\\-\\*\\/\\^]$\", join(operator, \"\")) == false\n        println(\"Operator\
    \ vector must only contain + - * / or ^ operators\")\n        return -1\n    end\n\
    \    \n    # Are all of the elements in the operand vector numbers?\n    # Note\
    \ that this will throw an error if there are negative numbers because - is for\
    \ subtraction not for negative numbers\n    if ismatch(r\"^[0-9]+$\", join(map(string,\
    \ operand), \"\")) == false\n        println(\"Operand vector must only contain\
    \ numbers\")\n        return -1\n    end\n    \n    # Make the final array that\
    \ will be evalutated\n    alg_exp = []\n    for (op, val) in zip(operator, operand)\n\
    \        push!(alg_exp, val)\n        push!(alg_exp, op)\n    end\n    push!(alg_exp,\
    \ operand[end])\n    \n    # Evaluate the algabraic expression\n    try\n    \
    \    alg_exp_eval = eval(parse(join(alg_exp, \"\")))\n    catch\n        println(\"\
    The algebraic expression is invalid.\")\n        return -1\n    end\n    \n  \
    \  return alg_exp_eval\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfh1cq9n3.jl:70\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:70 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpfh1cq9n3.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpfh1cq9n3.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:72 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfh1cq9n3.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpufhtoruo.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufhtoruo.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #Your code goes here\n    return result::Int64\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpbv5q9arc.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbv5q9arc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbv5q9arc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: result not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbv5q9arc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # You have to implement this function.\n\
    \    # Write your code between the two comment blocks.\n    #########################################\n\
    \    # Your code goes here:\n    #########################################\n \
    \   acc = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            acc += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            acc -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          acc *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     acc = floor(Int64, acc/operand[i+1])\n        elseif operator[i] == \"**\"\
    \n            acc = Int64(acc^operand[i+1])\n        end\n    end\n    return\
    \ acc\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkuqdgmam.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkuqdgmam.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkuqdgmam.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkuqdgmam.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Returns the evaluation of the algebraic\
    \ expression\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwjgbuorf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwjgbuorf.jl:1\n\
    in expression starting at /tmp/tmpwjgbuorf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # create string \n    expression = \"\"\
    \n    # loop through operand and operator \n    for i = 1:length(operand)\n  \
    \      # add operand to expression \n        expression *= string(operand[i])\n\
    \        # check if there is an operator \n        if i <= length(operator)\n\
    \            # add operator to expression \n            expression *= operator[i]\n\
    \        end\n    end\n    # eval\n    return eval(parse(expression))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp61arc7ns.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp61arc7ns.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61arc7ns.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61arc7ns.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp61arc7ns.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp61arc7ns.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61arc7ns.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61arc7ns.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    expression = string(operand[1])\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5a2khrzd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5a2khrzd.jl:1\n\
    in expression starting at /tmp/tmp5a2khrzd.jl:1\n"
  exit_code: 1
  status: SyntaxError
