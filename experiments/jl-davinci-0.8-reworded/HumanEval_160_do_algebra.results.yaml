language: jl
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    accumulator = operand[1]\n    for\
    \ i = 1:length(operator)\n        if operator[i] == \"+\"\n            accumulator\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            accumulator\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            accumulator\
    \ *= operand[i+1]\n        elseif operator[i] == \"//\"\n            accumulator\
    \ //= operand[i+1]\n        elseif operator[i] == \"**\"\n            accumulator\
    \ ^= operand[i+1]\n        end\n    end\n    return accumulator\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp3jowrxu_.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp3jowrxu_.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3jowrxu_.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3jowrxu_.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp3jowrxu_.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3jowrxu_.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3jowrxu_.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3jowrxu_.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  result = operand[1]\n  for i in 1:length(operator)\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elseif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elseif operator[i] == \"*\"\n  \
    \    result *= operand[i+1]\n    elseif operator[i] == \"//\"\n      result =\
    \ div(result, operand[i+1])\n    elseif operator[i] == \"**\"\n      result ^=\
    \ operand[i+1]\n    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy8ygzhx5.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy8ygzhx5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8ygzhx5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8ygzhx5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmulqw1a1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmulqw1a1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulqw1a1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulqw1a1.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmulqw1a1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmulqw1a1.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmulqw1a1.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmulqw1a1.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == '+'\n            result += operand[i]\n        elseif\
    \ operator[i-1] == '-'\n            result -= operand[i]\n        elseif operator[i-1]\
    \ == '*'\n            result *= operand[i]\n        elseif operator[i-1] == '//'\n\
    \            result = trunc(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == '**'\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpjrn3hd5y.jl:34\nin expression\
    \ starting at /tmp/tmpjrn3hd5y.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # this is a error.\n    # This is the right\
    \ way.\n    # the index of the first element (the operator) is 1\n    # and the\
    \ index of the last element (the operand) is length(operator) + 1\n    operator\
    \ = operator[1:length(operator)]\n    operand = operand[1:length(operand)]\n \
    \   result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == '+'\n            result += operand[i+1]\n        elseif operator[i] == '-'\n\
    \            result -= operand[i+1]\n        elseif operator[i] == '*'\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == '//'\n         \
    \   result = Int(result/operand[i+1])\n        elseif operator[i] == '**'\n  \
    \          result ^= operand[i+1]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpop3_e255.jl:40\nin expression\
    \ starting at /tmp/tmpop3_e255.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    @assert size(operator, 1) + 1 == size(operand,\
    \ 1)\n    @assert size(operator, 1) >= 1\n    @assert size(operand, 1) >= 2\n\
    \    \n    op1 = operand[1]\n    op2 = operand[2]\n    result = 0\n    \n    if\
    \ operator[1] == \"+\"\n        result = op1 + op2\n    elseif operator[1] ==\
    \ \"-\"\n        result = op1 - op2\n    elseif operator[1] == \"*\"\n       \
    \ result = op1 * op2\n    elseif operator[1] == \"//\"\n        result = op1 \xF7\
    \ op2\n    elseif operator[1] == \"**\"\n        result = op1 ^ op2\n    end\n\
    \    \n    for i in 2:size(operator, 1)\n        op1 = result\n        op2 = operand[i+1]\n\
    \        if operator[i] == \"+\"\n            result = op1 + op2\n        elseif\
    \ operator[i] == \"-\"\n            result = op1 - op2\n        elseif operator[i]\
    \ == \"*\"\n            result = op1 * op2\n        elseif operator[i] == \"//\"\
    \n            result = op1 \xF7 op2\n        elseif operator[i] == \"**\"\n  \
    \          result = op1 ^ op2\n        end\n    end\n    \n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz_zamwb3.jl:66

    '
  stdout: "test set: Test Failed at /tmp/tmpz_zamwb3.jl:70\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_zamwb3.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_zamwb3.jl:68\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    n = size(operator, 1)\n    m = size(operand,\
    \ 1)\n    assert n == m - 1, \"n == m - 1\"\n    for i = 1:n\n        operand[i+1]\
    \ = do_algebra_operation(operator[i], operand[i], operand[i+1])\n    end\n   \
    \ return operand[n+1]\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpk2tu2122.jl:25 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2tu2122.jl:28\n\
    in expression starting at /tmp/tmpk2tu2122.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    str = \"\"\n    for i = 1:length(operator)\n\
    \        str = str * string(operand[i]) * operator[i]\n    end\n    str = str\
    \ * string(operand[end])\n    return parse(Int64, str)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplebxw2p8.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmplebxw2p8.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  ArgumentError:\
    \ invalid base 10 digit '*' in \"2**3*4+5\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmplebxw2p8.jl:31\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplebxw2p8.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplebxw2p8.jl:37\ntest set:\
    \ Error During Test at /tmp/tmplebxw2p8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  ArgumentError: invalid\
    \ base 10 digit '+' in \"2+3*4-5\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmplebxw2p8.jl:31\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplebxw2p8.jl:39 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplebxw2p8.jl:37\ntest set:\
    \ Error During Test at /tmp/tmplebxw2p8.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  ArgumentError: invalid base 10\
    \ digit '/' in \"7//3*4\"\n  Stacktrace"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code\nend\n# There are three tests:\n\
    #   1 - do_algebra([\"+\"], [4, 5])\n#   2 - do_algebra([\"+\", \"-\"], [1, 2,\
    \ 3])\n#   3 - do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt4eafr79.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpt4eafr79.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4eafr79.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4eafr79.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4eafr79.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt4eafr79.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4eafr79.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4eafr79.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total = floor(Int64, total / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            total = total ^ operand[i+1]\n        end\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc0uiv6ky.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpc0uiv6ky.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0uiv6ky.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0uiv6ky.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\n \nassert(do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5]) == 9)\nassert(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 0]) == 2)\nassert(do_algebra([\"+\", \"//\", \"-\"], [2, 3, 4, 5]) ==\
    \ 0)\nassert(do_algebra([\"**\", \"//\", \"-\"], [2, 3, 4, 5]) == -3)\n \n \n\"\
    \"\"\n    Given a vector of non-negative integers, return a vector of their square\
    \ roots.\n    If a number in the given vector is negative, return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: assert not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmphmf4kt_c.jl:43\nin expression starting at /tmp/tmphmf4kt_c.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = Int64(result ^ operand[i])\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwuju590v.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpwuju590v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwuju590v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwuju590v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = eval(string(result, operator[i], operand[i+1]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpssbz62sn.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpssbz62sn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpssbz62sn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpssbz62sn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Do some validation checks on the\
    \ vectors\n    # Are operator and operand vectors the right lengths?\n    if length(operator)\
    \ != length(operand) - 1\n        println(\"Operator vector and operand vector\
    \ must be of different lengths, with the operator vector being one element shorter\
    \ than the operand vector\")\n        return -1\n    end\n    \n    # Do all of\
    \ the operators in the operator vector match the allowed types?\n    if ismatch(r\"\
    ^[+\\-\\*\\/\\^]$\", join(operator, \"\")) == false\n        println(\"Operator\
    \ vector must only contain + - * / or ^ operators\")\n        return -1\n    end\n\
    \    \n    # Are all of the elements in the operand vector numbers?\n    # Note\
    \ that this will throw an error if there are negative numbers because - is for\
    \ subtraction not for negative numbers\n    if ismatch(r\"^[0-9]+$\", join(map(string,\
    \ operand), \"\")) == false\n        println(\"Operand vector must only contain\
    \ numbers\")\n        return -1\n    end\n    \n    # Make the final array that\
    \ will be evalutated\n    alg_exp = []\n    for (op, val) in zip(operator, operand)\n\
    \        push!(alg_exp, val)\n        push!(alg_exp, op)\n    end\n    push!(alg_exp,\
    \ operand[end])\n    \n    # Evaluate the algabraic expression\n    try\n    \
    \    alg_exp_eval = eval(parse(join(alg_exp, \"\")))\n    catch\n        println(\"\
    The algebraic expression is invalid.\")\n        return -1\n    end\n    \n  \
    \  return alg_exp_eval\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfh1cq9n3.jl:67

    '
  stdout: "test set: Error During Test at /tmp/tmpfh1cq9n3.jl:70\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:70 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpfh1cq9n3.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\ntest set:\
    \ Error During Test at /tmp/tmpfh1cq9n3.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfh1cq9n3.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh1cq9n3.jl:72 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh1cq9n3.jl:69\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpufhtoruo.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpufhtoruo.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #Your code goes here\n    return result::Int64\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbv5q9arc.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpbv5q9arc.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbv5q9arc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbv5q9arc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: result not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpbv5q9arc.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbv5q9arc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbv5q9arc.jl:33\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # You have to implement this function.\n\
    \    # Write your code between the two comment blocks.\n    #########################################\n\
    \    # Your code goes here:\n    #########################################\n \
    \   acc = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            acc += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            acc -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          acc *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     acc = floor(Int64, acc/operand[i+1])\n        elseif operator[i] == \"**\"\
    \n            acc = Int64(acc^operand[i+1])\n        end\n    end\n    return\
    \ acc\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkuqdgmam.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpkuqdgmam.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkuqdgmam.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkuqdgmam.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Returns the evaluation of the algebraic\
    \ expression\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwjgbuorf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwjgbuorf.jl:1\n\
    in expression starting at /tmp/tmpwjgbuorf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # create string \n    expression = \"\"\
    \n    # loop through operand and operator \n    for i = 1:length(operand)\n  \
    \      # add operand to expression \n        expression *= string(operand[i])\n\
    \        # check if there is an operator \n        if i <= length(operator)\n\
    \            # add operator to expression \n            expression *= operator[i]\n\
    \        end\n    end\n    # eval\n    return eval(parse(expression))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp61arc7ns.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmp61arc7ns.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp61arc7ns.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61arc7ns.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61arc7ns.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp61arc7ns.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp61arc7ns.jl:39\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61arc7ns.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shar"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    expression = string(operand[1])\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5a2khrzd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5a2khrzd.jl:1\n\
    in expression starting at /tmp/tmp5a2khrzd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    ...\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f700dtm.jl:26\nin expression starting at\
    \ /tmp/tmp5f700dtm.jl:26\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9pmt674f.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp9pmt674f.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9pmt674f.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pmt674f.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pmt674f.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9pmt674f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9pmt674f.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pmt674f.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        switch operator[i-1]\n            case \"+\"\n                result\
    \ += operand[i]\n            case \"-\"\n                result -= operand[i]\n\
    \            case \"*\"\n                result *= operand[i]\n            case\
    \ \"//\"\n                result //= operand[i]\n            case \"**\"\n   \
    \             result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpec3rdqbu.jl:27 expected \"\
    end\", got \"operator\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpec3rdqbu.jl:28\n\
    in expression starting at /tmp/tmpec3rdqbu.jl:28\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4qhpqa6b.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp4qhpqa6b.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4qhpqa6b.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4qhpqa6b.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    pass\n \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_wk8pdv6.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp_wk8pdv6.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp_wk8pdv6.jl:27\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_wk8pdv6.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wk8pdv6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_wk8pdv6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_wk8pdv6.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wk8pdv6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wk8pdv6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_wk8pdv6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_wk8pdv6.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wk8pdv6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wk8pdv6.jl:34\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  num_operands = length(operand)\n  num_operators\
    \ = length(operator)\n  if num_operands < 2 || num_operators < 1\n    error(\"\
    Wrong input\")\n  end\n  if num_operands - 1 != num_operators\n    error(\"Wrong\
    \ input\")\n  end\n  result = operand[1]\n  for i in 1:num_operators\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elseif operator[i] == \"-\"\n  \
    \    result -= operand[i+1]\n    elseif operator[i] == \"*\"\n      result *=\
    \ operand[i+1]\n    elseif operator[i] == \"//\"\n      result = floor(Int64,\
    \ result / operand[i+1])\n    elseif operator[i] == \"**\"\n      result = convert(Int64,\
    \ result ^ operand[i+1])\n    else\n      error(\"Wrong input\")\n    end\n  end\n\
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2yegqwop.jl:54

    '
  stdout: "test set: Test Failed at /tmp/tmp2yegqwop.jl:58\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yegqwop.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yegqwop.jl:56\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = string(operand[1])\n    for\
    \ i = 1:length(operator)\n        expression = string(expression, \" \", operator[i],\
    \ \" \", operand[i+1])\n    end\n    return eval(parse(expression))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe5js55m9.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpe5js55m9.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe5js55m9.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe5js55m9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe5js55m9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpe5js55m9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe5js55m9.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe5js55m9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op1 = operand[1]\n    op2 = operand[2]\n\
    \    i = 1\n    while i < length(operator)\n        if operator[i] == \"+\"\n\
    \            op1 = op1 + op2\n        elseif operator[i] == \"-\"\n          \
    \  op1 = op1 - op2\n        elseif operator[i] == \"*\"\n            op1 = op1\
    \ * op2\n        elseif operator[i] == \"//\"\n            op1 = op1 \xF7 op2\n\
    \        elseif operator[i] == \"**\"\n            op1 = op1 ^ op2\n        end\n\
    \        i += 1\n        op2 = operand[i + 1]\n    end\n    return op1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp24p1hzsw.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp24p1hzsw.jl:51\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 32 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1hzsw.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1hzsw.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp24p1hzsw.jl:52\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 20 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp24p1hzsw.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp24p1hzsw.jl:50\ntest set: Test Failed at /tmp/tmp24p1hzsw.jl:53\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 2 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24p1hzsw.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24p1hzsw.jl:50\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # The length of operator vector is equal\
    \ to the length of operand vector minus one.\n    if length(operator) != length(operand)\
    \ - 1\n        return false\n    end\n    \n    # Operand is a vector of of non-negative\
    \ integers.\n    if any(x -> x < 0, operand)\n        return false\n    end\n\
    \    \n    # Operator vector has at least one operator, and operand vector has\
    \ at least two operands.\n    if length(operator) == 0 || length(operand) == 0\n\
    \        return false\n    end\n    \n    result = operand[1]\n    operand = operand[2:end]\n\
    \    \n    for i = 1:length(operator)\n        op = operator[i]\n        oper\
    \ = operand[i]\n        \n        if op == \"+\"\n            result += oper\n\
    \        elseif op == \"-\"\n            result -= oper\n        elseif op ==\
    \ \"*\"\n            result *= oper\n        elseif op == \"//\"\n           \
    \ result = convert(Int64, floor(result / oper))\n        elseif op == \"**\"\n\
    \            result = convert(Int64, floor(result ^ oper))\n        end\n    end\n\
    \    \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyqr19nqb.jl:65

    '
  stdout: "test set: Test Failed at /tmp/tmpyqr19nqb.jl:69\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyqr19nqb.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyqr19nqb.jl:67\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Your Code here\n    \"\"\"\n\
    \    # YOUR CODE HERE\n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        result = eval(string(result, operator[i-1], operand[i]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgq_7aizl.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpgq_7aizl.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgq_7aizl.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgq_7aizl.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgq_7aizl.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgq_7aizl.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgq_7aizl.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgq_7aizl.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    operand = operand[2:end]\n\
    \    for i in 1:length(operator)\n        #println(i)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i] == \"\
    -\"\n            result -= operand[i]\n        elseif operator[i] == \"*\"\n \
    \           result *= operand[i]\n        elseif operator[i] == \"//\"\n     \
    \       result = convert(Int64, result / operand[i])\n        elseif operator[i]\
    \ == \"**\"\n            result = convert(Int64, result ^ operand[i])\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpk4ayrbiy.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpk4ayrbiy.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4ayrbiy.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4ayrbiy.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpk4ayrbiy.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk4ayrbiy.jl:37\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpk4ayrbiy.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpk4ayrbiy.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            total ^= operand[i+1]\n        end\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp7q5urbmt.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp7q5urbmt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7q5urbmt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q5urbmt.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp7q5urbmt.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7q5urbmt.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7q5urbmt.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7q5urbmt.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    output = 0\n    first = true\n    operands\
    \ = [operand[i] for i in 1:length(operand)]\n    for i in 1:length(operator)\n\
    \        if first\n            output = operands[i]\n            first = false\n\
    \        end\n        if operator[i] == \"+\"\n            output += operands[i+1]\n\
    \        elseif operator[i] == \"-\"\n            output -= operands[i+1]\n  \
    \      elseif operator[i] == \"*\"\n            output *= operands[i+1]\n    \
    \    elseif operator[i] == \"//\"\n            output = floor(Int64, output /\
    \ operands[i+1])\n        elseif operator[i] == \"**\"\n            output = floor(Int64,\
    \ output ^ operands[i+1])\n        end\n    end\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpat405ud4.jl:50

    '
  stdout: "test set: Test Failed at /tmp/tmpat405ud4.jl:54\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat405ud4.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat405ud4.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == length(operand)\
    \ - 1\n        try\n            expr = parse(operand[1])\n            for i in\
    \ 1:length(operator)\n                expr = string(expr, \" \", operator[i],\
    \ \" \", operand[i+1])\n            end\n            @show expr\n            return\
    \ eval(parse(expr))\n        catch error\n            error(\"Something is wrong\
    \ with the input\")\n        end\n    else\n        error(\"Lengths of operator\
    \ and operand vectors are not equal\")\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz_zcwxi6.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpz_zcwxi6.jl:46\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ objects of type MethodError are not callable\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpz_zcwxi6.jl:35\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz_zcwxi6.jl:46 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_zcwxi6.jl:45\n  \n  caused\
    \ by: MethodError: no method matching parse(::Int64)\n  Closest candidates are:\n\
    \    parse(!Matched::Type{Sockets.IPAddr}, !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz_zcwxi6.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_zcwxi6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_zcwxi6.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpz_zcwxi6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: objects\
    \ of type MethodError are not callable\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpz_zcwxi6.jl:35\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n    "
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp297qddks.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp297qddks.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297qddks.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297qddks.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp297qddks.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp297qddks.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp297qddks.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp297qddks.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = convert(Int64, result \xF7 operand[i+1])\n \
    \       elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48k6axk1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp48k6axk1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48k6axk1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48k6axk1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Parameters:\n        operator:\
    \ a vector of operators (+, -, *, //, ^)\n        operand: a vector of integers\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz6hore7.jl:1\nin expression starting at /tmp/tmpaz6hore7.jl:1\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbplsb161.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpbplsb161.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbplsb161.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbplsb161.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    pass\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppruyk44p.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppruyk44p.jl:1\n\
    in expression starting at /tmp/tmppruyk44p.jl:1\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n   \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_zxkrx33.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp_zxkrx33.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zxkrx33.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zxkrx33.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Args:\n        operator: vector\
    \ that contains the operations that should be done on operand vector\n       \
    \ operand:  vector of integers \n    \"\"\"\n    \n    algebra = []\n    for i\
    \ = 1:length(operator)\n        algebra = push!(algebra, operator[i])\n      \
    \  algebra = push!(algebra, operand[i])\n    end\n    algebra = push!(algebra,\
    \ operand[end])\n    return eval(parse(string(algebra)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvx982fkm.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpvx982fkm.jl:45\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvx982fkm.jl:38\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvx982fkm.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx982fkm.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpvx982fkm.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvx982fkm.jl:38\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvx982fkm.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        result = eval(:(result $(parse(operator[i])) operand[i+1]))\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0235w7u.jl:28\nin expression starting at\
    \ /tmp/tmpu0235w7u.jl:28\n"
  stdout: ''
  timestamp: 1659977838
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    temp = operand[1]\n    i = 1\n    while\
    \ i < length(operator) + 1\n        if operator[i] == '+'\n            temp +=\
    \ operand[i + 1]\n        elseif operator[i] == '-'\n            temp -= operand[i\
    \ + 1]\n        elseif operator[i] == '*'\n            temp *= operand[i + 1]\n\
    \        elseif operator[i] == '//'\n            temp = temp\xF7operand[i + 1]\n\
    \        elseif operator[i] == '**'\n            temp ^= operand[i + 1]\n    \
    \    end\n        i += 1\n    end\n    return temp\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpsmp6olbf.jl:35\nin expression\
    \ starting at /tmp/tmpsmp6olbf.jl:35\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    TODO: implement this function.\
    \ \n    \"\"\"\n    \nend\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5v3412tq.jl:31\nin expression starting at /tmp/tmp5v3412tq.jl:31\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = string(operand[1])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnrwsllo7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnrwsllo7.jl:1\n\
    in expression starting at /tmp/tmpnrwsllo7.jl:1\n"
  stdout: ''
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmu8rr5vy.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmu8rr5vy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu8rr5vy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu8rr5vy.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    exp_t = \"(\"\n    for i in 2:length(operand)\n\
    \        exp_t *= \"(\" * string(operand[i-1]) * operator[i-1] * string(operand[i])\
    \ * \")\"\n    end\n    exp_t *= \")\"\n    return eval(parse(exp_t))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp341wivit.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp341wivit.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp341wivit.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp341wivit.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp341wivit.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp341wivit.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp341wivit.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp341wivit.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977842
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Write your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmtl_iuv6.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpmtl_iuv6.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmtl_iuv6.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtl_iuv6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmtl_iuv6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmtl_iuv6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmtl_iuv6.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmtl_iuv6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6iu19w_y.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp6iu19w_y.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6iu19w_y.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6iu19w_y.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6iu19w_y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6iu19w_y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6iu19w_y.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6iu19w_y.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expr = operand[1]\n    for i = 1:length(operator)\n\
    \        expr = eval(Meta.parse(string(expr, \" \", operator[i], \" \", operand[i+1])))\n\
    \    end\n    return expr\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpsb5r9ku4.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpsb5r9ku4.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Base.Meta.ParseError(\"\
    use \\\"x^y\\\" instead of \\\"x**y\\\" for exponentiation, and \\\"x...\\\" instead\
    \ of \\\"**x\\\" for splatting.\")\n  Stacktrace:\n   [1] #parse#3\n     @ ./meta.jl:237\
    \ [inlined]\n   [2] parse(str::String; raise::Bool, depwarn::Bool)\n     @ Base.Meta\
    \ ./meta.jl:268\n   [3] parse\n     @ ./meta.jl:268 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpsb5r9ku4.jl:28\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpsb5r9ku4.jl:37 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsb5r9ku4.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpsb5r9ku4.jl:38\n  Expression: candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsb5r9ku4.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsb5r9ku4.jl:36\ntest set: Error During Test\
    \ at /tmp/tmpsb5r9ku4.jl:39\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpsb5r9ku4.jl:30\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpsb5r9ku4.jl:39 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] to"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    for i in\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    \n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeffh0xes.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpeffh0xes.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeffh0xes.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeffh0xes.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977841
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuqrsxcbf.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpuqrsxcbf.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqrsxcbf.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqrsxcbf.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqrsxcbf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuqrsxcbf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqrsxcbf.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqrsxcbf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = Expr(:block, [])\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprqu89abi.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqu89abi.jl:1\n\
    in expression starting at /tmp/tmprqu89abi.jl:1\n"
  stdout: ''
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmph_72fges.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmph_72fges.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmph_72fges.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_72fges.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_72fges.jl:32\ntest set:\
    \ Error During Test at /tmp/tmph_72fges.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmph_72fges.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_72fges.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkm16far9.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpkm16far9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm16far9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm16far9.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpkm16far9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkm16far9.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkm16far9.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkm16far9.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        for j in 1:length(operator)\n            if operator[j] == '+'\n    \
    \            result += operand[i]\n            elseif operator[j] == '-'\n   \
    \             result -= operand[i]\n            elseif operator[j] == '*'\n  \
    \              result *= operand[i]\n            elseif operator[j] == '//'\n\
    \                result //= operand[i]\n            elseif operator[j] == '**'\n\
    \                result = result ^ operand[i]\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bnjwd3v.jl:35\nin expression\
    \ starting at /tmp/tmp_bnjwd3v.jl:35\n"
  stdout: ''
  timestamp: 1659977841
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == 0 \n        return\
    \ operand[1]\n    end \n    if length(operator) == 1\n        if operator[1] ==\
    \ \"+\"\n            return operand[1] + operand[2]\n        elseif operator[1]\
    \ == \"-\"\n            return operand[1] - operand[2]\n        elseif operator[1]\
    \ == \"*\"\n            return operand[1] * operand[2]\n        elseif operator[1]\
    \ == \"//\"\n            return operand[1] \xF7 operand[2]\n        elseif operator[1]\
    \ == \"**\"\n            return operand[1] ^ operand[2]\n        end\n    end\
    \ \n    if length(operator) == 2\n        if operator[1] == \"+\"\n          \
    \  if operator[2] == \"+\"\n                return operand[1] + operand[2] + operand[3]\n\
    \            elseif operator[2] == \"-\"\n                return operand[1] +\
    \ operand[2] - operand[3]\n            elseif operator[2] == \"*\"\n         \
    \       return operand[1] + operand[2] * operand[3]\n            elseif operator[2]\
    \ == \"//\"\n                return operand[1] + operand[2] \xF7 operand[3]\n\
    \            elseif operator[2] == \"**\"\n                return operand[1] +\
    \ operand[2] ^ operand[3]\n            end\n        elseif operator[1] == \"-\"\
    \n            if operator[2] == \"+\"\n                return operand[1] - operand[2]\
    \ + operand[3]\n            elseif operator[2] == \"-\"\n                return\
    \ operand[1] - operand[2] - operand[3]\n            elseif operator[2] == \"*\"\
    \n                return operand[1] - operand[2] * operand[3]\n            elseif\
    \ operator[2] == \"//\"\n                return operand[1] - operand[2] \xF7 operand[3]\n\
    \            elseif operator[2] == \"**\"\n                return operand[1] -\
    \ operand[2] ^ operand\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmednbwnq.jl:1\nin expression starting at /tmp/tmpmednbwnq.jl:1\n"
  stdout: ''
  timestamp: 1659977841
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprumujyzt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprumujyzt.jl:1\n\
    in expression starting at /tmp/tmprumujyzt.jl:1\n"
  stdout: ''
  timestamp: 1659977841
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            res += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            res -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            res *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            res //= operand[i+1]\n        elseif operator[i] == \"**\"\n\
    \            res ^= operand[i+1]\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnjxb5ksh.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpnjxb5ksh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjxb5ksh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjxb5ksh.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpnjxb5ksh.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpnjxb5ksh.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpnjxb5ksh.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpnjxb5ksh.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    total = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            total += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            total -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            total *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            total //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            total ^= operand[i+1]\n        end\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp7q5urbmt.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp7q5urbmt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7q5urbmt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q5urbmt.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp7q5urbmt.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7q5urbmt.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7q5urbmt.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7q5urbmt.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == 0 \n        return\
    \ operand[1]\n    end \n    if length(operator) + 1 != length(operand)\n     \
    \   error(\"Invalid input vector size.\")\n    end \n    result = operand[1]\n\
    \    for i in 2:length(operand)\n        if operator[i-1] == \"+\"\n         \
    \   result += operand[i]\n        elseif operator[i-1] == \"-\"\n            result\
    \ -= operand[i]\n        elseif operator[i-1] == \"*\"\n            result *=\
    \ operand[i]\n        elseif operator[i-1] == \"//\"\n            result = div(result,\
    \ operand[i])\n        elseif operator[i-1] == \"**\"\n            result ^= operand[i]\n\
    \        else\n            error(\"Invalid operator.\")\n        end \n    end\
    \ \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxzewcqxn.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpxzewcqxn.jl:56\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzewcqxn.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzewcqxn.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Store the total result\n    total = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ total += operand[i+1]\n        elseif operator[i] == \"-\"\n            total\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            total *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            total //= operand[i+1]\n  \
    \      elseif operator[i] == \"**\"\n            total ^= operand[i+1]\n     \
    \   end\n    end\n    total\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnv5i5ebh.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpnv5i5ebh.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnv5i5ebh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnv5i5ebh.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpnv5i5ebh.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpnv5i5ebh.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpnv5i5ebh.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpnv5i5ebh.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmu8rr5vy.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmu8rr5vy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmu8rr5vy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmu8rr5vy.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == '+'\n            result += operand[i+1]\n        elseif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator[i] == '//'\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ '**'\n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpgtz7lz3g.jl:34\nin expression\
    \ starting at /tmp/tmpgtz7lz3g.jl:34\n"
  stdout: ''
  timestamp: 1659977842
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = string(operand[1])\n    for\
    \ i in 1:length(operator)\n        expression = string(expression, operator[i],\
    \ operand[i+1])\n    end\n    eval(Meta.parse(expression))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpy1194yww.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpy1194yww.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Base.Meta.ParseError(\"\
    use \\\"x^y\\\" instead of \\\"x**y\\\" for exponentiation, and \\\"x...\\\" instead\
    \ of \\\"**x\\\" for splatting.\")\n  Stacktrace:\n   [1] #parse#3\n     @ ./meta.jl:237\
    \ [inlined]\n   [2] parse(str::String; raise::Bool, depwarn::Bool)\n     @ Base.Meta\
    \ ./meta.jl:268\n   [3] parse\n     @ ./meta.jl:268 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpy1194yww.jl:30\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpy1194yww.jl:37 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpy1194yww.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy1194yww.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpy1194yww.jl:30\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpy1194yww.jl:39 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy1194yww.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    sum = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            sum += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            sum -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            sum *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            sum = floor(Int64, sum / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            sum = sum ^ operand[i+1]\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2z_crkc7.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp2z_crkc7.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2z_crkc7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2z_crkc7.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    operand\
    \ = operand[2:end]\n    \n    for (i, op) in enumerate(operator)\n        if op\
    \ == \"+\"\n            result += operand[i]\n        elseif op == \"-\"\n   \
    \         result -= operand[i]\n        elseif op == \"*\"\n            result\
    \ *= operand[i]\n        elseif op == \"//\"\n            result //= operand[i]\n\
    \        elseif op == \"**\"\n            result ^= operand[i]\n        end\n\
    \    end\n    \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6c8rrf_o.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp6c8rrf_o.jl:52\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6c8rrf_o.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6c8rrf_o.jl:50\ntest set: Error\
    \ During Test at /tmp/tmp6c8rrf_o.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6c8rrf_o.jl:44\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6c8rrf_o.jl:53 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6c8rrf_o.jl:50\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    # ...\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqcoxuq28.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpqcoxuq28.jl:35\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqcoxuq28.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqcoxuq28.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpqcoxuq28.jl:36\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqcoxuq28.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqcoxuq28.jl:34\ntest set: Test Failed at /tmp/tmpqcoxuq28.jl:37\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 7 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqcoxuq28.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqcoxuq28.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # TODO\n    \"\"\"\n    Use your function\
    \ here.\n    \"\"\"\n    \n    return 0\nend\n \n# Execute the script\nmain()\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: main not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmqvab3t3.jl:35\nin expression starting at /tmp/tmpmqvab3t3.jl:35\n"
  stdout: ''
  timestamp: 1659977842
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\n \nfor i = 1:length(operator)\n    println(do_algebra(operator[i],\
    \ operand[i]) == result[i])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: operator not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpexn2ti24.jl:43\nin expression starting at /tmp/tmpexn2ti24.jl:43\n"
  stdout: ''
  timestamp: 1659977842
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkm16far9.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpkm16far9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm16far9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm16far9.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpkm16far9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkm16far9.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkm16far9.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkm16far9.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your Code here\n    # start with the\
    \ first operand.\n    result = operand[1]\n    for i in 1:length(operator)\n \
    \       if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = convert(Int64, result) // convert(Int64, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy2pk_4td.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpy2pk_4td.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2pk_4td.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2pk_4td.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpy2pk_4td.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy2pk_4td.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy2pk_4td.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy2pk_4td.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Write your code here!\n    # Remember\
    \ to use shift() to remove the first operator and operand in your loop!\nend\n\
    \ \n@testset \"3.3\" begin\n    @test do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9\n    @test do_algebra([\"-\", \"*\", \"**\", \"+\"], [2, 3, 4, 5,\
    \ 6]) == -6\n    @test do_algebra([\"+\", \"*\", \"**\", \"-\"], [2, 3, 4, 5,\
    \ 6]) == -178\nend\n \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp4n3uvd1a.jl:30

    in expression starting at /tmp/tmp4n3uvd1a.jl:30

    '
  stdout: ''
  timestamp: 1659977842
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    a = operand[1]\n    b = operand[2]\n  \
    \  c = operand[3]\n    i = 1\n    op = operator[i]\n    if op == \"+\"\n     \
    \   a = a + b\n    elseif op == \"-\"\n        a = a - b\n    elseif op == \"\
    *\"\n        a = a * b\n    elseif op == \"//\"\n        a = a // b\n    elseif\
    \ op == \"**\"\n        a = a ^ b\n    end\n    while i < length(operator)\n \
    \       op = operator[i]\n        if op == \"+\"\n            a = a + c\n    \
    \    elseif op == \"-\"\n            a = a - c\n        elseif op == \"*\"\n \
    \           a = a * c\n        elseif op == \"//\"\n            a = a // c\n \
    \       elseif op == \"**\"\n            a = a ^ c\n        end\n        i = i\
    \ + 1\n        c = operand[i+1]\n    end\n    return a\nend\n# build_SIC (SIC_Machine)\n\
    # Test: build_SIC()\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpi8v6xvu9.jl:64

    '
  stdout: "test set: Test Failed at /tmp/tmpi8v6xvu9.jl:67\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 16384 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8v6xvu9.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8v6xvu9.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpi8v6xvu9.jl:68\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 36 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi8v6xvu9.jl:68 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi8v6xvu9.jl:66\ntest set: Error During Test\
    \ at /tmp/tmpi8v6xvu9.jl:69\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//12)\n  Stacktrace:\n \
    \  [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpi8v6xvu9.jl:58\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpi8v6xvu9.jl:69 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi8v6xvu9.jl:66\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp297qddks.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp297qddks.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297qddks.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297qddks.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp297qddks.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp297qddks.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp297qddks.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp297qddks.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Base case of recursion (last operation\
    \ in the vector)\n    if size(operator, 1) == 1\n        if operator[1] == \"\
    +\"\n            return operand[1] + operand[2]\n        elseif operator[1] ==\
    \ \"-\"\n            return operand[1] - operand[2]\n        elseif operator[1]\
    \ == \"*\"\n            return operand[1] * operand[2]\n        elseif operator[1]\
    \ == \"//\"\n            return operand[1] \xF7 operand[2]\n        elseif operator[1]\
    \ == \"**\"\n            return operand[1] ^ operand[2]\n        end\n    else\n\
    \        # First check if there are exponentiation operations, if yes, do them\
    \ first\n        if findfirst(x -> x == \"**\", operator) != nothing\n       \
    \     idx = findfirst(x -> x == \"**\", operator)\n            operand[idx] =\
    \ operand[idx] ^ operand[idx + 1]\n            operator = deleteat!(operator,\
    \ idx)\n            operand = deleteat!(operand, idx + 1)\n            return\
    \ do_algebra(operator, operand)\n        end\n        # Second, check if there\
    \ are multiplication operations, if yes, do them second\n        if findfirst(x\
    \ -> x == \"*\", operator) != nothing\n            idx = findfirst(x -> x == \"\
    *\", operator)\n            operand[idx] = operand[idx] * operand[idx + 1]\n \
    \           operator = deleteat!(operator, idx)\n            operand = deleteat!(operand,\
    \ idx + 1)\n            return do_algebra(operator, operand)\n        end\n  \
    \      # Third, check if there are division operations, if yes, do them third\n\
    \        if findfirst(x -> x == \"//\", operator) != nothing\n            idx\
    \ = findfirst(x -> x == \"//\", operator)\n            operand[idx] = operand[idx]\
    \ \xF7 operand[idx + 1]\n            operator = deleteat!(operator, idx)\n   \
    \         operand = deleteat!(operand, idx + 1)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12us97sr.jl:1\nin expression starting at /tmp/tmp12us97sr.jl:1\n"
  stdout: ''
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # N = length(operator)\n    # result =\
    \ operand[1]\n    # for i = 1:N\n    #     if operator[i] == \"+\"\n    #    \
    \     result += operand[i+1]\n    #     elseif operator[i] == \"-\"\n    #   \
    \      result -= operand[i+1]\n    #     elseif operator[i] == \"*\"\n    #  \
    \       result *= operand[i+1]\n    #     elseif operator[i] == \"//\"\n    #\
    \         result = floor(Int64, result / operand[i+1])\n    #     elseif operator[i]\
    \ == \"**\"\n    #         result = result ^ operand[i+1]\n    #     end\n   \
    \ # end\n    # return result\n    #\n    # Another one\n    #\n    # result =\
    \ operand[1]\n    # for i = 1:length(operator)\n    #     result = eval(parse(result,\
    \ operator[i], operand[i+1]))\n    # end\n    # return result\n    #\n    # More\
    \ readable version\n    #\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        eval(parse(result, operator[i], operand[i+1]))\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpr6fhnn6r.jl:61

    '
  stdout: "test set: Error During Test at /tmp/tmpr6fhnn6r.jl:64\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::Int64, ::String, ::Int64)\n  Closest candidates are:\n\
    \    parse(!Matched::Type{Sockets.IPAddr}, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, ::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpr6fhnn6r.jl:55\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6fhnn6r.jl:64 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6fhnn6r.jl:63\ntest set:\
    \ Error During Test at /tmp/tmpr6fhnn6r.jl:65\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, ::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpr6fhnn6r.jl:55\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6fhnn6r.jl:65 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/s"
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuqrsxcbf.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpuqrsxcbf.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqrsxcbf.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqrsxcbf.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqrsxcbf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuqrsxcbf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpuqrsxcbf.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqrsxcbf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Write your code here ...\n\
    \    \"\"\"\n    assert(length(operator) == length(operand) - 1)\n    if length(operator)\
    \ == 0\n        return 0\n    end\n    if length(operator) == 1\n        if operator[1]\
    \ == \"+\"\n            return operand[1] + operand[2]\n        elseif operator[1]\
    \ == \"-\"\n            return operand[1] - operand[2]\n        elseif operator[1]\
    \ == \"*\"\n            return operand[1] * operand[2]\n        elseif operator[1]\
    \ == \"//\"\n            return operand[1] // operand[2]\n        elseif operator[1]\
    \ == \"**\"\n            return operand[1] ^ operand[2]\n        end\n    end\n\
    \    \n    if length(operator) > 1\n        subop = operator[1]\n        if subop\
    \ == \"+\"\n            operand[2] = operand[1] + operand[2]\n        elseif subop\
    \ == \"-\"\n            operand[2] = operand[1] - operand[2]\n        elseif subop\
    \ == \"*\"\n            operand[2] = operand[1] * operand[2]\n        elseif subop\
    \ == \"//\"\n            operand[2] = operand[1] // operand[2]\n        elseif\
    \ subop == \"**\"\n            operand[2] = operand[1] ^ operand[2]\n        end\n\
    \        op = operator[2:end]\n        opd = operand[2:end]\n        return do_algebra(op,\
    \ opd)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9ew12m5p.jl:67

    '
  stdout: "test set: Error During Test at /tmp/tmp9ew12m5p.jl:70\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp9ew12m5p.jl:29\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9ew12m5p.jl:70 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ew12m5p.jl:69\ntest set:\
    \ Error During Test at /tmp/tmp9ew12m5p.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9ew12m5p.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ew12m5p.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ew12m5p.jl:69\ntest set:\
    \ Error During Test at /tmp/tmp9ew12m5p.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9ew12m5p.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ew12m5p.jl:72 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ew12m5p.jl:69\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    operand_idx =\
    \ 2\n    for op in operator\n        if op == \"+\"\n            result += operand[operand_idx]\n\
    \        elseif op == \"-\"\n            result -= operand[operand_idx]\n    \
    \    elseif op == \"*\"\n            result *= operand[operand_idx]\n        elseif\
    \ op == \"//\"\n            result //= operand[operand_idx]\n        elseif op\
    \ == \"**\"\n            result = result ^ operand[operand_idx]\n        end\n\
    \        operand_idx += 1\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgjscrll2.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpgjscrll2.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgjscrll2.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgjscrll2.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpgjscrll2.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgjscrll2.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpgjscrll2.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpgjscrll2.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977846
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = operand[i+1] ^ result\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpem733c87.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpem733c87.jl:47\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 41 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpem733c87.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpem733c87.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem733c87.jl:48\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpem733c87.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpem733c87.jl:46\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    This function takes in a vector\
    \ of string operators, and a vector of integers. \n    Use these two vectors to\
    \ build an algebraic expression and return the evaluation of this expression.\n\
    \    \"\"\"\n    result = operand[1]\n    for i in 2:length(operand)\n       \
    \ if operator[i-1] == \"+\"\n            result += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            result *= operand[i]\n        elseif operator[i-1] ==\
    \ \"//\"\n            result \xF7= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp383fdxp_.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp383fdxp_.jl:52\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp383fdxp_.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp383fdxp_.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #   Add your code here\n    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo2x7noh0.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpo2x7noh0.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo2x7noh0.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo2x7noh0.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    e = parse(Int64, string(operand[1]))\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"-\"\n          \
    \  e -= operand[i+1]\n        elseif operator[i] == \"+\"\n            e += operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            e *= operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            e \xF7= operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            e ^= operand[i+1]\n        end\n    end\n    return e\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnwp2q7kv.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpnwp2q7kv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwp2q7kv.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwp2q7kv.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprumujyzt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprumujyzt.jl:1\n\
    in expression starting at /tmp/tmprumujyzt.jl:1\n"
  stdout: ''
  timestamp: 1659977841
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n   \n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    \n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_ub2degg.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmp_ub2degg.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ub2degg.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ub2degg.jl:48\ntest set: Error\
    \ During Test at /tmp/tmp_ub2degg.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_ub2degg.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_ub2degg.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_ub2degg.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        op = operator[i]\n        arg = operand[i+1]\n        if op == \"+\"\n\
    \            result += arg\n        elseif op == \"-\"\n            result -=\
    \ arg\n        elseif op == \"*\"\n            result *= arg\n        elseif op\
    \ == \"//\"\n            result //= arg\n        elseif op == \"**\"\n       \
    \     result = result ^ arg\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp36rdiix1.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmp36rdiix1.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp36rdiix1.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp36rdiix1.jl:48\ntest set: Error\
    \ During Test at /tmp/tmp36rdiix1.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp36rdiix1.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp36rdiix1.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp36rdiix1.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\n# Test\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppqvycabl.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmppqvycabl.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmppqvycabl.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqvycabl.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqvycabl.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppqvycabl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmppqvycabl.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqvycabl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = operand[1]\n    for i = 1:length(operator)\n\
    \        expression = eval(parse(string(expression, operator[i], operand[i+1])))\n\
    \    end\n    return expression\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy5yexj1v.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpy5yexj1v.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy5yexj1v.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5yexj1v.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy5yexj1v.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy5yexj1v.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy5yexj1v.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy5yexj1v.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    exp = \"\"\n    for\
    \ i in 1:length(operator)\n        exp = exp * string(operand[i]) * operator[i]\n\
    \    end\n    exp = exp * string(operand[end])\n    return eval(parse(exp))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6l4svmdz.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp6l4svmdz.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6l4svmdz.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6l4svmdz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6l4svmdz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6l4svmdz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6l4svmdz.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6l4svmdz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    n=length(operator)\n\
    \    k=length(operand)\n    x=0\n    while(k-1>=1)\n        if operator[n]==\"\
    +\"\n            operand[k-1]=operand[k-1]+operand[k]\n        elseif operator[n]==\"\
    -\"\n            operand[k-1]=operand[k-1]-operand[k]\n        elseif operator[n]==\"\
    *\"\n            operand[k-1]=operand[k-1]*operand[k]\n        elseif operator[n]==\"\
    //\"\n            operand[k-1]=operand[k-1]//operand[k]\n        elseif operator[n]==\"\
    **\"\n            operand[k-1]=operand[k-1]^operand[k]\n        end\n        n=n-1\n\
    \        k=k-1\n    end\n    return operand[1]\nend\n \n \n \n \nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8aztl1_7.jl:53

    '
  stdout: "test set: Test Failed at /tmp/tmp8aztl1_7.jl:56\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 134217728 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aztl1_7.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aztl1_7.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp8aztl1_7.jl:57\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: -1 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8aztl1_7.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8aztl1_7.jl:55\ntest set: Error During Test\
    \ at /tmp/tmp8aztl1_7.jl:58\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(7//12)\n  Stacktrace:\n \
    \  [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp8aztl1_7.jl:38\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp8aztl1_7.jl:58 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8aztl1_7.jl:55\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    temp = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            temp += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            temp -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            temp *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            temp //= operand[i+1]\n        elseif operator[i] == \"**\"\n\
    \            temp ^= operand[i+1]\n        end\n    end\n    return temp\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwh96u1qj.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpwh96u1qj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwh96u1qj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwh96u1qj.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpwh96u1qj.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwh96u1qj.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpwh96u1qj.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwh96u1qj.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #Given two vectors operator, and operand.\
    \ The first vector has basic algebra operations, and the second vector is a vector\
    \ of integers. Use the two given vectors to build the algebric expression and\
    \ return the evaluation of this expression.\n    result = operand[1]\n    for\
    \ i in 1:length(operator)\n        if operator[i] == '+'\n            result +=\
    \ operand[i+1]\n        elseif operator[i] == '-'\n            result -= operand[i+1]\n\
    \        elseif operator[i] == '*'\n            result *= operand[i+1]\n     \
    \   elseif operator[i] == '//'\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == '**'\n            result ^= operand[i+1]\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqxpdpnfz.jl:35\nin expression\
    \ starting at /tmp/tmpqxpdpnfz.jl:35\n"
  stdout: ''
  timestamp: 1659977844
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmulqw1a1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmulqw1a1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulqw1a1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulqw1a1.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmulqw1a1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmulqw1a1.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmulqw1a1.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmulqw1a1.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (op, ind)\
    \ in enumerate(operator)\n        if op == \"+\"\n            result += operand[ind+1]\n\
    \        elseif op == \"-\"\n            result -= operand[ind+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[ind+1]\n        elseif op == \"//\"\
    \n            result = floor(Int64, result/operand[ind+1])\n        elseif op\
    \ == \"**\"\n            result ^= operand[ind+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfx3vtbf2.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpfx3vtbf2.jl:47\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfx3vtbf2.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfx3vtbf2.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpfx3vtbf2.jl:48\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfx3vtbf2.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfx3vtbf2.jl:46\ntest set: Test Failed at /tmp/tmpfx3vtbf2.jl:49\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 7 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfx3vtbf2.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfx3vtbf2.jl:46\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977846
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Write your code here\n    # If you get\
    \ stuck, uncomment the line above to load a correction in this cell (then you\
    \ can execute this code).\n    \n    pass # remove this line when you write your\
    \ code\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3v3wlu29.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp3v3wlu29.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp3v3wlu29.jl:29\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3v3wlu29.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3v3wlu29.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3v3wlu29.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3v3wlu29.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3v3wlu29.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3v3wlu29.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3v3wlu29.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3v3wlu29.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3v3wlu29.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3v3wlu29.jl:35\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977846
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # TODO\n   \n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpporn76sv.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpporn76sv.jl:36\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpporn76sv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpporn76sv.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpporn76sv.jl:37\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpporn76sv.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpporn76sv.jl:35\ntest set: Test Failed at /tmp/tmpporn76sv.jl:38\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpporn76sv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpporn76sv.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977846
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    for i =\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result //= operand[i+1]\n       \
    \ elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp1aomn5lf.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp1aomn5lf.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1aomn5lf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1aomn5lf.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp1aomn5lf.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1aomn5lf.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1aomn5lf.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1aomn5lf.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977848
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \nend\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0rx3ex8r.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmp0rx3ex8r.jl:47\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp0rx3ex8r.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rx3ex8r.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0rx3ex8r.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp0rx3ex8r.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp0rx3ex8r.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rx3ex8r.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbplsb161.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpbplsb161.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbplsb161.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbplsb161.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, op) in\
    \ enumerate(operator)\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result = floor(Int64, result / operand[i+1])\n        elseif op\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\ndo_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgmtx1mt3.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpgmtx1mt3.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmtx1mt3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmtx1mt3.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Args:\n        operator: Vector\
    \ of basic algebra operations\n        operand: Vector of integers\n    Returns:\n\
    \        The result of algebraic expression\n    \"\"\"\n    algebra = operand[1]\n\
    \    for i in 1:length(operator)\n        op = operator[i]\n        if op == \"\
    +\"\n            algebra += operand[i+1]\n        elseif op == \"-\"\n       \
    \     algebra -= operand[i+1]\n        elseif op == \"*\"\n            algebra\
    \ *= operand[i+1]\n        elseif op == \"//\"\n            algebra = convert(Int64,\
    \ algebra / operand[i+1])\n        elseif op == \"**\"\n            algebra =\
    \ convert(Int64, algebra ^ operand[i+1])\n        end\n    end\n    return algebra\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprzbkm_1e.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmprzbkm_1e.jl:56\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprzbkm_1e.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprzbkm_1e.jl:54\ntest set: Error\
    \ During Test at /tmp/tmprzbkm_1e.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmprzbkm_1e.jl:43\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprzbkm_1e.jl:57 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprzbkm_1e.jl:54\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977848
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    n = length(operator)\n    result = operand[1]\n\
    \    for i = 1:n\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result \xF7= operand[i+1]\n     \
    \   elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n       \
    \ end\n    end\n    return result\nend\n    \nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpata6qdqu.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpata6qdqu.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpata6qdqu.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpata6qdqu.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe5l3pdg5.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpe5l3pdg5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe5l3pdg5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe5l3pdg5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmulqw1a1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmulqw1a1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulqw1a1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulqw1a1.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmulqw1a1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmulqw1a1.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmulqw1a1.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmulqw1a1.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    value = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            value += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            value -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            value *= operand[i]\n        elseif operator[i-1] == \"\
    //\"\n            value = floor(Int64, value / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            value = floor(Int64, value^operand[i])\n        end\n\
    \    end\n    return value\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_bfln0iq.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp_bfln0iq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bfln0iq.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bfln0iq.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == '+'\n            result += operand[i+1]\n        elseif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator[i] == '//'\n\
    \            result //= operand[i+1]\n        elseif operator[i] == '**'\n   \
    \         result = result ^ operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppgucnxk5.jl:34\nin expression\
    \ starting at /tmp/tmppgucnxk5.jl:34\n"
  stdout: ''
  timestamp: 1659977846
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = div(result, operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5rwlhhxg.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp5rwlhhxg.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rwlhhxg.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rwlhhxg.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    i = length(operator)\n    n = length(operand)\n\
    \    result = operand[1]\n    \n    for j in 1:i\n        if operator[j] == \"\
    +\"\n            result = result + operand[j+1]\n        elseif operator[j] ==\
    \ \"-\"\n            result = result - operand[j+1]\n        elseif operator[j]\
    \ == \"*\"\n            result = result * operand[j+1]\n        elseif operator[j]\
    \ == \"//\"\n            result = result \xF7 operand[j+1]\n        elseif operator[j]\
    \ == \"**\"\n            result = result ^ operand[j+1]\n        end\n    end\n\
    \    \n    return result\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpettbycuj.jl:50

    '
  stdout: "test set: Test Failed at /tmp/tmpettbycuj.jl:54\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpettbycuj.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpettbycuj.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977848
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        a = operand[i+1]\n        if operator[i] == \"+\"\n            result\
    \ += a\n        elseif operator[i] == \"-\"\n            result -= a\n       \
    \ elseif operator[i] == \"*\"\n            result *= a\n        elseif operator[i]\
    \ == \"//\"\n            result //= a\n        elseif operator[i] == \"**\"\n\
    \            result = result ^ a\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxhu2w3zo.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpxhu2w3zo.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhu2w3zo.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhu2w3zo.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpxhu2w3zo.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpxhu2w3zo.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxhu2w3zo.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxhu2w3zo.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if (length(operator) != length(operand)\
    \ - 1)\n        throw(ArgumentError(\"Wrong input\"))\n    end\n    if (length(operator)\
    \ == 0 || length(operand) == 0)\n        throw(ArgumentError(\"Wrong input\"))\n\
    \    end\n    answer = operand[1]\n    for (index, val) in enumerate(operator)\n\
    \        oper = val\n        if (oper == \"+\")\n            answer += operand[index\
    \ + 1]\n        elseif (oper == \"-\")\n            answer -= operand[index +\
    \ 1]\n        elseif (oper == \"*\")\n            answer *= operand[index + 1]\n\
    \        elseif (oper == \"//\")\n            answer = div(answer, operand[index\
    \ + 1])\n        elseif (oper == \"**\")\n            answer = answer ^ operand[index\
    \ + 1]\n        else\n            throw(ArgumentError(\"Wrong operator\"))\n \
    \       end\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvh92favd.jl:53

    '
  stdout: "test set: Test Failed at /tmp/tmpvh92favd.jl:57\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvh92favd.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvh92favd.jl:55\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977848
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, op) in\
    \ enumerate(operator)\n        if op == '+'\n            result += operand[i+1]\n\
    \        elseif op == '-'\n            result -= operand[i+1]\n        elseif\
    \ op == '*'\n            result *= operand[i+1]\n        elseif op == '//'\n \
    \           result //= operand[i+1]\n        elseif op == '**'\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp398g378k.jl:34\nin expression\
    \ starting at /tmp/tmp398g378k.jl:34\n"
  stdout: ''
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Implement your answer here\n\
    \    \"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5ekuudox.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5ekuudox.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp5ekuudox.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ekuudox.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ekuudox.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5ekuudox.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp5ekuudox.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ekuudox.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    length(operator) != length(operand)\
    \ - 1 && error(\"invalid operand length\")\n    length(operator) < 1 && error(\"\
    invalid operator length\")\n    any(operand .< 0) && error(\"invalid operand value\"\
    )\n    \n    result = operand[1]\n    for (op, i) in enumerate(operator)\n   \
    \     if op == \"+\"\n            result += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n    \
    \        result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ = result \xF7 operand[i+1]\n        elseif op == \"**\"\n            result\
    \ ^= operand[i+1]\n        else\n            error(\"invalid operator\")\n   \
    \     end\n    end\n    \n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpf9_krbv0.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpf9_krbv0.jl:55\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  invalid\
    \ operator\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf9_krbv0.jl:44\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9_krbv0.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9_krbv0.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpf9_krbv0.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  invalid operator\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpf9_krbv0.jl:44\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpf9_krbv0.jl:56 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9_krbv0.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpf9_krbv0.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  invalid operator\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpf9_krbv0.jl:44\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpf9_krbv0.jl:57 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9_krbv0.jl:54\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = operand[1]\n    for (i, o) in enumerate(operator)\n\
    \        if o == \"+\"\n            res += operand[i+1]\n        elseif o == \"\
    -\"\n            res -= operand[i+1]\n        elseif o == \"*\"\n            res\
    \ *= operand[i+1]\n        elseif o == \"//\"\n            res = floor(Int64,\
    \ res/operand[i+1])\n        elseif o == \"**\"\n            res = res^operand[i+1]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp02vwtnap.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp02vwtnap.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02vwtnap.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02vwtnap.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    for i in\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result //= operand[i+1]\n       \
    \ elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpksnp0tlb.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpksnp0tlb.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpksnp0tlb.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksnp0tlb.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpksnp0tlb.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpksnp0tlb.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpksnp0tlb.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpksnp0tlb.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = convert(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\n \nprint(do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5]))\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptt5ub8fn.jl:46

    '
  stdout: "15test set: Test Failed at /tmp/tmptt5ub8fn.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptt5ub8fn.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptt5ub8fn.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    out = operand[1]\n    for i = 1:length(operator)\n\
    \        out = eval(string(out, operator[i], operand[i+1]))\n    end\n    return\
    \ out\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpaucgrywb.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpaucgrywb.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpaucgrywb.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaucgrywb.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaucgrywb.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpaucgrywb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpaucgrywb.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaucgrywb.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977851
- exit_code: -1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    for i in 1:length(operator)\n        if\
    \ operator[i] == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n \
    \           pop!(operand, i+1)\n            pop!(operator, i)\n            i =\
    \ i - 1\n        elseif operator[i] == \"-\"\n            operand[i] = operand[i]\
    \ - operand[i+1]\n            pop!(operand, i+1)\n            pop!(operator, i)\n\
    \            i = i - 1\n        elseif operator[i] == \"*\"\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            pop!(operand, i+1)\n            pop!(operator,\
    \ i)\n            i = i - 1\n        elseif operator[i] == \"//\"\n          \
    \  operand[i] = operand[i] \xF7 operand[i+1]\n            pop!(operand, i+1)\n\
    \            pop!(operator, i)\n            i = i - 1\n        elseif operator[i]\
    \ == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n            pop!(operand,\
    \ i+1)\n            pop!(operator, i)\n            i = i - 1\n        end\n  \
    \  end\n    return operand[1]\nend\noperator = [\"+\", \"*\", \"-\"]\noperand\
    \ = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching pop!(::Vector{Int64},
    ::Int64)\nClosest candidates are:\n  pop!(!Matched::WeakKeyDict{K}, ::Any) where
    K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:154\n  pop!(!Matched::WeakKeyDict{K},
    ::Any, !Matched::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:160\n  pop!(!Matched::IdDict{K,
    V}, ::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:124\n  ...\nStacktrace:\n
    [1] do_algebra(operator::'''
  stdout: None
  timestamp: 1659977852
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    start = 1\n    end = length(operand)\n\
    \    while start < end\n        if operator[start] == \"+\"\n            operand[start]\
    \ = operand[start] + operand[start + 1]\n        elseif operator[start] == \"\
    -\"\n            operand[start] = operand[start] - operand[start + 1]\n      \
    \  elseif operator[start] == \"*\"\n            operand[start] = operand[start]\
    \ * operand[start + 1]\n        elseif operator[start] == \"//\"\n           \
    \ operand[start] = operand[start] \xF7 operand[start + 1]\n        elseif operator[start]\
    \ == \"**\"\n            operand[start] = operand[start] ^ operand[start + 1]\n\
    \        end\n        pop!(operand)\n        pop!(operator)\n    end\n    return\
    \ operand[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"function do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64\n    # /tmp/tmp6l425_q0.jl, line 25\n    # /tmp/tmp6l425_q0.jl,\
    \ line 26\n    start = 1\nend\" around /tmp/tmp6l425_q0.jl:1\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp6l425_q0.jl:1\nin expression starting at /tmp/tmp6l425_q0.jl:1\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expression = \"\"\n    for i in 1:length(operator)\n\
    \        expression *= string(operand[i]) * operator[i]\n    end\n    expression\
    \ *= string(operand[end])\n    return eval(parse(expression))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpo6bm0zwe.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpo6bm0zwe.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo6bm0zwe.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo6bm0zwe.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo6bm0zwe.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpo6bm0zwe.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::String)\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    ...\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo6bm0zwe.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo6bm0zwe.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            res += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            res -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            res *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            res = floor(Int64, res/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            res = floor(Int64, res^operand[i+1])\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkk7txcx_.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpkk7txcx_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk7txcx_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk7txcx_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        println(operator[i], operand[i+1])\n        if operator[i] == \"+\"\n\
    \            result += operand[i+1]\n        elseif operator[i] == \"-\"\n   \
    \         result -= operand[i+1]\n        elseif operator[i] == \"*\"\n      \
    \      result *= operand[i+1]\n        elseif operator[i] == \"//\"\n        \
    \    result //= operand[i+1]\n        elseif operator[i] == \"**\"\n         \
    \   result ^= operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp16ck69u0.jl:45

    '
  stdout: "**3\n*4\n+5\n+3\n*4\n-5\ntest set: Test Failed at /tmp/tmp16ck69u0.jl:49\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 15 == 9\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16ck69u0.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16ck69u0.jl:47\n//3\n*4\ntest\
    \ set: Error During Test at /tmp/tmp16ck69u0.jl:50\n  Test threw exception\n \
    \ Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n\
    \  Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp16ck69u0.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp16ck69u0.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp16ck69u0.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == '+'\n            result += operand[i]\n        elseif\
    \ operator[i-1] == '-'\n            result -= operand[i]\n        elseif operator[i-1]\
    \ == '*'\n            result *= operand[i]\n        elseif operator[i-1] == '//'\n\
    \            result = floor(Int64, result/operand[i])\n        elseif operator[i-1]\
    \ == '**'\n            result = floor(Int64, result^operand[i])\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp1beci5e0.jl:34\nin expression\
    \ starting at /tmp/tmp1beci5e0.jl:34\n"
  stdout: ''
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) != length(operand)\
    \ - 1\n        error(\"Invalid Input\")\n    end\n    expression = \"\"\n    for\
    \ i = 1:length(operator)\n        expression = expression * string(operand[i])\
    \ * \" \" * operator[i] * \" \"\n    end\n    expression = expression * string(operand[end])\n\
    \    return eval(expression)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy4m6hryn.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpy4m6hryn.jl:42\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy4m6hryn.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4m6hryn.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4m6hryn.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpy4m6hryn.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy4m6hryn.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4m6hryn.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    #### BEGIN SOLUTION\n    out = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == '+'\n            out\
    \ += operand[i+1]\n        elseif operator[i] == '-'\n            out -= operand[i+1]\n\
    \        elseif operator[i] == '*'\n            out *= operand[i+1]\n        elseif\
    \ operator[i] == '//'\n            out = out \xF7 operand[i+1]\n        elseif\
    \ operator[i] == '**'\n            out ^= operand[i+1]\n        end\n    end\n\
    \    return out\n    #### END SOLUTION\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpih2l31ch.jl:36\nin expression\
    \ starting at /tmp/tmpih2l31ch.jl:36\n"
  stdout: ''
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result //= operand[i+1]\n        elseif op == \"**\"\n         \
    \   result ^= operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf_ffq0yi.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpf_ffq0yi.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_ffq0yi.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_ffq0yi.jl:47\ntest set: Error\
    \ During Test at /tmp/tmpf_ffq0yi.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpf_ffq0yi.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpf_ffq0yi.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpf_ffq0yi.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy7x_j9gi.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy7x_j9gi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7x_j9gi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7x_j9gi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy7x_j9gi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy7x_j9gi.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy7x_j9gi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy7x_j9gi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977840
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9uk2jtt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9uk2jtt.jl:1\n\
    in expression starting at /tmp/tmpo9uk2jtt.jl:1\n"
  stdout: ''
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == '+'\n            result += operand[i+1]\n        elseif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elseif operator[i] == '//'\n\
    \            result //= operand[i+1]\n        elseif operator[i] == '**'\n   \
    \         result ^= operand[i+1]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpturrfgo0.jl:34\nin expression\
    \ starting at /tmp/tmpturrfgo0.jl:34\n"
  stdout: ''
  timestamp: 1659977849
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    i = 1\n    while\
    \ i < length(operator) + 1\n        if operator[i] == \"+\"\n            result\
    \ += operand[i + 1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i + 1]\n        elseif operator[i] == \"*\"\n            result *= operand[i\
    \ + 1]\n        elseif operator[i] == \"//\"\n            result //= operand[i\
    \ + 1]\n        elseif operator[i] == \"**\"\n            result ^= operand[i\
    \ + 1]\n        end\n        i += 1\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpvykv7_jx.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpvykv7_jx.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvykv7_jx.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvykv7_jx.jl:48\ntest set: Error\
    \ During Test at /tmp/tmpvykv7_jx.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvykv7_jx.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvykv7_jx.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvykv7_jx.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977852
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # in Julia, use `#` for comments\n    result\
    \ = operand[1]\n    # Loop over the vector with indices\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = result \xF7 operand[i]\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprfdbmiq8.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmprfdbmiq8.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprfdbmiq8.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprfdbmiq8.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (op, num)\
    \ in zip(operator, operand[2:end])\n        if op == \"+\"\n            result\
    \ += num\n        elseif op == \"-\"\n            result -= num\n        elseif\
    \ op == \"*\"\n            result *= num\n        elseif op == \"//\"\n      \
    \      result = floor(Int64, result/num)\n        elseif op == \"**\"\n      \
    \      result = result^num\n        end\n    end\n    return result\nend\n@testset\
    \ \"vector of algebra operations to int\" begin\n    @test do_algebra(['+', '-',\
    \ '*', '//', '**'], [2, 2, 2, 2, 2]) == 4\n    @test do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]) == 9\n    @test do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]) ==\
    \ 13\n    @test do_algebra(['+', '*', '-', '*'], [2, 3, 4, 5, 6]) == 11\n    @test\
    \ do_algebra(['*', '*', '*', '*'], [2, 3, 4, 5, 6]) == 720\n    @test do_algebra(['//',\
    \ '+', '*', '-'], [2, 3, 4, 5, 6]) == -1\n    @test do_algebra(['//', '+', '*',\
    \ '-', '//'], [2, 3, 4, 5, 6, 7]) == -2\n    @test do_algebra(['+', '-', '*',\
    \ '//', '**'], [2, 2, 2, 2, 2]) == 0\n    @test do_algebra(['*', '*', '*', '*',\
    \ '*'], [2, 2, 2, 2, 2]) == 32\n    @test do_algebra(['+', '*', '-', '*', '//'],\
    \ [2, 3, 4, 5, 6, 7]) == -19\n    @test do_algebra(['+', '*', '*', '\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbw9q2j_m.jl:43\nin expression\
    \ starting at /tmp/tmpbw9q2j_m.jl:43\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Writing your code here ...\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3opwikts.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp3opwikts.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3opwikts.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3opwikts.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3opwikts.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3opwikts.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp3opwikts.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3opwikts.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    ################################################################################\n\
    \    # \n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction\
    \ ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation\
    \ ( ** ) \n    #\n    ################################################################################\n\
    \    \n    # Creating empty expression\n    expr = Expr(:empty)\n    \n    # Check\
    \ for correct lengths\n    if length(operator) == length(operand) - 1 && length(operator)\
    \ > 0 && length(operand) > 1\n        \n        # For each operator, create an\
    \ expression with operand 1 and operand 2\n        for i in 1:length(operator)\n\
    \            \n            # For the first operator, create the expression with\
    \ two operands\n            if i == 1\n                expr = Expr(:call, Symbol(operator[i]),\
    \ operand[i], operand[i+1])\n                \n            # For the other operators,\
    \ create the expression with the current expression,\n            # and the next\
    \ operand\n            else\n                expr = Expr(:call, Symbol(operator[i]),\
    \ expr, operand[i+1])\n            end\n            \n        end\n        \n\
    \        # Return the evaluation of the expression\n        return eval(expr)\n\
    \        \n    else\n        # Return error\n        return \"ERROR: Length of\
    \ operator vector is equal to the length of operand vector minus one. Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\"\
    \n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp6n0le5d4.jl:70

    '
  stdout: "test set: Error During Test at /tmp/tmp6n0le5d4.jl:73\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ ** not defined\n  Stacktrace:\n   [1] top-level scope\n     @ none:1\n   [2]\
    \ eval\n     @ ./boot.jl:373 [inlined]\n   [3] eval\n     @ ./client.jl:453 [inlined]\n\
    \   [4] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6n0le5d4.jl:60\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6n0le5d4.jl:73 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6n0le5d4.jl:72\ntest set:\
    \ Test Failed at /tmp/tmp6n0le5d4.jl:74\n  Expression: candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6n0le5d4.jl:74 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6n0le5d4.jl:72\ntest set: Error During Test\
    \ at /tmp/tmp6n0le5d4.jl:75\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp6n0le5d4.jl:60\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmp6n0le5d4.jl:75 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6n0le5d4.jl:72\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    operand1 = operand[1]\n\
    \    for i in 2:length(operand)\n        if operator[i-1] == \"+\"\n         \
    \   operand1 += operand[i]\n        elseif operator[i-1] == \"-\"\n          \
    \  operand1 -= operand[i]\n        elseif operator[i-1] == \"*\"\n           \
    \ operand1 *= operand[i]\n        elseif operator[i-1] == \"//\"\n           \
    \ operand1 = floor(Int64, operand1/operand[i])\n        elseif operator[i-1] ==\
    \ \"**\"\n            operand1 = operand1^operand[i]\n        end\n    end\n \
    \   return operand1\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppsqlnzha.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmppsqlnzha.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsqlnzha.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsqlnzha.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpufhtoruo.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpufhtoruo.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpufhtoruo.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufhtoruo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufhtoruo.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphmp0b6vr.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmphmp0b6vr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmp0b6vr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmp0b6vr.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4qhpqa6b.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp4qhpqa6b.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4qhpqa6b.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4qhpqa6b.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977839
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\n \n\
    \ \n \n \n \n \n \n \n \n \n@test do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9\n@test do_algebra([\"+\", \"*\", \"-\"], [2, 2, 3, 3, 4, 4, 5, 5])\
    \ == 9\n@test do_algebra([\"*\", \"//\", \"-\"], [5, 2, 1, 8, 3, 10]) == -18\n\
    @test do_algebra([\"*\", \"**\", \"-\"], [2, 3, 4, 5]) == 6\n \n \n \n \n\"\"\"\
    \n    Given two vectors of integers; source and destination. Return if there is\
    \ a way to move the contents of the source vector to the destination vector.\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmp2l_5w963.jl:39

    in expression starting at /tmp/tmp2l_5w963.jl:39

    '
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\"\n    Operates a sequence of arithmetic\
    \ operations\n    \"\"\"\n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        result = eval(string(result, operator[i-1], operand[i]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpirp56obk.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpirp56obk.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpirp56obk.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpirp56obk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpirp56obk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpirp56obk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpirp56obk.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpirp56obk.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # create empty output vector of size\
    \ 1\n    out = zeros(Int64, 1)\n    \n    # Insert first element of operand vector\
    \ into output vector\n    out[1] = operand[1]\n    \n    # iterate through operator\
    \ vector\n    for i in 2:length(operand)\n        \n        # if operator is \"\
    +\"\n        if operator[i-1] == \"+\"\n            # insert addition of operand\
    \ vector i and output vector\n            out = [out[1] + operand[i]]\n      \
    \      \n        # if operator is \"-\"\n        elseif operator[i-1] == \"-\"\
    \n            # insert subtraction of operand vector i and output vector\n   \
    \         out = [out[1] - operand[i]]\n            \n        # if operator is\
    \ \"*\"\n        elseif operator[i-1] == \"*\"\n            # insert multiplication\
    \ of operand vector i and output vector\n            out = [out[1] * operand[i]]\n\
    \            \n        # if operator is \"//\"\n        elseif operator[i-1] ==\
    \ \"//\"\n            # insert floor division of operand vector i and output vector\n\
    \            out = [floor(Int64, out[1] / operand[i])]\n            \n       \
    \ # if operator is \"**\"\n        elseif operator[i-1] == \"**\"\n          \
    \  # insert exponantion of operand vector i and output vector\n            out\
    \ = [out[1] ^ operand[i]]\n            \n        end\n    end\n    \n    # return\
    \ output vector\n    return out[1]\nend\ndo_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5])\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7mzgquz8.jl:70

    '
  stdout: "test set: Test Failed at /tmp/tmp7mzgquz8.jl:74\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7mzgquz8.jl:74 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7mzgquz8.jl:72\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    temp = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            temp += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            temp -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            temp *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            temp //= operand[i+1]\n        elseif operator[i] == \"**\"\n\
    \            temp ^= operand[i+1]\n        end\n    end\n    return temp\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwh96u1qj.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpwh96u1qj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwh96u1qj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwh96u1qj.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpwh96u1qj.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwh96u1qj.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpwh96u1qj.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwh96u1qj.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977847
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    @assert nops(operator) == nops(operand)\
    \ - 1\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprlx53wht.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprlx53wht.jl:1\n\
    in expression starting at /tmp/tmprlx53wht.jl:1\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  result = operand[1]\n  for i in 1:length(operator)\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elseif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elseif operator[i] == \"*\"\n  \
    \    result *= operand[i+1]\n    elseif operator[i] == \"//\"\n      result =\
    \ div(result, operand[i+1])\n    elseif operator[i] == \"**\"\n      result ^=\
    \ operand[i+1]\n    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy8ygzhx5.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpy8ygzhx5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy8ygzhx5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy8ygzhx5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    for i in\
    \ 2:length(operand)\n        if operator[i-1] == \"+\"\n            result +=\
    \ operand[i]\n        elseif operator[i-1] == \"-\"\n            result -= operand[i]\n\
    \        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n   \
    \     elseif operator[i-1] == \"//\"\n            result = floor(Int64, result/operand[i])\n\
    \        elseif operator[i-1] == \"**\"\n            result = result^operand[i]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt6zmzk8h.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpt6zmzk8h.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6zmzk8h.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6zmzk8h.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977852
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Generic function for a sequence\
    \ of operations\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsbdeama.jl:1\nin expression starting at /tmp/tmpzsbdeama.jl:1\n"
  stdout: ''
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    n = size(operator, 1)\n    res = operand[1]\n\
    \    for i = 1:n\n        if operator[i] == \"+\"\n            res += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            res -= operand[i+1]\n      \
    \  elseif operator[i] == \"*\"\n            res *= operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            res = floor(Int64, res / operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            res = res ^ operand[i+1]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdhczxx8x.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpdhczxx8x.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhczxx8x.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhczxx8x.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977852
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        op = operator[i]\n        r = operand[i+1]\n        if op == \"+\"\n\
    \            result += r\n        elseif op == \"-\"\n            result -= r\n\
    \        elseif op == \"*\"\n            result *= r\n        elseif op == \"\
    //\"\n            result = trunc(Int64, result/r)\n        elseif op == \"**\"\
    \n            result = trunc(Int64, result^r)\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcf0taxz1.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpcf0taxz1.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcf0taxz1.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcf0taxz1.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977852
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE \n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpva7yjz9p.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpva7yjz9p.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpva7yjz9p.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpva7yjz9p.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"TODO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxjpnpvpb.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpxjpnpvpb.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpxjpnpvpb.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjpnpvpb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjpnpvpb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxjpnpvpb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpxjpnpvpb.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxjpnpvpb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4wyabun3.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp4wyabun3.jl:35\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wyabun3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wyabun3.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp4wyabun3.jl:36\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4wyabun3.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4wyabun3.jl:34\ntest set: Test Failed at /tmp/tmp4wyabun3.jl:37\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wyabun3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wyabun3.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977853
- exit_code: -1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expresion = \"\"\n    for i in 1:length(operator)\n\
    \        expresion *= operand[i] * operator[i]\n    end\n    expresion *= operand[end]\n\
    \    return eval(parse(expresion))\nend\ndo_algebra([\"*\",\"//\",\"+\",\"-\"\
    ], [5,5,5,5])\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching *(::'''
  stdout: None
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    #Initialize answer and the operation\
    \ count\n    answer = operand[1]\n    operation_count = 0\n    \n    #Loop through\
    \ operator\n    for i = 1:length(operator)\n        \n        #Update operands\n\
    \        operand_a = answer\n        operand_b = operand[i+1]\n        \n    \
    \    #Update answer based on operator\n        if operator[i] == \"+\"\n     \
    \       answer = operand_a + operand_b\n            operation_count += 1\n   \
    \     elseif operator[i] == \"-\"\n            answer = operand_a - operand_b\n\
    \            operation_count += 1\n        elseif operator[i] == \"*\"\n     \
    \       answer = operand_a * operand_b\n            operation_count += 1\n   \
    \     elseif operator[i] == \"//\"\n            answer = operand_a // operand_b\n\
    \            operation_count += 1\n        elseif operator[i] == \"**\"\n    \
    \        answer = operand_a ^ operand_b\n            operation_count += 1\n  \
    \      end\n        \n    end\n    \n    #Return answer and operation count\n\
    \    return answer, operation_count\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzshhqqcp.jl:64

    '
  stdout: "test set: Error During Test at /tmp/tmpzshhqqcp.jl:67\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Tuple{Int64, Int64} to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpzshhqqcp.jl:59\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzshhqqcp.jl:67 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzshhqqcp.jl:66\ntest set:\
    \ Error During Test at /tmp/tmpzshhqqcp.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Tuple{Int64, Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpzshhqqcp.jl:59\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzshhqqcp.jl:68 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op = operand[1]\n    for i in 1:length(operator)\n\
    \        op = get(operator[i], operand[i+1], op)\n    end\n    return op\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphtb_f2vr.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmphtb_f2vr.jl:37\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 2 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtb_f2vr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtb_f2vr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphtb_f2vr.jl:38\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 2 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphtb_f2vr.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphtb_f2vr.jl:36\ntest set: Test Failed at /tmp/tmphtb_f2vr.jl:39\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 7 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtb_f2vr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtb_f2vr.jl:36\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkm16far9.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpkm16far9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm16far9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm16far9.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpkm16far9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpkm16far9.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkm16far9.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkm16far9.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    sum = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  sum += operand[i+1]\n        elseif operator[i] == \"-\"\n            sum -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            sum *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            sum = floor(Int64, sum/operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            sum = sum^operand[i+1]\n  \
    \      end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprgps8tei.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmprgps8tei.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprgps8tei.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprgps8tei.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"Implement your solution here\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6mwmhg2_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6mwmhg2_.jl:1\n\
    in expression starting at /tmp/tmp6mwmhg2_.jl:1\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphmp0b6vr.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmphmp0b6vr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmp0b6vr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmp0b6vr.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977851
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"The length of operator vector is\
    \ equal to the length of operand vector minus one.\"\"\"\n    if length(operator)\
    \ != length(operand) - 1\n        error(\"The length of operator vector is equal\
    \ to the length of operand vector minus one.\")\n    end\n    \"\"\"Operand is\
    \ a vector of of non-negative integers.\"\"\"\n    if !all(operand .>= 0)\n  \
    \      error(\"Operand is a vector of of non-negative integers.\")\n    end\n\
    \    \"\"\"Operator vector has at least one operator, and operand vector has at\
    \ least two operands.\"\"\"\n    if !(length(operator) >= 1 && length(operand)\
    \ >= 2)\n        error(\"Operator vector has at least one operator, and operand\
    \ vector has at least two operands.\")\n    end\n    result = operand[1]\n   \
    \ for i = 1:length(operator)\n        op = operator[i]\n        r2 = operand[i+1]\n\
    \        \"\"\"Addition ( + )\"\"\"\n        if op == \"+\"\n            result\
    \ += r2\n        end\n        \"\"\"Subtraction ( - )\"\"\"\n        if op ==\
    \ \"-\"\n            result -= r2\n        end\n        \"\"\"Multiplication (\
    \ * )\"\"\"\n        if op == \"*\"\n            result *= r2\n        end\n \
    \       \"\"\"Floor division ( // )\"\"\"\n        if op == \"//\"\n         \
    \   result //= r2\n        end\n        \"\"\"Exponentiation ( ** )\"\"\"\n  \
    \      if op == \"**\"\n            result ^= r2\n        end\n    end\n    return\
    \ result\nend\n \n \n \n@testset \"Basic Tests\" begin\n    @test do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n    @test do_algebra([\"+\", \"-\"], [2,\
    \ 3, 4]) == -1\n    @test do_algebra([\"+\", \"+\", \"-\"], [1, 2, 3, 5]) == 1\n\
    \    @test do_algebra([\"//\", \"*\", \"-\"], [1000, 100, 2, 7]) == 100\n    @test\
    \ do_algebra([\"//\", \"//\", \"*\", \"-\"], [5\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsefg_069.jl:68\nin expression starting at\
    \ /tmp/tmpsefg_069.jl:68\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator = operator\n    operand = operand\n\
    \    # Write your code here...\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzcf5zmge.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpzcf5zmge.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpzcf5zmge.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzcf5zmge.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzcf5zmge.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzcf5zmge.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpzcf5zmge.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzcf5zmge.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-le"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result^operand[i+1]\n\
    \        end\n    end\n    return result\nend\ndo_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5])\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp7erg4ah7.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmp7erg4ah7.jl:50\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7erg4ah7.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7erg4ah7.jl:48\ntest set: Error\
    \ During Test at /tmp/tmp7erg4ah7.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7erg4ah7.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7erg4ah7.jl:51 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7erg4ah7.jl:48\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Write your code here!\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwpn7hck7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpwpn7hck7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwpn7hck7.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwpn7hck7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwpn7hck7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwpn7hck7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwpn7hck7.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwpn7hck7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Build the algebraic expression\
    \ \n    \"\"\"\n    if length(operator) != length(operand) - 1\n        throw(ArgumentError(\"\
    The length of operator vector is equal to the length of operand vector minus one.\"\
    ))\n    end\n    if length(operator) == 0\n        throw(ArgumentError(\"Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\"\
    ))\n    end\n    expression = \"\"\n    for i = 1:length(operator)\n        expression\
    \ = string(expression, operand[i], operator[i])\n    end\n    expression = string(expression,\
    \ operand[end])\n    return eval(Meta.parse(expression))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpwd_tty2j.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpwd_tty2j.jl:47\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Base.Meta.ParseError(\"\
    use \\\"x^y\\\" instead of \\\"x**y\\\" for exponentiation, and \\\"x...\\\" instead\
    \ of \\\"**x\\\" for splatting.\")\n  Stacktrace:\n   [1] #parse#3\n     @ ./meta.jl:237\
    \ [inlined]\n   [2] parse(str::String; raise::Bool, depwarn::Bool)\n     @ Base.Meta\
    \ ./meta.jl:268\n   [3] parse\n     @ ./meta.jl:268 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpwd_tty2j.jl:40\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpwd_tty2j.jl:47 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwd_tty2j.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpwd_tty2j.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpwd_tty2j.jl:40\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpwd_tty2j.jl:49 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwd_tty2j.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplii3bubd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplii3bubd.jl:1\n\
    in expression starting at /tmp/tmplii3bubd.jl:1\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            res += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            res -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            res *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            res = floor(Int64, res / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            res = res ^ operand[i+1]\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu9o0ycn2.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpu9o0ycn2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9o0ycn2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9o0ycn2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    index = 1\n    result = operand[index]\n\
    \    index += 1\n    for op in operator\n        if op == \"+\"\n            result\
    \ += operand[index]\n        elseif op == \"-\"\n            result -= operand[index]\n\
    \        elseif op == \"*\"\n            result *= operand[index]\n        elseif\
    \ op == \"//\"\n            result = trunc(Int64, result / operand[index])\n \
    \       elseif op == \"**\"\n            result = result ^ operand[index]\n  \
    \      end\n        index += 1\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw1a22pc7.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmpw1a22pc7.jl:51\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1a22pc7.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1a22pc7.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2k1mbpbn.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp2k1mbpbn.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2k1mbpbn.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2k1mbpbn.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2k1mbpbn.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2k1mbpbn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2k1mbpbn.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2k1mbpbn.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length_operator = length(operator)\n  \
    \  if length_operator == length(operand) - 1\n        result = operand[1]\n  \
    \      for i in 1:length_operator\n            if operator[i] == \"+\"\n     \
    \           result += operand[i+1]\n            elseif operator[i] == \"-\"\n\
    \                result -= operand[i+1]\n            elseif operator[i] == \"\
    *\"\n                result *= operand[i+1]\n            elseif operator[i] ==\
    \ \"//\"\n                result = floor(Int64, result / operand[i+1])\n     \
    \       elseif operator[i] == \"**\"\n                result = floor(Int64, result\
    \ ^ operand[i+1])\n            end\n        end\n        return result\n    else\n\
    \        return -1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdw3m1wwg.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpdw3m1wwg.jl:53\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdw3m1wwg.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdw3m1wwg.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    do_calculation(operand[1], operand[2],\
    \ operator[1])\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpayhpsliy.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpayhpsliy.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_calculation not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpayhpsliy.jl:27\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpayhpsliy.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayhpsliy.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpayhpsliy.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_calculation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpayhpsliy.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpayhpsliy.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayhpsliy.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpayhpsliy.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_calculation\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpayhpsliy.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpayhpsliy.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayhpsliy.jl:33\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expr = operand[1]\n    for (i, op) in enumerate(operator)\n\
    \        if op == \"+\"\n            expr += operand[i+1]\n        elseif op ==\
    \ \"-\"\n            expr -= operand[i+1]\n        elseif op == \"*\"\n      \
    \      expr *= operand[i+1]\n        elseif op == \"//\"\n            expr \xF7\
    = operand[i+1]\n        elseif op == \"**\"\n            expr ^= operand[i+1]\n\
    \        end\n    end\n    return expr\nend\n\"\"\"\n    Given an integer n, return\
    \ an n x n matrix with the following pattern:\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbd12k3l.jl:42\nin expression starting at\
    \ /tmp/tmphbd12k3l.jl:42\n"
  stdout: ''
  timestamp: 1659977854
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) != length(operand)\
    \ - 1 \n        throw(ArgumentError(\"Operator size must be one less than operand\
    \ size.\"))\n    end\n    if !all(x -> x in [\"+\", \"-\", \"*\", \"//\", \"**\"\
    ], operator)\n        throw(ArgumentError(\"Operator must be only +, -, *, //,\
    \ ** .\"))\n    end\n    if !all(x -> x >= 0, operand)\n        throw(ArgumentError(\"\
    Operand must be a vector of non-negative integers.\"))\n    end\n    algebra_str\
    \ = string(operand[1])\n    for i in 1:length(operator)\n        algebra_str *=\
    \ \" \" * operator[i] * \" \" * string(operand[i+1])\n    end\n    return eval(Meta.parse(algebra_str))\n\
    end\ndo_algebra([\"*\"], [1, 2])\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp7in3oxdb.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmp7in3oxdb.jl:47\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Base.Meta.ParseError(\"\
    use \\\"x^y\\\" instead of \\\"x**y\\\" for exponentiation, and \\\"x...\\\" instead\
    \ of \\\"**x\\\" for splatting.\")\n  Stacktrace:\n   [1] #parse#3\n     @ ./meta.jl:237\
    \ [inlined]\n   [2] parse(str::String; raise::Bool, depwarn::Bool)\n     @ Base.Meta\
    \ ./meta.jl:268\n   [3] parse\n     @ ./meta.jl:268 [inlined]\n   [4] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp7in3oxdb.jl:39\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp7in3oxdb.jl:47 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7in3oxdb.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp7in3oxdb.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert(#unused#::Type{Int64},\
    \ x::Rational{Int64})\n     @ Base ./number.jl:7\n   [3] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp7in3oxdb.jl:39\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmp7in3oxdb.jl:49 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7in3oxdb.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Base case\n    if length(operator) ==\
    \ 0\n        return operand[1]\n    end\n    \n    # Recursion\n    return do_algebra(operator[2:end],\
    \ [eval(operand[1], operator[1], operand[2]) operand[3:end]])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgfnvqkq9.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpgfnvqkq9.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n\
    \    eval(::Any) at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgfnvqkq9.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfnvqkq9.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfnvqkq9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgfnvqkq9.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n  \
    \ [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgfnvqkq9.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgfnvqkq9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgfnvqkq9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgfnvqkq9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n  \
    \ [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgfnvqkq9.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expans"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == '+'\n            result += operand[i]\n        elseif\
    \ operator[i-1] == '-'\n            result -= operand[i]\n        elseif operator[i-1]\
    \ == '*'\n            result *= operand[i]\n        elseif operator[i-1] == '//'\n\
    \            result //= operand[i]\n        elseif operator[i-1] == '**'\n   \
    \         result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9katg1y.jl:34\nin expression\
    \ starting at /tmp/tmpd9katg1y.jl:34\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = operand[1]\n    for i =\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            result += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n   \
    \     elseif operator[i] == \"*\"\n            result *= operand[i+1]\n      \
    \  elseif operator[i] == \"//\"\n            result //= operand[i+1]\n       \
    \ elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2rnoe1x_.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp2rnoe1x_.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rnoe1x_.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rnoe1x_.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp2rnoe1x_.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2rnoe1x_.jl:41\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2rnoe1x_.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2rnoe1x_.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, j) in\
    \ enumerate(2:length(operand))\n        op = operator[i]\n        op_val = operand[j]\n\
    \        if op == \"+\"\n            result += op_val\n        elseif op == \"\
    -\"\n            result -= op_val\n        elseif op == \"*\"\n            result\
    \ *= op_val\n        elseif op == \"//\"\n            result //= op_val\n    \
    \    elseif op == \"**\"\n            result = result ^ op_val\n        end\n\
    \    end\n    return result\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptxpfc9my.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmptxpfc9my.jl:52\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxpfc9my.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxpfc9my.jl:50\ntest set: Error\
    \ During Test at /tmp/tmptxpfc9my.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptxpfc9my.jl:42\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptxpfc9my.jl:53 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptxpfc9my.jl:50\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6_p128nj.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp6_p128nj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6_p128nj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6_p128nj.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, oper)\
    \ in enumerate(operator)\n        if oper == \"+\"\n            result += operand[i+1]\n\
    \        elseif oper == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ oper == \"*\"\n            result *= operand[i+1]\n        elseif oper == \"\
    //\"\n            result = floor(Int64, result / operand[i+1])\n        elseif\
    \ oper == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprbou0j_9.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmprbou0j_9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprbou0j_9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprbou0j_9.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    alg = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  alg += operand[i+1]\n        elseif operator[i] == \"-\"\n            alg -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            alg *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            alg = floor(alg/operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            alg ^= operand[i+1]\n     \
    \   end\n    end\n    return alg\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8d_faibe.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp8d_faibe.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8d_faibe.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8d_faibe.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = eval(string(result, operator[i], operand[i+1]))\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpssbz62sn.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpssbz62sn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpssbz62sn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpssbz62sn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpssbz62sn.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssbz62sn.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        a = operand[i]\n        b = operand[i+1]\n        op = operator[i]\n\
    \        result = eval(result, op, b)\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgqvibaa2.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpgqvibaa2.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n\
    \    eval(::Any) at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgqvibaa2.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgqvibaa2.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgqvibaa2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgqvibaa2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n  \
    \ [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgqvibaa2.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgqvibaa2.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgqvibaa2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgqvibaa2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ eval(::Int64, ::String, ::Int64)\n  Closest candidates are:\n    eval(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/client.jl:453\n  Stacktrace:\n  \
    \ [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgqvibaa2.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expans"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Note:\n    #   - the length of operator\
    \ vector is equal to the length of operand vector minus one.\n    #   - operand\
    \ is a vector of of non-negative integers.\n    #   - operator vector has at least\
    \ one operator, and operand vector has at least two operands.\n    @assert length(operator)\
    \ == length(operand) - 1\n    @assert length(operator) >= 1\n    @assert length(operand)\
    \ >= 2\n    # Your code here ...\n    raise NotImplementedError(\"do_algebra needs\
    \ to be implemented before this test can be run.\")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpakd2tt7f.jl:25 expected\
    \ \"end\", got \"NotImplementedError\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpakd2tt7f.jl:34\nin expression starting at /tmp/tmpakd2tt7f.jl:34\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) != length(operand)\
    \ - 1\n        error(\"Operator vector is not one element shorter than operand\
    \ vector\")\n    end\n    if length(operator) < 1\n        error(\"Operator vector\
    \ is empty\")\n    end\n    if length(operand) < 2\n        error(\"Operand vector\
    \ is empty\")\n    end\n    for operator in operator\n        if operator != '+'\
    \ && operator != '-' && operator != '*' && operator != '//' && operator != '**'\n\
    \            error(\"Operator vector contains invalid operator\")\n        end\n\
    \    end\n    for operand in operand\n        if operand < 0\n            error(\"\
    Operand vector contains invalid operand\")\n        end\n    end\n    result =\
    \ operand[1]\n    for i = 1:length(operator)\n        operator_type = operator[i]\n\
    \        if operator_type == '+'\n            result += operand[i+1]\n       \
    \ elseif operator_type == '-'\n            result -= operand[i+1]\n        elseif\
    \ operator_type == '*'\n            result *= operand[i+1]\n        elseif operator_type\
    \ == '//'\n            result //= operand[i+1]\n        elseif operator_type ==\
    \ '**'\n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_og47z93.jl:36\nin expression\
    \ starting at /tmp/tmp_og47z93.jl:36\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, op) in\
    \ enumerate(operator)\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result = convert(Int64, result) \xF7 operand[i+1]\n        elseif\
    \ op == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqc0e77ha.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpqc0e77ha.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqc0e77ha.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqc0e77ha.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for (i, op) in\
    \ enumerate(operator)\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result = div(result, operand[i+1])\n        elseif op == \"**\"\n\
    \            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp223j71mv.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp223j71mv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp223j71mv.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp223j71mv.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for op = 1:length(operator)\n\
    \        if operator[op] == \"+\"\n            result += operand[op+1]\n     \
    \   elseif operator[op] == \"-\"\n            result -= operand[op+1]\n      \
    \  elseif operator[op] == \"*\"\n            result *= operand[op+1]\n       \
    \ elseif operator[op] == \"//\"\n            result //= operand[op+1]\n      \
    \  elseif operator[op] == \"**\"\n            result ^= operand[op+1]\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6bjqtb62.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp6bjqtb62.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6bjqtb62.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6bjqtb62.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp6bjqtb62.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6bjqtb62.jl:40\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6bjqtb62.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6bjqtb62.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  timestamp: 1659977858
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here!\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmptuaylpub.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmptuaylpub.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptuaylpub.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptuaylpub.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptuaylpub.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptuaylpub.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptuaylpub.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptuaylpub.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977858
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vector = [operand[1]]\n    operand = operand[2:end]\n\
    \    for (i, j) in zip(operator, operand)\n        if i == \"+\"\n           \
    \ push!(vector, j)\n        elseif i == \"-\"\n            push!(vector, -j)\n\
    \        elseif i == \"*\"\n            push!(vector, vector[end] * j)\n     \
    \       pop!(vector)\n        elseif i == \"//\"\n            push!(vector, vector[end]\
    \ \xF7 j)\n            pop!(vector)\n        elseif i == \"**\"\n            push!(vector,\
    \ vector[end] ^ j)\n            pop!(vector)\n        end\n    end\n    sum(vector)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk97f1wkh.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpk97f1wkh.jl:51\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 7 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk97f1wkh.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk97f1wkh.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpk97f1wkh.jl:52\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk97f1wkh.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpk97f1wkh.jl:50\ntest set: Test Failed at /tmp/tmpk97f1wkh.jl:53\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 7 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk97f1wkh.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk97f1wkh.jl:50\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmulqw1a1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmulqw1a1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmulqw1a1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmulqw1a1.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpmulqw1a1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpmulqw1a1.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmulqw1a1.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmulqw1a1.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmph_72fges.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmph_72fges.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmph_72fges.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_72fges.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_72fges.jl:32\ntest set:\
    \ Error During Test at /tmp/tmph_72fges.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmph_72fges.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_72fges.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977843
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            res += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            res -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            res *= operand[i]\n        elseif operator[i-1] == \"\
    //\"\n            res = floor(Int64, res / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            res = floor(Int64, res ^ operand[i])\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4ylwmlq1.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmp4ylwmlq1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ylwmlq1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ylwmlq1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1659977857
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    pass\nend\n# Test\n@testset \"Algebra\"\
    \ begin\n    @testset \"Simple\" begin\n        @test do_algebra([\"+\"], [1,\
    \ 2]) == 3 end\n        @test do_algebra([\"+\", \"-\"], [1, 2, 3]) == 0 end\n\
    \        @test do_algebra([\"+\", \"-\"], [2, 3, 4]) == 1 end\n        @test do_algebra([\"\
    +\", \"-\", \"*\"], [2, 3, 4, 5]) == -3 end\n        @test do_algebra([\"+\",\
    \ \"-\", \"*\", \"//\"], [2, 3, 4, 5, 6]) == 3 end\n        @test do_algebra([\"\
    +\", \"-\", \"*\", \"//\", \"**\"], [2, 3, 4, 5, 6, 7]) == 6 end\n    end\n  \
    \  @testset \"Advanced\" begin\n        @test do_algebra([\"*\", \"-\"], [2, 3,\
    \ 4]) == 2 end\n        @test do_algebra([\"*\", \"-\", \"+\"], [1, 2, 3, 4])\
    \ == 2 end\n        @test do_algebra([\"*\", \"-\", \"+\", \"//\"], [1, 2, 3,\
    \ 4, 5]) == -2 end\n        @test do_algebra([\"*\", \"-\", \"+\", \"//\", \"\
    **\"], [1, 2, 3, 4, 5, 6]) == -4 end\n    end\nend;\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpvaia9hzj.jl:29

    in expression starting at /tmp/tmpvaia9hzj.jl:29

    '
  stdout: ''
  timestamp: 1659977856
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here...\n    return 0 # Your\
    \ return value.\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmqb0r4l4.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpmqb0r4l4.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqb0r4l4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqb0r4l4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmqb0r4l4.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmqb0r4l4.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmqb0r4l4.jl:33\ntest set: Test Failed at /tmp/tmpmqb0r4l4.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmqb0r4l4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmqb0r4l4.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977857
