name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return true if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return false.\n    The\
  \ function should return false is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    lowercase = true\n    uppercase = true\n    for (key, value) in\
    \ dict\n        if key == key[1:end]\n            lowercase = false\n        end\n\
    \        if key == uppercase(key)\n            uppercase = false\n        end\n\
    \    end\n    return lowercase || uppercase\nend", "    lower_keys = true\n  \
    \  upper_keys = true\n    if length(dict) == 0\n        return false\n    end\n\
    \    for (key, val) in dict\n        if islower(key[1]) == false\n           \
    \ lower_keys = false\n        end\n        if isupper(key[1]) == false\n     \
    \       upper_keys = false\n        end\n    end\n    if (lower_keys || upper_keys)\n\
    \        return true\n    else\n        return false\n    end\nend\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"\
    apple\", 8 => \"banana\", \"a\" => \"apple\"))\ncheck_dict_case(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ncheck_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))", "    if (length(keys(dict))==0)\n\
    \        return false\n    end\n    upper_keys = [String(uppercase(k)) for k in\
    \ keys(dict)]\n    lower_keys = [String(lowercase(k)) for k in keys(dict)]\n \
    \   upper_keys == keys(dict) || lower_keys == keys(dict)\nend", "    keys = map(k\
    \ -> islower(k), keys(dict))\n    values = map(v -> islower(v), values(dict))\n\
    \    return all(keys) || all(values)\nend", "    all_lowcase = true\n    all_upcase\
    \ = true\n    for (key, value) in dict\n        all_lowcase = all_lowcase && islower(key)\n\
    \        all_upcase = all_upcase && isupper(key)\n    end\n    return all_lowcase\
    \ || all_upcase\nend", "    # Some of the keys is all lower case\n    if all(islower.(collect(keys(dict))))\n\
    \        return true\n    # All of the keys are upper case\n    elseif all(isupper.(collect(keys(dict))))\n\
    \        return true\n    # Otherwise, the keys are mixed\n    else\n        return\
    \ false\n    end\nend\n ", "    upper_case = Dict(\"NAME\" => \"John\", \"SURNAME\"\
    \ => \"Smith\", \"AGE\" => \"26\")\n    lower_case = Dict(\"name\" => \"John\"\
    , \"surname\" => \"Smith\", \"age\" => \"26\")\n    # create a list of keys of\
    \ dict\n    dict_keys = collect(keys(dict))\n    # if all keys are strings in\
    \ lower case, return true\n    for key in dict_keys\n        all_lower = islower(key)\n\
    \        if all_lower == false\n            return false\n        end\n    end\n\
    \    return true\n    # if all keys are strings in upper case, return true\n \
    \   for key in dict_keys\n        all_upper = isupper(key)\n        if all_upper\
    \ == false\n            return false\n        end\n    end\n    return true\n\
    end", "    lower_case_keys = length(filter(key -> !islower(key), keys(dict)))\
    \ == 0\n    upper_case_keys = length(filter(key -> !isupper(key), keys(dict)))\
    \ == 0\n    return lower_case_keys || upper_case_keys\nend", "    # YOUR CODE\
    \ HERE\n    return false\nend\n \ncheck_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\ncheck_dict_case(Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"))\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n ", "    if isempty(dict)\n        return false\n  \
    \  end\n    all_upper = true\n    all_lower = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            all_upper = false\n        elseif isupper(key)\n\
    \            all_lower = false\n        else\n            return false\n     \
    \   end\n    end\n    return all_upper || all_lower\nend", "    key_types = [typeof(key)\
    \ for key in keys(dict)]\n    up_case = key_types == Vector{typeof(:String)} #try\
    \ .==[ASCIIString]\n    low_case = key_types == Vector{typeof(:symbol)} #try .==[Symbol]\n\
    \    if length(dict) == 0 \n        return false\n    elseif up_case \n      \
    \  return true\n    elseif low_case \n        return true\n    else \n       \
    \ return false\n    end\nend ", "    keys = collect(keys(dict))\n    lc = [i ==\
    \ lowercase(i) for i in keys]\n    return(all(lc) || !any(lc))\nend", "    key_count\
    \ = length(keys(dict))\n    if key_count == 0\n        return false\n    end\n\
    \    if all(key->uppercase(key) == key, keys(dict))\n        return true\n   \
    \ elseif all(key->lowercase(key) == key, keys(dict))\n        return true\n  \
    \  else\n        return false\n    end\nend", "    # Your code goes here\n   \
    \ alllowercase = true\n    alluppercase = true\n   \n    if length(dict) == 0\n\
    \        return false\n    end\n    \n    for (k,v) in dict\n        if islowercase(k)\
    \ == false\n            alllowercase = false\n        end\n        if isuppercase(k)\
    \ == false\n            alluppercase = false\n        end\n    end\n    \n   \
    \ if alllowercase == true || alluppercase == true\n        return true\n    else\n\
    \        return false\n    end\nend\n# Test\ncheck_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))", "    return true\nend", "    for k in keys(dict)\n\
    \        if typeof(k) != String\n            return false\n        end\n    end\n\
    \    if length(keys(dict)) < 1\n        return false\n    end\n    firstkey =\
    \ keys(dict)[1]\n    if !all([lowercase(firstkey) == k for k in keys(dict)])\n\
    \        if !all([uppercase(firstkey) == k for k in keys(dict)])\n           \
    \ return false\n        end\n    end\n    return true\nend", "    all(x -> x ==\
    \ isupper(x),keys(dict)) || all(x -> x == islower(x),keys(dict))\nend", "    up_key_all\
    \ = true\n    up_key_any = false\n    lo_key_all = true\n    lo_key_any = false\n\
    \    for key in keys(dict)\n        lo_key_all = lo_key_all && islower(key)\n\
    \        lo_key_any = lo_key_any || islower(key)\n        up_key_all = up_key_all\
    \ && isupper(key)\n        up_key_any = up_key_any || isupper(key)\n    end\n\
    \    return (lo_key_all && !lo_key_any) || (up_key_all && !up_key_any)\nend",
  "    if  contains_uppercase(dict) && contains_lowercase(dict)\n        return false\n\
    \    elseif contains_uppercase(dict)\n        return true\n    elseif contains_lowercase(dict)\n\
    \        return true\n    else\n        return false\n    end\nend", "    test_case\
    \ = lowercase(keys(dict)[1])\n    if islower(test_case)\n        for i in keys(dict)\n\
    \            if !islower(i)\n                return false\n            end\n \
    \       end\n    elseif isupper(test_case)\n        for i in keys(dict)\n    \
    \        if !isupper(i)\n                return false\n            end\n     \
    \   end\n    else\n        return false\n    end\n    return true\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
