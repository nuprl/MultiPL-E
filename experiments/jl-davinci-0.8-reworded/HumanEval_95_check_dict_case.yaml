name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return true if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return false.\n    The\
  \ function should return false is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    lowercase = true\n    uppercase = true\n    for (key, value) in\
    \ dict\n        if key == key[1:end]\n            lowercase = false\n        end\n\
    \        if key == uppercase(key)\n            uppercase = false\n        end\n\
    \    end\n    return lowercase || uppercase\nend", "    lower_keys = true\n  \
    \  upper_keys = true\n    if length(dict) == 0\n        return false\n    end\n\
    \    for (key, val) in dict\n        if islower(key[1]) == false\n           \
    \ lower_keys = false\n        end\n        if isupper(key[1]) == false\n     \
    \       upper_keys = false\n        end\n    end\n    if (lower_keys || upper_keys)\n\
    \        return true\n    else\n        return false\n    end\nend\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"\
    apple\", 8 => \"banana\", \"a\" => \"apple\"))\ncheck_dict_case(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ncheck_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))", "    if (length(keys(dict))==0)\n\
    \        return false\n    end\n    upper_keys = [String(uppercase(k)) for k in\
    \ keys(dict)]\n    lower_keys = [String(lowercase(k)) for k in keys(dict)]\n \
    \   upper_keys == keys(dict) || lower_keys == keys(dict)\nend", "    keys = map(k\
    \ -> islower(k), keys(dict))\n    values = map(v -> islower(v), values(dict))\n\
    \    return all(keys) || all(values)\nend", "    all_lowcase = true\n    all_upcase\
    \ = true\n    for (key, value) in dict\n        all_lowcase = all_lowcase && islower(key)\n\
    \        all_upcase = all_upcase && isupper(key)\n    end\n    return all_lowcase\
    \ || all_upcase\nend", "    # Some of the keys is all lower case\n    if all(islower.(collect(keys(dict))))\n\
    \        return true\n    # All of the keys are upper case\n    elseif all(isupper.(collect(keys(dict))))\n\
    \        return true\n    # Otherwise, the keys are mixed\n    else\n        return\
    \ false\n    end\nend\n ", "    upper_case = Dict(\"NAME\" => \"John\", \"SURNAME\"\
    \ => \"Smith\", \"AGE\" => \"26\")\n    lower_case = Dict(\"name\" => \"John\"\
    , \"surname\" => \"Smith\", \"age\" => \"26\")\n    # create a list of keys of\
    \ dict\n    dict_keys = collect(keys(dict))\n    # if all keys are strings in\
    \ lower case, return true\n    for key in dict_keys\n        all_lower = islower(key)\n\
    \        if all_lower == false\n            return false\n        end\n    end\n\
    \    return true\n    # if all keys are strings in upper case, return true\n \
    \   for key in dict_keys\n        all_upper = isupper(key)\n        if all_upper\
    \ == false\n            return false\n        end\n    end\n    return true\n\
    end", "    lower_case_keys = length(filter(key -> !islower(key), keys(dict)))\
    \ == 0\n    upper_case_keys = length(filter(key -> !isupper(key), keys(dict)))\
    \ == 0\n    return lower_case_keys || upper_case_keys\nend", "    # YOUR CODE\
    \ HERE\n    return false\nend\n \ncheck_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\ncheck_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\ncheck_dict_case(Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"))\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n ", "    if isempty(dict)\n        return false\n  \
    \  end\n    all_upper = true\n    all_lower = true\n    for key in keys(dict)\n\
    \        if islower(key)\n            all_upper = false\n        elseif isupper(key)\n\
    \            all_lower = false\n        else\n            return false\n     \
    \   end\n    end\n    return all_upper || all_lower\nend", "    key_types = [typeof(key)\
    \ for key in keys(dict)]\n    up_case = key_types == Vector{typeof(:String)} #try\
    \ .==[ASCIIString]\n    low_case = key_types == Vector{typeof(:symbol)} #try .==[Symbol]\n\
    \    if length(dict) == 0 \n        return false\n    elseif up_case \n      \
    \  return true\n    elseif low_case \n        return true\n    else \n       \
    \ return false\n    end\nend ", "    keys = collect(keys(dict))\n    lc = [i ==\
    \ lowercase(i) for i in keys]\n    return(all(lc) || !any(lc))\nend", "    key_count\
    \ = length(keys(dict))\n    if key_count == 0\n        return false\n    end\n\
    \    if all(key->uppercase(key) == key, keys(dict))\n        return true\n   \
    \ elseif all(key->lowercase(key) == key, keys(dict))\n        return true\n  \
    \  else\n        return false\n    end\nend", "    # Your code goes here\n   \
    \ alllowercase = true\n    alluppercase = true\n   \n    if length(dict) == 0\n\
    \        return false\n    end\n    \n    for (k,v) in dict\n        if islowercase(k)\
    \ == false\n            alllowercase = false\n        end\n        if isuppercase(k)\
    \ == false\n            alluppercase = false\n        end\n    end\n    \n   \
    \ if alllowercase == true || alluppercase == true\n        return true\n    else\n\
    \        return false\n    end\nend\n# Test\ncheck_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))", "    return true\nend", "    for k in keys(dict)\n\
    \        if typeof(k) != String\n            return false\n        end\n    end\n\
    \    if length(keys(dict)) < 1\n        return false\n    end\n    firstkey =\
    \ keys(dict)[1]\n    if !all([lowercase(firstkey) == k for k in keys(dict)])\n\
    \        if !all([uppercase(firstkey) == k for k in keys(dict)])\n           \
    \ return false\n        end\n    end\n    return true\nend", "    all(x -> x ==\
    \ isupper(x),keys(dict)) || all(x -> x == islower(x),keys(dict))\nend", "    up_key_all\
    \ = true\n    up_key_any = false\n    lo_key_all = true\n    lo_key_any = false\n\
    \    for key in keys(dict)\n        lo_key_all = lo_key_all && islower(key)\n\
    \        lo_key_any = lo_key_any || islower(key)\n        up_key_all = up_key_all\
    \ && isupper(key)\n        up_key_any = up_key_any || isupper(key)\n    end\n\
    \    return (lo_key_all && !lo_key_any) || (up_key_all && !up_key_any)\nend",
  "    if  contains_uppercase(dict) && contains_lowercase(dict)\n        return false\n\
    \    elseif contains_uppercase(dict)\n        return true\n    elseif contains_lowercase(dict)\n\
    \        return true\n    else\n        return false\n    end\nend", "    test_case\
    \ = lowercase(keys(dict)[1])\n    if islower(test_case)\n        for i in keys(dict)\n\
    \            if !islower(i)\n                return false\n            end\n \
    \       end\n    elseif isupper(test_case)\n        for i in keys(dict)\n    \
    \        if !isupper(i)\n                return false\n            end\n     \
    \   end\n    else\n        return false\n    end\n    return true\nend", "   \
    \ lowercase = true\n    for key in keys(dict)\n        if !islower(key)\n    \
    \        lowercase = false\n            break\n        end\n    end\n    if lowercase\n\
    \        return true\n    end\n    uppercase = true\n    for key in keys(dict)\n\
    \        if !isupper(key)\n            uppercase = false\n            break\n\
    \        end\n    end\n    return uppercase\nend", "    l = Dict{String, String}(lowercase.(keys(dict)))\n\
    \    u = Dict{String, String}(uppercase.(keys(dict)))\n    return l == dict ||\
    \ u == dict\nend", "    all_keys_upper = true\n    all_keys_lower = true\n   \
    \ # find if any key is lower\n    for (key, val) in dict\n        if islower(key[1])\n\
    \            all_keys_upper = false\n        end\n        if isupper(key[1])\n\
    \            all_keys_lower = false\n        end\n    end\n    return (all_keys_upper\
    \ || all_keys_lower)\nend", "    dict_keys = keys(dict)\n    dict_values = values(dict)\n\
    \    if length(dict_keys) == 0 || length(dict_values) == 0\n        return false\n\
    \    end\n    first_key = dict_keys[1]\n    first_key_is_upper = string(uppercase(first_key))\
    \ == first_key \n    dict_keys_all_lower_or_upper = first_key_is_upper ? all(uppercase(dict_keys)\
    \ .== dict_keys) : all(lowercase(dict_keys) .== dict_keys)\n    return dict_keys_all_lower_or_upper\
    \ && all(isstring.(dict_values))\nend", "    if (length(dict) > 0) \n        to_lower\
    \ = false \n        to_upper = false \n        for (key, value) in dict \n   \
    \         if (islower(key)) \n                to_lower = true \n            elseif\
    \ (isupper(key)) \n                to_upper = true \n            else \n     \
    \           return false \n            end \n        end \n        if (to_lower\
    \ == to_upper) \n            return false \n        else \n            return\
    \ true \n        end \n    else \n        return false \n    end \nend ", "  \
    \  # Get all the keys and iterate through them\n    # If all the keys are strings\
    \ in lower case or all the keys are strings in upper case, then return true\n\
    \    # Else, return false\n    # Handle if dictionary is empty\n    # Keys are\
    \ strings, so can check if they are lower/upper case\n    # Use casefold()\n \
    \   lowercase = true\n    uppercase = true\n    for key in keys(dict)\n      \
    \  if !islower(key)\n            lowercase = false\n        end\n        if !isupper(key)\n\
    \            uppercase = false\n        end\n    end\n    return lowercase ||\
    \ uppercase\nend", "    # The keys must be all upper or all lower case\n    if\
    \ size(dict) == 0\n        return false\n    end\n    if match(r\"^[A-Z]*$\",\
    \ string(collect(keys(dict))[1]))\n        # The first key is in all upper case\n\
    \        if all(match(r\"^[A-Z]*$\", string(key)) for key in keys(dict))\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   elseif match(r\"^[a-z]*$\", string(collect(keys(dict))[1]))\n        # The\
    \ first key is in all lower case\n        if all(match(r\"^[a-z]*$\", string(key))\
    \ for key in keys(dict))\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "    lower\
    \ = true\n    upper = true\n    for (k, v) in dict\n        lower = lower && islower(k)\n\
    \        upper = upper && isupper(k)\n    end\n    return lower || upper\nend",
  "    if isempty(dict)\n        return false\n    end\n    alllower = true\n    allupper\
    \ = true\n    for (k, v) in dict\n        alllower = alllower && islower(k)\n\
    \        allupper = allupper && isupper(k)\n    end\n    alllower || allupper\n\
    end", "    if length(dict) == 0\n        return false\n    end\n    if islowercase(keys(dict)[1])\n\
    \        for key in keys(dict)\n            if isuppercase(key)\n            \
    \    return false\n            end\n        end\n    else\n        for key in\
    \ keys(dict)\n            if islowercase(key)\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    return true\n\
    end", "    downcase_keys = [string(x) for x in keys(dict)]\n    upcase_keys =\
    \ [string(x) for x in keys(dict)]\n    return (isupper.(downcase_keys) || islower.(upcase_keys))\n\
    end\n ", "    true_value = true\n    false_value = false\n    if size(dict) ==\
    \ 0\n        println(\"The given dictionary is empty. Please enter a dictionary\
    \ with a length of at least 1.\")\n        return false_value\n    end\n    str_key_lower\
    \ = true\n    str_key_upper = true\n    for (key, value) in dict\n        if !isstring(key)\n\
    \            println(\"Please enter a dictionary with only keys that are strings\"\
    )\n            return false_value\n        end\n        if lowercase(key) != key\n\
    \            str_key_lower = false\n        end\n        if uppercase(key) !=\
    \ key\n            str_key_upper = false\n        end\n    end\n    if str_key_lower\
    \ == true_value || str_key_upper == true_value\n        return true_value\n  \
    \  else\n        return false_value\n    end\nend", "    return true\nend", " \
    \   # YOUR CODE HERE\n    assert false, \"not implemented\"\nend", "    dict_values\
    \ = String[]\n    dict_keys = String[]\n    for value in values(dict)\n      \
    \  push!(dict_values, value)\n    end\n    for key in keys(dict)\n        push!(dict_keys,\
    \ key)\n    end\n    if(length(dict_keys) == 0)\n        return false\n    end\n\
    \    if(isupper.(dict_keys))\n        return true\n    elseif(islower.(dict_keys))\n\
    \        return true\n    else\n        return false\n    end\nend", "    return\
    \ ((all(islower.(collect(keys(dict))))) || (all(isupper.(collect(keys(dict))))))\n\
    end", "    lower_case = true\n    upper_case = true\n    for (k, v) in dict\n\
    \        if !islower(k)\n            lower_case = false\n        end\n       \
    \ if !isupper(k)\n            upper_case = false\n        end\n    end\n    lower_case\
    \ || upper_case ? true : false\nend\n ", "    dict_keys = Dict{String, Int}()\n\
    \    for (key, value) in dict\n        dict_keys[key] = 0\n    end\n    for (key,\
    \ value) in dict_keys\n        for c in key\n            if c != lowercase(c)\
    \ && c != uppercase(c)\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend", "  if isempty(dict) return false end\n\
    \  if all(all([isupper(c) for c in k] for k in keys(dict)))\n    return true\n\
    \  elseif all(all([islower(c) for c in k] for k in keys(dict)))\n    return true\n\
    \  else\n    return false\n  end\nend", "    upper_keys = true\n    lower_keys\
    \ = true\n    if length(dict) == 0\n        return false\n    end\n    for (key,\
    \ value) in dict\n        if lower_keys\n            if !islower(key)\n      \
    \          lower_keys = false\n            end\n        end\n        if upper_keys\n\
    \            if !isupper(key)\n                upper_keys = false\n          \
    \  end\n        end\n    end\n    return (upper_keys || lower_keys)\nend", " \
    \   for key in keys(dict)\n        if any(isupper.(key)) && any(islower.(key))\n\
    \            return false\n        end\n    end\n    return true\nend", "    return\
    \ false\nend", "    lower_count = 0\n    upper_count = 0\n    for (key, value)\
    \ in dict\n        if islower(key)\n            lower_count += 1\n        elseif\
    \ isupper(key)\n            upper_count += 1\n        end\n    end\n    return\
    \ (lower_count == 0 || upper_count == 0) && (lower_count != 0 || upper_count !=\
    \ 0)\nend", "    lower_case = 0\n    upper_case = 0\n    for (k,v) in dict\n \
    \       if islower(k)\n            lower_case += 1\n        elseif isupper(k)\n\
    \            upper_case += 1\n        end\n    end\n    if lower_case == 0 ||\
    \ upper_case == 0\n        return true\n    else\n        return false\n    end\n\
    end", "    \"\"\" \n    Check if all keys in the dictionary are uppercase. If\
    \ yes return true, \n    else return false\n    \"\"\"\n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        end\n    end\n   \
    \ return true\nend", "    lower_count::Int = 0\n    upper_count::Int = 0\n   \
    \ for (k,v) in dict\n        if islower(k[1])\n            lower_count += 1\n\
    \        elseif isupper(k[1])\n            upper_count += 1\n        end\n   \
    \ end\n    return (lower_count == 0 || upper_count == 0)\nend", "    dict_keys\
    \ = keys(dict)\n    dict_values = values(dict)\n    check_dict_key_case(dict_keys,\
    \ dict_values)\nend", "    #if we encounter a key that is in uppercase or a key\
    \ that is not a string, return false\n    for key in keys(dict)\n        if !all(char\
    \ in uppercase(key) for char in key) || !isstring(key)\n            return false\n\
    \        end\n    end\n    #if all keys are strings and in lowercase, return true\n\
    \    return true\nend", "    [dict]\nend", "    if length(dict) == 0\n       \
    \ return false\n    end\n    all_keys_upper = isequal(collect(keys(dict)), collect(uppercase(keys(dict))))\n\
    \    all_keys_lower = isequal(collect(keys(dict)), collect(lowercase(keys(dict))))\n\
    \    return all_keys_upper || all_keys_lower\nend", "    if (length(dict) == 0)\n\
    \        return false\n    end\n    lower = true\n    upper = true\n    for (k,v)\
    \ in dict\n        if !isascii(k)\n            continue\n        end\n       \
    \ if islower(k)\n            upper = false\n        elseif isupper(k)\n      \
    \      lower = false\n        else\n            return false\n        end\n  \
    \  end\n    return lower || upper\nend", "    return all(isupper, keys(dict))\
    \ || all(islower, keys(dict))\nend\n```", "    lower = 0\n    upper = 0\n    for\
    \ (key, value) in dict\n        if islower(string(key))\n            lower +=\
    \ 1\n        elseif isupper(string(key))\n            upper += 1\n        end\n\
    \    end\n    return lower == length(dict) || upper == length(dict)\nend", " \
    \   s = sum(length(k) for k in keys(dict)) # sum of chars in keys\n    return\
    \ s == 0 || (s == length(lowercase(dict))) || (s == length(uppercase(dict)))\n\
    end", "    if keys(dict) == String.(uppercase.(keys(dict)))\n        return true\n\
    \    elseif keys(dict) == String.(lowercase.(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend", "    # your code goes here\nend",
  "    # we are assuming the dictionary is non-empty here\n    lc_flag = true # all\
    \ keys should be in lower case\n    uc_flag = true # all keys should be in upper\
    \ case\n    for key in keys(dict)\n        if !islower(key)\n            lc_flag\
    \ = false\n        end\n        if !isupper(key)\n            uc_flag = false\n\
    \        end\n    end\n    lc_flag || uc_flag\nend\n ", "    return all(x -> islower(x[1]),\
    \ collect(keys(dict))) || all(x -> isupper(x[1]), collect(keys(dict)))\nend",
  "    isupper = true\n    islower = true\n    for (key, value) in dict\n        if\
    \ !isuppercase(key)\n            isupper = false\n        end\n        if !islowercase(key)\n\
    \            islower = false\n        end\n    end\n    return isupper || islower\n\
    end", "    \"\"\"\n    Given a dictionary, return true if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"", "    is_lower(key::String) = islower(key)\n    is_upper(key::String)\
    \ = isupper(key)\n    mixed_keys = false\n    mixed_keys = mixed_keys || any(map(key\
    \ -> !is_lower(key),keys(dict)))\n    mixed_keys = mixed_keys || any(map(key ->\
    \ !is_upper(key),keys(dict)))\n    if mixed_keys\n        return false\n    else\n\
    \        return true\n    end\nend", "    if isempty(dict)\n        return false\n\
    \    end\n    if (any(isalpha, keys(dict)) || any(islower, keys(dict))) && \n\
    \        (any(isalpha, keys(dict)) || any(isupper, keys(dict)))\n        return\
    \ true\n    else\n        return false\n    end\nend", "    #Dict{String, String}\n\
    \    case_true = true\n    if length(dict) < 1\n        return false\n    end\n\
    \    if islower(string(keys(dict)[1]))\n        for key in keys(dict)\n      \
    \      if islower(string(key)) == false\n                case_true = false\n \
    \           end\n        end\n    else\n        for key in keys(dict)\n      \
    \      if isupper(string(key)) == false\n                case_true = false\n \
    \           end\n        end\n    end\n    return case_true\nend\n \n    \n \n\
    \    ", "    key_list = collect(keys(dict))\n    if isempty(key_list) \n     \
    \   return false\n    end\n    if isequal(all(x -> islower(x), key_list),\n  \
    \             all(x -> isupper(x), key_list))\n        return true\n    else\n\
    \        return false\n    end\nend", "    lower_case_keys = true\n    upper_case_keys\
    \ = true\n    for (key, val) in dict\n        if islower(key[1])\n           \
    \ upper_case_keys = false\n        elseif isupper(key[1])\n            lower_case_keys\
    \ = false\n        else\n            return false\n        end\n    end\n    lower_case_keys\
    \ || upper_case_keys\nend", "    is_lower_case = true\n    is_upper_case = true\n\
    \    for (key, value) in dict\n        if !isascii(key)\n            return false\n\
    \        end\n        if islower(key)\n            is_upper_case = false\n   \
    \     elseif isupper(key)\n            is_lower_case = false\n        else\n \
    \           return false\n        end\n    end\n    is_lower_case || is_upper_case\n\
    end", "    is_upper = false\n    is_lower = false\n    if isempty(dict)\n    \
    \    return false\n    end\n    for key in keys(dict)\n        if !isascii(key)\n\
    \            return false\n        end\n        if !(islower(key) || isupper(key))\n\
    \            return false\n        end\n        if islower(key) && !is_lower\n\
    \            is_lower = true\n        end\n        if isupper(key) && !is_upper\n\
    \            is_upper = true\n        end\n    end\n    if is_lower && is_upper\n\
    \        return false\n    end\n    return true\nend", "  lower = false\n  upper\
    \ = false\n  for (key, value) in dict\n    if islower(string(key))\n      lower\
    \ = true\n    elseif isupper(string(key))\n      upper = true\n    else\n    \
    \  return false\n    end\n  end\n  if lower == upper\n    return false\n  else\n\
    \    return true\n  end\nend", "end\n```", "    if !isempty(dict)\n        if\
    \ islower(keys(dict))\n            return true\n        elseif isupper(keys(dict))\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend", "    all(x in lowercase(string)\
    \ for x in keys(dict)) || all(x in uppercase(string) for x in keys(dict)) \nend",
  "    keys = collect(keys(dict))\n    key_type = 0 # 0 = lowercase, 1 = uppercase,\
    \ 2 = neither\n    for key in keys\n        if islower(key[1])\n            if\
    \ key_type == 1\n                return false\n            else\n            \
    \    key_type = 0\n            end\n        elseif isupper(key[1])\n         \
    \   if key_type == 0\n                return false\n            else\n       \
    \         key_type = 1\n            end\n        else\n            return false\n\
    \        end\n    end\n    true\nend", "    return true\nend", "    lower = Set()\n\
    \    upper = Set()\n    for (key, value) in dict\n        if islower(string(key))\n\
    \            push!(lower, key)\n        else\n            push!(upper, key)\n\
    \        end\n    end\n    return length(lower) == length(dict) || length(upper)\
    \ == length(dict)\nend\n\"\"\"\n    Given a character array and a single character,\
    \ write a function \n    to check whether the given character is present in the\
    \ array or not.\n    Examples:\n    >>> find_char(\"abcdedcba\", 'c')\n    true\n\
    \    >>> find_char(\"abcdedcba\", 'A')\n    false\n    >>> find_char(\"abcdedcba\"\
    , 'd')\n    true\n    >>> find_char(\"abcdedcba\", 'z')\n    false\n    \"\"\"",
  "    #TODO: Fix this function to return correct values\n    return true\nend", " \
    \   lower = true\n    upper = true\n    for i in keys(dict)\n        if !isupper(i)\n\
    \            upper = false\n        end\n        if !islower(i)\n            lower\
    \ = false\n        end\n    end\n    return (lower || upper)\nend", "    \n  \
    \  \"\"\"\n    Given a dictionary, return true if all keys are strings in lower\
    \ \n    case or all keys are strings in upper case, else return false.\n    The\
    \ function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"", "    return true\nend", "    return all(lowercase.(keys(dict)))\
    \ || all(uppercase.(keys(dict)))\nend", "    return false\nend", "    all_keys_lower,\
    \ all_keys_upper = true, true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            all_keys_lower = false\n        end\n        if !isupper(key)\n \
    \           all_keys_upper = false\n        end\n    end\n    return (all_keys_lower\
    \ || all_keys_upper)\nend", "    lower = 0\n    upper = 0\n    for i in keys(dict)\n\
    \        if islower(i)\n            lower += 1\n        else\n            upper\
    \ += 1\n        end\n    end\n    if lower == 0 || upper == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if length(dict) ==\
    \ 0 \n        return false\n    end\n    if length(keys(dict)) == 1\n        return\
    \ true\n    end\n    firstkey = first(keys(dict))\n    if firstkey == uppercase(firstkey)\n\
    \        for key in keys(dict)\n            if key != uppercase(key)\n       \
    \         return false\n            end\n        end\n    elseif firstkey == lowercase(firstkey)\n\
    \        for key in keys(dict)\n            if key != lowercase(key)\n       \
    \         return false\n            end\n        end\n    else\n        return\
    \ false\n    end\n    return true\nend", "        uppers = map(uppercase, keys(dict))\n\
    \        lowers = map(lowercase, keys(dict))\n        if length(dict) == 0\n \
    \           return false\n        elseif sort(lowers) == sort(keys(dict))\n  \
    \          return true\n        elseif sort(uppers) == sort(keys(dict))\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    \n    \"\"\"\n    Given a dictionary, return true if all keys are\
    \ of type Integer, else return false.\n    The function should return false is\
    \ the given dictionary is empty.\n    Examples:\n    >>> check_dict_int_keys(Dict(1\
    \ => \"apple\", \"b\" => \"banana\"))\n    false\n    >>> check_dict_int_keys(Dict(1\
    \ => \"apple\", 2 => \"banana\", 3 => \"banana\"))\n    true\n    >>> check_dict_int_keys(Dict(1\
    \ => \"apple\", \"a\" => \"banana\", \"b\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_int_keys(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    false\n\
    \    >>> check_dict_int_keys(Dict(1 => \"apple\", 2 => \"banana\", 1 => \"banana\"\
    ))\n    false\n    \"\"\"", "    # lowercase or uppercase?\n    if sum(isupper.(keys(dict)))\
    \ == length(keys(dict)) || sum(islower.(keys(dict))) == length(keys(dict))\n \
    \       return true\n    else\n        return false\n    end\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    if all(islower.(collect(keys(dict))))\n\
    \        return true\n    elseif all(isupper.(collect(keys(dict))))\n        return\
    \ true\n    else\n        return false\n    end\nend", "    # Loop over the keys\
    \ and check if they are all strings in lower case or\n    # all strings in upper\
    \ case.\n    upper_count = 0\n    lower_count = 0\n    for key in keys(dict)\n\
    \        if islower(key)\n            lower_count += 1\n        elseif isupper(key)\n\
    \            upper_count += 1\n        else\n            return false\n      \
    \  end\n    end\n    # The dictionary is not empty and there are only two cases:\
    \ either the \n    # keys are all in lower case or all in upper case.\n    upper_count\
    \ + lower_count == length(dict)\nend", "    isupper(dict) || islower(dict) ? true\
    \ : false\nend", "    for (key, value) in dict\n        if !(islower(key) || isupper(key))\n\
    \            return false\n        end\n    end\n    return true\nend\n ", " \
    \   if length(keys(dict)) == 0\n        return false\n    end\n    check_upper\
    \ = true\n    check_lower = true\n    for key in keys(dict)\n        if check_upper\
    \ && !isupper(key)\n            check_upper = false\n        end\n        if check_lower\
    \ && !islower(key)\n            check_lower = false\n        end\n    end\n  \
    \  return check_upper || check_lower\nend\nprintln(check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")))\nprintln(check_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")))\nprintln(check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")))\nprintln(check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")))\nprintln(check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")))", "    keys = keys(dict)\n    res =\
    \ true\n    if length(keys) > 0\n        res = all(key -> key == lowercase(key),\
    \ keys) || all(key -> key == uppercase(key), keys)\n    end\n    return res\n\
    end", "    if all(isupper, keys(dict))\n        return true\n    elseif all(islower,\
    \ keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end", "    if length(dict) == 0\n        return false\n    end\n    if length(dict)\
    \ == 1\n        return true\n    end\n    if String.islower(first(keys(dict)))\n\
    \        for key in keys(dict)\n            if !String.islower(key)\n        \
    \        return false\n            end\n        end\n    elseif String.isupper(first(keys(dict)))\n\
    \        for key in keys(dict)\n            if !String.isupper(key)\n        \
    \        return false\n            end\n        end\n    else\n        return\
    \ false\n    end\n    return true\nend", "    are_keys_lower = false\n    are_keys_upper\
    \ = false\n    for (key, value) in dict\n        if !(are_keys_lower)\n      \
    \      islower(key) ? (are_keys_lower = true) : (are_keys_lower = false)\n   \
    \     end\n        if !(are_keys_upper)\n            isupper(key) ? (are_keys_upper\
    \ = true) : (are_keys_upper = false)\n        end\n    end\n    return are_keys_lower\
    \ || are_keys_upper\nend", "    # your code here\nend", "    upper_count, lower_count\
    \ = 0, 0\n    for k in keys(dict)\n        @inbounds if !isequal(uppercase(k),\
    \ k)\n            lower_count += 1\n        else\n            upper_count += 1\n\
    \        end\n    end\n    return (lower_count == 0) || (upper_count == 0)\nend",
  "    lower_case = true\n    upper_case = true\n    for key in keys(dict)\n     \
    \   if islower(key[1])\n            upper_case = false\n        elseif isupper(key[1])\n\
    \            lower_case = false\n        else\n            return false\n    \
    \    end\n    end\n    return lower_case | upper_case\nend", "    # do stuff\n\
    \    pass\nend", "    for (k, v) in dict\n        if (k == string(lowercase(k))\
    \ || k == string(uppercase(k)))\n            continue\n        else\n        \
    \    return false\n        end\n    end\n    return true\nend", "    if length(keys(dict))\
    \ == 0 \n        return false\n    end\n    all_lower = true\n    all_upper =\
    \ true\n    for i in keys(dict)\n        if !islower(i)\n            all_lower\
    \ = false\n        end\n        if !isupper(i)\n            all_upper = false\n\
    \        end\n    end\n    return all_lower || all_upper\nend\n# check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))", "    lowercase = true\n    for i in\
    \ keys(dict)\n        if i[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    \
    \        lowercase = false\n        end\n    end\n    for i in keys(dict)\n  \
    \      if i[1] in string(\"abcdefghijklmnopqrstuvwxyz\")\n            lowercase\
    \ = true\n        end\n    end\n    return lowercase\nend\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))", "    keys = keys(dict)\n    for key\
    \ in keys\n        if ! islower(key) && ! isupper(key)\n            return false\n\
    \        end\n    end\n    return true\nend\n    ", "    lower_keys = 1\n    upper_keys\
    \ = 1\n    for k in keys(dict)\n        if(islower(k[1]))\n            lower_keys\
    \ += 1\n        elseif(isupper(k[1]))\n            upper_keys += 1\n        else\n\
    \            return false\n        end\n    end\n    return lower_keys == length(dict)\
    \ || upper_keys == length(dict)\nend", "    keys = keys(dict)\n    n = length(keys)\n\
    \    all_lower = true\n    all_upper = true\n    if n > 0\n        for i in 1:n\n\
    \            if islower(keys[i]) == false\n                all_lower = false\n\
    \            end\n            if isupper(keys[i]) == false\n                all_upper\
    \ = false\n            end\n        end\n        if all_lower == true || all_upper\
    \ == true\n            return true\n        else\n            return false\n \
    \       end\n    else\n        return false\n    end\nend", "    lower = true\n\
    \    upper = true\n    for key in keys(dict)\n        if string(key) == uppercase(string(key))\n\
    \            lower = false\n        elseif string(key) == lowercase(string(key))\n\
    \            upper = false\n        else \n            return false\n        end\n\
    \    end\n    return lower || upper\nend", "    return true\nend", "    dict_keys\
    \ = keys(dict)\n    dict_values = values(dict)\n    #if dict is not empty\n  \
    \  if length(dict_keys) > 0\n        #get the first key, convert to lower case\n\
    \        if islower(dict_keys[1])\n            #get the first key, convert to\
    \ lower case\n            lcase_keys = map(x -> lowercase(x), dict_keys)\n   \
    \         lcase_values = map(x -> lowercase(x), dict_values)\n            if lcase_keys\
    \ == dict_keys && lcase_values == dict_values\n                return true\n \
    \           else\n                return false\n            end\n        #get\
    \ the first key, convert to upper case\n        elseif isupper(dict_keys[1])\n\
    \            ucase_keys = map(x -> uppercase(x), dict_keys)\n            ucase_values\
    \ = map(x -> uppercase(x), dict_values)\n            if ucase_keys == dict_keys\
    \ && ucase_values == dict_values\n                return true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "    return\
    \ false\nend", "    d = Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n    num_keys\
    \ = length(keys(d))\n    if num_keys == 0\n        return false\n    end\n   \
    \ t = 0\n    c = 0\n    for (key, value) in d\n        key_char = first(key)\n\
    \        if islower(key_char)\n            t += 1\n        else\n            c\
    \ += 1\n        end\n    end\n    if (t == num_keys) || (c == num_keys)\n    \
    \    return true\n    else\n        return false\n    end\nend", "    lower =\
    \ true\n    upper = true\n    for key in keys(dict)\n        if !isalpha(key)\n\
    \            return false\n        end\n        if !(islower(key) || isupper(key))\n\
    \            return false\n        end\n        lower = lower && islower(key)\n\
    \        upper = upper && isupper(key)\n    end\n    return (lower || upper) &&\
    \ !(lower && upper)\nend", "    if size(dict)==0 return false end\n    lower_keys\
    \ = [x for x in keys(dict) if islower(x)]\n    upper_keys = [x for x in keys(dict)\
    \ if isupper(x)]\n    if length(lower_keys)>0 && length(upper_keys)>0\n      \
    \  return false\n    else\n        return true\n    end\nend", "    dictkeys =\
    \ collect(keys(dict))\n    for i in dictkeys\n        if islower(first(i))\n \
    \           for j in dictkeys\n                if !islower(first(j))\n       \
    \             return false\n                end\n            end\n        elseif\
    \ isupper(first(i))\n            for j in dictkeys\n                if !isupper(first(j))\n\
    \                    return false\n                end\n            end\n    \
    \    else\n            return false\n        end\n    end\n    return true\nend",
  "    if length(keys(dict)) == 0\n        return false\n    end\n    dict_keys =\
    \ keys(dict)\n    dict_values = values(dict)\n    upper_case = false\n    lower_case\
    \ = false\n    for i in dict_keys\n        if (uppercase(i) == i) && (typeof(i)\
    \ == String)\n            upper_case = true\n        elseif (lowercase(i) == i)\
    \ && (typeof(i) == String)\n            lower_case = true\n        else\n    \
    \        return false\n        end\n    end\n    for i in dict_values\n      \
    \  if (uppercase(i) == i) && (typeof(i) == String)\n            upper_case = true\n\
    \        elseif (lowercase(i) == i) && (typeof(i) == String)\n            lower_case\
    \ = true\n        else\n            return false\n        end\n    end\n    if\
    \ upper_case && lower_case\n        return false\n    else\n        return true\n\
    \    end\nend", "    check_upper = []\n    check_lower = []\n    for (k, v) in\
    \ dict\n        check_upper = push!(check_upper, isupper(k))\n        check_lower\
    \ = push!(check_lower, islower(k))\n    end\n    check_upper_only = all(check_upper)\n\
    \    check_lower_only = all(check_lower)\n    if check_upper_only == true || check_lower_only\
    \ == true\n        return true\n    else\n        return false\n    end\nend",
  "    lckeys = Dict(key(k)=>val(k) for k in dict)\n    uckeys = Dict(uppercase(key(k))=>val(k)\
    \ for k in dict)\n    return (lckeys == dict || uckeys == dict) ? true : false\n\
    end", "    dict_lower_keys = [\"\" for key in keys(dict)]\n    dict_upper_keys\
    \ = [\"\" for key in keys(dict)]\n    for (key, value) in dict\n        push!(dict_lower_keys,\
    \ key)\n        push!(dict_upper_keys, upper(key))\n    end\n    dict_lower_keys\
    \ == keys(dict) || dict_upper_keys == keys(dict)\nend", "    lower_case = true\n\
    \    for k in keys(dict)\n        lower_case = k isa String && k == lowercase(k)\n\
    \        if !lower_case\n            break\n        end\n    end\n    if lower_case\n\
    \        return true\n    end\n    upper_case = true\n    for k in keys(dict)\n\
    \        upper_case = k isa String && k == uppercase(k)\n        if !upper_case\n\
    \            break\n        end\n    end\n    if upper_case\n        return true\n\
    \    end\n    return false\nend", "    \n    \nend", "    # your code here\n \
    \   tmp_lc = Dict()\n    tmp_uc = Dict()\n    for key in keys(dict)\n        try\n\
    \            tmp_lc[key] = key\n        catch\n            try\n             \
    \   tmp_uc[key] = key\n            catch\n                return false\n     \
    \       end\n        end\n    end\n    return true\nend", "    # TODO: Implement\
    \ me!\n    # code to check if the key value pair is true or false\n    lower_case_keys\
    \ = true\n    upper_case_keys = true\n    for (key, value) in dict\n        if\
    \ (lower_case_keys == true) && (islower(key) == false)\n            lower_case_keys\
    \ = false\n        end\n        if (upper_case_keys == true) && (isupper(key)\
    \ == false)\n            upper_case_keys = false\n        end\n    end\n    if\
    \ (lower_case_keys == true) || (upper_case_keys == true)\n        return true\n\
    \    else\n        return false\n    end\nend", "    # set to true if no values\
    \ in the dictionary\n    if length(dict) == 0\n        return false\n    end\n\
    \    # determines if all the keys are lower case\n    low = true\n    # determines\
    \ if all the keys are upper case\n    up = true\n    # gets the first key in the\
    \ dictionary\n    first_key = string(keys(dict)[1])\n    # determines if the first\
    \ key is lower case\n    if first_key == lowercase(first_key)\n        # sets\
    \ the second logical variable to false if the first key is lower case\n      \
    \  up = false\n    # determines if the first key is upper case\n    elseif first_key\
    \ == uppercase(first_key)\n        # sets the first logical variable to false\
    \ if the first key is upper case\n        low = false\n    # determines if the\
    \ first key is neither lower or upper case \n    else\n        # returns false\
    \ if the first key is neither lower or upper case\n        return false\n    end\n\
    \    # Iterates through the dictionary\n    for i in keys(dict)\n        # determines\
    \ if the key is lower case\n        if i == lowercase(i)\n            # sets the\
    \ second logical variable to false if the key is lower case\n            up =\
    \ false\n        # determines if the key is upper case\n        elseif i == uppercase(i)\n\
    \            # sets the first logical variable to false if the key is upper case\n\
    \            low = false\n        # determines if the key is neither lower or\
    \ upper case \n        else\n            # returns false if the key is neither\
    \ lower or upper case\n            return false\n        end\n    end\n    # returns\
    \ true if all the keys are lower case\n    if low\n        return true\n    #\
    \ returns true if all the keys are upper case\n    elseif up\n        return true\n\
    \    # returns false if the keys are neither lower or upper case\n    else\n \
    \       return false\n    end\nend", "    all(Char.(dict.keys) .== Char.(lowercase.(dict.keys)))\
    \ || all(Char.(dict.keys) .== Char.(uppercase.(dict.keys)))\nend", "    for key\
    \ in keys(dict)\n        if !(isupper(key) || islower(key))\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(key in string.lowercase for key\
    \ in keys(dict))\n        return true\n    elseif all(key in string.uppercase\
    \ for key in keys(dict))\n        return true\n    else\n        return false\n\
    \    end\nend", "    ### BEGIN SOLUTION\n    dict_keys = collect(keys(dict))\n\
    \    if typeof(dict_keys[1]) == String\n        islower(dict_keys[1]) ? all(islower,\
    \ dict_keys) : all(isupper, dict_keys)\n    else\n        false\n    end\n   \
    \ ### END SOLUTION\nend\n#=\nBEGIN UNIT TESTS\n=#", "    is_low = true\n    is_up\
    \ = true\n    for key in keys(dict)\n        if key in uppercase(key)\n      \
    \      is_low = false\n        elseif key in lowercase(key)\n            is_up\
    \ = false\n        else\n            return false\n        end\n    end\n    if\
    \ is_low || is_up\n        return true\n    else\n        return false\n    end\n\
    end", "    if dict == Dict{String, String}()\n        return false\n    end\n\
    \    lower = true\n    upper = true\n    for key in keys(dict)\n        if islower(key)\n\
    \            upper = false\n        elseif isupper(key)\n            lower = false\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ || upper\nend\n ", "    # Insert your code here.\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    # return return_value\nend", "    check_keys(string1::String)\
    \ = [x in string1.lower() for x in string1]\n    check_keys(string2::String) =\
    \ [x in string2.upper() for x in string2]\n    if length(dict) == 0\n        return\
    \ false\n    elseif (all(check_keys(x) for x in keys(dict)))\n        return true\n\
    \    elseif (all(check_keys(x) for x in keys(dict)))\n        return true\n  \
    \  else\n        return false\n    end\nend", "    lower_case_keys = true\n  \
    \  upper_case_keys = true\n    for (key, value) in dict\n        lower_case_keys\
    \ = lower_case_keys && islower(key)\n        upper_case_keys = upper_case_keys\
    \ && isupper(key)\n    end\n    return lower_case_keys || upper_case_keys\nend",
  "    if length(dict) == 0\n        return false\n    end\n    if isupperfirst(keys(dict)[1])\n\
    \        return all(isupperfirst, keys(dict))\n    else\n        return all(islowerfirst,\
    \ keys(dict))\n    end\nend\n    ", "    # Iterate through keys to see if all\
    \ keys are lower or upper. \n    # If they are not, then return false. \n    lower,\
    \ upper = true, true\n    for (k, v) in dict\n        lower = lower && islower(k)\n\
    \        upper = upper && isupper(k)\n    end\n    lower || upper\nend", "   \
    \ lower_count = 0\n    upper_count = 0\n    for key in keys(dict)\n        if\
    \ islower(key)\n            lower_count += 1\n        else\n            upper_count\
    \ += 1\n        end\n    end\n    return (lower_count == 0) || (upper_count ==\
    \ 0)\nend", "    keys = keys(dict)\n    for i = 1:length(keys)\n        if keys[i]\
    \ \u2260 uppercase(keys[i]) && keys[i] \u2260 lowercase(keys[i])\n           \
    \ return false\n        end\n    end\n    return true\nend", " \n    if isempty(dict)\n\
    \        return false\n    end\n    \n    # check keys\n    for (key, value) in\
    \ dict\n        if isa(key, String)\n            if key != lowercase(key) && key\
    \ != uppercase(key)\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    \n    return true\nend",
  "    # T[String] returns a 1D array of all the keys\n    keys_array = T[dict]\n\
    \    # keys_array is a 1D array of strings, we want to return true\n    # if all\
    \ the elements of keys_array are either lower or upper case.\n    # Otherwise,\
    \ we want to return false.\n    # one way to do this is to use the all function.\n\
    \    # all function has input a, this input can be an iterable.\n    # all function\
    \ checks if all elements in the iterable satisfies the \n    # condition.\n  \
    \  # We can use this function to check if the elements of keys_array\n    # are\
    \ all lower case or all upper case.\n    # Check if all elements in keys_array\
    \ are lower case by using islower.\n    # islower function checks if all characters\
    \ in the string are lower case.\n    # Similarly, check if all elements in keys_array\
    \ are upper case by using \n    # isupper.\n    # isupper function checks if all\
    \ characters in the string are upper case.\n    # The statement islower(keys_array)\
    \ checks if all elements in keys_array\n    # are lower case.\n    # The statement\
    \ isupper(keys_array) checks if all elements in keys_array\n    # are upper case.\n\
    \    # Therefore, the statement (islower(keys_array) || isupper(keys_array))\n\
    \    # checks if all elements in keys_array are either lower case or upper case.\n\
    \    # The following statement checks if all elements in keys_array are either\n\
    \    # lower case or upper case and returns true if they are and false otherwise.\n\
    \    return all(islower(keys_array) || isupper(keys_array))\nend", "    all_lower\
    \ = true\n    all_upper = true\n    for (k, v) in dict\n        if k[1] == k[1]\
    \ && islower(k[1]) \n            all_upper = false\n        elseif k[1] == k[1]\
    \ && isupper(k[1])\n            all_lower = false\n        else\n            return\
    \ false\n        end\n    end\n    return all_lower || all_upper\nend", "    if\
    \ length(keys(dict)) == 0 return false end\n    is_upper = !islower(rand(keys(dict)))\
    \ # sample to check if it is upper or lower case\n    for (key, _) in dict\n \
    \       if is_upper != isupper(key) return false end\n    end\n    return true\n\
    end", "    \"\"\"\n    Given a dictionary, return true if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\n    case_of_keys = Set()\n    for (k, v) in dict\n      \
    \  if k in keys(dict)\n            if islower(k)\n                push!(case_of_keys,\
    \ islower(k))\n            else\n                push!(case_of_keys, isupper(k))\n\
    \            end\n        end\n    end\n    if length(case_of_keys) == 1\n   \
    \     return true\n    else\n        return false\n    end\nend\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))", "    keys = collect(keys(dict))\n  \
    \  for key in keys\n        if !isstring(key)\n            return false\n    \
    \    end\n    end\n    upper_cnt = 0\n    lower_cnt = 0\n    for key in keys\n\
    \        if isupper(key)\n            upper_cnt += 1\n        else\n         \
    \   lower_cnt += 1\n        end\n    end\n    if upper_cnt == 0 || lower_cnt ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend", "   \
    \ lower=0;\n    upper=0;\n    for k in keys(dict)\n        if islower(k)\n   \
    \         lower=lower+1;\n        elseif isupper(k)\n            upper=upper+1;\n\
    \        end\n    end\n    if lower>0 && upper>0\n        return false;\n    elseif\
    \ lower==0 && upper==0\n        return false;\n    else\n        return true;\n\
    \    end\nend", "    keys_of_dict = keys(dict)\n    return all(isupper.(keys_of_dict))\
    \ | all(islower.(keys_of_dict))\nend", "    lower_keys = 0\n    upper_keys = 0\n\
    \    for (key, value) in dict\n        if key == lowercase(key)\n            lower_keys\
    \ += 1\n        elseif key == uppercase(key)\n            upper_keys += 1\n  \
    \      end\n    end\n    if lower_keys == length(dict) || upper_keys == length(dict)\n\
    \        return true\n    else\n        return false\n    end\nend", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\nend", "    # YOUR CODE HERE\n  \
    \  return false\nend", "    key_types = filter(k -> islower(k), keys(dict))\n\
    \    if isempty(key_types)\n        key_types = filter(k -> isupper(k), keys(dict))\n\
    \    end\n    if isempty(key_types)\n        return false\n    end\n    if length(key_types)\
    \ == length(keys(dict))\n        return true\n    end\n    return false\nend",
  "   if length(dict) == 0\n        return false\n    end\n    # check lower case\n\
    \    for (key, value) in dict\n        if isa(key, String) && key != lowercase(key)\n\
    \            return false\n        end\n    end\n    return true\nend\n ", " \
    \   #iterate over the keys in the dictionary, the first condition is true if they\
    \ are all strings in lower case\n    #the second condition is true if they are\
    \ all strings in upper case\n    return all(isascii(x)&&islower(x) for x in keys(dict))\
    \ || all(isascii(x)&&isupper(x) for x in keys(dict))\nend", "    if length(dict)==0\n\
    \        return false\n    end\n    var lower::Bool = false\n    var upper::Bool\
    \ = false\n    for (key,value) in dict\n        if (islower(key))\n          \
    \  lower = true\n        elseif (isupper(key))\n            upper = true\n   \
    \     else\n            return false\n        end\n    end\n    if lower == upper\n\
    \        return false\n    else\n        return true\n    end\nend", "    \n \
    \   \n    \n    \n    \n    \n    return Bool\nend\n```", "    keys = collect(keys(dict))\n\
    \    is_lower = all(is_lowercase.(keys))\n    is_upper = all(is_uppercase.(keys))\n\
    \    return is_lower || is_upper\nend", "    if length(dict) == 0 \n        return\
    \ false\n    end\n    lower_case = 0\n    upper_case = 0\n    for (key, value)\
    \ in dict\n        if islower(key)\n            lower_case += 1\n        elseif\
    \ isupper(key)\n            upper_case += 1\n        else\n            return\
    \ false\n        end\n    end\n    if lower_case > 0 && upper_case > 0\n     \
    \   return false\n    else\n        return true\n    end\nend", "    unique_keys\
    \ = Set(collect(keys(dict)))\n    if length(unique_keys) == 0\n        return\
    \ false\n    end\n    is_lowercase = [is_lowercase(keys(dict))...]\n    if is_lowercase[1]\n\
    \        for key in unique_keys\n            if !is_lowercase(key)\n         \
    \       return false\n            end\n        end\n    else\n        for key\
    \ in unique_keys\n            if is_lowercase(key)\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    # Your code\
    \ goes here\nend\n ", "    upper_case_keys = 0\n    lower_case_keys = 0\n    for\
    \ (k, v) in dict\n        if isupper(k)\n            upper_case_keys += 1\n  \
    \      elseif islower(k)\n            lower_case_keys += 1\n        end\n    end\n\
    \    if lower_case_keys == 0 || upper_case_keys == 0\n        return true\n  \
    \  else\n        return false\n    end\nend\n\"\"\"\n    Write a function called\
    \ max_diff that accepts a non-empty array of \n    numbers and returns the maximum\
    \ difference between any number and \n    any lower indexed smaller number. For\
    \ example, the maximum difference \n    between the number at index 4 and any\
    \ number at a lower index is 9 (5 - (-4)).\n    If the array is empty or the result\
    \ would be negative, return -1.\n    Examples:\n    >>> max_diff([1, 2, 3, 5,\
    \ 4])\n    4\n    >>> max_diff([1, 2, 3, 10])\n    7\n    >>> max_diff([1, 2,\
    \ 3, -10])\n    13\n    >>> max_diff([])\n    -1\n    >>> max_diff([1])\n    -1\n\
    \    >>> max_diff([1, 1, 1, 1])\n    0\n    >>> max_diff([11, -4, 7, 3, 3, 2])\n\
    \    9\n    \"\"\"", "    return all(isascii(c) && islower(c) for c in keys(dict))\
    \ || all(isascii(c) && isupper(c) for c in keys(dict))\nend", "    \"\"\"Function\
    \ to check if all keys in a dictionary are in lower case\"\"\"\n    all_keys_lower\
    \ = all(map(islower, keys(dict)))\n    all_keys_upper = all(map(isupper, keys(dict)))\n\
    \    if all_keys_lower || all_keys_upper\n        return true\n    else\n    \
    \    return false\n    end\nend", "    if isempty(dict)\n        return false\n\
    \    end\n    true_count = 0\n    for (k, v) in dict\n        if islower(k)\n\
    \            true_count += 1\n        end\n    end\n    if true_count == length(dict)\n\
    \        return true\n    end\n    true_count = 0\n    for (k, v) in dict\n  \
    \      if isupper(k)\n            true_count += 1\n        end\n    end\n    if\
    \ true_count == length(dict)\n        return true\n    end\n    return false\n\
    end\n    \n\"\"\"\n    Given a list of dictionaries, return a dictionary of unique\
    \ keys such that\n    if the key is a String, it is in lower case and if it is\
    \ a Number, it is\n    in upper case. It is not necessary to have all keys in\
    \ lower case or all\n    keys in upper case. The function should return an empty\
    \ dictionary if the\n    given list is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    for key in keys(dict)\n\
    \        if islower(key) != (key in lowercase(string(keys(dict))))\n         \
    \   return false\n        end\n    end\n    return true\nend", "    if length(keys(dict))==0\n\
    \        return false\n    end\n    lowercase_keys = collect(keys(dict))\n   \
    \ uppercase_keys = collect(map(uppercase, lowercase_keys))\n    if lowercase_keys==keys(dict)\n\
    \        return true\n    elseif uppercase_keys==keys(dict)\n        return true\n\
    \    else\n        return false\n    end\nend", "    keys = collect(keys(dict))\n\
    \    lcase = keys[1][1] in 'abcdefghijklmnopqrstuvwxyz'\n    for k in keys\n \
    \       if lcase\n            if k[1] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n      \
    \          return false\n            end\n        else\n            if k[1] in\
    \ 'abcdefghijklmnopqrstuvwxyz'\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\ncheck_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))", "    \n    list = keys(dict)\n    list2 = values(dict)\n\
    \    contains_upper = has_uppercase(list)\n    contains_lower = has_lowercase(list)\n\
    \    if !(contains_upper && contains_lower) && !isempty(dict)\n        return\
    \ true\n    else \n        return false\n    end\nend", "    \nend\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))", "    lower_keys = all(k in string.(lowercase(string))\
    \ for k in keys(dict))\n    upper_keys = all(k in string.(uppercase(string)) for\
    \ k in keys(dict))\n    return lower_keys || upper_keys\nend", "    lower = true\n\
    \    upper = true\n    for key in keys(dict)\n        lower = lower && islower(key)\n\
    \        upper = upper && isupper(key)\n    end\n    if length(dict) == 0\n  \
    \      return false\n    else\n        return lower || upper\n    end\nend", " \
    \   lower = all(lowercase(key) for key in keys(dict))\n    upper = all(uppercase(key)\
    \ for key in keys(dict))\n    return lower || upper\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    if isa(keys(dict)[1], String)\n   \
    \     if isequal(upper(keys(dict)[1]), keys(dict)[1])\n            flag = true\n\
    \            for (k, v) in dict\n                if !isequal(upper(k), k)\n  \
    \                  flag = false\n                    break\n                end\n\
    \            end\n            return flag\n        elseif isequal(lower(keys(dict)[1]),\
    \ keys(dict)[1])\n            flag = true\n            for (k, v) in dict\n  \
    \              if !isequal(lower(k), k)\n                    flag = false\n  \
    \                  break\n                end\n            end\n            return\
    \ flag\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend", "    l=length(dict)\n    if l==0\n        return\
    \ false\n    end\n    s=collect(keys(dict))\n    d = [all(isupper, x) for x in\
    \ s]\n    k=all(d)\n    if k==true\n        return true\n    end\n    d = [all(islower,\
    \ x) for x in s]\n    k=all(d)\n    if k==true\n        return true\n    end\n\
    \    return false\nend", "    is_lower_case = false\n    is_upper_case = false\n\
    \    for (k, v) in dict\n        if islower(k[1])\n            is_lower_case =\
    \ true\n        elseif isupper(k[1])\n            is_upper_case = true\n     \
    \   else\n            return false\n        end\n    end\n    if is_lower_case\
    \ && is_upper_case\n        return false\n    else\n        return true\n    end\n\
    end", "    keys = keys(dict)\n    for key in keys\n        if ! isascii(key)\n\
    \            return false\n        end\n    end\n    # if we are here, all keys\
    \ are ascii\n    is_lower = islower(keys[1])\n    # Check that all keys are lower\
    \ or upper\n    for key in keys\n        if is_lower != islower(key)\n       \
    \     return false\n        end\n    end\n    return true\nend", "    all_lower\
    \ = true\n    all_upper = true\n    for (k, v) in dict\n        all_lower = all_lower\
    \ && k \u2208 lowercase(k)\n        all_upper = all_upper && k \u2208 uppercase(k)\n\
    \    end\n    return all_lower || all_upper\nend", "    \n    \n    return all(each_key\
    \ in lowercase(keys(dict)) || each_key in uppercase(keys(dict)) for each_key in\
    \ keys(dict))\nend", "    pass\nend", "    all_lower = true\n    all_upper = true\n\
    \    # default to true so that if dict is empty the function returns false\n \
    \   if isempty(dict)\n        return false\n    end\n    for (key, _) in dict\n\
    \        if typeof(key) != String\n            return false\n        end\n   \
    \     if !islower(key)\n            all_lower = false\n        end\n        if\
    \ !isupper(key)\n            all_upper = false\n        end\n    end\n    return\
    \ all_lower || all_upper\nend", "end\n\"\"\"\n    Given a dictionary, return a\
    \ new dictionary containing key value pairs \n    where the keys start with the\
    \ character \"z\" (case insensitive).\n    The function should return an empty\
    \ dictionary if the given dictionary \n    is empty.\n    Examples:\n    >>> filter_dict_by_char(Dict(\"\
    name\" => \"John\", \"Age\" => \"36\", \"Job\" => \"data scientist\"))\n    Dict(\"\
    Job\" => \"data scientist\")\n    >>> filter_dict_by_char(Dict(\"state\" => \"\
    NC\", \"zip\" => \"12345\", \"city\" => \"Charlotte\"))\n    Dict(\"zip\" => \"\
    12345\")\n    >>> filter_dict_by_char(Dict(\"c1\" => \"apple\", \"c2\" => \"banana\"\
    , \"c3\" => \"carrot\"))\n    Dict(\"c1\" => \"apple\", \"c2\" => \"banana\",\
    \ \"c3\" => \"carrot\")\n    >>> filter_dict_by_char(Dict(\"C1\" => \"apple\"\
    , \"C2\" => \"banana\", \"C3\" => \"carrot\"))\n    Dict(\"C1\" => \"apple\",\
    \ \"C2\" => \"banana\", \"C3\" => \"carrot\")\n    >>> filter_dict_by_char(Dict(\"\
    name\" => \"John\", \"State\" => \"NC\", \"ZIP\" => \"12345\"))\n    Dict(\"ZIP\"\
    \ => \"12345\")\n    >>> filter_dict_by_char(Dict(\"name\" => \"John\", \"State\"\
    \ => \"NC\", \"zip\" => \"12345\"))\n    Dict(\"zip\" => \"12345\")\n    >>> filter_dict_by_char(Dict(\"\
    name\" => \"John\", \"state\" => \"NC\", \"ZIP\" => \"12345\"))\n    Dict(\"ZIP\"\
    \ => \"12345\")\n    >>> filter_dict_by_char(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\n    Dict()\n    >>> filter_dict_by_char(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    Dict(\"ZIP\"", "    # Your code\
    \ here\nend", "    keys_lower = false\n    keys_upper = false\n    # Determine\
    \ if all keys are strings in lower case\n    if islower.(collect(keys(dict)))\n\
    \        keys_lower = true\n    end\n    # Determine if all keys are strings in\
    \ upper case\n    if isupper.(collect(keys(dict)))\n        keys_upper = true\n\
    \    end\n    # All keys are strings in lower case or all keys are strings in\
    \ upper case\n    if keys_lower || keys_upper\n        return true\n    else\n\
    \        return false\n    end\nend", "    return true\nend\n ", "    if length(dict)\
    \ == 0\n        return false\n    end\n    for key in keys(dict)\n        if any(isupper.(string(key)))\
    \ && any(islower.(string(key)))\n            return false\n        end\n    end\n\
    \    return true\nend", "    # Base case: if the dictionary is empty, false.\n\
    \    # Base case: if the dictionary only has one key-value pair, true.\n    #\
    \ return true if all keys are lowercase,\n    # else return true if all keys are\
    \ uppercase,\n    # else return false.\n    # In case-based conditionals, you\
    \ need to return only one value\n    # after all checks and conditions.\nend",
  "    cases = [isupper(k) for k in keys(dict)]\n    return all(cases) || all(not\
    \ i for i in cases)\nend", "    keys = keys(dict)\n    key1 = keys[1]\n    lower\
    \ = \"a\" <= key1 <= \"z\"\n    for key in keys\n        if (lower && !(\"a\"\
    \ <= key <= \"z\")) || (!lower && !(\"A\" <= key <= \"Z\"))\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(collect(keys(dict))))\
    \ || all(islower.(collect(keys(dict))))\n        return true\n    else\n     \
    \   return false\n    end\nend", "    lower_case_keys = true\n    upper_case_keys\
    \ = true\n    for (key, value) in dict\n        lower_case_keys = lower_case_keys\
    \ && islower(key)\n        upper_case_keys = upper_case_keys && isupper(key)\n\
    \    end\n    return lower_case_keys || upper_case_keys\nend\nprintln(check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")))\nprintln(check_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")))\nprintln(check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")))\nprintln(check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")))\nprintln(check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")))", "    case=0\n    for (key,value)\
    \ in dict\n        case = case + islower(key) - isupper(key)\n    end\n    if\
    \ case == 0 && length(dict) > 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    uppers = Set(keys(dict))\n    lowers = Set(lowercase.(keys(dict)))\n\
    \    if length(uppers) == length(lowers) && uppers != lowers\n        return true\n\
    \    else\n        return false\n    end\nend", "    lowercase = 0\n    uppercase\
    \ = 0\n    if isempty(dict)\n        return false\n    end\n    for (key, value)\
    \ in dict\n        if (islower(key))\n            lowercase += 1\n        elseif\
    \ (isupper(key))\n            uppercase += 1\n        else\n            return\
    \ false\n        end\n    end\n    if (lowercase == length(dict)) || (uppercase\
    \ == length(dict))\n        return true\n    else\n        return false\n    end\n\
    end", "    for (k,v) in dict\n        if !(islower(k) || isupper(k))\n       \
    \     return false\n        end\n    end\n    return true\nend", "    if length(keys(dict))\
    \ == 0\n        return false\n    end\n    lower_case = []\n    upper_case = []\n\
    \    for key in keys(dict)\n        if key in lowercase(key)\n            push!(lower_case,\
    \ key)\n        elseif key in uppercase(key)\n            push!(upper_case, key)\n\
    \        end\n    end\n    if length(lower_case) == length(dict) || length(upper_case)\
    \ == length(dict)\n        return true\n    else\n        return false\n    end\n\
    end", "        lower = [i[1] for i in collect(keys(dict))]\n        upper = [i[1]\
    \ for i in collect(keys(dict))]\n        if islower.(lower) == (lower) || isupper.(upper)\
    \ == (upper)\n            return true\n        else \n            return false\n\
    \        end\n    end", "    # your code here\nend", "    A = []\n    B = []\n\
    \    C = []\n    for (k,v) in dict\n        push!(A, typeof(k))\n        push!(B,\
    \ typeof(v))\n        if !(isa(k,String) && isa(v,String))\n            push!(C,\
    \ \"false\")\n        end\n    end\n    if all(x == String for x in A) && all(x\
    \ == String for x in B) && length(C) == 0\n        return true\n    else \n  \
    \      return false\n    end\nend", "    #...\n    #[TAKE CARE OF CORNER CASES]\n\
    \    if length(keys(dict)) == 0\n        return false\n    end\n    \"\"\"\n \
    \   #...\n    #[HANDLE NON-STRING KEYS]\n    for key in keys(dict)\n        if\
    \ typeof(key) != String\n            return false\n        end\n    end\n    \"\
    \"\"\n    #...\n    #[GET FIRST KEY TO CHECK CASING]\n    #...\n    #[COMPARE\
    \ EACH CASE AGAINST FIRST KEY]\n    for key in keys(dict)\n        if key != upper(key)\
    \ && key != lower(key)\n            return false\n        end\n    end\n    return\
    \ true\nend", "    # for i=1:length(dict)\n    #     if length(dict[i])>2\n  \
    \  #         return false\n    #     end\n    # end\n    if sum(string.(lowercase(keys(dict))))==0\n\
    \        return true\n    elseif sum(string.(uppercase(keys(dict))))==0\n    \
    \    return true\n    else\n        return false\n    end\nend", "    return true\n\
    end", "    check_dict_case(dict::Dict{String, String}>) = true\n    if length(keys(dict))\
    \ == 0\n        return false\n    end\n    case_all_upper = true\n    case_all_lower\
    \ = true\n    for key in keys(dict)\n        if (key != uppercase(key))\n    \
    \        case_all_upper = false\n        end\n        if (key != lowercase(key))\n\
    \            case_all_lower = false\n        end\n    end\n    return case_all_upper\
    \ || case_all_lower\nend", "    count = 0\n    for (i, v) in dict\n        if\
    \ isa(i, String)\n            if islower(i)\n                count += 1\n    \
    \        end\n        end\n    end\n    if count == length(dict)\n        return\
    \ true\n    else \n        return false\n    end\nend", "    #1st check if the\
    \ dictionary is empty\n    if (length(keys(dict)) == 0)\n        return false\n\
    \    else\n        if (islower(keys(dict)[1]))\n            for key in keys(dict)\n\
    \                if (isupper(key))\n                    return false\n       \
    \         end\n            end\n        else\n            for key in keys(dict)\n\
    \                if (islower(key))\n                    return false\n       \
    \         end\n            end\n        end\n    end\n    return true\nend", " \
    \   upper_dict = Dict()\n    lower_dict = Dict()\n    for kv in keys(dict)\n \
    \       if kv == uppercase(kv)\n            upper_dict[kv] = dict[kv]\n      \
    \  else\n            lower_dict[kv] = dict[kv]\n        end\n    end\n    return\
    \ isempty(lower_dict) || isempty(upper_dict)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
