name: HumanEval_133_sum_squares
language: jl
prompt: "\"\"\"You are given a vector of numbers.\n    You need to return the sum\
  \ of squared numbers in the given vector,\n    round each element in the vector\
  \ to the upper int(Ceiling) first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n\
  \    14\n    >>> lst([1.0, 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n\
  \    84\n    >>> lst([1.4, 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n \
  \   6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
  \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
  \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
  \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
  \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
  \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nend", "    sum = 0\n    for item\
    \ in lst\n        sum += item*item\n    end\n    sum\nend", "    num=0\n    for\
    \ i in lst\n        num+=ceil(i)^2\n    end\n    return num\nend", "    i = 0\n\
    \    while i <= length(lst)\n        lst[i] = floor(lst[i])\n        i += 1\n\
    \    end\n    lst = lst .^ 2\n    return sum(lst)\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    lst = ceil.(lst)\n    sum = 0\n    for i in lst\n        sum += i^2\n\
    \    end\n    return sum\nend", "    for i in lst\n        lst[i] = round(lst[i])\n\
    \    end\n    return sum(lst.^2)\nend", "    # convert each element in vector\
    \ to the ceiling value\n    lst_ceil = ceil.(lst)\n    # sum of the square\n \
    \   sum_lst = sum(lst_ceil.^2)\n    return sum_lst\nend\nsum_squares([1.0, 2.0,\
    \ 3.0])", "    lst1 = Int64[]\n    for a in lst\n        push!(lst1,ceil(a))\n\
    \    end\n    ans = 0\n    for a in lst1\n        ans += a^2\n    end\n    return\
    \ ans\nend", "    return sum([ceil(x)^2 for x in lst])\nend", "    ceiling_lst\
    \ = ceil.(lst)\n    return int(sum(ceiling_lst.^2))\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    newlst = ceil.(lst)\n    sum = 0\n    for i in newlst\n        sum\
    \ += i * i\n    end\n    return sum\nend", "    return sum([x^2 for x in ceil.(lst)])\n\
    end\n ", "    s = 0\n    for i in lst\n        s += Int64(ceil(i))^2\n    end\n\
    \    return s\nend", "    x=ceil.(lst)\n    return sum(x.^2)\nend\nprintln(sum_squares([1.0,\
    \ 2.0, 3.0]))\nprintln(sum_squares([1.0, 4.0, 9.0]))\nprintln(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]))\nprintln(sum_squares([1.4, 4.2, 0.0]))\nprintln(sum_squares([-2.4,\
    \ 1.0, 1.0]))", "    return ceil.(lst).^2 |> sum |> Int64\nend", "    sum = 0\n\
    \    for i in lst\n        sum += Int64(ceil(i))*Int64(ceil(i))\n    end\n   \
    \ return sum\nend", "    lst_int = Int64[]\n    for i in lst\n        i = ceil(i)\n\
    \        push!(lst_int, i)\n    end\n    sum([x^2 for x in lst_int])\nend", " \
    \   total = 0\n    for i in lst\n        total += ceil(i) ^ 2\n    end\n    return\
    \ total\nend", "    lst = ceil.(lst)\n    sum=0\n    for x in lst\n        sum\
    \ += x^2\n    end\n    return sum\nend", "    \n    s=0\n    #@show(lst)\n   \
    \ for i in lst\n        #@show(i)\n        s=s+ceil(i)^2\n    end\n    #@show(s)\n\
    \    return s\nend", "    new_list = round.(lst, digits=0)\n    total = 0\n  \
    \  for i in new_list\n        total += i^2\n    end\n    return total\nend\n#\
    \ sum_squares([1.0, 2.0, 3.0])\n# sum_squares([1.0, 4.0, 9.0])\n# sum_squares([1.0,\
    \ 3.0, 5.0, 7.0])\n# sum_squares([1.4, 4.2, 0.0])\n# sum_squares([-2.4, 1.0, 1.0])",
  "  x = sum(map(ceil, lst)).^2\n  return x\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    sums = 0\n    lst = map(ceil, lst)\n    for i in lst\n        sums\
    \ += i^2\n    end\n    return sums\nend", "        sum = 0\n        for i in lst\n\
    \            sum += ceil(i)^2\n        end\n        return sum\n    end", "  \
    \  temp = Int64[]\n    for i in lst\n        i = ceil(i)\n        i = i*i\n  \
    \      push!(temp, i)\n    end\n    return sum(temp)\nend", "    return sum([i^2\
    \ for i in ceil.(lst)])\nend", "    sum_squares = 0\n    for x in lst\n      \
    \  sum_squares += ceil(x)^2\n    end\n    return sum_squares\nend\n        ",
  "    s=0\n    for i in lst\n        s=s+ceil(i)^2\n    end\n    return s\nend",
  "    s = 0\n    for i in 1:length(lst)\n        s += round(Int64, ceil(lst[i]))^2\n\
    \    end\n    return s\nend", "    return sum(ceil.(lst).^2)\nend", "    s = 0\n\
    \    for i in lst\n        s += ceil(i)^2\n    end\n    return s\nend", "    return\
    \ sum(ceil.(lst).^2)\nend", '    return sum(ceil.(lst).^2)', "    sum = 0\n  \
    \  for i in lst\n        sum += ceil(i)^2\n    end\n    return sum\nend", "  \
    \  sum = 0\n    for i = 1:length(lst)\n        x = ceil(lst[i])\n        sum +=\
    \ x^2\n    end\n    return sum\nend", "    s = 0\n    for i in lst\n        s\
    \ = s + ceil(i)^2\n    end\n    return s\nend", "    sum = 0\n    for i in lst\n\
    \        x = ceil(i)\n        sum += x^2\n    end\n    return sum\nend", "   \
    \ return sum(ceil.(lst).^2)\nend", "    summation = 0\n    for i in lst\n    \
    \    summation += ceil(i)*ceil(i)\n    end\n    return summation\nend", "    new_lst\
    \ = Int64[]\n    for i in lst\n        push!(new_lst,ceil(i))\n    end\n    return\
    \ sum(new_lst.^2)\n    \nend", "    for i in 1:length(lst)\n        lst[i] = ceil(lst[i])\n\
    \    end\n    x = 0\n    for i in 1:length(lst)\n        x += lst[i]^2\n    end\n\
    \    return x\nend", "    # return the sum of squared numbers in the given vector\n\
    \    return sum(Int.(ceil.(lst)).^2)\nend", "    lst = ceil.(lst)\n    x=0\n \
    \   for i in 1:length(lst)\n        x = x + lst[i]*lst[i]\n    end\n    return\
    \ x\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nend", "    return sum([round(lst[i])^2 for i in 1:length(lst)])\nend",
  "    lst = ceil.(lst)\n    sum = 0\n    for i = 1:length(lst)\n        sum += lst[i]^2\n\
    \    end\n    return sum\nend", "    return  Int64(sum(map(i->ceil(i)^2, lst)))\n\
    end", "    return sum([i*i for i in [ceil(x) for x in lst]])\nend", "    return\
    \ sum(round.(lst).^2)\nend", "    for i in 1:length(lst)\n        lst[i] = ceil(lst[i])\n\
    \    end\n    return sum(lst.^2)\nend", "    number = 0\n    for i in lst\n  \
    \      number += round(i) ^ 2\n    end\n    return number\nend", "    sum = 0\n\
    \    for i in lst\n        sum += round(i*i)\n    end\n    return sum\nend", " \
    \   sum = 0\n    for num in lst\n        sum += ceil(num)^2\n    end\n    return\
    \ sum\nend\n ", "    return sum(round.(lst).^2)\nend", "    \"\"\"My function\
    \ to return the sum of squared numbers\n        with the vector given\n      \
    \  \"\"\"\n    newlst = map(x -> ceil(x), lst)\n    out = sum(i->i^2, newlst)\n\
    \    return out\nend", "    sum = 0\n    for i in 1:length(lst)\n        sum +=\
    \ ceil(lst[i])^2\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        sum += round(Int64, i)^2\n    end\n    return sum\nend", "    res = 0\n\
    \    for i in lst\n        res += Int64(ceil(i))*Int64(ceil(i))\n    end\n   \
    \ return res\nend", "    lst = ceil.(lst)\n    return sum(x^2 for x in lst)\n\
    end", "    temp = ceil.(lst)\n    return Int64(sum(temp.^2))\nend", "    #round\
    \ each element in the vector to the upper int(Ceiling)\n    for i in 1:length(lst)\n\
    \       lst[i] = ceil(lst[i]) \n    end\n    total = 0 \n    for i in 1:length(lst)\n\
    \        total += lst[i]^2\n    end\n    return total\nend", "    m = map(x ->\
    \ round(x), lst)\n    m = map(x -> x^2, m)\n    return sum(m)\nend", "    \n \
    \   z = lst .^ 2\n    x = ceil.(z)\n    y = sum(x)\n    #return x\n    return\
    \ y\n    \nend", "    a=ceil.(lst)\n    b=a.^2\n    return sum(b)\nend", "   \
    \ \"\"\"Returns sum of all the squared elements in the vector\"\"\"\n    total\
    \ = 0\n    for i in lst\n        total += round(i, RoundUp)^2\n    end\n    return\
    \ total\nend", "    return sum(Int64(ceil.(lst)).^2)\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend", "   # your code here\n   sum = 0 \n   for i in 1:length(lst)\n  \
    \  a = ceil(lst[i])\n    sum += a*a\n   end\n   return sum\nend", "    lst = ceil.(lst)\n\
    \    return sum(map(x -> x^2, lst))\nend", "    return sum(ceil.(lst).^2)\nend",
  "    lst_squared = map(i -> ceil(i)^2, lst)\n    return sum(lst_squared)\nend",
  "    return sum(Int64.(ceil.(lst)).^2)\nend", "    \n    \"\"\"\n    >>> sum_squares([1.0,\
    \ 2.0, 3.0])\n    14\n    >>> sum_squares([1.0, 4.0, 9.0])\n    98\n    >>> sum_squares([1.0,\
    \ 3.0, 5.0, 7.0])\n    84\n    >>> sum_squares([1.4, 4.2, 0.0])\n    29\n    >>>\
    \ sum_squares([-2.4, 1.0, 1.0])\n    6\n    \"\"\"\n    total = 0\n    for i in\
    \ lst\n        i = ceil(i)\n        total += i^2\n    end\n    return total\n\
    end", "    \n   new_lst = map(ceil, lst)\n   \n   return sum(x->x^2, new_lst)",
  "    s=0\n    for i in lst\n        s=s+ceil(i)^2\n    end\n    return s\nend",
  "    \n    lst = ceil.(lst)\n    return sum(lst .^ 2)\nend", "    return sum(map(x\
    \ -> round(Int64, ceil(x))^2, lst))\nend", "    res = 0.0\n    for i in lst\n\
    \        x = Int64(ceil(i))\n        res += x^2\n    end\n    return res\nend",
  "    results = zeros(Int64, length(lst))\n    for i in 1:length(lst)\n        results[i]\
    \ = ceil(lst[i])^2\n    end\n    return sum(results)\nend", "    return sum([Int64(ceil(x))^2\
    \ for x in lst])\nend", "    sum = 0\n    for i in lst\n        sum += ceiling(i)^2\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i = 1:length(lst)\n    \
    \    sum += ceil(Int64,lst[i])*ceil(Int64,lst[i])\n    end\n    return sum\nend",
  "    lst2 = ceil.(lst)\n    lst3 = lst2.^2\n    return sum(lst3)\nend", "    \"\"\
    \"Return the sum of the upper int(Ceiling) of each element of the\n    vector\
    \ squared\"\"\"\n    sum = 0\n    for i in lst\n        sum += ceil(i) * ceil(i)\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in lst\n        sum +=\
    \ Int64(ceil(i)^2)\n    end\n    return sum\nend\nprintln(sum_squares([1.0, 2.0,\
    \ 3.0]))\nprintln(sum_squares([1.0, 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]))\nprintln(sum_squares([1.4, 4.2, 0.0]))\nprintln(sum_squares([-2.4,\
    \ 1.0, 1.0]))", "    total = 0\n    for x in lst\n        total += x^2\n    end\n\
    \    total |> Int64\nend", "    sum(round.(upper.(lst), RoundInt).^2)\nend", " \
    \   # Your code goes here!\n    lst_ceil = ceil.(lst)\n    sum = 0.0\n    for\
    \ i in lst_ceil\n        sum += i^2\n    end\n    return round(Int64, sum)\nend",
  "    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return sum\n\
    end", "    res = 0\n    for i in lst\n        res += Int64(ceil(i))^2\n    end\n\
    \    return res\nend", "    sum = 0\n    for i in 1:length(lst)\n        sum +=\
    \ round(lst[i])^2\n    end\n    return sum\nend", "    sum = 0\n    for i = 1:length(lst)\n\
    \        sum += (round(lst[i])*round(lst[i]))\n    end\n    return sum\nend",
  "    \"\"\" \n    >>> lst([1.0, 2.0, 3.0])\n    14\n    >>> lst([1.0, 4.0, 9.0])\n\
    \    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84\n    >>> lst([1.4, 4.2, 0.0])\n\
    \    29\n    >>> lst([-2.4, 1.0, 1.0])\n    6\n    \"\"\"\n    return sum([ceil(x)^2\
    \ for x in lst])", "    return round(sum(x -> x^2, lst))\nend", "    lst = ceil.(lst)\n\
    \    return sum(lst .^ 2)\nend", "    n = length(lst)\n    res = 0\n    for i\
    \ in 1:n\n        res += (ceil(lst[i]) * ceil(lst[i]))\n    end\n    return res\n\
    end", "    return sum(ceil.(lst).^2)\nend", "    return sum(map(x -> ceil(x)^2,\
    \ lst))\nend", "    n = length(lst)\n    s = 0\n    for i in 1:n\n        s +=\
    \ trunc(ceil(lst[i]))^2\n    end\n    return s\nend", "    s=0\n    for i in lst\n\
    \        s+=ceil(i)^2\n    end\n    return s\nend\nsum_squares([-2.4, 1.0, 1.0])",
  "   return sum(round.(Int64,lst).^2) \nend", "    sums = 0\n    for i in lst\n \
    \       sums += ceil(i)^2\n    end\n    return sums\nend", "    acc = 0\n    for\
    \ elem in lst\n        acc += (ceil(elem))^2\n    end\n    return acc\nend", " \
    \   x = ceil.(lst)\n    sum = 0\n    for i in x\n        sum += i^2\n    end\n\
    \    return sum\nend\nsum_squares([1.0, 3.0, 5.0, 7.0])", "    return round(sum(i->(i^2),lst))\n\
    \    ", "    return sum(round.(UInt64, lst.^2))\nend", "    sum=0\n    lst= ceil.(lst)\n\
    \    for i in lst\n        sum += Int64(i*i)\n    end\n    return sum\nend", " \
    \   return sum(round.(lst).^2)\nend", "    s = 0\n    for i in lst\n        s\
    \ = s + ceil(i)^2\n    end\n    return s\nend", "    return sum(ceil.(lst).^2)\n\
    end", "  for item in lst\n    return sum([x^2 for x in ceil.(lst)])\n  end\nend",
  "    sum_squares = 0\n    for i in 1:length(lst)\n        sum_squares += round(Int64,ceil(lst[i]))^2\n\
    \    end\n    return sum_squares\nend", "    return sum(ceil.(lst).^2)\nend",
  "    int_vect = ceil.(lst)\n    s_sum = sum(int_vect.^2)\n    return s_sum\nend",
  "    v_ceil = ceil.(lst) #divide each element by the ceiling of lst\n    v_ceil.^2\n\
    \    return sum(v_ceil)\nend", "    ceil_lst = ceil.(lst)\n    sum_lst = sum(ceil_lst)\n\
    \    return sum_lst^2\nend", "    new_lst = round.(lst, digits=Base.ceil)\n  \
    \  return sum(x^2 for x in new_lst)\nend", "    x = ceil.(lst)\n    return sum(x.^2)\n\
    end\n# lst([1.0, 2.0, 3.0])\n# lst([1.0, 4.0, 9.0])\n# lst([1.0, 3.0, 5.0, 7.0])\n\
    # lst([1.4, 4.2, 0.0])\n# lst([-2.4, 1.0, 1.0])\n ", "    \n    x = ceil.(lst)\n\
    \    s = 0\n    for i in x\n        s = s + i^2\n    end\n    return Int64(s)\n\
    end\n ", "    return sum([ceil(x)^2 for x in lst])\nend", "    #complete the function\n\
    \    x = ceil.(lst)\n    return x\nend", "    lst = ceil.(lst)\n    return sum(lst.^2)\n\
    end", "    \"\"\"\n        Returns sum of ints in the vector rounded to ceiling\
    \ and squared.\n        \"\"\"\n    return sum(ceil.(x)^2 for x in lst)\nend",
  "    lst_int = ceil.(lst)\n    lst_int = Int64.(lst_int)\n    lst_int2 = []\n  \
    \  for i in lst_int\n        push!(lst_int2, i^2)\n    end\n    sum(lst_int2)\n\
    end", "    lst_ceiling=ceil.(lst)\n    lst_squares = lst_ceiling.^2\n    return\
    \ sum(lst_squares)\nend ", "    for i in lst\n        lst[i] = Int64(ceil(lst[i]))\n\
    \    end\n    return sum(i*i for i in lst)\nend", "    squared = []\n    for i\
    \ = 1:length(lst)\n        push!(squared, ceil(lst[i])^2)\n    end\n    return\
    \ sum(squared)\nend\nprintln(sum_squares([1.0, 2.0, 3.0]))\nprintln(sum_squares([1.0,\
    \ 4.0, 9.0]))\nprintln(sum_squares([1.0, 3.0, 5.0, 7.0]))\nprintln(sum_squares([1.4,\
    \ 4.2, 0.0]))\nprintln(sum_squares([-2.4, 1.0, 1.0]))", "    new_list = ceil.(lst)\n\
    \    new_list = new_list.^2\n    return sum(new_list)\nend", "    return sum([round(x^2)\
    \ for x in lst])\nend", "    x = sum(ceil.(lst) .^ 2)\nend\nsum_squares([1.0,\
    \ 2.0, 3.0])", "    return Int64(sum(ceil.(lst).^2))\nend", "    return sum(floor.(x^2)\
    \ for x in lst)\nend", "    lst = lst .^ 2\n    sum = 0\n    for i = 1:length(lst)\n\
    \        sum += round(Int64, lst[i])\n    end\n    return sum\nend", "    return\
    \ sum(ceil.(lst).^2)\nend", "    ceiled_list = ceil.(lst)\n    return sum(x ->\
    \ x^2, ceiled_list)\nend", "    x = 0\n    for i in lst\n        x += ceil(i)\
    \ ^ 2\n    end\n    return x\nend", "    total = 0\n    for i in lst\n       \
    \ total += ceil(i)^2\n    end\n    return total\nend", "    \n    \n    \n   \
    \ \n    \n    \nend", "    res = 0\n    for element in lst\n        res += ceil(element)^2\n\
    \    end\n    return res\nend\n@test sum_squares([1.0, 2.0, 3.0]) == 14\n@test\
    \ sum_squares([1.0, 4.0, 9.0]) == 98\n@test sum_squares([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n@test sum_squares([1.4, 4.2, 0.0]) == 29\n@test sum_squares([-2.4, 1.0,\
    \ 1.0]) == 6\n ", "    res = 0\n    for i in lst\n        res += ceil(i)^2\n \
    \   end\n    return res\nend", "    return sum(map(x -> round(x)^2, lst))\nend",
  "    return sum(round.(lst).^2)\nend", "    return sum(ceil.(lst).^2)\nend", " \
    \   return sum(round.(ceil, lst) .^ 2)\nend", "    squared = Float64[]\n    for\
    \ i in lst\n        i = ceil(i)\n        push!(squared, i^2)\n    end\n    return\
    \ sum(squared)\nend", "    for i in 1:length(lst)\n        lst[i] = round(Int64,ceil(lst[i]))\n\
    \    end\n    sum(i->i^2,lst)\nend", "    int_vec = [ceil(x) for x in lst]\n \
    \   return sum(x^2 for x in int_vec)\nend", "    return Int64(sum(x^2 for x in\
    \ ceil.(lst))) \nend", "    floor = Array{Int64}(undef, length(lst))\n    for\
    \ i in eachindex(lst)\n        floor[i] = ceil(lst[i])\n    end\n    return sum(floor.^2)\n\
    end", "    ceiling = round.(lst, digits=0, RoundNearest())\n    sum = 0\n    for\
    \ i in ceiling\n        sum += i^2\n    end\n    return sum\nend", "    return\
    \  Int64(sum(ceil.(lst).^2))\nend", "    m = ceil.(lst)\n    return sum(round.((m).^2))\n\
    end", "    \"\"\"\n    This function takes a vector of float64 elements as a parameter\n\
    \    and returns the sum of squared numbers in the given vector,\n    after ceil\
    \ each element in the vector to the upper int\n    \"\"\"\n    v = ceil.(lst)\n\
    \    # To be able to use map() function, it must be a vector of integer \n   \
    \ return Int64(sum(map(x->x^2, v)))\n    # sum(x->x^2, v) is the same as sum(x->x^2,\
    \ v)\nend", "    new_lst = ceil.(lst)\n    return sum(x->x^2, new_lst)\nend",
  "    res = 0\n    for i in lst\n        res += trunc(ceil(i))^2\n    end\n    return\
    \ res\nend", "    # sum_squares = 0\n    # # for i in lst:\n    # #     sum_squares\
    \ += i*i\n    # # end\n    # return sum_squares\n    return sum(ceil.(lst).^2)\n\
    end", "    return round(sum(x -> x*x,map(ceil,lst)))\nend\n ", "    lst = ceil.(lst)\n\
    \    sum(x^2 for x in lst)\nend", "    output = 0\n    for num in lst\n      \
    \  output += ceil(num)^2\n    end\n    return output\nend", "    a = ceil.(lst)\n\
    \    return sum(a.^2)\nend", "    sum = 0\n    for num in lst\n        sum +=\
    \ ceil(num)^2\n    end\n    return sum\nend", "    for i in eachindex(lst)\n \
    \       lst[i] = ceil(lst[i])\n    end\n    sum = 0\n    for i in eachindex(lst)\n\
    \        sum += lst[i]^2\n    end\n    return sum\nend", "    res = 0\n    for\
    \ i in lst\n        res += ceil(i)^2\n    end\n    return res\nend\n    \n ",
  "    return ceil.(lst) |> x -> sum(x.^2)\nend", "  r = map(x -> ceil(x), lst)\n\
    \  return sum(map(x -> x*x, r))\nend", "    lst = ceil.(lst)\n    return lst'*lst\n\
    end", "    return(sum(ceil.(Int64, lst).^2))\nend", "    return round(sum(map(s->s^2,lst)))\n\
    end", "    # YOUR CODE HERE\n    raise NotImplementedError()\nend", "    lst2\
    \ = lst .- 1\n    lst3 = ceil.(lst2)\n    lst4 = lst3 .^ 2\n    lst5 = sum(lst4)\n\
    \    lst6 = Int64(lst5)\n    return lst6\nend", "    lst_squared = [ceil(x) for\
    \ x in lst]\n    lst_squared = [x^2 for x in lst_squared]\n    return sum(lst_squared)\n\
    end", "  sum = 0\n  for x in lst\n    sum += ceil(x)^2\n  end\n  return sum\n\
    end", "    output = 0\n    for x in lst\n        if x > 0\n            output\
    \ += ceil(x)^2\n        else\n            output += floor(x)^2\n        end\n\
    \    end\n    return output\nend", "    lst = ceil.(lst)\n    total = 0\n    for\
    \ i in lst\n        total += i^2\n    end\n    return total\nend", "    sum =\
    \ 0\n    for number in lst\n        sum += round(number)^2\n    end\n    return\
    \ sum\nend", "    return sum(ceil.(lst).^2)\nend", "    \"\"\"SUM_SQUARES(lst::Vector{Float64})::Int64\n\
    \    \n    Description:\n        This function will take a vector of numbers\n\
    \        and return the sum of the squared numbers in that vector.\n        Before\
    \ it adds them it will round the numbers \n        to the nearest upper integer\
    \ value.\n    \n    Input Parameters:\n        lst::Vector{Float64}\n        \
    \    A list of numbers to square\n            and sum.", "    sum=0\n    for element\
    \ in lst\n        sum += ceil(element)^2\n    end\n    return sum\nend", "   \
    \ sum = 0\n    for item in lst\n        sum += ceil(item)^2\n    end\n    return\
    \ sum\nend", "    x = 0\n    y = 0\n    w = 0\n    while x < length(lst)\n   \
    \     y = ceil(lst[x])\n        w = w + y^2\n        x = x + 1\n    end\n    return\
    \ w\nend", "  return sum([round(Int64, i*i) for i in lst])\nend", "  println(lst)\n\
    \  for i in eachindex(lst)\n    lst[i] = round(lst[i])\n  end\n  println(lst)\n\
    \  sum = 0\n  for i in eachindex(lst)\n    sum += lst[i]^2\n  end\n  return sum\n\
    end", "    return sum(ceil.(lst).^2)\nend", "    n = 0\n    for i in lst\n   \
    \     n += ceil(i)^2\n    end\n    return n\nend", "    #Should return sum of\
    \ squares of upper int(ceiling)ed elements in vector\n    #assuming Float64 input\
    \ vector\n    return sum(ceil.(lst).^2)\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    \"\"\"This function takes as an input a vector of numbers and returns\
    \ the sum of squared numbers in the given vector\"\"\"\n    ceiling = ceil.(lst)\n\
    \    lst_squared = ceil.(lst).^2\n    return sum(lst_squared)\nend", "   \n  \
    \  # lst_new = collect(round.(lst, digits=0))\n    lst_new = ceil.(lst)\n    #\
    \ lst_new = Int64[]\n    # for i in lst\n    #     push!(lst_new,round(i))\n \
    \   # end\n    # println(lst_new)\n    return sum(lst_new.^2)\nend", "    ns =\
    \ lst |> map(ceil) |> map(x -> x^2)\n    return sum(ns)\nend", "    return sum(round.(lst).^2)\n\
    end", "    return ceil.(sum(ceil.(lst).^2))\nend", "    squares = 0\n    for i\
    \ in lst\n        x = ceil(i)\n        squares += x*x\n    end\n    return squares\n\
    end", "    #return sum([ceil(i)^2 for i in lst])  # This is just one line, which\
    \ does the job\n    # We can also use a for loop to do the same in multiple lines,\
    \ which is more readable\n    r = 0\n    for i in lst\n        r += ceil(i)^2\n\
    \    end\n    return r\nend", "    sum = 0\n    for i in lst\n        sum += round(i)^2\n\
    \    end\n    return sum\nend", "  totalsq = 0\n  for i in 1:length(lst)\n   \
    \ totalsq += trunc(Int64,lst[i])*trunc(Int64,lst[i])\n  end\n  return totalsq\n\
    end", "    return sum(lst.^2)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
