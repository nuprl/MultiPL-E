name: HumanEval_151_double_the_difference
language: jl
prompt: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
  \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
  \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
  \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    end\n    s = 0\n   \
    \ for i in lst\n        if i > 0 && mod(i, 2) == 1\n            s += i*i\n   \
    \     end\n    end\n    return s\nend", "    \"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n    if length(lst)==0\n\
    \        return 0\n    else\n        return 2*sum([x^2 for x in lst if isodd(x)\
    \ && x>0])\n    end\nend", "    # your code here\n    pass\nend", "    sum = 0\
    \ \n    for i in lst\n        if(isodd(Int64(i))==true)\n            sum = sum\
    \ + i^2\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ lst\n        if (i % 2 != 0) & (i > 0)\n            sum += i * i\n        end\n\
    \    end\n    return sum\nend", "  sm = 0 \n  s = 0\n  for i in lst \n    if i%2\
    \ != 0 && i >= 0\n      sm += i^2\n    end\n  end\n  return sm\nend", "    sum\
    \ = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\n# b.", "    s=0\n    for i in lst\n\
    \        if i>0 && i%2!=0\n            s+=i^2\n        end\n    end\n    return\
    \ s\nend", "    s = 0\n    for x in lst\n        if x % 2 == 1\n            s\
    \ += x * x\n        end\n    end\n    return s\nend", "    res = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            res += round(Int64, x)^2\n      \
    \  end\n    end\n    return res\nend", "    #your code here\nend", "    nums_odd\
    \ = [i for i in lst if i%2 == 1]\n    if !isempty(nums_odd)\n        odd_sum =\
    \ sum(nums_odd.^2)\n        return 2*odd_sum\n    else\n        return 0\n   \
    \ end\nend", "    total = 0\n    for i in lst\n        if i > 0 && i%2==1\n  \
    \          total += i^2\n        end\n    end\n    return total\nend", "    sum\
    \ = 0\n    for x in lst\n        if x >= 0 && isinteger(x)\n            if x %\
    \ 2 != 0\n                sum += x*x\n            end\n        end\n    end\n\
    \    return sum\nend", "    y = 0\n    for i = 1:length(lst)\n        if isodd(lst[i])\
    \ == true && lst[i]>0\n            y = y + lst[i]^2\n        end\n    end\n  \
    \  return y\nend", "    if length(lst) == 0 \n        return 0\n    end\n    tot\
    \ = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            tot += i^2\n\
    \        end\n    end\n    return tot * 2\nend", "    odd = 0\n    even = 0\n\
    \    for i in lst\n        if i % 2 == 0\n            even += i*i\n        else\n\
    \            odd += i*i\n        end\n    end\n    return 2(odd - even)\nend",
  "    is_odd = mod.(lst, 2) .== 1\n    sq_odd = lst[is_odd] .^ 2\n    return 2sum(sq_odd)\n\
    end", "    return sum([x ^ 2 for x in lst if floor(x) == x && x % 2 == 1])\nend\n\
    \    \nprint(\"(Test 1) input: [1, 3, 2, 0], expected output: 10, actual output:\
    \ \", double_the_difference([1, 3, 2, 0]))\nprint(\"(Test 2) input: [-1, -2, 0],\
    \ expected output: 0, actual output: \", double_the_difference([-1, -2, 0]))\n\
    print(\"(Test 3) input: [9, -2], expected output: 81, actual output: \", double_the_difference([9,\
    \ -2]))\nprint(\"(Test 4) input: [0], expected output: 0, actual output: \", double_the_difference([0]))",
  "    sum_of_squares = 0\n    for e in lst\n        if (e>0) && (e%2 == 1)\n    \
    \        sum_of_squares += e*e\n        end\n    end\n    sum_of_squares\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
