name: HumanEval_151_double_the_difference
language: jl
prompt: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
  \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
  \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
  \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    end\n    s = 0\n   \
    \ for i in lst\n        if i > 0 && mod(i, 2) == 1\n            s += i*i\n   \
    \     end\n    end\n    return s\nend", "    \"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n    if length(lst)==0\n\
    \        return 0\n    else\n        return 2*sum([x^2 for x in lst if isodd(x)\
    \ && x>0])\n    end\nend", "    # your code here\n    pass\nend", "    sum = 0\
    \ \n    for i in lst\n        if(isodd(Int64(i))==true)\n            sum = sum\
    \ + i^2\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in\
    \ lst\n        if (i % 2 != 0) & (i > 0)\n            sum += i * i\n        end\n\
    \    end\n    return sum\nend", "  sm = 0 \n  s = 0\n  for i in lst \n    if i%2\
    \ != 0 && i >= 0\n      sm += i^2\n    end\n  end\n  return sm\nend", "    sum\
    \ = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\n# b.", "    s=0\n    for i in lst\n\
    \        if i>0 && i%2!=0\n            s+=i^2\n        end\n    end\n    return\
    \ s\nend", "    s = 0\n    for x in lst\n        if x % 2 == 1\n            s\
    \ += x * x\n        end\n    end\n    return s\nend", "    res = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            res += round(Int64, x)^2\n      \
    \  end\n    end\n    return res\nend", "    #your code here\nend", "    nums_odd\
    \ = [i for i in lst if i%2 == 1]\n    if !isempty(nums_odd)\n        odd_sum =\
    \ sum(nums_odd.^2)\n        return 2*odd_sum\n    else\n        return 0\n   \
    \ end\nend", "    total = 0\n    for i in lst\n        if i > 0 && i%2==1\n  \
    \          total += i^2\n        end\n    end\n    return total\nend", "    sum\
    \ = 0\n    for x in lst\n        if x >= 0 && isinteger(x)\n            if x %\
    \ 2 != 0\n                sum += x*x\n            end\n        end\n    end\n\
    \    return sum\nend", "    y = 0\n    for i = 1:length(lst)\n        if isodd(lst[i])\
    \ == true && lst[i]>0\n            y = y + lst[i]^2\n        end\n    end\n  \
    \  return y\nend", "    if length(lst) == 0 \n        return 0\n    end\n    tot\
    \ = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            tot += i^2\n\
    \        end\n    end\n    return tot * 2\nend", "    odd = 0\n    even = 0\n\
    \    for i in lst\n        if i % 2 == 0\n            even += i*i\n        else\n\
    \            odd += i*i\n        end\n    end\n    return 2(odd - even)\nend",
  "    is_odd = mod.(lst, 2) .== 1\n    sq_odd = lst[is_odd] .^ 2\n    return 2sum(sq_odd)\n\
    end", "    return sum([x ^ 2 for x in lst if floor(x) == x && x % 2 == 1])\nend\n\
    \    \nprint(\"(Test 1) input: [1, 3, 2, 0], expected output: 10, actual output:\
    \ \", double_the_difference([1, 3, 2, 0]))\nprint(\"(Test 2) input: [-1, -2, 0],\
    \ expected output: 0, actual output: \", double_the_difference([-1, -2, 0]))\n\
    print(\"(Test 3) input: [9, -2], expected output: 81, actual output: \", double_the_difference([9,\
    \ -2]))\nprint(\"(Test 4) input: [0], expected output: 0, actual output: \", double_the_difference([0]))",
  "    sum_of_squares = 0\n    for e in lst\n        if (e>0) && (e%2 == 1)\n    \
    \        sum_of_squares += e*e\n        end\n    end\n    sum_of_squares\nend",
  "    sum = 0\n    for i in lst\n        if i%2 == 1 && i>0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend", "    val = 0\n    for i in lst\n\
    \        if i%2 == 1 && i > 0 && floor(i) == i\n            val += i^2\n     \
    \   end\n    end\n    return val\nend", "    a=0\n    b=0\n    for x in lst\n\
    \        if x>0\n            if x%2==1\n                a=a+x^2\n        elseif\
    \ x<0\n            if x%2==-1\n                b=b+x^2\n        end\n    end\n\
    \    return 2*(a-b)\nend\ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1,\
    \ -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])", "    non_ints\
    \ = isinteger.(lst)\n    lst = lst[non_ints]\n    lst = lst[lst .> 0]\n    lst\
    \ = lst[isodd.(lst)]\n    sum_squares = sum(lst.^2)\n    return sum_squares\n\
    end", "    sum = 0\n    for i = 1:length(lst)\n        if isodd(lst[i]) == 1 &&\
    \ lst[i] > 0\n            sum += lst[i] * lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    n = 0\n    for i in lst\n        if typeof(i) == Int64 && i\
    \ % 2 != 0\n            n += i^2\n        end\n    end\n    return n\nend", " \
    \   if length(lst) == 0 \n        return 0\n    end\n    output = 0\n    for i\
    \ in 1:length(lst)\n        if lst[i]%2 != 0\n            output += (lst[i]*lst[i])\n\
    \        end\n    end\n    return output\nend", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1 && i >= 0\n            sum += i^2\n        end\n    end\n\
    \    return sum\nend", "    sum_of_odds = 0\n    for n in lst\n        if isodd(n)\n\
    \            sum_of_odds += n^2\n        end\n    end\n    return sum_of_odds\n\
    end", "    n = 0\n    for elem in lst\n        if elem>0\n            if elem%2\
    \ == 1\n                n += elem^2\n            end\n        end\n    end\n \
    \   return n\nend", "    s = 0\n    for i in 1:length(lst)\n        if lst[i]%2==1\
    \ && lst[i]>0\n            s += lst[i]^2\n        end\n    end\n    return s\n\
    end", "    n = 0\n    for x in lst\n        if x > 0 && trunc(x) == x && mod(x,\
    \ 2) == 1\n            n += x^2\n        end\n    end\n    return n\nend", " \
    \   \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n    pass\n\
    \    if length(lst)==0\n        return 0\n    end\n    sum = 0\n    for i in lst\n\
    \        if i % 2 != 0 && i > 0\n            sum = sum + (i - 1)^2\n        end\n\
    \    end\n    return sum\nend", "    sum_of_squares = 0\n    for n in lst\n  \
    \      if abs(round(n, digits=0)-n) < 1e-12\n            if round(n, digits=0)\
    \ > 0\n                if round(n, digits=0) % 2 == 1\n                    sum_of_squares\
    \ += round(n, digits=0)^2\n                end\n            end\n        end\n\
    \    end\n    return sum_of_squares\nend\n            ", "    return sum([x^2\
    \ for x in lst if isinteger(x) & (x>0) & isodd(x)])\nend", "    # initialize the\
    \ sum to 0\n    sum = 0\n    # iterate over the entries in the list\n    for i\
    \ in lst\n        # ignore negative numbers or non-integers\n        if i < 0\
    \ || (i % 1) != 0\n            continue\n        # if the number is odd, add its\
    \ square to the sum\n        elseif (i % 2) != 0\n            sum += i^2\n   \
    \     end\n    end\n    # return the sum\n    return sum\nend", "    return sum([(x*x)\
    \ for x in lst if x > 0 && mod(x, 2) == 1])\nend", "    \"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    if length(lst) == 0\n        return 0\n    end\n    sum = 0\n\
    \    for i in 1:length(lst)\n        if lst[i] > 0 && isinteger(lst[i]) && lst[i]\
    \ % 2 != 0\n            sum += lst[i]^2\n        end\n    end\n    return sum\n\
    end", "    res = 0\n    for e in lst\n        if isnan(e) == false && isfinite(e)\
    \ == true && isinteger(e) == true && e % 2 != 0 && e >= 0\n            res +=\
    \ e^2\n        end\n    end\n    return res\nend", "    total = 0\n    for x in\
    \ lst\n        if (floor(x) == x) & (x > 0) & (x % 2 == 1)\n            total\
    \ += x^2\n        end\n    end\n    return total\nend", "    # YOUR CODE HERE\n\
    \    oddsquaresum = 0\n    for i in 1:length(lst)\n        if lst[i]>0 && iseven(lst[i])==false\n\
    \            oddsquaresum += lst[i]^2\n        end\n    end\n    return oddsquaresum\n\
    end\n# Test Problem 3\n# You can test your solution using the following input",
  "    # your code here\nend\n\"\"\"\n    Take a vector and return a vector that is\
    \ the same as the original,\n    but with all the numbers that are negative replaced\
    \ with the value\n    stored in num_to_replace.\n    \n    >>> replace_negative_numbers([1,\
    \ -2, -3, 4, 5], 0)\n    [1, 0, 0, 4, 5]\n    >>> replace_negative_numbers([],\
    \ 42)\n    []\n    >>> replace_negative_numbers([42], 42)\n    [42]\n    >>> replace_negative_numbers([0,\
    \ -1, -2, -3, -4, -5], -42)\n    [0, -42, -42, -42, -42, -42]\n    \"\"\"", " \
    \   # We use an in-place algorithm to calculate the sum,\n    # which means we\
    \ can ignore all negative numbers and\n    # non-integers!\n    sum = 0\n    for\
    \ n in lst\n        if (isinteger(n) && n >= 0)\n            if (n % 2 != 0)\n\
    \                sum += n*n\n            end\n        end\n    end\n    return\
    \ 2*sum\nend", "    nums = filter(x -> isodd(x) && x >= 0, lst)\n    if length(nums)\
    \ == 0\n        return 0\n    else\n        return 2 * sum(nums.^2)\n    end\n\
    end", "    pass\n    # this is a stub, replace this line with your implementation\n\
    end", "    lst1 = lst[lst .% 2 .!= 0]\n    lst2 = lst1[lst1 .> 0]\n    if length(lst2)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst2\n \
    \           sum += i^2\n        end\n        return 2*sum\n    end\nend\n ", " \
    \   sum = 0\n    for elem in lst\n        if elem%2 == 1\n            sum += (elem)^2\n\
    \        end\n    end\n    return sum\nend", "    the_sum = 0.0\n    for i in\
    \ lst\n        if i >= 0 && mod(i, 2) == 1\n            the_sum += i^2\n     \
    \   end\n    end\n    the_sum\nend", "    # Hint: Use a for loop, like the first\
    \ example in class. Remember that you\n    # can check if an integer is odd with\
    \ the function isodd().\n    # You can also create an empty vector and push elements\
    \ to it.\n    \nend", "    \"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\n    if isempty(lst)\n        return\
    \ 0\n    elseif lst[1]%2 != 0\n        return lst[1]^2 + double_the_difference(lst[2:end])\n\
    \    else\n        return double_the_difference(lst[2:end])\n    end\nend", " \
    \   return sum(lst[:2:end].^2)\nend\n@assert double_the_difference([1, 3, 2, 0])\
    \ == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n@assert double_the_difference([0])\
    \ == 0\n ", "    totalsq = 0\n    for i = 1:length(lst)\n        if typeof(lst[i])\
    \ == Int64 && lst[i] % 2 != 0\n            totalsq += lst[i]^2\n        end\n\
    \    end\n    return totalsq\nend", "    return sum(x^2 for x in lst if x % 2\
    \ == 1 && x > 0)\nend", "  \n    # 1. create an empty vector to store odd numbers\n\
    \    # 2. iterate through the elements of the input vector\n    # 3. extract only\
    \ odd numbers\n    # 4. store the odd numbers in the vector created at 1.\n  \
    \  # 5. calculate the sum of squares of odd numbers\n    # 6. return the result\n\
    \    \n    odd_vector = []", "    squares = 0\n    for i = 1:length(lst)\n   \
    \     if lst[i] % 2 == 1\n            squares += (lst[i]^2)\n        end\n   \
    \ end\n    squares\nend", "    sum = 0\n    for i = 1:length(lst)\n        if\
    \ (lst[i] != 0 && lst[i]%2 == 1)\n            sum += lst[i]^2\n        end\n \
    \   end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if (typeof(i)\
    \ == Int64) && (i > 0) && (i % 2 != 0)\n            sum += i^2\n        end\n\
    \    end\n    return sum\nend", "    output = 0\n    for (idx, item) in enumerate(lst)\n\
    \        if typeof(item) != Int64 && typeof(item) != Int32 \n            continue\n\
    \        end\n        if item % 2 == 1 && item >= 0\n            output += item^2\n\
    \        end\n    end\n    return output\nend", "   x = 0\n   for i in lst\n \
    \      if i%2 != 0 && i>0\n           x += i^2\n       end\n   end\n   return\
    \ x\nend", "    if length(lst) == 0\n        return 0\n    end\n    total = 0\n\
    \    for i = 1:length(lst)\n        if (mod(lst[i], 2) == 1) && (lst[i] > 0)\n\
    \            total += lst[i]^2\n        end\n    end\n    return total\nend",
  "    sum = 0\n    for i in lst\n        if i < 0 || i % 2 == 0\n            continue\n\
    \        end\n        sum += i^2\n    end\n    return sum\nend", "    total::Int64\
    \ = 0\n    for x in lst\n        if typeof(x) == Int64 && x > 0 && x % 2 == 1\n\
    \            total += x^2\n        end\n    end\n    return total\nend", "   \
    \ i = 0::Int64\n    for x in lst\n        if x%2 != 0 && x>0 && x%Int64(x) ==\
    \ 0\n            i += x*x\n        end\n    end\n    return i\nend", "    n =\
    \ 0\n    for i in lst\n        if i % 2 != 0\n            n += i^2\n        end\n\
    \    end\n    return n\nend", "    \"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n    if length(lst)\
    \ == 0\n        return 0\n    elseif lst[1] > 0 && lst[1] % 2 == 1\n        return\
    \ lst[1]^2 + double_the_difference(lst[2:end])\n    else\n        return double_the_difference(lst[2:end])\n\
    \    end\nend", "    if isempty(lst)\n        return 0\n    else\n        sum\
    \ = 0\n        for i = 1:length(lst)\n            if (isodd(lst[i]) && lst[i]\
    \ > 0)\n                sum += lst[i]^2\n            end\n        end\n      \
    \  return sum\n    end\nend", "    nums = 0\n    for num in lst\n        if isnumber(num)\
    \ && num % 2 == 1\n            nums += num^2\n        end\n    end\n    return\
    \ nums\nend", "    total = 0\n    for i in lst\n        if i % 2 == 1 && i >=\
    \ 0\n            total += i^2\n        end\n    end\n    return total\nend", " \t\
    \n\t#find odd numbers in vector\n\todds = findall(x -> mod(x,2) == 1, lst)\n\t\
    #map square\n\tsquares = map(x -> x^2, odds)\n\t#reduce sum \n\ttotal = reduce(+,\
    \ squares)\n\t#return total\n\treturn total\nend", "    count = 0\n    for i in\
    \ lst\n        if (i >= 0) & (floor(i) == i) & (mod(i,2) != 0)\n            count\
    \ += i * i\n        end\n    end\n    return count\nend", "    \n    sum_of_odd_squares\
    \ = 0\n    \n    for element in lst\n        if typeof(element) == Int64 && element\
    \ >= 0 && element % 2 != 0\n            sum_of_odd_squares += element^2\n    \
    \    end\n    end\n    return sum_of_odd_squares * 2\nend", "    sum::Int64 =\
    \ 0\n    for x in lst\n        if x == Int64(x) && x >= 0 && isodd(x)\n      \
    \      sum += x^2\n        end\n    end\n    return sum\nend", "    s = 0\n  \
    \  for elem in lst\n        if elem > 0 && typeof(elem) == Int64 && elem % 2 ==\
    \ 1\n            s += elem * elem\n        end\n    end\n    return s\nend", " \
    \   n = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 != 0\n\
    \            n += i^2\n        end\n    end\n    return n\nend", "    \"\"\"\n\
    \    Given a vector of numbers, return twice the difference between the maximum\
    \ \n    number and the minimum number.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    4\n    >>> double_the_difference([-1, -2, 0])\n    4\n    >>>\
    \ double_the_difference([9, -2])\n    18\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    return\
    \ sum(x^2 for x in lst if x % 2 == 1)\nend", "    counter = 0\n    for x in lst\n\
    \        if iseven(x)\n            counter += x^2\n        end\n    end\n    return\
    \ counter\nend", "    sum = 0\n    for i in 1:length(lst)\n        if lst[i] >\
    \ 0 && trunc(lst[i]) == lst[i] && trunc(lst[i]) % 2 != 0\n            sum += lst[i]^2\n\
    \        end\n    end\n    return sum\nend", "    return 2*(sum([x^2 for x in\
    \ lst if x%2 != 0 && x >= 0]))\nend", "    return double_the_difference_helper(lst,\
    \ 0)\nend", "    out = 0\n    for i in lst\n        if isinteger(i) && i>0\n \
    \           if isodd(i)\n                out += i^2\n            end\n       \
    \ end\n    end\n    return out\nend", "  odd_squares = map(x -> x^2, filter(x\
    \ -> mod(Int64(x), 2) == 1, filter(x -> x >= 0, lst)))\n  if isempty(odd_squares)\n\
    \    0\n  else\n    sum(odd_squares)\n  end\nend", "    odd_numbers = get_odd_numbers(lst)\n\
    \    sum_of_squares = sum(x -> x^2, odd_numbers)\n    return sum_of_squares\n\
    end", "    odd_square_sum = 0\n    for elem in lst\n        if (typeof(elem) ==\
    \ Int64 || typeof(elem) == Int32) && elem >= 0\n            if elem % 2 == 1\n\
    \                odd_square_sum += elem^2\n            end\n        end\n    end\n\
    \    return odd_square_sum\nend\n ", "    d = 0\n    for e in lst\n        if\
    \ e % 2 == 1\n            d += e*e\n        end\n    end\n    return d\nend",
  "    sum_of_squares = 0\n    for element in lst\n        if Int64(element) % 2 ==\
    \ 1\n            sum_of_squares += element^2\n        end\n    end\n    return\
    \ sum_of_squares\nend", "    # YOUR CODE HERE\n    sum = 0\n    for x in lst\n\
    \        if x%2 == 0 || x < 0\n            continue\n        else\n          \
    \  sum += x*x\n        end\n    end\n    return sum\nend", "    out=0\n    for\
    \ i in 1:length(lst)\n        if (lst[i]%2==1) & (lst[i]>0)\n            out+=lst[i]^2\n\
    \        end\n    end\n    return out\nend\n\"\"\"\n    Given a string, return\
    \ a new string where every occurrence of \" and @\n    has been replaced with\
    \ the string \"at\".\n    \n    >>> replace_at(\"It is @ fun to eat an @pple.\"\
    )\n    \"It is at fun to eat an apple.\"\n    >>> replace_at(\"@t is not a bird.\"\
    )\n    \"at is not a bird.\"\n    >>> replace_at(\"@\")\n    \"at\"\n    >>> replace_at(\"\
    \")\n    \"\"\n    \"\"\"", "    total = 0\n    for i in lst\n        if i % 2\
    \ == 1 && i > 0\n            total += i^2\n        end\n    end\n    return total\n\
    end", "    sum(x^2 for x in lst if isodd(x) && x >= 0)\nend\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0", "    sum_odd = 0\n   \
    \ for i in lst\n        if (i%2 != 0) & (i >= 0)\n            sum_odd += i^2\n\
    \        end\n    end\n    return sum_odd\nend", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n            count +=\
    \ (i*i)\n        end\n    end\n    return count\n    # Replace return 0 with your\
    \ code\nend\n ", "    sum = 0\n    for i = 1:length(lst)\n        if lst[i] %\
    \ 2 == 1\n            sum += lst[i]^2\n        end\n    end\n    return sum\n\
    end", "    return 0\nend", "    return 0\nend", "    s=0\n    for i in lst\n \
    \       if i%2 != 0\n            s += i^2\n        end\n    end\n    return s\n\
    end", "    n = 0\n    sum_squares = 0\n    while n < length(lst)\n        if isinteger(lst[n])\
    \ && lst[n] > 0\n            if mod(lst[n], 2) == 1\n                sum_squares\
    \ += lst[n]^2\n            end\n        end\n        n += 1\n    end\n    return\
    \ sum_squares * 2\nend", "    m = 0\n    for i in lst\n        if (round(i)%2)\
    \ != 0 && i >= 0\n            m += i^2\n        end\n    end\n    return m\nend\n\
    \    \n    ", "    # YOUR CODE HERE\n    lst_squared = map(x -> x^2,lst)\n   \
    \ sum = 0\n    for i in lst_squared\n        if i%2 == 1 \n            sum +=\
    \ i\n        end\n    end\n    return sum\nend", "    if isempty(lst)\n      \
    \  return 0\n    else\n        return sum([x^2 for x in lst if !isinteger(x) ||\
    \ x<0])*2\n    end\nend", "    return sum(lst .^ 2 .* isodd.(lst .* iseven.(lst)))\n\
    end", "    \"\"\"\n    Given a vector of numbers, return the sum of squares of\
    \ the numbers\n    in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n\
    \    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\n \n    # YOUR CODE HERE\n    for i in\
    \ lst\n        if isinteger(i)\n            if i%2 == 0\n                if i\
    \ >= 0\n                    return (i-1)^2\n                else\n           \
    \         return 0\n        else\n            return 0\n        end\n    end\n\
    end", "    total = 0\n    for x in lst\n        if isodd(x) && x > 0\n       \
    \     total += x*x\n        end\n    end\n    return total\nend", "    # note\
    \ that the output is an Int64, not a Float64\n    total::Int64 = 0\n    for number\
    \ in lst\n        if isodd(number) && number > 0\n            total += number^2\n\
    \        end\n    end\n    return total\nend", "    total = 0\n    for i = 1:length(lst)\n\
    \        if lst[i]%2 == 1\n            total += lst[i]^2\n        end\n    end\n\
    \    return total\nend", "    sum = 0\n    for x in lst\n        if isinteger(x)\
    \ && x >= 0 && x % 2 != 0\n            sum += x^2\n        end\n    end\n    return\
    \ sum\nend", "    # YOUR CODE HERE\n    nums = 0\n    for i in 1:length(lst)\n\
    \        if(lst[i]<0)\n            continue\n        elseif(lst[i]%2==1)\n   \
    \         nums += lst[i]^2\n        end\n    end\n    return nums\nend", "   \
    \ n = 0\n    for i in lst\n        if i%2 == 1 && i>0\n            n = n + i^2\n\
    \        end\n    end\n    return n\nend", "    \"Replace this docstring with\
    \ your solution!\"\n    s = 0\n    for i in lst\n        if i > 0 && i % 2 ==\
    \ 1\n            s += i^2\n        end\n    end\n    return s\nend", "    sum_squares_odds\
    \ = 0\n    for x in lst\n        if x % 2 == 1 \n            sum_squares_odds\
    \ += x^2\n        end\n    end\n    return sum_squares_odds * 2\nend", "    sum\
    \ = 0\n    for i in 1:length(lst)\n        if (lst[i] < 0) || (trunc(lst[i]) !=\
    \ lst[i])\n            continue\n        elseif (trunc(lst[i]) % 2) == 1\n   \
    \         sum += lst[i]^2\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for x in lst\n        if x>0 && remainder(x,2)==1\n            sum\
    \ += x^2\n        end\n    end\n    return sum\nend", "    \n    # create a function\
    \ that checks if elements in the vector are odd integers\n    function isodd(x)::Bool\n\
    \        if (x % 2 != 0) & (x % 1 == 0) & (x >= 0)\n            return true\n\
    \        else\n            return false\n        end\n    end\n    \n    # create\
    \ a new vector of 0s\n    lst_odd = zeros(Int64, length(lst))\n    \n    # fill\
    \ the new vector with 1s where the elements of the original vector are odd integers\n\
    \    for i in 1:length(lst)\n        if isodd(lst[i])\n            lst_odd[i]\
    \ = 1\n        end\n    end\n    \n    # return the sum of squares of the original\
    \ vector where the odd integers are\n    return sum(lst_odd.*lst.*lst)\nend",
  "    return 2*(sum([x^2 for x in lst if x > 0 && x%2 == 1]))\nend", "    diff =\
    \ 0\n    for element in lst\n        if element > 0 && isinteger(element)\n  \
    \          if element % 2 == 1\n                diff += element ^ 2\n        \
    \    end\n        end\n    end\n    return diff\nend", "    total::Int64 = 0\n\
    \    for num in lst\n        if num < 0 || mod(num, 1) != 0\n            continue\n\
    \        end\n        if mod(num, 2) == 1\n            total += num^2\n      \
    \  end\n    end\n    total * 2\nend", "    tot = 0\n    for i in lst\n       \
    \ if i > 0 && Int(i) == i && i % 2 == 1\n            tot += i*i\n        end\n\
    \    end\n    return tot\nend", "    if length(lst) == 0\n        return 0\n \
    \   end\n    sum = 0\n    for x in lst\n        if x > 0\n            sum += floor(x)^2\n\
    \        end\n    end\n    return sum*2\nend", "    #lst_2 = filter(x -> x ==\
    \ floor(x), lst)\n    #lst_2 = filter(isinteger, lst)\n    lst_2 = filter(is_odd,\
    \ lst)\n    lst_2 = filter(is_non_negative, lst_2)\n    return sum_of_squares(lst_2)\
    \ * 2\nend\n ", "    diff = [i for i in lst if (i%2 == 1 && i >= 0)]\n    return\
    \ 2*sum(i*i for i in diff)\nend", "    diff = 0\n    for x in lst\n        if\
    \ x%2 == 1 && x >= 0\n            diff += x^2\n        end\n    end\n    return\
    \ diff\nend", "    sum = 0\n    for i in lst\n        if i > 0 && Int(i) == i\
    \ && i % 2 != 0\n            sum += i * i\n        end\n    end\n    return sum\n\
    end", "    sum_odd_squares = 0\n    for x in lst\n        if x % 2 == 1 && x >\
    \ 0\n            sum_odd_squares += x^2\n        end\n    end\n    return sum_odd_squares\n\
    end", "    sum = 0\n    for i in lst\n        if i>0 && round(i,digits=0) == i\
    \ && mod(i,2) != 0\n            sum += i^2\n        end\n    end\n    return sum\n\
    end", "    # YOUR CODE HERE\n    if lst == []\n        return 0\n    end\n   \
    \ sum = 0\n    for i in lst\n        if i > 0 && mod(i, 2) == 1\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend", "    sum = 0\n    for element\
    \ in lst\n        if element < 0 || !isinteger(element) || iseven(element)\n \
    \           next\n        end\n        sum += element ^ 2\n    end\n    return\
    \ sum\nend", "    n = 0\n    for i in lst\n        if (i % 2 != 0) && (i >= 0)\n\
    \            n += i^2\n        end\n    end\n    return n\nend", "    lst1 = lst[mod.(lst,2).==1]\n\
    \    s = 0\n    for i in lst1\n        s = s + i^2\n    end\n    return s\nend",
  "    \n    count = 0 #intialising the sum variable \n    for i in lst \n       \
    \ if i > 0 && isinteger(i) && mod(i,2) != 0 \n            count += i*i \n    \
    \    end \n    end\n    \n    return count\nend ", "    \n    s:Int64 = 0\n  \
    \  for i in lst\n        if typeof(i) == Int64 && i > 0\n            s += i*i\n\
    \        end\n    end\n    \n    return s\n    \nend", "    differences = []\n\
    \    sum = 0\n    for i = 1:length(lst)\n        if (mod(lst[i], 2) == 1) && (lst[i]\
    \ > 0) && (floor(lst[i]) == lst[i])\n            append!(differences, lst[i])\n\
    \        end\n    end\n    for k = 1:length(differences)\n        sum += differences[k]\n\
    \    end\n    return 2 * sum\nend", "    if lst == []\n        return 0\n    else\n\
    \        return 2*(sum(a^2 for a in lst if iseven(a) != true) - sum(a^2 for a\
    \ in lst if iseven(a) == true))\n    end\nend", "    \n     if isempty(lst) #using\
    \ isempty() to check if lst is empty\n        return 0\n     end\n    \n    s\
    \ = 0\n    \n    for i = 1:length(lst) #checking each element in the vector\n\
    \        if isinteger(lst[i]) && lst[i]>0 #checking that it is an integer and\
    \ positive\n            if rem(lst[i],2) != 0  #checking that the number is odd\
    \ using rem()\n                s += lst[i]^2 #summing the square of the odd integers\n\
    \            end\n        end\n    end\n    \n    return 2*s\nend", "    squared\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            squared += x^2\n \
    \       end\n    end\n    return squared\nend", "    # instantiate variables\n\
    \    sum::Int64 = 0\n    for i in lst\n        if (i > 0) && (i % 2 == 1)\n  \
    \          sum += Int64(i^2)\n        end\n    end\n    return sum\nend", "  \
    \  x=0\n    for i in lst\n        if typeof(i)==Int64\n            if isodd(i)\n\
    \                x+=i*i\n            end\n        end\n    end\n    return x\n\
    end", "    sum_odds = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n    \
    \        sum_odds += i*i\n        end\n    end\n    return sum_odds\nend", " \
    \   if isempty(lst)\n        return 0\n    else\n        total = 0\n        for\
    \ n in lst\n            if floor(n) != n || n < 0\n                continue\n\
    \            elseif n % 2 == 0\n                continue\n            else\n \
    \               total += n*n\n            end\n        end\n        return total\n\
    \    end\nend", "    if length(lst) == 0\n        return 0\n    end\n    sum =\
    \ 0\n    for i in lst\n        if (i%2) == 1 && i > 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend", "    # YOUR CODE HERE\n    return\
    \ 0\nend", "    \n    total = 0\n    for i in 1:length(lst)\n        if isinteger(lst[i])\n\
    \            if lst[i] % 2 != 0\n                total += lst[i]^2\n         \
    \   end\n        end\n    end\n    return total\nend", "  \n  sum_sq_odd = 0\n\
    \  \n  # loop over the vector\n  for i in lst \n    # check if i is integer, positive,\
    \ and odd\n    if typeof(i)==Int64 && i>0 && i%2!=0\n      # sum the square of\
    \ i\n      sum_sq_odd += i^2\n    end\n  end\n  \n  # return sum of squares of\
    \ odd numbers\n  return sum_sq_odd\nend", "    sum = 0\n    for i in lst\n   \
    \     if isodd(Int64(i)) && i > 0\n            sum += i*i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if (i > 0) & (i%2\
    \ == 1)\n            sum += i*i\n        end\n    end\n    return sum\nend\ndouble_the_difference([1,\
    \ 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\n\
    double_the_difference([0])", "    sum = 0\n    for i = 1:length(lst)\n       \
    \ if isodd(trunc(lst[i])) && lst[i] > 0\n            sum += lst[i]*lst[i]\n  \
    \      end\n    end\n    return sum\nend", "    lst1 = lst .- lst .% 2 .- 1\n\
    \    lst2 = lst1 .> 0\n    lst3 = lst1[lst2]\n    lst4 = lst3 .^ 2\n    lst5 =\
    \ sum(lst4)\n    return lst5\nend", "    sum = 0\n    for i in lst\n        if\
    \ i%2 != 0 && i >= 0\n            sum += i*i\n        end\n    end\n    return\
    \ sum*2\nend", "    sum_squares = 0\n    for i = 1:length(lst)\n        if (typeof(lst[i])\
    \ == Int64) & isodd(lst[i]) & (lst[i] > 0)\n            sum_squares += lst[i]^2\n\
    \        end\n    end\n    return sum_squares\nend", "    return 2*(sum([x^2 for\
    \ x in lst if rem(x,2)==1 && x>0]))\nend", "    lst = filter(!(isnegative), lst)\n\
    \    lst = filter(!(iswhole), lst)\n    lst = filter(isodd, lst)\n    return 2*sum(map(x->x^2,\
    \ lst))\nend\n@assert double_the_difference([1, 3, 2, 0]) == 10\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n@assert double_the_difference([]) == 0", "    res = 0\n    for i in lst\n\
    \        if i > 0 && trunc(i) == i\n            res += i^2\n        end\n    end\n\
    \    return res\nend", "    \n    result = 0\n    for i in 1:length(lst)\n   \
    \     if lst[i] % 2 == 1 && lst[i] > 0\n            result += lst[i]*lst[i]\n\
    \        end\n    end\n    return result\nend", "    sum(x^2 for x in lst if x\
    \ % 2 == 1 && x > 0)\nend", "    s=0\n    if length(lst)==0\n        return 0\n\
    \    end\n    for i in lst\n        if floor(i)%2!=0 && i>0\n            s+=(i)^2\n\
    \        end\n    end\n    return s\nend", "    # Base case, if the vector is\
    \ empty\n    if size(lst, 1) == 0\n        return 0\n    end\n    \n    # Recursive\
    \ case, if the vector is not empty\n    if lst[1] < 0 || floor(lst[1]) != lst[1]\n\
    \        return double_the_difference(lst[2:end])\n    elseif lst[1] % 2 == 0\n\
    \        return 2 * lst[1]^2 + double_the_difference(lst[2:end])\n    else\n \
    \       return lst[1]^2 + double_the_difference(lst[2:end])\n    end\nend", " \
    \   # double the difference between the sum of squares of the odd numbers\n  \
    \  # and the sum of squares of the even numbers\n    if length(lst) == 0\n   \
    \     return 0\n    end\n    total_odd = 0\n    total_even = 0\n    for i in 1:length(lst)\n\
    \        if typeof(lst[i]) == Float64\n            if isodd(floor(lst[i]))\n \
    \               total_odd += floor(lst[i])^2\n            elseif iseven(floor(lst[i]))\n\
    \                total_even += floor(lst[i])^2\n            end\n        end\n\
    \    end\n    return 2*(total_odd - total_even)\nend\n    \n    ", "    sum =\
    \ 0\n    for i in lst\n        if i >= 0 && trunc(i) == i\n            if i %\
    \ 2 == 1\n                sum += i*i\n            end\n        end\n    end\n\
    \    return sum*2\nend", "    sum = 0\n    for i in lst\n        if i > 0 && typeof(i)\
    \ == Int64\n            if i % 2 == 1\n                sum += i^2\n          \
    \  end\n        end\n    end\n    return sum\nend", "    \n    sum_of_squares\
    \ = 0 \n    \n    for i in lst \n        if i%2 != 0 && i > 0 \n            sum_of_squares\
    \ += i^2\n        end\n    end\n    \n    return sum_of_squares\n    \nend", " \
    \  if length(lst) == 0\n       return 0\n   end\n   \n   sum = 0\n   for x in\
    \ lst\n       if x % 2 == 1 && x > 0\n           sum += x^2\n       end\n   end\n\
    \   return sum\nend\n    \n    ", "  # Your code goes here\nend\n\"\"\"\n    Test\
    \ whether all elements of the given vector are even.\n    \n    >>> is_all_even([1,\
    \ 2, 3])\n    False\n    >>> is_all_even([2, 4, 6])\n    True\n    >>> is_all_even([1,\
    \ 2, 4])\n    False\n    >>> is_all_even([0, -4, 6])\n    True\n    >>> is_all_even([-2,\
    \ -4, 6])\n    False\n    >>> is_all_even([0])\n    True\n    >>> is_all_even([])\n\
    \    True\n    \"\"\"", "    return 2*sum(x*x for x in lst if iseven(Int64(x)))\n\
    end", "    # YOUR CODE HERE\nend\n@test double_the_difference([1, 3, 2, 0]) ==\
    \ 10\n@test double_the_difference([-1, -2, 0]) == 0\n@test double_the_difference([9,\
    \ -2]) == 81\n@test double_the_difference([0]) == 0\n@test double_the_difference([])\
    \ == 0\n@test double_the_difference([1.1, 3.2, 2.3, 0.0]) == 10\n@test double_the_difference([0.1,\
    \ -1.2, 0.0]) == 0\n@test double_the_difference([-9.0, -2.0]) == 0\n@test double_the_difference([3.3])\
    \ == 18\n@test double_the_difference([]) == 0\n ", "    for i in 1:length(lst)\n\
    \        if isodd(lst[i]) \n            sum = sum + (lst[i]^2)\n        end\n\
    \    end\n    return sum", "    s = 0\n    for i = 1:length(lst)\n        if isodd(lst[i])\
    \ == true\n            s += lst[i]\n        end\n    end\n    return s\nend",
  "    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\n#     my_summation\
    \ = 0\n#     for x in lst\n#         if x > 0 && x == trunc(x)\n#            \
    \ if x % 2 == 1\n#                 my_summation += x*x\n#             end\n# \
    \        end\n#     end\n#     return my_summation * 2\n    return 2 * sum([x*x\
    \ for x in lst if x > 0 && x == trunc(x) && x % 2 == 1])\nend", "    sum = 0\n\
    \    for i in lst\n        if i % 2 == 1 && i >= 0\n            sum += i^2\n \
    \       end\n    end\n    return sum\nend", "    # YOUR CODE HERE\n    sum = 0\n\
    \    for i = 1:length(lst)\n        if isinteger(lst[i]) && lst[i] > 0 && isodd(lst[i])\n\
    \            sum += lst[i]^2\n        end\n    end\n    return sum\nend", "  \
    \  # TODO\n    return 0\nend\ntest_double_the_difference(double_the_difference)\n\
    \ ", "    \n    total = 0\n    for i in lst\n        if isinteger(i) && i > 0\
    \ && rem(i, 2) == 1\n            total += i^2\n        end\n    end\n    return\
    \ total\nend", "    \n    #Initializing local variables.\n    odd_sums = 0\n \
    \   even_sums = 0\n    counter = 0\n    \n    #Using a while loop to first check\
    \ if the vector is empty and then check\n    #if the value at the counter index\
    \ is odd or even and then add the square\n    #of the value to either the odd_sums\
    \ or even_sums.\n    while counter <= length(lst) - 1\n        if lst[counter]\
    \ % 2 == 0\n            even_sums += lst[counter] ^ 2\n        else\n        \
    \    odd_sums += lst[counter] ^ 2\n        end\n        counter += 1\n    end\n\
    \    \n    #Returns the difference in the odd_sums and even_sums multiplied by\
    \ 2.\n    return 2 * (odd_sums - even_sums)\nend", "    return 0\nend\n ", " \
    \   s = 0\n    for x in lst\n        if(round(x) == x && mod(x,2) == 1)\n    \
    \        s += x^2\n        end\n    end\n    return s\nend", "    ctr = 0\n  \
    \  for num in lst\n        if num % 2 == 1 && num > 0\n            ctr += num\
    \ ^ 2\n        end\n    end\n    return ctr\nend", "    \"*** YOUR CODE HERE ***\"\
    \n    \nend\n ", "    # initialise the output variable, sum_of_squares_of_odds,\
    \ with a sensible initial value\n    # your code here\n    sum_of_squares_of_odds\
    \ = 0\n    # loop over all the numbers in the input vector\n    for value in lst\n\
    \        # if the number is odd, add its square to the output variable\n     \
    \   # you can use the mod operator, %, to find out if the number is odd.\n   \
    \     # for example, 1 % 2 == 1 and 2 % 2 == 0\n        # your code here\n   \
    \     if value > 0 && value % 2 == 1\n            sum_of_squares_of_odds += value^2\n\
    \        end\n    end\n    # return the output variable\n    # your code here\n\
    \    return sum_of_squares_of_odds\nend", "    return 0\nend", "  total_diffs\
    \ = 0\n  for num in lst\n    if num%2 != 0\n      total_diffs += num*num\n   \
    \ end\n  end\n  return total_diffs\nend\n#=\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    end\n    sum = 0\n    for i in lst\n\
    \        if isodd(round(i)) && i >= 0\n            sum += i*i\n        end\n \
    \   end\n    return sum\nend", "    for num in lst\n        total = 0\n      \
    \  if num > 0 && isinteger(num) == true && rem(num, 2) == 1\n            total\
    \ += num^2\n        end\n    end\n    return total\nend\ndouble_the_difference([1,\
    \ 3, 2, 0])", "    return 0\nend", "    sum_of_squares = 0\n    for i = 1:length(lst)\n\
    \        if lst[i] > 0 && lst[i] % 2 == 1\n            sum_of_squares += lst[i]^2\n\
    \        end\n    end\n    return sum_of_squares * 2\nend", "    \n    \n    total\
    \ = 0\n    for item in lst\n        \n        # We are going to have to have a\
    \ condition in here as well.\n        # We only want to square and add the odd\
    \ items, ignore the rest.\n        if item % 2 == 1\n            total += item\
    \ * item\n        end\n    end\n    \n    return total\nend", "    double_lst\
    \ = []\n    for i in lst\n        if i%2 != 0 && i>0 && isa(i,Int64)\n       \
    \     push!(double_lst,i)\n        end\n    end\n    if length(double_lst) ==\
    \ 0\n        return 0\n    else\n        for i in 1:length(double_lst)\n     \
    \       double_lst[i] = double_lst[i]^2\n        end\n        return sum(double_lst)\n\
    \    end\nend", "    lst_size = length(lst)\n    if lst_size == 0\n        return\
    \ 0\n    end\n    result = 0\n    for num in lst\n        if num < 0\n       \
    \     continue\n        end\n        if num == floor(num)\n            if num\
    \ % 2 == 1\n                result += num^2\n            end\n        end\n  \
    \  end\n    return result * 2\nend", "    return sum([x^2 for x in lst if x >\
    \ 0 && isinteger(x) && x % 2 == 1])\nend", "    sum = 0\n    for i in lst\n  \
    \      if i%2 == 1 && i>0\n            sum += i^2\n        end\n    end\n    return\
    \ sum\nend\n\"\"\"\n    Given a vector of numbers, return a copy of the vector\
    \ with each number multiplied\n    by the number of distinct prime factors that\
    \ the number has.\n    \n    If a number is negative, ignore it.\n    \n    >>>\
    \ mult_by_prime_factors([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 2, 3, 2, 7,\
    \ 2, 3, 2]\n    >>> mult_by_prime_factors([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n \
    \   [1, 2, 3, 2, 3, 2, 7, 2, 3, 2]\n    >>> mult_by_prime_factors([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10])\n    [1, 2, 3, 2, 3, 2, 7, 2, 3, 2]\n    \"\"\"",
  "    if isempty(lst)\n        return 0\n    else\n        sum_squares = 0\n    \
    \    for i in lst\n            if isinteger(i) && i >= 0 && i % 2 != 0\n     \
    \           sum_squares += i^2\n            end\n        end\n        return sum_squares\
    \ * 2\n    end\nend", "    \n    sum = 0\n    for i = 1:length(lst)\n        if\
    \ (lst[i] % 2 == 1 && lst[i] > 0)\n            sum += lst[i]^2\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if floor(i)\
    \ % 2 != 0 && i >= 0\n            sum += i^2\n        end\n    end\n    return\
    \ sum\nend", "    lstodd = lst[mod.(lst,2).!=0]\n    return sum(x->x^2,lstodd)\n\
    end", "    i::Int64 = 0\n    for x in lst\n        if x > 0\n            if x\
    \ % 2 == 1\n                i += x*x\n            end\n        end\n    end\n\
    \    return i\nend", "    return 2 * sum(x^2 for x in lst if x%2 != 0 && x > 0)\n\
    end", "    sum_of_squares = 0\n    for number in lst\n        if isodd(number)\
    \ && number > 0\n            sum_of_squares += number^2\n        end\n    end\n\
    \    return sum_of_squares\nend", "    # YOUR CODE HERE\n    diff::Int64 = 0\n\
    \    for l in lst\n        if (is_even(l) && l < 0)\n            diff = diff +\
    \ l * l\n        end\n    end\n    diff * 2\nend", "    sum = 0\n    for i in\
    \ lst\n        if i % 2 == 1 || i % 2 == -1\n            sum += i^2\n        end\n\
    \    end\n    return sum\nend\ndouble_the_difference([1, 3, 2, 0])", "    total\
    \ = 0\n    for element in lst\n        if element % 2 == 1 \n            total\
    \ += element^2\n        end\n    end\n    return total \nend\nprintln(double_the_difference([1,\
    \ 3, 2, 0]))\nprintln(double_the_difference([-1, -2, 0]))\nprintln(double_the_difference([9,\
    \ -2]))\nprintln(double_the_difference([0]))\nprintln(double_the_difference([]))",
  "    total = 0\n    for i in lst\n        if i == Int(i)\n            if i>0\n \
    \               if i%2 == 1\n                    total = total + i^2\n       \
    \         end\n            end\n        end\n    end\n    return total\nend",
  "    if lst == []\n        return 0\n    else\n        return 2 * (sum(lst[1:3])\
    \ - sum(lst[4:5]))\n    end\nend", "    sum = 0\n    for i in lst\n        if\
    \ mod(i,2) != 0 && i > 0\n            sum += i^2\n        end\n    end\n    return\
    \ sum\nend\ndouble_the_difference([1, 3, 2, 0])"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
