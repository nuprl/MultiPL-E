language: jl
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # search for words that have n consonants\n\
    \    return split(s) |> filter((w) -> count_consonants(w) == n)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2r9qjvg2.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp2r9qjvg2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2r9qjvg2.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r9qjvg2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r9qjvg2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2r9qjvg2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2r9qjvg2.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r9qjvg2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r9qjvg2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2r9qjvg2.jl:29\n"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmprcqvjcwa.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmprcqvjcwa.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    m = length(words)\n  \
    \  ans = Vector{String}()\n    for i = 1:m\n        if count_consonants(words[i])\
    \ == n\n            append!(ans, words[i])\n        end\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpaew4kz3l.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpaew4kz3l.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, r\"\\s+\")\n    keep = []\n\
    \    for word in words\n        if n_consonants(word) == n\n            push!(keep,\
    \ word)\n        end\n    end\n    return keep\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjp03fgeb.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpjp03fgeb.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stack"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    #@assert !isempty(s)\n    #@assert n > 0\n \
    \   #@assert isalpha(s)\n    #@assert isspace(s)\n    s = replace(s, \" \" =>\
    \ \"\")\n    for i = 0:length(s)\n        for j = length(s):-1:i\n           \
    \ sub_str = s[i:j]\n            if length(regexp(r\"[A-Za-z]\", sub_str)) == n\n\
    \                #println(sub_str)\n            end\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpykf6wsl5.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpykf6wsl5.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 18-codeunit String at index [0:18]\n  Stacktrace:\n   [1]\
    \ checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n    \
    \ @ ./strings/string.jl:261 [inlined]\n   [3] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpykf6wsl5.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpykf6wsl5.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpykf6wsl5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpykf6wsl5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 18-codeunit String at index [0:18]\n  Stacktrace:\n   [1]\
    \ checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n    \
    \ @ ./strings/string.jl:261 [inlined]\n   [3] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpykf6wsl5.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpykf6wsl5.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpykf6wsl5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpykf6wsl5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError: attempt\
    \ to access 16-codeunit String at index [0:16]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpykf6wsl5.jl:26\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = Vector{String}()\n    words = split(s,\
    \ \" \")\n    for word in words\n        consonants = 0\n        for letter in\
    \ word\n            if isConsonant(letter)\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpb9jyyy2e.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpb9jyyy2e.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isConsonant not\
    \ defined\n  Stacktrac"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    A = split(s, \" \")\n    B = Vector{String}(undef,\
    \ 0)\n    for i in A\n        if count_consonants(i) == n\n            push!(B,\
    \ i)\n        end\n    end\n    return B\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpvhni6lqj.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpvhni6lqj.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    num_cons = 0\n    words = []\n    aux = 0\n\
    \    cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n \
    \   for (i, ch) in enumerate(s)\n        if ch in cons\n            num_cons +=\
    \ 1\n        end\n        if ch == \" \"\n            if num_cons == n\n     \
    \           push!(words, s[aux+1:i-1])\n            end\n            num_cons\
    \ = 0\n            aux = i\n        end\n    end\n    if num_cons == n\n     \
    \   push!(words, s[aux+1:end])\n    end\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph14h80__.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmph14h80__.jl:45\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:46\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:48\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:49\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:51\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected_words = String[]\n\
    \    for word in words\n        consonants = 0\n        for letter in word\n \
    \           if letter in 'bcdfghjklmnpqrstvwxyz'\n                consonants +=\
    \ 1\n            end\n        end\n        if consonants == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppm3hg_s8.jl:24\nin expression\
    \ starting at /tmp/tmppm3hg_s8.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    idx, elements = 1, []\n    while idx <= length(s)\n\
    \        word = match(r\"\\w+\", s[idx:end])\n        idx += length(word) + 1\n\
    \        if length(matchall(r\"[aeiou]\", word)) == n\n            push!(elements,\
    \ word)\n        end\n    end\n    return elements\nend\nselect_words(\"Mary had\
    \ a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: matchall not defined\nStacktrace:\n [1]\
    \ select_words(s::String, n::Int64)\n   @ Main /tmp/tmp0z977hkw.jl:23\n [2] top-level\
    \ scope\n   @ /tmp/tmp0z977hkw.jl:29\nin expression starting at /tmp/tmp0z977hkw.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for w\
    \ in words\n        c = count_consonants(w)\n        if c == n\n            push!(result,\
    \ w)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpe2rp8d14.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpe2rp8d14.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for i\
    \ in 1:length(words)\n        if count_consonants(words[i]) == n\n           \
    \ push!(result, words[i])\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpu6m4kdln.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpu6m4kdln.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    numcons = Vector{Int64}()\n    counter = 0\n\
    \    start = 1\n    numcons = push!(numcons, 0)\n    for k in eachindex(s)\n \
    \       if s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n            push!(numcons,\
    \ counter)\n            counter = 0\n        elseif !(s[k] in [\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\"])\n            counter += 1\n        end\n    end\n \
    \   push!(numcons, counter)\n    my_vec = Vector{String}()\n    for i in 1:length(numcons)-1\n\
    \        if numcons[i] == n\n            push!(my_vec, s[start:i-1])\n       \
    \ end\n        start = i\n    end\n    my_vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpncx5u8rg.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpncx5u8rg.jl:46\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:47\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:49\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:50\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:52\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpjmn4blpy.jl:26\n  Test threw
    exception\n  Expression: candidate("Mary had a little lamb", 4) == ["little"]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    select_words(s::String, n::Int64)\n     @ Main /tmp/tmpjmn4blpy.jl:20\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmn4blpy.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmn4blpy.jl:25\ntest set: Error
    During Test at /tmp/tmpjmn4blpy.jl:27\n  Test threw exception\n  Expression: candidate("Mary
    had a little lamb", 3) == ["Mary", "lamb"]\n  MethodError: Cannot `convert` an
    object of type Nothing to an object of type Vector{String}\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray
    at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    select_words(s::String, n::Int64)\n     @ Main /tmp/tmpjmn4blpy.jl:20\n   [2]
    macro expansion\n     @ /s'
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    new_strings = split(s, r\"\\s+\")\n    curr_ans = []\n    for i in new_strings\n\
    \        s_contains = 0\n        for j in i\n            if j in vowels\n    \
    \            s_contains += 1\n            end\n        end\n        if length(i)\
    \ - s_contains == n\n            push!(curr_ans, i)\n        end\n    end\n  \
    \  return curr_ans\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphsi9ygab.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmphsi9ygab.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:46\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmptcahlfnl.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmptcahlfnl.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, ' ') \n    filtered_words =\
    \ []\n    for word in words\n        vowel_count = 0\n        for char in word\n\
    \            if is_vowel(char)\n                vowel_count += 1\n           \
    \ end\n        end\n        if vowel_count == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp3d3ptb9a.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp3d3ptb9a.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_vowel not\
    \ defined\n  Stacktrace:\n   [1] se"
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    s = split(s)\n    filter(x -> count_consonants(x)\
    \ == n, s)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t\
    @test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmppkxth9vv.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmppkxth9vv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmppkxth9vv.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppkxth9vv.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppkxth9vv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppkxth9vv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmppkxth9vv.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppkxth9vv.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppkxth9vv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppkxth9vv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /"
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    v = split(s, r\"\\s+\")\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for i = 1:length(v)\n    \
    \    count = 0\n        for j = 1:length(v[i])\n            if occursin(lowercase(v[i][j]),\
    \ consonants)\n                count += 1\n            end\n        end\n    \
    \    if count == n\n            push!(result, v[i])\n        end\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowel = \"aeiou\"\n    result = []\n    words\
    \ = split(s)\n    for i in words\n        if count_consonants(i) == n\n      \
    \      push!(result, i)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp_u86gngi.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_u86gngi.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = String[]\n    for w in split(s)\n      \
    \  consonants = 0\n        for c in w\n            if isconsonant(c)\n       \
    \         consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            append!(v, w)\n        end\n    end\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpqrm646j7.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqrm646j7.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrm646j7.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrm646j7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpqrm646j7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqrm646j7.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrm646j7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrm646j7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpqrm646j7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqrm646j7.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrm646j7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrm646j7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpqrm646j7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isconsonant not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    array_of_words = split(s)\n    filter_array\
    \ = filter(x -> count_consonants(x) == n, array_of_words)\n    return filter_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmprvhx3gyp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmprvhx3gyp.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmprvhx3gyp.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprvhx3gyp.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprvhx3gyp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprvhx3gyp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmprvhx3gyp.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmprvhx3gyp.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprvhx3gyp.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprvhx3gyp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprvhx3gyp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmprvhx3gyp.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmprvhx3gyp.jl:2"
  timestamp: 1660004036
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = [:b, :c, :d, :f, :g, :h, :j, :k,\
    \ :l, :m, :n, :p, :q, :r, :s, :t, :v, :w, :x, :z]\n    words = split(s)\n    filtered_words\
    \ = []\n    for word in words\n        num_consonants = 0\n        for i in 1:length(word)\n\
    \            if word[i] in consonants\n                num_consonants += 1\n \
    \           end\n        end\n        if num_consonants == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzp_4413r.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpzp_4413r.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzp_4413r.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzp_4413r.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzp_4413r.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzp_4413r.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzp_4413r.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzp_4413r.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzp_4413r.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzp_4413r.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzp_4413r.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzp_4413r.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzp_4413r.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzp_4413r.jl:46\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    consonents = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    selected = []\n\
    \    for word in words\n        vowels = length(findall(r\"[aeiou]\", word))\n\
    \        if (length(word) - vowels) == n\n            push!(selected, word)\n\
    \        end\n    end\n    return selected\nend\n \nselect_words(\"Mary had a\
    \ little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgag7yzce.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpgag7yzce.jl:41\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgag7yzce.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgag7yzce.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004035
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    v = Vector{String}()\n\
    \    for i in 1:length(words)\n        if is_consonant(words[i], n)\n        \
    \    push!(v, words[i])\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp8tgpar1x.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp8tgpar1x.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8tgpar1x.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8tgpar1x.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp8tgpar1x.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp8tgpar1x.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8tgpar1x.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8tgpar1x.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp8tgpar1x.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp8tgpar1x.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8tgpar1x.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8tgpar1x.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp8tgpar1x.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_consonant\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004036
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    v = []\n    for word in\
    \ words\n        l = length(word)\n        vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"]\n        c = 0\n        for letter in word\n            if letter\
    \ in vowels\n                c += 1\n            end\n        end\n        if\
    \ c == l - n\n            push!(v, word)\n        end\n    end\n    return v\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm2ekc_zl.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpm2ekc_zl.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2ekc_zl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2ekc_zl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2ekc_zl.jl:42\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2ekc_zl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2ekc_zl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2ekc_zl.jl:44\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2ekc_zl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2ekc_zl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2ekc_zl.jl:45\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2ekc_zl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2ekc_zl.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm2ekc_zl.jl:47\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", "
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    s = split(s)\n    words = []\n    for i in s\n\
    \        vowels = 0\n        consonants = 0\n        for j in i\n            if\
    \ j in \"aeiou\"\n                vowels += 1\n            else\n            \
    \    consonants += 1\n            end\n        end\n        if consonants == n\n\
    \            push!(words, i)\n        end\n    end\n    return words\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkozxuaat.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpkozxuaat.jl:46\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkozxuaat.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkozxuaat.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004035
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    s = 0\n    result = []\n\
    \    for i in 1:length(words)\n        word = words[i]\n        word1 = uppercase(word)\n\
    \        consonants = 0\n        for j in 1:length(word1)\n            if word1[j]\
    \ != 'A' && word1[j] != 'E' && word1[j] != 'I' && word1[j] != 'O' && word1[j]\
    \ != 'U' && word1[j] != 'Y'\n                consonants += 1\n            end\n\
    \        end\n        if consonants == n\n            s += 1\n            result[s]\
    \ = word\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpmd9tk7fr.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./essentials.jl:479 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpmd9tk7fr.jl:33\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmd9tk7fr.jl:43 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmd9tk7fr.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpmd9tk7fr.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./essentials.jl:479 [inlined]\n   [2] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpmd9tk7fr.jl:33\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpmd9tk7fr.jl:44 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmd9tk7fr.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpmd9tk7fr.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @\
    \ ./essentials.jl:479 [inlined]\n   [2] select_words(s::String, n::Int64)\n  \
    \   @ Main /tmp/tmpmd9tk7fr.jl:33\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmd9tk7fr.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmd"
  timestamp: 1660004036
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    consonants = 0\n    result\
    \ = String[]\n    for word in words\n        for letter in word\n            letter\
    \ = lowercase(letter)\n            consonants += !(letter in \"aeiou\")\n    \
    \    end\n        if consonants == n\n            push!(result, word)\n      \
    \  end\n        consonants = 0\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    matches = String[]\n\
    \    for word in words\n        consonants = length(join([\"a\" for c in word\
    \ if c in \"bcdfghjklmnpqrstvwxyz\"], \"\"))\n        if consonants == n\n   \
    \         push!(matches, word)\n        end\n    end\n    return matches\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdms4z8s5.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpdms4z8s5.jl:35\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdms4z8s5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdms4z8s5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004035
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    split = split(s)\n    words = []\n    for i\
    \ in split\n        if  length(filter(j -> in(j, \"a\", \"e\", \"i\", \"o\", \"\
    u\"),i)) == n\n            push!(words, i)\n        end\n    end\n    return words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp48_fxj8z.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp48_fxj8z.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48_fxj8z.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48_fxj8z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48_fxj8z.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp48_fxj8z.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48_fxj8z.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48_fxj8z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48_fxj8z.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp48_fxj8z.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48_fxj8z.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48_fxj8z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48_fxj8z.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: split not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Mai"
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return []\n    end\n \
    \   s = lowercase(s)\n    words = split(s)\n    result = []\n    for word in words\n\
    \        if num_consonants(word) == n\n            append!(result, word)\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpeimf4pxx.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpeimf4pxx.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeimf4pxx.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeimf4pxx.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeimf4pxx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpeimf4pxx.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeimf4pxx.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeimf4pxx.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeimf4pxx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpeimf4pxx.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeimf4pxx.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeimf4pxx.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeimf4pxx.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004036
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # type assertions\n    # if !isascii(s)\n  \
    \  #     @error(\"Please only use ASCII characters.\")\n    # end\n    # if !isascii(n)\n\
    \    #     @error(\"Please only use ASCII characters.\")\n    # end\n    # if\
    \ !(isalpha(s) || isspace(s))\n    #     @error(\"Please only use alphabet characters\
    \ or spaces.\")\n    # end\n    s = lowercase(s)\n    # split string into vector\
    \ of words\n    words = split(s)\n    # get consonants\n    consonants = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    # check\
    \ if word has only n consonants\n    words_with_n_consonants = []\n    for word\
    \ in words\n        consonant_count = 0\n        for char in word\n          \
    \  if in(char, consonants)\n                consonant_count += 1\n           \
    \ end\n        end\n        if consonant_count == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    return words_with_n_consonants\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptrsqk6o7.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmptrsqk6o7.jl:54\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrsqk6o7.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrsqk6o7.jl:53\ntest set: Test\
    \ Failed at /tmp/tmptrsqk6o7.jl:55\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrsqk6o7.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrsqk6o7.jl:53\ntest set: Test\
    \ Failed at /tmp/tmptrsqk6o7.jl:57\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrsqk6o7.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrsqk6o7.jl:53\ntest set: Test\
    \ Failed at /tmp/tmptrsqk6o7.jl:58\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrsqk6o7.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrsqk6o7.jl:53\ntest set: Test\
    \ Failed at /tmp/tmptrsqk6o7.jl:60\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    x = []\n    for i in split(s, \" \")\n     \
    \   if (count_consonants(i) == n)\n            push!(x, i)\n        end\n    end\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpr_q0h7tl.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpr_q0h7tl.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpr_q0h7tl.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_q0h7tl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr_q0h7tl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpr_q0h7tl.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpr_q0h7tl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_q0h7tl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr_q0h7tl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpr_q0h7tl.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpr_q0h7tl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_q0h7tl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr_q0h7tl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004036
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    l = split(s)\n    ln = length(l)\n    res =\
    \ []\n    for i in 1:ln\n        count = 0\n        for j in 1:length(l[i])\n\
    \            if !(l[i][j] in \"aeiou\")\n                count += 1\n        \
    \    end\n        end\n        if count == n\n            push!(res, l[i])\n \
    \       end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprn0gscdj.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmprn0gscdj.jl:44\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn0gscdj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn0gscdj.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = String[]\n    list_s = split(s)\n \
    \   for i in list_s\n        consonants = 0\n        for j in i\n            if\
    \ j in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n    \
    \            consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(result, i)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu6gzogtq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpu6gzogtq.jl:39\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6gzogtq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6gzogtq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu6gzogtq.jl:40\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6gzogtq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6gzogtq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu6gzogtq.jl:42\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6gzogtq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6gzogtq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu6gzogtq.jl:43\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6gzogtq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6gzogtq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu6gzogtq.jl:45\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004035
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    length(words) == 0 &&\
    \ return []\n    result = String[]\n    for i in 1:length(words)\n        if count_consonants(words[i])\
    \ == n\n            append!(result, words[i])\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5lasdryj.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5lasdryj.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5lasdryj.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5lasdryj.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5lasdryj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5lasdryj.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5lasdryj.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5lasdryj.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5lasdryj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5lasdryj.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5lasdryj.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5lasdryj.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5lasdryj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004036
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    l = []\n    if length(s) == 0\n        return\
    \ l\n    end\n    if length(s) == 1\n        return l\n    end\n    s = split(s)\n\
    \    for i in s\n        if length(filter(y -> !(y in 'aeiou'), i)) == n\n   \
    \         push!(l, i)\n        end\n    end\n    return l\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7k4by2z.jl:28\nin expression\
    \ starting at /tmp/tmpu7k4by2z.jl:28\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    results = []\n    for\
    \ i in 1:length(words)\n        if (length(findconsonants(words[i])) == n)\n \
    \           push!(results, words[i])\n        end\n    end\n    return results\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmppcgqjetv.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ findconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppcgqjetv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppcgqjetv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppcgqjetv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppcgqjetv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ findconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppcgqjetv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppcgqjetv.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppcgqjetv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppcgqjetv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ findconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppcgqjetv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppcgqjetv.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppcgqjetv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppcgqjetv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: findconsonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = []\n    for word in split(s)\n        c\
    \ = num_consonants(word)\n        if c == n\n            push!(v, word)\n    \
    \    end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpqpfqal9q.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqpfqal9q.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqpfqal9q.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqpfqal9q.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqpfqal9q.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqpfqal9q.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqpfqal9q.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqpfqal9q.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqpfqal9q.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpqpfqal9q.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqpfqal9q.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqpfqal9q.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqpfqal9q.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    curr_word = \"\"\n    words = Vector{String}()\n\
    \    for c in s\n        if c != ' '\n            curr_word *= c\n        else\n\
    \            if consonants(curr_word) == n\n                push!(words, curr_word)\n\
    \            end\n            curr_word = \"\"\n        end\n    end\n    if consonants(curr_word)\
    \ == n\n        push!(words, curr_word)\n    end\n    return words\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpuq51o8ih.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpuq51o8ih.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuq51o8ih.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuq51o8ih.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuq51o8ih.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpuq51o8ih.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuq51o8ih.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuq51o8ih.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuq51o8ih.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpuq51o8ih.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuq51o8ih.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuq51o8ih.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuq51o8ih.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004036
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    split_by_consonants =\
    \ [length(filter(x -> !(x in \"aeiouAEIOU\"), word)) for word in words]\n    n_consonants\
    \ = [n == num_consonants for num_consonants in split_by_consonants]\n    return\
    \ words[n_consonants]\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    res = []\n    words = split(s)\n    for word\
    \ in words\n        if sum(x in \"bcdfghjklmnpqrstvwxyz\" for x in word) == n\n\
    \            push!(res, word)\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8x0dukbn.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp8x0dukbn.jl:34\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8x0dukbn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8x0dukbn.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # convert s to lowercase\n    s = lowercase(s)\n\
    \    # remove punctuation and numbers\n    s = strip(replace(s, r\"[^a-zA-Z ]\"\
    \ => \"\"))\n    # split at spaces\n    words = split(s)\n    # convert to Vector{String}\n\
    \    words = collect(words)\n    num_consonants = length(collect(@match(r\"[^aeiou]\"\
    , \"test\")))\n    consonant_words = filter(w -> length(collect(@match(r\"[^aeiou]\"\
    , w))) == num_consonants, words)\n    return consonant_words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @match not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp1a9lep1c.jl:1\nin\
    \ expression starting at /tmp/tmp1a9lep1c.jl:1\n"
  stdout: ''
  timestamp: 1660004036
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n  # implement this function\n  return string[]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpga695o5q.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching getindex(::typeof(string))\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpga695o5q.jl:20\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpga695o5q.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpga695o5q.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpga695o5q.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching getindex(::typeof(string))\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpga695o5q.jl:20\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpga695o5q.jl:28 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpga695o5q.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpga695o5q.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: no\
    \ method matching getindex(::typeof(string))\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpga695o5q.jl:20\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpga695o5q.jl:29 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpga695o5q.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpga695o5q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  MethodError: no meth"
  timestamp: 1660004038
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    count = 0 \n    words = [] \n    str = \"\"\
    \ \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for c in s \n        if c in\
    \ vowels \n            count = 0 \n        else \n            count += 1 \n  \
    \      end \n        if c == ' ' \n            if count == n \n              \
    \  push!(words, str) \n            end \n            str = \"\" \n        else\
    \ \n            str = string(str, c) \n        end \n    end \n    if count ==\
    \ n \n        push!(words, str) \n    end \n    return words \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8xrpvtsz.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp8xrpvtsz.jl:48\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xrpvtsz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xrpvtsz.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp8xrpvtsz.jl:49\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"Mary\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xrpvtsz.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xrpvtsz.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp8xrpvtsz.jl:51\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xrpvtsz.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xrpvtsz.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp8xrpvtsz.jl:52\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xrpvtsz.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xrpvtsz.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp8xrpvtsz.jl:54\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", \"e\"] ="
  timestamp: 1660004038
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = Vector{String}()\n    for x in split(s)\n\
    \        if n == vowel_count(x)\n            push!(result, x)\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpz_d3tj1g.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ vowel_count not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpz_d3tj1g.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_d3tj1g.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_d3tj1g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz_d3tj1g.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ vowel_count not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpz_d3tj1g.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_d3tj1g.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_d3tj1g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz_d3tj1g.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ vowel_count not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpz_d3tj1g.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_d3tj1g.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_d3tj1g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz_d3tj1g.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: vowel_count not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    sp = split(s)\n    res = []\n    for s\
    \ in sp\n        if count_consonants(s) == n\n            push!(res, s)\n    \
    \    end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpv9cpxy1d.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv9cpxy1d.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv9cpxy1d.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9cpxy1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv9cpxy1d.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv9cpxy1d.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv9cpxy1d.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9cpxy1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv9cpxy1d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpv9cpxy1d.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv9cpxy1d.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9cpxy1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv9cpxy1d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if length(s) == 0\n        return []\n    end\n\
    \    if isconsonant(s[1])\n        return [s[1]]\n    end\n    if n == 0\n   \
    \     return []\n    end\n    return [s[1]]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpbz6f7207.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbz6f7207.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbz6f7207.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbz6f7207.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpbz6f7207.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbz6f7207.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbz6f7207.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbz6f7207.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpbz6f7207.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbz6f7207.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbz6f7207.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbz6f7207.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpbz6f7207.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isconsonant not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    list_consonants = []\n\
    \    for w in words\n        consonants = count_consonants(w)\n        if consonants\
    \ == n\n            push!(list_consonants, w)\n        end\n    end\n    return\
    \ list_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp7zfzgazf.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7zfzgazf.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7zfzgazf.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zfzgazf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7zfzgazf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7zfzgazf.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7zfzgazf.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zfzgazf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7zfzgazf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7zfzgazf.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7zfzgazf.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zfzgazf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7zfzgazf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004040
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = Set(['a', 'e', 'i', 'o', 'u'])\n  \
    \  splitted = split(s)\n    result = []\n    for w in splitted\n        c = 0\n\
    \        for l in w\n            if !(l in vowels)\n                c += 1\n \
    \           end\n        end\n        if c == n\n            push!(result, w)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3imfjw9.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpw3imfjw9.jl:44\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3imfjw9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3imfjw9.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004039
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    str_words = split(s)\n    return [word for word\
    \ in str_words if num_consonants(word) == n]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp3akktg4k.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp3akktg4k.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3akktg4k.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp3akktg4k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3akktg4k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmp3akktg4k.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp3akktg4k.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n "
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # your code goes here\n    return [word for\
    \ word in split(s) if count_consonants(word) == n]\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmprkhvoo7e.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmprkhvoo7e.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprkhvoo7e.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprkhvoo7e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprkhvoo7e.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmprkhvoo7e.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprkhvoo7e.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level sco"
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for w\
    \ in words\n        if n_consonants(w) == n\n            push!(result, w)\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpwug9g2po.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwug9g2po.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwug9g2po.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwug9g2po.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwug9g2po.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwug9g2po.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwug9g2po.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwug9g2po.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwug9g2po.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwug9g2po.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwug9g2po.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwug9g2po.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwug9g2po.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    size(words)\n    mask\
    \ = map(word -> count_consonants(word) == n, words)\n    return(words[mask])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpb8qramjb.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main /tmp/tmpb8qramjb.jl:21\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"{Int64}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n\
    \      @ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmpb8qramjb.jl:21\n    [7] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [8] macro expansion\n      @ /tmp/tmpb8qramjb.jl:29 [inlined]\n    [9] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpb8qramjb.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpb8qramjb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main /tmp/tmpb8qramjb.jl:21\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"{Int64}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n\
    \      @ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] select_words(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmpb8qramjb.jl:21\n    [7] macro expansion\n  \
    \    @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [8] macro expansion\n      @ /tmp/tmpb8qramjb.jl:30 [inlined]\n    [9] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/s"
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    words_with_n_consonants\
    \ = []\n    for word in words\n        if count_consonants(word) == n\n      \
    \      push!(words_with_n_consonants, word)\n        end\n    end\n    return\
    \ words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpggz1acj2.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpggz1acj2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpggz1acj2.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggz1acj2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpggz1acj2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpggz1acj2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpggz1acj2.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggz1acj2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpggz1acj2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpggz1acj2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpggz1acj2.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggz1acj2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpggz1acj2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = []\n    words = split(s, \" \")\n \
    \   for word in words\n        if count_consonants(word) == n\n            append!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpd7zo6tht.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd7zo6tht.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd7zo6tht.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7zo6tht.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd7zo6tht.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd7zo6tht.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd7zo6tht.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7zo6tht.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd7zo6tht.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpd7zo6tht.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd7zo6tht.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7zo6tht.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd7zo6tht.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    w = split(s)\n    v = Vector{String}()\n   \
    \ for e in w\n        if count_consonants(e) == n\n            push!(v, e)\n \
    \       end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpx234e6ry.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpx234e6ry.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx234e6ry.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx234e6ry.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx234e6ry.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpx234e6ry.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx234e6ry.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx234e6ry.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx234e6ry.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpx234e6ry.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx234e6ry.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx234e6ry.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx234e6ry.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    counter = 0\n    i = 1\n    N = length(s)\n\
    \    l=1\n    result = Vector{String}()\n    while i <= N\n        if s[i] in\
    \ \"aeiouAEIOU\"\n            counter += 1\n        end\n        if s[i] in \"\
    aeiouAEIOU \"\n            if i == N\n                if counter == n\n      \
    \              push!(result, substring(s, l, i))\n                end\n      \
    \      end\n        elseif s[i] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n            if counter == n\n                push!(result, substring(s, l, i-1))\n\
    \            end\n            l = i\n            counter = 0\n        end\n  \
    \      i += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Test Failed at /tmp/tmp_dt6f_ot.jl:50\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt6f_ot.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt6f_ot.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp_dt6f_ot.jl:51\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt6f_ot.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt6f_ot.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp_dt6f_ot.jl:53\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt6f_ot.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt6f_ot.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp_dt6f_ot.jl:54\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt6f_ot.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt6f_ot.jl:49\n"
  timestamp: 1660004041
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Converts the sentence to a vector of words\n\
    \    words = split(s)\n    # A vector of words with n consonants\n    word_vector\
    \ = []\n    # Loop through each word in the sentence\n    for word in words\n\
    \        # Count number of consonants in the word\n        consonant_count = 0\n\
    \        for letter in word\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\
    \n                consonant_count += 1\n            end\n        end\n       \
    \ # Add word to vector if it contains n consonants\n        if consonant_count\
    \ == n\n            push!(word_vector, word)\n        end\n    end\n    return\
    \ word_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgihz7b9q.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpgihz7b9q.jl:45\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgihz7b9q.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgihz7b9q.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    res = []\n    for i =\
    \ 1:length(words)\n        word = words[i]\n        if(has_n_consonants(word,\
    \ n))\n            push!(res, word)\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp46akfe7s.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ has_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp46akfe7s.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp46akfe7s.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46akfe7s.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp46akfe7s.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ has_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp46akfe7s.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp46akfe7s.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46akfe7s.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp46akfe7s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ has_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp46akfe7s.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp46akfe7s.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46akfe7s.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp46akfe7s.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: has_n_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Your code goes here\n    # ...\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpk9abfexw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpk9abfexw.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9abfexw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9abfexw.jl:26\n"
  timestamp: 1660004042
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    str = split(s)\n    result = []\n    for i in\
    \ str\n        push!(result,i) if length(i)==n end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplpinnchl.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpinnchl.jl:22\n\
    in expression starting at /tmp/tmplpinnchl.jl:22\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = split(s) # split string using space as delimiter\n\
    \    res = []\n    for i in v\n        count = 0\n        for j in i\n       \
    \     if j in \"aeiouAEIOU\"\n                count += 1\n            end\n  \
    \      end\n        if count == n\n            push!(res, i)\n        end\n  \
    \  end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfpz6vaou.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpfpz6vaou.jl:39\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpz6vaou.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpz6vaou.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfpz6vaou.jl:40\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpz6vaou.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpz6vaou.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfpz6vaou.jl:41\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"white\", \"space\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpz6vaou.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpz6vaou.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfpz6vaou.jl:42\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpz6vaou.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpz6vaou.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfpz6vaou.jl:43\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n  "
  timestamp: 1660004040
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n \n    # Convert string to lower case characters\n\
    \    s_lo = lowercase(s)\n    \n    # Define consonants\n    consonants = [\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    \n    # Split string into\
    \ words\n    words = split(s_lo)\n    \n    # Declare empty vector of strings\n\
    \    final_words = String[]\n    \n    # Loop over words\n    for w in words\n\
    \        # Initialize counter\n        counter = 0\n        # Loop over characters\
    \ in word\n        for c in w\n            # Check if character is consonant\n\
    \            if c in consonants\n                # Increase counter\n        \
    \        counter += 1\n            end\n        end\n        # Check if number\
    \ of consonants in word is equal to n\n        if counter == n\n            #\
    \ Push word to final_words\n            push!(final_words, w)\n        end\n \
    \   end\n    \n    # Return final_words\n    return final_words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphpm9whlb.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmphpm9whlb.jl:59\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpm9whlb.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpm9whlb.jl:58\ntest set: Test\
    \ Failed at /tmp/tmphpm9whlb.jl:60\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpm9whlb.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpm9whlb.jl:58\ntest set: Test\
    \ Failed at /tmp/tmphpm9whlb.jl:62\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpm9whlb.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpm9whlb.jl:58\ntest set: Test\
    \ Failed at /tmp/tmphpm9whlb.jl:63\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpm9whlb.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpm9whlb.jl:58\ntest set: Test\
    \ Failed at /tmp/tmphpm9whlb.jl:65\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected_words = []\n\
    \    for word in words\n        if count_consonants(word) == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpxjqm1jqi.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxjqm1jqi.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxjqm1jqi.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjqm1jqi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxjqm1jqi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxjqm1jqi.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxjqm1jqi.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjqm1jqi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxjqm1jqi.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxjqm1jqi.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxjqm1jqi.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxjqm1jqi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxjqm1jqi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004042
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    ret = Vector{String}(undef, 0)\n    words =\
    \ split(s)\n    @inbounds for i in 1:length(words)\n        temp = words[i]\n\
    \        cons = 0\n        for j in 1:length(temp)\n            if temp[j] in\
    \ \"bcdfghjklmnpqrstvwxyz\"\n                cons += 1\n            end\n    \
    \    end\n        if cons == n\n            push!(ret, temp)\n        end\n  \
    \  end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf2_mhg1g.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpf2_mhg1g.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf2_mhg1g.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf2_mhg1g.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004040
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n  \n    idx = 0\n    words = String[]\n    for word\
    \ in split(s)\n        c = 0\n        for letter in word\n            if !(letter\
    \ in \"aeiouAEIOU\")\n                c += 1\n            end\n        end\n \
    \       if c == n\n            idx += 1\n            words[idx] = word\n     \
    \   end\n    end\n    \n    return words\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpvjtfzamm.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpvjtfzamm.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvjtfzamm.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvjtfzamm.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpvjtfzamm.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpvjtfzamm.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvjtfzamm.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvjtfzamm.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpvjtfzamm.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] select_words(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpvjtfzamm.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvjtfzamm.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvjtfzamm"
  timestamp: 1660004043
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    k=split(s)\n    res=[]\n    for i in k\n   \
    \     if count_consonants(i)==n\n            push!(res,i)\n        end\n    end\n\
    \    return res\nend\nselect_words(\"Mary had a little lamb\", 4)\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_consonants not defined\nStacktrace:\n\
    \ [1] select_words(s::String, n::Int64)\n   @ Main /tmp/tmp1u3p3i5r.jl:22\n [2]\
    \ top-level scope\n   @ /tmp/tmp1u3p3i5r.jl:28\nin expression starting at /tmp/tmp1u3p3i5r.jl:28\n"
  stdout: ''
  timestamp: 1660004041
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    results = []\n    for\
    \ word in words\n        if count_consonants(word) == n\n            push!(results,\
    \ word)\n        end\n    end\n    return results\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpvxahvmn7.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvxahvmn7.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvxahvmn7.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxahvmn7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvxahvmn7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvxahvmn7.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvxahvmn7.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxahvmn7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvxahvmn7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvxahvmn7.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvxahvmn7.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvxahvmn7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvxahvmn7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004044
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \ words = split(s)\n    vec = []\n    for i in 1:length(words)\n        word =\
    \ words[i]\n        word_len = length(word)\n        consonant_count = 0\n   \
    \     for j in 1:word_len\n            c = word[j]\n            if c in consonants\n\
    \                consonant_count += 1\n            end\n        end\n        if\
    \ consonant_count == n\n            push!(vec, word)\n        end\n    end\n \
    \   return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpody2k2ak.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpody2k2ak.jl:44\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpody2k2ak.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpody2k2ak.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004043
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = Set([\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\"])\n    in_vowels = false\n    count = 0\n\
    \    words = split(s)\n    words_n_consonants = []\n    for word in words\n  \
    \      count = 0\n        for c in word\n            if !in_vowels && consonants[c]\n\
    \                count += 1\n            end\n            in_vowels = !in_vowels\n\
    \        end\n        if count == n\n            push!(words_n_consonants, word)\n\
    \        end\n    end\n    return words_n_consonants\nend\nselect_words(\"Mary\
    \ had a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: ''
  timestamp: 1660004045
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # convert s to a vector of words\n    words\
    \ = split(s)\n    # vector to store the words that contain exactly n consonants\n\
    \    selected_words = []\n    # for each word\n    for word in words\n       \
    \ # count the number of consonants\n        consonants = 0\n        for char in\
    \ word\n            if !(char in 'aeiou')\n                consonants += 1\n \
    \           end\n        end\n        # if it has exactly n consonants, append\
    \ it to selected_words\n        if consonants == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    # return the selected words\n    return selected_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpt5dyelph.jl:28\nin expression\
    \ starting at /tmp/tmpt5dyelph.jl:28\n"
  stdout: ''
  timestamp: 1660004043
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    i = 0\n    str_arr = Vector{String}()\n    while\
    \ i < length(s)\n        str = \"\"\n        if s[i] >= 'A' && s[i] <= 'Z' ||\
    \ s[i] >= 'a' && s[i] <= 'z'\n            while s[i] >= 'A' && s[i] <= 'Z' ||\
    \ s[i] >= 'a' && s[i] <= 'z'\n                str = str * s[i]\n             \
    \   i += 1\n            end\n            if get_num_consonants(str) == n\n   \
    \             push!(str_arr, str)\n            end\n        else\n           \
    \ i += 1\n        end\n    end\n    return str_arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpsdm2wslv.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 22-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ select_words(s::String, n::Int64)\n     @ Main /tmp/tmpsdm2wslv.jl:23\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpsdm2wslv.jl:42 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsdm2wslv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpsdm2wslv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 22-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ select_words(s::String, n::Int64)\n     @ Main /tmp/tmpsdm2wslv.jl:23\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpsdm2wslv.jl:43 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsdm2wslv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpsdm2wslv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError: attempt\
    \ to access 18-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ select_words(s::String, n"
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # base case, empty string => return empty vector\n\
    \    if s == \"\"\n        return []\n    end\n    # initialize empty vector\n\
    \    result = []\n    # split string by spaces, store into vector\n    words =\
    \ split(s, ' ')\n    # iterate through vector of words\n    for i in 1:length(words)\n\
    \        # count num consonants in each word\n        num_consonants = consonants(words[i])\n\
    \        # if num_consonants == n, then append to result vector\n        if num_consonants\
    \ == n\n            append!(result, words[i])\n        end\n    end\n    # return\
    \ result vector\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp0dp9boqe.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp0dp9boqe.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0dp9boqe.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0dp9boqe.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp0dp9boqe.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp0dp9boqe.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0dp9boqe.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0dp9boqe.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp0dp9boqe.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp0dp9boqe.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0dp9boqe.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0dp9boqe.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp0dp9boqe.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    answer = []\n    words = split(s, r\"\\s+\"\
    )\n    for i in words\n        if consonants(i) == n\n            push!(answer,\
    \ i)\n        end\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp9l3pe06j.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9l3pe06j.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9l3pe06j.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9l3pe06j.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9l3pe06j.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9l3pe06j.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9l3pe06j.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9l3pe06j.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9l3pe06j.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp9l3pe06j.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9l3pe06j.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9l3pe06j.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9l3pe06j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    selected = Vector{String}()\n\
    \    for word in words\n        count = 0\n        for i in 1:length(word)\n \
    \           if is_consonant(word[i])\n                count += 1\n           \
    \ end\n        end\n        if count == n\n            push!(selected, word)\n\
    \        end\n    end\n    return selected\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp4m34s6_v.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp4m34s6_v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m34s6_v.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m34s6_v.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp4m34s6_v.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp4m34s6_v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m34s6_v.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m34s6_v.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp4m34s6_v.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp4m34s6_v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m34s6_v.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m34s6_v.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp4m34s6_v.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_consonant\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    res = String[]\n    w = words(s)\n    for word\
    \ in w\n        count = 0\n        for i in eachindex(word)\n            if !in(lowercase(word[i]),\
    \ \"aeiou\") \n                count += 1\n            end\n        end\n    \
    \    if count == n\n            push!(res, word)\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpcvoopkqz.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ words not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpcvoopkqz.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvoopkqz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvoopkqz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcvoopkqz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ words not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpcvoopkqz.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvoopkqz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvoopkqz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcvoopkqz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ words not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpcvoopkqz.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvoopkqz.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvoopkqz.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcvoopkqz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: words not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Mai"
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \"\"\"\n    This function returns a vector of\
    \ words that have n number of consonants\n    \"\"\"\n    # string to lower case\n\
    \    s = lowercase(s)\n    # remove space\n    s = replace(s, r\"\\s+\", \"\"\
    )\n    # Regex for consonants\n    c = r\"[^aeiou]\"\n    # Regex for vowels\n\
    \    v = r\"[aeiou]\"\n    # split into words\n    words = split(s, r\"\\s+\"\
    )\n    # List of words that have n number of consonants\n    list_of_words = []\n\
    \    # loop through the words\n    for word in words\n        # if there are the\
    \ same number of vowels and consonants\n        if size(occursin(c, word))[1]\
    \ == n\n            # add to list of words\n            push!(list_of_words, word)\n\
    \        end\n    end\n    # return list of words as a vector\n    return list_of_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpqgzwbcqd.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpqgzwbcqd.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqgzwbcqd.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqgzwbcqd.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpqgzwbcqd.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpqgzwbcqd.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqgzwbcqd.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqgzwbcqd.jl"
  timestamp: 1660004045
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Initialize variables\n    i = 1\n    num_consonants\
    \ = 0\n    # Empty storage for output\n    output = String[]\n    # Split s into\
    \ words\n    words = split(s)\n    # Iterate through words\n    for word in words\n\
    \        # Iterate through each letter in word\n        for letter in word\n \
    \           # If letter is not a vowel, increment num_consonants\n           \
    \ if !(letter in \"aeiouAEIOU\")\n                num_consonants += 1\n      \
    \      end\n        end\n        # If number of consonants in word is equal to\
    \ n, add to output\n        if num_consonants == n\n            push!(output,\
    \ word)\n        end\n        # Reset num_consonants counter\n        num_consonants\
    \ = 0\n    end\n    # Return output\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004042
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Enter your code here\n    words = split(s,\
    \ \" \")\n    selected = Vector{String}()\n    for w in words\n        consonants\
    \ = 0\n        for c in w\n            if !(c in \"aeiou\")\n                consonants\
    \ += 1\n            end\n        end\n        if consonants == n\n           \
    \ push!(selected, w)\n        end\n    end\n    return selected\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkmgqpcq.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpxkmgqpcq.jl:44\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkmgqpcq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkmgqpcq.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = []\n    for (i, word) in enumerate(split(s))\n\
    \        if number_of_consonants(word) == n\n            push!(result, word)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpxo5o62sv.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxo5o62sv.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxo5o62sv.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo5o62sv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxo5o62sv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxo5o62sv.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxo5o62sv.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo5o62sv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxo5o62sv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpxo5o62sv.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxo5o62sv.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo5o62sv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxo5o62sv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: number_of_consonants\
    \ not defined\n  Sta"
  timestamp: 1660004046
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s==\"\"\n        return String[]\n    end\n\
    \    v = String[]\n    words = split(s)\n    for i=1:length(words)\n        word\
    \ = words[i]\n        consonants = length(filter(x->!(x in ['a','e','i','o','u','A','E','I','O','U']),\
    \ split(word)))\n        if n==consonants\n            push!(v, word)\n      \
    \  end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmabc_ztr.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpmabc_ztr.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmabc_ztr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmabc_ztr.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmabc_ztr.jl:39\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmabc_ztr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmabc_ztr.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmabc_ztr.jl:41\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmabc_ztr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmabc_ztr.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmabc_ztr.jl:42\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmabc_ztr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmabc_ztr.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmabc_ztr.jl:44\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", \"b\", \""
  timestamp: 1660004045
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    words_and_consonants =\
    \ [(word, count_consonants(word)) for word in words]\n    words_with_n_consonants\
    \ = [word for (word, n_consonants) in words_and_consonants if n_consonants ==\
    \ n]\n    return words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfux1kiw0.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"})\n \
    \    @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpfux1kiw0.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpfux1kiw0.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfux1kiw0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfux1kiw0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"})\n \
    \    @ Base ./array.jl:724\n   [4] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpfux1kiw0.jl:20\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpfux1kiw0.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfux1kiw0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfux1kiw0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{Str"
  timestamp: 1660004046
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    res = []\n    for i in s.split()\n        if\
    \ count_vowels(i) == n\n            push!(res, i)\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpl9ueav8s.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpl9ueav8s.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9ueav8s.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9ueav8s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpl9ueav8s.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  type String\
    \ has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpl9ueav8s.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9ueav8s.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9ueav8s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpl9ueav8s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpl9ueav8s.jl:20\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl9ueav8s.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl9ueav8s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpl9ueav8s.jl:35\n  Test threw exception\n  Expression: "
  timestamp: 1660004046
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    select_words_vector =\
    \ []\n    for word in words\n        consonants = length(filter(x -> !(x in \"\
    aeiouAEIOU\"), word))\n        if consonants == n\n            push!(select_words_vector,\
    \ word)\n        end\n    end\n    return select_words_vector\nend\n@assert select_words(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n@assert select_words(\"Mary had\
    \ a little lamb\", 3) == [\"Mary\", \"lamb\"]\n@assert select_words(\"simple white\
    \ space\", 2) == []\n@assert select_words(\"Hello world\", 4) == [\"world\"]\n\
    @assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004043
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    words = split(s)\n    s = \"\"\n    count\
    \ = 0\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vector_words\
    \ = []\n    \n    for i in 1:length(words)\n        s = words[i]\n        for\
    \ j in 1:length(s)\n            for k in 1:length(consonants)\n              \
    \  if lowercase(s[j]) == consonants[k]\n                    count += 1\n     \
    \           end\n            end\n        end\n        if count == n\n       \
    \     push!(vector_words, words[i])\n        end\n        count = 0\n    end\n\
    \    \n    return vector_words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpacyp40qr.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmpacyp40qr.jl:49\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacyp40qr.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacyp40qr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpacyp40qr.jl:50\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacyp40qr.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacyp40qr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpacyp40qr.jl:52\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacyp40qr.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacyp40qr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpacyp40qr.jl:53\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacyp40qr.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacyp40qr.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpacyp40qr.jl:55\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004045
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    const DOUBLE_QUOTE = 0x22\n    const SPACE =\
    \ 0x20\n    const HYPHEN = 0x2D\n    const LETTERS = Dict(0x61 => \"a\", 0x62\
    \ => \"b\", 0x63 => \"c\", 0x64 => \"d\", 0x65 => \"e\", 0x66 => \"f\", 0x67 =>\
    \ \"g\", \n                        0x68 => \"h\", 0x69 => \"i\", 0x6A => \"j\"\
    , 0x6B => \"k\", 0x6C => \"l\", 0x6D => \"m\", 0x6E => \"n\", \n             \
    \           0x6F => \"o\", 0x70 => \"p\", 0x71 => \"q\", 0x72 => \"r\", 0x73 =>\
    \ \"s\", 0x74 => \"t\", 0x75 => \"u\", \n                        0x76 => \"v\"\
    , 0x77 => \"w\", 0x78 => \"x\", 0x79 => \"y\", 0x7A => \"z\")\n    const CONSONANTS\
    \ = Dict(\"b\" => true, \"c\" => true, \"d\" => true, \"f\" => true, \"g\" =>\
    \ true, \"h\" => true, \"j\" => true, \n                            \"k\" => true,\
    \ \"l\" => true, \"m\" => true, \"n\" => true, \"p\" => true, \"q\" => true, \"\
    r\" => true, \n                            \"s\" => true, \"t\" => true, \"v\"\
    \ => true, \"w\" => true, \"x\" => true, \"y\" => true, \"z\" => true)\n    const\
    \ VOWELS = Dict(\"a\" => true, \"e\" => true, \"i\" => true, \"o\" => true, \"\
    u\" => true)\n    words = Vector{String}()\n    word = String()\n    for c in\
    \ s\n        if c == DOUBLE_QUOTE\n            push!(words, word)\n          \
    \  word = String()\n        elseif c == SPACE\n            push!(words, word)\n\
    \            word = String()\n        elseif c == HYPHEN\n            word *=\
    \ \"-\"\n        else\n\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpxsvr1hpa.jl:39\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxsvr1hpa.jl:1\n\
    in expression starting at /tmp/tmpxsvr1hpa.jl:1\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # TODO: implement select_words function\n  \
    \  # HINT: call the is_word_n_consonants function\n    x = split(s)\n    y = []\n\
    \    for w in x\n        if is_word_n_consonants(w, n) == true\n            push!(y,\
    \ w)\n        end\n    end\n    return y\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp36z0vtf2.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_word_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp36z0vtf2.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp36z0vtf2.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36z0vtf2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp36z0vtf2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_word_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp36z0vtf2.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp36z0vtf2.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36z0vtf2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp36z0vtf2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_word_n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp36z0vtf2.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp36z0vtf2.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36z0vtf2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp36z0vtf2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_word_n_consonants\
    \ not defined\n  Sta"
  timestamp: 1660004047
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    words_with_n_consonants\
    \ = []\n    for word in words\n        if is_word_valid(word, n)\n           \
    \ push!(words_with_n_consonants, word)\n        end\n    end\n    return words_with_n_consonants\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp7sdx2e6s.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_word_valid not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7sdx2e6s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7sdx2e6s.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7sdx2e6s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7sdx2e6s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_word_valid not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7sdx2e6s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7sdx2e6s.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7sdx2e6s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7sdx2e6s.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_word_valid not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7sdx2e6s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7sdx2e6s.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7sdx2e6s.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7sdx2e6s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_word_valid\
    \ not defined\n  Stacktrace:\n   [1] select_words"
  timestamp: 1660004047
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    result = []\n \
    \   for word in words\n        if n == count_consonants(word)\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5a775qcg.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5a775qcg.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5a775qcg.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a775qcg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5a775qcg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5a775qcg.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5a775qcg.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a775qcg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5a775qcg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5a775qcg.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5a775qcg.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a775qcg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5a775qcg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004047
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # We use the function \"count_consonants\" to\
    \ count the number of consonants in a word\n    if s == \"\"\n        return []\n\
    \    else\n        # Split the string into words\n        s_array = split(s)\n\
    \        # Create an array of the number of consonants in each word\n        consonants_array\
    \ = [count_consonants(word) for word in s_array]\n        # Select words that\
    \ have exactly n consonants\n        answer = s_array[findall(consonants_array\
    \ .== n)]\n        return answer\n    end\nend\n \n# Test \nprintln(select_words(\"\
    Mary had a little lamb\", 4))\nprintln(select_words(\"Mary had a little lamb\"\
    , 3))\nprintln(select_words(\"simple white space\", 2))\nprintln(select_words(\"\
    Hello world\", 4))\nprintln(select_words(\"Uncle sam\", 3))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_consonants not defined\nStacktrace:\n\
    \ [1] (::var\"#1#2\")(word::SubString{String})\n   @ Main ./none:0\n [2] iterate\n\
    \   @ ./generator.jl:47 [inlined]\n [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\n   @ Base ./array.jl:724\n [4] select_words(s::String, n::Int64)\n\
    \   @ Main /tmp/tmpcz217y2_.jl:26\n [5] top-level scope\n   @ /tmp/tmpcz217y2_.jl:34\n\
    in expression starting at /tmp/tmpcz217y2_.jl:34\n"
  stdout: ''
  timestamp: 1660004045
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        consonants = [char for char in word if char \u2209 ['a', 'e',\
    \ 'i', 'o', 'u']]\n        if length(consonants) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbpi1e491.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpbpi1e491.jl:38\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbpi1e491.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbpi1e491.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004047
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    if length(words) == 0\n\
    \        return []\n    end\n    if n < 0\n        return []\n    end\n    v =\
    \ []\n    for word in words\n        if count_consonants(word) == n\n        \
    \    push!(v, word)\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmptn4nj_fi.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptn4nj_fi.jl:28\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptn4nj_fi.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptn4nj_fi.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptn4nj_fi.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptn4nj_fi.jl:28\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptn4nj_fi.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptn4nj_fi.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptn4nj_fi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptn4nj_fi.jl:28\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptn4nj_fi.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptn4nj_fi.jl:38\ntest set:\
    \ Error During Test at /tmp/tmptn4nj_fi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004048
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    words = split(s)\n    ws = []\n    for w in words\n        count = 0\n\
    \        for c in w\n            if c in vowels\n                count += 1\n\
    \            end\n        end\n        if (count == n)\n            push!(ws,\
    \ w)\n        end\n    end\n    return ws\nend\nselect_words(\"Mary had a little\
    \ lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqja1hxa3.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqja1hxa3.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqja1hxa3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqja1hxa3.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqja1hxa3.jl:42\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqja1hxa3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqja1hxa3.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqja1hxa3.jl:44\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqja1hxa3.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqja1hxa3.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqja1hxa3.jl:45\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqja1hxa3.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqja1hxa3.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqja1hxa3.jl:47\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004047
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return []\n    end\n \
    \   words = split(s)\n    selected_words = []\n    for word in words\n       \
    \ num_consonants = count_consonants(word)\n        if num_consonants == n\n  \
    \          push!(selected_words, word)\n        end\n    end\n    return selected_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpswrwkvi8.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpswrwkvi8.jl:25\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpswrwkvi8.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpswrwkvi8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpswrwkvi8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpswrwkvi8.jl:25\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpswrwkvi8.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpswrwkvi8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpswrwkvi8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpswrwkvi8.jl:25\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpswrwkvi8.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpswrwkvi8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpswrwkvi8.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004048
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for w\
    \ in words\n        if count_consonants(w) == n\n            push!(result, w)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmphya931zn.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphya931zn.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphya931zn.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphya931zn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphya931zn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphya931zn.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphya931zn.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphya931zn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphya931zn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmphya931zn.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphya931zn.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphya931zn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphya931zn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004049
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    filter(x -> consonants(x)\
    \ == n, words)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp06w0yar1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp06w0yar1.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp06w0yar1.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp06w0yar1.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp06w0yar1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp06w0yar1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp06w0yar1.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp06w0yar1.jl:20\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp06w0yar1.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp06w0yar1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp06w0yar1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmp06w0yar1.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmp06w0yar1.jl:20\n   [4] macro exp"
  timestamp: 1660004049
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    return [word for word\
    \ in words if count_consonants(word) == n]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpl5f329m0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpl5f329m0.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl5f329m0.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpl5f329m0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpl5f329m0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{Int64}, Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpl5f329m0.jl:20\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl5f329m0.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level sco"
  timestamp: 1660004050
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    toRet = []\n  \
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for word in words\n     \
    \   cons = 0\n        for letter in word\n            if !(letter in vowels)\n\
    \                cons = cons + 1\n            end\n        end\n        if cons\
    \ == n\n            push!(toRet, word)\n        end\n    end\n    return toRet\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph1s2zciq.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmph1s2zciq.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1s2zciq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1s2zciq.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph1s2zciq.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1s2zciq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1s2zciq.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph1s2zciq.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1s2zciq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1s2zciq.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph1s2zciq.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph1s2zciq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph1s2zciq.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph1s2zciq.jl:46\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", "
  timestamp: 1660004050
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        num = count_consonants(word)\n        if num == n\n      \
    \      push!(result, word)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpl985bxj5.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpl985bxj5.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl985bxj5.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl985bxj5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl985bxj5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpl985bxj5.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl985bxj5.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl985bxj5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl985bxj5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpl985bxj5.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl985bxj5.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl985bxj5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl985bxj5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004050
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = Set(\"aeiou\")\n    res = []\n    for\
    \ word in split(s)\n        # Count number of consonents in word\n        cons\
    \ = sum(!(letter in vowels) for letter in word)\n        if cons == n\n      \
    \      push!(res, word)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjdqlz09m.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpjdqlz09m.jl:39\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdqlz09m.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdqlz09m.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004049
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # INSERT YOUR CODE HERE\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: 'test set: '
  timestamp: 1660004050
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    str_list = split(s)\n    #puts(str_list)\n \
    \   words = []\n    vowels = \"aeiouAEIOU\"\n    for str in str_list\n       \
    \ count = 0\n        #puts(str)\n        for c in str\n            if !(c in vowels)\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(words, str)\n        end\n    end\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004047
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    # First strip off the vowels and punctuation\n\
    \    #s = replace(s, r\"[aeiou]\", \"\")\n    s = replace(s, r\"[aeiouAEIOU]\"\
    , \"\")\n    s = replace(s, r\"[\\.,'#\\n]\", \"\")\n    \n    # Split the string\
    \ into individual words\n    words = split(s)\n    \n    # Extract the words that\
    \ contain exactly n consonants\n    n_consonants = [w for w in words if length(replace(w,\
    \ r\"[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\", \"\")) == n]\n    \n   \
    \ return n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp9cbghflc.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp9cbghflc.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9cbghflc.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9cbghflc.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp9cbghflc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp9cbghflc.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9cbghflc.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9cbghflc.jl"
  timestamp: 1660004051
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vec=split(s)\n    vec1=[]\n    count=0\n   \
    \ for i in vec\n        count=0\n        for j in i\n            if (j in \"aeiouAEIOU\"\
    )\n                count+=1\n            end\n        end\n        if count==n\n\
    \            push!(vec1,i)\n        end\n    end\n    return vec1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmq3j6g77.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpmq3j6g77.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq3j6g77.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq3j6g77.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpmq3j6g77.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq3j6g77.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq3j6g77.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpmq3j6g77.jl:42\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"white\", \"space\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq3j6g77.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq3j6g77.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpmq3j6g77.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq3j6g77.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq3j6g77.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpmq3j6g77.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n  "
  timestamp: 1660004050
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = String[]\n    for word in split(s)\n\
    \        if count_consonants(word) == n\n            push!(result, word)\n   \
    \     end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp7grcv7jh.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7grcv7jh.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7grcv7jh.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7grcv7jh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7grcv7jh.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7grcv7jh.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7grcv7jh.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7grcv7jh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7grcv7jh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7grcv7jh.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7grcv7jh.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7grcv7jh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7grcv7jh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004050
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    letters = split(s, \" \")\n    v = Vector{String}()\n\
    \    for i in letters\n        k = consonants(i)\n        if k == n\n        \
    \    push!(v, i)\n        end\n    end\n    return v\nend\n#test\nselect_words(\"\
    Mary had a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: consonants not defined\nStacktrace:\n\
    \ [1] select_words(s::String, n::Int64)\n   @ Main /tmp/tmpo7ztizgb.jl:22\n [2]\
    \ top-level scope\n   @ /tmp/tmpo7ztizgb.jl:30\nin expression starting at /tmp/tmpo7ztizgb.jl:30\n"
  stdout: ''
  timestamp: 1660004049
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    #TODO: Write your code here\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: 'test set: Error During Test at '
  timestamp: 1660004051
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = []\n    words = split(s, \" \")\n \
    \   for w in words\n        consonants = \"bcdfghjklmnpqrstvwxz\"\n        cons_count\
    \ = 0\n        for c in w\n            if c in consonants\n                cons_count\
    \ += 1\n            end\n        end\n        if cons_count == n\n           \
    \ push!(result, w)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwo1s7xz3.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpwo1s7xz3.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwo1s7xz3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo1s7xz3.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004050
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    v = Vector{String}()\n\
    \    for w in words\n        if count_consonants(w) == n\n            push!(v,\
    \ w)\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpbc43h43r.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpbc43h43r.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbc43h43r.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc43h43r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbc43h43r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpbc43h43r.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbc43h43r.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc43h43r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbc43h43r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpbc43h43r.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbc43h43r.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc43h43r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbc43h43r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004051
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z']\n    consonants_in_word = []\n    for word in words\n        for letter\
    \ in word\n            if letter in consonants\n                push!(consonants_in_word,\
    \ word)\n            end\n        end\n    end\n    return consonants_in_word\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8pcsni5o.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp8pcsni5o.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"had\"\
    , \"had\", \"little\", \"little\", \"little\", \"little\", \"lamb\", \"lamb\"\
    , \"lamb\"] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pcsni5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pcsni5o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8pcsni5o.jl:37\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"Mary\", \"had\", \"had\"\
    , \"little\", \"little\", \"little\", \"little\", \"lamb\", \"lamb\", \"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pcsni5o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pcsni5o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8pcsni5o.jl:38\n  Expression: candidate(\"simple white space\"\
    , 2) == Vector{String}([])\n   Evaluated: [\"simple\", \"simple\", \"simple\"\
    , \"simple\", \"white\", \"white\", \"white\", \"space\", \"space\", \"space\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pcsni5o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pcsni5o.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8pcsni5o.jl:39\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: [\"Hello\", \"Hello\", \"world\", \"world\", \"\
    world\", \"world\"] == [\"world\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pcsni5o.jl:39"
  timestamp: 1660004051
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    s_vec = split(s)\n    res = []\n    for i in 1:length(s_vec)\n        s_vec[i]\
    \ = lowercase(s_vec[i])\n        num_consonants = 0\n        for j in 1:length(s_vec[i])\n\
    \            if !(s_vec[i][j] in vowels)\n                num_consonants += 1\n\
    \            end\n        end\n        if num_consonants == n\n            push!(res,\
    \ s_vec[i])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvlkm8bsg.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpvlkm8bsg.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlkm8bsg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlkm8bsg.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvlkm8bsg.jl:42\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlkm8bsg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlkm8bsg.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvlkm8bsg.jl:44\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlkm8bsg.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlkm8bsg.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvlkm8bsg.jl:45\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlkm8bsg.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlkm8bsg.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpvlkm8bsg.jl:47\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", "
  timestamp: 1660004051
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected = []\n    for\
    \ word in words\n        c = count_consonants(word)\n        if c == n\n     \
    \       push!(selected, word)\n        end\n    end\n    return selected\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpgvsc9h0b.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgvsc9h0b.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgvsc9h0b.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvsc9h0b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgvsc9h0b.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgvsc9h0b.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgvsc9h0b.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvsc9h0b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgvsc9h0b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpgvsc9h0b.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgvsc9h0b.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvsc9h0b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgvsc9h0b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004052
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n   \
    \ vector = split(s)\n    final_vector = []\n    for j in 1:length(vector)\n  \
    \      matches = 0\n        word = vector[j]\n        for i in 1:length(word)\n\
    \            if word[i] in consonants\n                matches += 1\n        \
    \    end\n        end\n        if matches == n\n            final_vector = [final_vector;\
    \ word]\n        end\n    end\n    return final_vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgpgf_pdv.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpgpgf_pdv.jl:42\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgpgf_pdv.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgpgf_pdv.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004051
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    result = []\n \
    \   for word in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpooa7evjm.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpooa7evjm.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpooa7evjm.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpooa7evjm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpooa7evjm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpooa7evjm.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpooa7evjm.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpooa7evjm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpooa7evjm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpooa7evjm.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpooa7evjm.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpooa7evjm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpooa7evjm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004052
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # your code goes here\n    words = split(s)\n\
    \    words_out = String[]\n    for word in words\n        if num_consonants(word)\
    \ == n\n            push!(words_out, word)\n        end\n    end\n    return words_out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp2a89gdv1.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2a89gdv1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2a89gdv1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2a89gdv1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2a89gdv1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2a89gdv1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2a89gdv1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2a89gdv1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2a89gdv1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp2a89gdv1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2a89gdv1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2a89gdv1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2a89gdv1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004052
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    res = []\n    for x in\
    \ words\n        if count_consonants(x) == n\n            push!(res, x)\n    \
    \    end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp9kiqyiix.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9kiqyiix.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9kiqyiix.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kiqyiix.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9kiqyiix.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9kiqyiix.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9kiqyiix.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kiqyiix.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9kiqyiix.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp9kiqyiix.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9kiqyiix.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kiqyiix.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp9kiqyiix.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004052
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = split(s)\n    w = []\n    for i in v\n \
    \       if count_consonants(i) == n\n            push!(w, i)\n        end\n  \
    \  end\n    return w\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp48u6a1m2.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp48u6a1m2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp48u6a1m2.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48u6a1m2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48u6a1m2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp48u6a1m2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp48u6a1m2.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48u6a1m2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48u6a1m2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp48u6a1m2.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp48u6a1m2.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48u6a1m2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp48u6a1m2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004053
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    answer = []\n    for word in split(s)\n    \
    \    if count_consonants(word) == n\n            push!(answer, word)\n       \
    \ end\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpvlw7_ttw.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvlw7_ttw.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvlw7_ttw.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvlw7_ttw.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvlw7_ttw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvlw7_ttw.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvlw7_ttw.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvlw7_ttw.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvlw7_ttw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvlw7_ttw.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvlw7_ttw.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvlw7_ttw.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvlw7_ttw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004054
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = []\n    if n == 0\n        return result\n\
    \    end\n    # working on s without spaces\n    s = split(s, ' ')\n    for i\
    \ = 1:length(s)\n        c = 0\n        for j = 1:length(s[i])\n            if\
    \ !(s[i][j] in 'aeiouAEIOU')\n                c += 1\n            end\n      \
    \  end\n        if c == n\n            push!(result, s[i])\n        end\n    end\n\
    \    return result\nend\nselect_words(\"My name is Kocburak\", 3)\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4gm1b4m.jl:28\nin expression\
    \ starting at /tmp/tmpc4gm1b4m.jl:28\n"
  stdout: ''
  timestamp: 1660004052
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # initialize an empty vector of strings to return\
    \ later\n    v = Vector{String}() \n    # split the string s into words\n    words\
    \ = split(s)\n    # for each word in the string s\n    for w in words\n      \
    \  # if the number of consonants in w is equal to n\n        if count_consonants(w)\
    \ == n\n            # then push w to the vector v\n            push!(v, w)\n \
    \       end\n    end\n    # return the vector v\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp7u8vly8s.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7u8vly8s.jl:26\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7u8vly8s.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7u8vly8s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7u8vly8s.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7u8vly8s.jl:26\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7u8vly8s.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7u8vly8s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7u8vly8s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp7u8vly8s.jl:26\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7u8vly8s.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7u8vly8s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7u8vly8s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004054
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    #print(words)\n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   selected_words = []\n    for i in words\n        word_count = 0\n        #print(i)\n\
    \        for j in i\n            #print(j)\n            if(j in consonants)\n\
    \                word_count += 1\n            end\n        end\n        if(word_count\
    \ == n)\n            push!(selected_words, i)\n        end\n    end\n    return\
    \ selected_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_bfcx751.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp_bfcx751.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bfcx751.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bfcx751.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_bfcx751.jl:44\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bfcx751.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bfcx751.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_bfcx751.jl:46\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bfcx751.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bfcx751.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_bfcx751.jl:47\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bfcx751.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bfcx751.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_bfcx751.jl:49\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004054
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = split(s)\n    res = []\n    for i = 1:length(v)\n\
    \        if count_consonants(v[i]) == n\n            push!(res, v[i])\n      \
    \  end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpkeeynstt.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkeeynstt.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkeeynstt.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkeeynstt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkeeynstt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkeeynstt.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkeeynstt.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkeeynstt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkeeynstt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpkeeynstt.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkeeynstt.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkeeynstt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkeeynstt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004055
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v=split(s)\n    res=[]\n    for word in v\n\
    \        if word_test(word,n)==1\n            push!(res,word)\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpl1n80c35.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ word_test not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpl1n80c35.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1n80c35.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1n80c35.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl1n80c35.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ word_test not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpl1n80c35.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1n80c35.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1n80c35.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl1n80c35.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ word_test not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpl1n80c35.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1n80c35.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1n80c35.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl1n80c35.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: word_test not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, n::I"
  timestamp: 1660004055
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    count = 0\n    vector_of_words = []\n    words\
    \ = split(s, \" \")\n    for i in words\n        i = filter(x -> x != 'a' && x\
    \ != 'e' && x != 'i' && x != 'o' && x != 'u', i)\n        if length(i) == n\n\
    \            count += 1\n            push!(vector_of_words, words[count])\n  \
    \      else\n            count += 1\n        end\n    end\n    return vector_of_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4c9kpttl.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp4c9kpttl.jl:42\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4c9kpttl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4c9kpttl.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004054
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    res = Vector{String}()\n    words = split(s)\n\
    \    #println(words)\n    for word in words\n        num_consonants = 0\n    \
    \    #println(word)\n        for c in word\n            #println(c)\n        \
    \    if !(c in \"aeiou\")\n                num_consonants += 1\n            end\n\
    \        end\n        if num_consonants == n\n            push!(res, word)\n \
    \       end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzll3_711.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpzll3_711.jl:46\n  Expression: candidate(\"\
    Uncle sam\", 3) == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzll3_711.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzll3_711.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004054
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    all_words = []\n    for\
    \ word in words\n        for char in word\n            if ~ ismatch(r\"[^aeiouAEIOU]\"\
    , char) \n                continue\n            end\n            push!(all_words,\
    \ word)\n        end\n    end\n    return all_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmptnw7owrd.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmptnw7owrd.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptnw7owrd.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptnw7owrd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmptnw7owrd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmptnw7owrd.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptnw7owrd.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptnw7owrd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmptnw7owrd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ ismatch not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmptnw7owrd.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptnw7owrd.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptnw7owrd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmptnw7owrd.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n  "
  timestamp: 1660004055
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    num = 0\n    words = split(s)\n    selected_words\
    \ = []\n    for i in 1:length(words)\n        num = 0\n        for j in 1:length(words[i])\n\
    \            if isconsonant(words[i][j])\n                num += 1\n         \
    \   end\n        end\n        if num == n\n            push!(selected_words, words[i])\n\
    \        end\n    end\n    return selected_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpplel1hu9.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpplel1hu9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpplel1hu9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpplel1hu9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpplel1hu9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpplel1hu9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpplel1hu9.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpplel1hu9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpplel1hu9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isconsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpplel1hu9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpplel1hu9.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpplel1hu9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpplel1hu9.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isconsonant not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    parts = split(s)\n    results = []\n    for\
    \ part in parts\n        if n_consonants(part) == n\n            push!(results,\
    \ part)\n        end\n    end\n    return results\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpnvz9hodq.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpnvz9hodq.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvz9hodq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvz9hodq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnvz9hodq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpnvz9hodq.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvz9hodq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvz9hodq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnvz9hodq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpnvz9hodq.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvz9hodq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvz9hodq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnvz9hodq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    #your code here\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfp76wrtx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpfp76wrtx.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp76wrtx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp76wrtx.jl:27\n"
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, r\"\\s+\")\n    n_words = length(words)\n\
    \    output = Vector{String}(undef, n_words)\n    c = 0\n    for word in words\n\
    \        if count_consonants(word) == n\n            c += 1\n            output[c]\
    \ = word\n        end\n    end\n    return output[1:c]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5jt5qmj1.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5jt5qmj1.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5jt5qmj1.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jt5qmj1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5jt5qmj1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5jt5qmj1.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5jt5qmj1.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jt5qmj1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5jt5qmj1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5jt5qmj1.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5jt5qmj1.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jt5qmj1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5jt5qmj1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # ...\nend\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp1f6269jw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp1f6269jw.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1f6269jw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1f6269jw.jl:26\n"
  timestamp: 1660004056
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # code here ...\n    return []\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa3kcloyo.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpa3kcloyo.jl:27\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3kcloyo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3kcloyo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa3kcloyo.jl:28\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3kcloyo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3kcloyo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa3kcloyo.jl:30\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3kcloyo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3kcloyo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa3kcloyo.jl:31\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3kcloyo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3kcloyo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa3kcloyo.jl:33\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004055
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s) \n    result = [] \n    for\
    \ word in words \n        word_ = replace(word,r\"a|e|i|o|u|A|E|I|O|U|y|Y\",\"\
    \") \n        if length(word_) == n \n            push!(result, word) \n     \
    \   end \n    end \n    return result \nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpi3c5xft5.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpi3c5xft5.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi3c5xft5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3c5xft5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpi3c5xft5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::SubString{String}, ::Regex, ::String)\n  Closest\
    \ candidates are:\n    replace(!Matched::Union{Function, Type}, ::Any; count)\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n    replace(::AbstractString,\
    \ !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    replace(::Any, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpi3c5xft5.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi3c5xft5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3c5xft5.jl:33\n"
  timestamp: 1660004056
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    consonants = [c for c\
    \ in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'] ]\n    vector_words = []\n    for word in words\n \
    \       number_consonants = 0\n        for letter in word\n            if letter\
    \ in consonants\n                number_consonants += 1\n            end\n   \
    \     end\n        if number_consonants == n\n            push!(vector_words,\
    \ word)\n        end\n    end\n    return vector_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph7sbzhki.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmph7sbzhki.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph7sbzhki.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph7sbzhki.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004055
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    res = []\n    for word\
    \ in words\n        count = 0\n        for letter in word\n            if !isvowel(letter)\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(res, word)\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp7t7ysmkr.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7t7ysmkr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7t7ysmkr.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7t7ysmkr.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7t7ysmkr.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7t7ysmkr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7t7ysmkr.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7t7ysmkr.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7t7ysmkr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7t7ysmkr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7t7ysmkr.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7t7ysmkr.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7t7ysmkr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isvowel not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n  "
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    out = Vector{String}()\n\
    \    for i = 1:length(words)\n        if count_consonants(words[i]) == n\n   \
    \         push!(out, words[i])\n        end\n    end\n    return out\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpaj65j_6k.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaj65j_6k.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaj65j_6k.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaj65j_6k.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaj65j_6k.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaj65j_6k.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaj65j_6k.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaj65j_6k.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaj65j_6k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaj65j_6k.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaj65j_6k.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaj65j_6k.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaj65j_6k.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004057
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = split(s)\n    words = []\n    for i in 1:length(v)\n\
    \        if count_consonants(v[i]) == n\n            push!(words, v[i])\n    \
    \    end\n    end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp_v8t841h.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_v8t841h.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_v8t841h.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_v8t841h.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_v8t841h.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_v8t841h.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_v8t841h.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_v8t841h.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_v8t841h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_v8t841h.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_v8t841h.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_v8t841h.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_v8t841h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004057
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected_words = []\n\
    \    for word in words\n        num_consonants = 0\n        for ch in word\n \
    \           num_consonants += (ch in \"bcdfghjklmnpqrstvwxyz\")\n        end\n\
    \        if num_consonants == n\n            push!(selected_words, word)\n   \
    \     end\n    end\n    return selected_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgr3p1__u.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpgr3p1__u.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr3p1__u.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr3p1__u.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004056
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    words = split(s)\n    result = []\n    for\
    \ word in words\n        if length(word) == n\n            if all(i -> (i in consonants),\
    \ [word[j] for j in 1:n])\n                push!(result, word)\n            end\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcokxeq3s.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpcokxeq3s.jl:36\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcokxeq3s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcokxeq3s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcokxeq3s.jl:37\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcokxeq3s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcokxeq3s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcokxeq3s.jl:39\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcokxeq3s.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcokxeq3s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcokxeq3s.jl:40\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcokxeq3s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcokxeq3s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcokxeq3s.jl:42\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vec_str=split(s)\n    length_str=size(vec_str,1)\n\
    \    vec_str_empty=[]\n    vec_str_res=[]\n    if length_str==0\n        return\
    \ vec_str_empty\n    end\n    for i in 1:length_str\n        num_cons=length(consonants(vec_str[i]))\n\
    \        if num_cons==n\n            push!(vec_str_res,vec_str[i])\n        end\n\
    \    end\n    return vec_str_res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp7tr_askj.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7tr_askj.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tr_askj.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tr_askj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7tr_askj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7tr_askj.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tr_askj.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tr_askj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7tr_askj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp7tr_askj.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tr_askj.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tr_askj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp7tr_askj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004058
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if isempty(s)\n        return []\n    end\n\
    \   \n    words = split(s)\n    ret = []\n    for w in words\n        if num_consonants(w)\
    \ == n\n            push!(ret, w)\n        end\n    end\n    return ret\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpyp__bsf3.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpyp__bsf3.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp__bsf3.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp__bsf3.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyp__bsf3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpyp__bsf3.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp__bsf3.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp__bsf3.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyp__bsf3.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpyp__bsf3.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp__bsf3.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp__bsf3.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyp__bsf3.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004058
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    end\n    \n \n\"\"\"Given a vector of natural\
    \ numbers and a natural number n, \nyou have been tasked to implement a function\
    \ that returns a \nvector of all numbers from the input vector that contain exactly\
    \ \nn digits, in the same order these numbers appear in the input vector.\nIf\
    \ the input vector is empty then the function should return an empty vector.\n\
    Examples:\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000], 2)\n[100,\
    \ 200, 1000, 3000]\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000],\
    \ 3)\n[1000, 3000]\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000],\
    \ 1)\n[100, 1, 200, 20, 1000, 4, 3000]\n>>> select_longer_than_n([100, 1, 200,\
    \ 20, 1000, 4, 3000], 0)\n[]\n>>> select_longer_than_n([100, 1, 200, 20, 1000,\
    \ 4, 3000], 4)\n[]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjip0y_7n.jl:22\nin expression starting at /tmp/tmpjip0y_7n.jl:22\n"
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if length(word) == n\n            push!(result, word)\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplob9fqhf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmplob9fqhf.jl:33\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplob9fqhf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplob9fqhf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplob9fqhf.jl:34\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplob9fqhf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplob9fqhf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplob9fqhf.jl:36\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplob9fqhf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplob9fqhf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplob9fqhf.jl:37\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplob9fqhf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplob9fqhf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplob9fqhf.jl:39\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", "
  timestamp: 1660004058
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Write the body of the function\nend\n@testset\
    \ \"Example Tests\" begin\n    @test select_words(\"Mary had a little lamb\",\
    \ 4) == [\"little\"]\n    @test select_words(\"Mary had a little lamb\", 3) ==\
    \ [\"Mary\", \"lamb\"]\n    @test select_words(\"simple white space\", 2) == []\n\
    \    @test select_words(\"Hello world\", 4) == [\"world\"]\n    @test select_words(\"\
    Uncle sam\", 3) == [\"Uncle\"]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp5oq1bfka.jl:21

    in expression starting at /tmp/tmp5oq1bfka.jl:21

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    index_start = 1\n    index_end = 1\n    result\
    \ = []\n    while index_end < length(s)\n        while index_end < length(s) &&\
    \ s[index_end] != ' '\n            index_end += 1\n        end\n        substr\
    \ = s[index_start:index_end]\n        substr_length = nconsonants(substr)\n  \
    \      if substr_length == n\n            push!(result, substr)\n        end\n\
    \        index_start = index_end + 1\n        index_end = index_start\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmppfg3thah.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppfg3thah.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppfg3thah.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppfg3thah.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppfg3thah.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppfg3thah.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppfg3thah.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppfg3thah.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppfg3thah.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ nconsonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmppfg3thah.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppfg3thah.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppfg3thah.jl:40\ntest set:\
    \ Error During Test at /tmp/tmppfg3thah.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: nconsonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004059
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    res = []\n    push!(res, split(s))\n    res1\
    \ = []\n    for word in res\n        if count_consonants(word) == n\n        \
    \    push!(res1, word)\n        end\n    end\n    return res1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpba7w0fns.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpba7w0fns.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpba7w0fns.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba7w0fns.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpba7w0fns.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpba7w0fns.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpba7w0fns.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba7w0fns.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpba7w0fns.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpba7w0fns.jl:23\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpba7w0fns.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba7w0fns.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpba7w0fns.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004059
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"z\"]\n    words = split(s)\n    count = 0\n    ncon\
    \ = 0\n    answer = []\n    for i in 1:length(words)\n        for j in 1:length(words[i])\n\
    \            if words[i][j] in consonants\n                count += 1\n      \
    \      end\n        end\n        if count == n\n            push!(answer, words[i])\n\
    \        end\n        count = 0\n    end\n    return answer\nend\nselect_words(\"\
    simple white space\", 2)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3rz9kbir.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp3rz9kbir.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rz9kbir.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rz9kbir.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3rz9kbir.jl:44\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rz9kbir.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rz9kbir.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3rz9kbir.jl:46\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rz9kbir.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rz9kbir.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3rz9kbir.jl:47\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3rz9kbir.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3rz9kbir.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp3rz9kbir.jl:49\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004059
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected = []\n    for\
    \ word in words\n        count = 0\n        consonants = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        for letter in word\n\
    \            if letter in consonants\n                count += 1\n           \
    \ end\n        end\n        if count == n\n            push!(selected, word)\n\
    \        end\n    end\n    return selected\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt4ev7dv0.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpt4ev7dv0.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4ev7dv0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4ev7dv0.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt4ev7dv0.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4ev7dv0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4ev7dv0.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt4ev7dv0.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4ev7dv0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4ev7dv0.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt4ev7dv0.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4ev7dv0.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4ev7dv0.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpt4ev7dv0.jl:46\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004059
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    result = []\n \
    \   for word in words\n        n_consonants = 0\n        for letter in word\n\
    \            if !(letter in \"aeiouAEIOU\")\n                n_consonants += 1\n\
    \            end\n        end\n        if n_consonants == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nselect_words(\"Mary had\
    \ a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    count_consonants(w::String) = length(replace(lowercase(w),\
    \ r\"[aeiou]\", \"\"))\n    words = split(s)\n    map(w -> w * \" \" * count_consonants(w),\
    \ words)\n    [w for w in words if count_consonants(w) == n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: 'test set: '
  timestamp: 1660004060
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmptcahlfnl.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmptcahlfnl.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v::Vector{String} = split(s, \" \")\n    res::Vector{String}\
    \ = []\n    for i in 1:length(v)\n        con_num = 0\n        for j in 1:length(v[i])\n\
    \            if ! isvowel(v[i][j])\n                con_num += 1\n           \
    \ end\n        end\n        if con_num == n\n            push!(res, v[i])\n  \
    \      end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmphgszeuf3.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphgszeuf3.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgszeuf3.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgszeuf3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphgszeuf3.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphgszeuf3.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgszeuf3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgszeuf3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphgszeuf3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphgszeuf3.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgszeuf3.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgszeuf3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmphgszeuf3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isvowel not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n  "
  timestamp: 1660004060
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    cons = \"qwrtypsdfghjklzxcvbnm\"\n    words\
    \ = split(s)\n    res = String[]\n    for i in words\n        count = 0\n    \
    \    for j in i\n            if j in cons\n                count += 1\n      \
    \      end\n        end\n        if count == n\n            push!(res, i)\n  \
    \      end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7o7qaum.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpa7o7qaum.jl:41\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7o7qaum.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7o7qaum.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004060
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    _s = split(s)\n    result = []\n    for i in\
    \ 1:length(_s)\n        count = 0\n        for j in 1:length(_s[i])\n        \
    \    if(is_consonant(_s[i][j]))\n                count += 1\n            end\n\
    \        end\n        if(count == n)\n            push!(result, _s[i])\n     \
    \   end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpwrggxd8j.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwrggxd8j.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrggxd8j.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrggxd8j.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwrggxd8j.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwrggxd8j.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrggxd8j.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrggxd8j.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwrggxd8j.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_consonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpwrggxd8j.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrggxd8j.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrggxd8j.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpwrggxd8j.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_consonant\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004061
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    result = []\n \
    \   for word in words\n        if (num_consonants(word) == n)\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpbelnx4ty.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbelnx4ty.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbelnx4ty.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbelnx4ty.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbelnx4ty.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbelnx4ty.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbelnx4ty.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbelnx4ty.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbelnx4ty.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ num_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbelnx4ty.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbelnx4ty.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbelnx4ty.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbelnx4ty.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: num_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_w"
  timestamp: 1660004061
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s) \n    n_words = length(words)\
    \ \n    result = []\n    for i in 1:n_words\n        word = words[i]\n       \
    \ if n_consonants(word) == n\n            push!(result, word)\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpa_t__cw9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpa_t__cw9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_t__cw9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_t__cw9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_t__cw9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpa_t__cw9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_t__cw9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_t__cw9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_t__cw9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpa_t__cw9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_t__cw9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_t__cw9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_t__cw9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_words(s::"
  timestamp: 1660004061
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    cons_letters = \"bcdfghjklmnpqrstvwxyz\"\n \
    \   words = split(s)\n    result = []\n    for word in words\n        count =\
    \ 0\n        for letter in word\n            if lowercase(letter) in cons_letters\n\
    \                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # convert string to char vector and filter out\
    \ spaces\n    word_split = map(x -> x == ' ', s)\n    words = split(s, word_split)\n\
    \    words = filter(x -> x != \"\", words)\n    # use a function to get consonant\
    \ count and filter for words with exactly n\n    return filter(x -> get_consonant_count(x)\
    \ == n, words)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5sdtqput.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  ArgumentError:\
    \ map(f, s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::var\"#1#4\", s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5sdtqput.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5sdtqput.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5sdtqput.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp5sdtqput.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  ArgumentError:\
    \ map(f, s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::var\"#1#4\", s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5sdtqput.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5sdtqput.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5sdtqput.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp5sdtqput.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  ArgumentError:\
    \ map(f, s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::var\"#1#4\", s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5sdtqput.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v"
  timestamp: 1660004061
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    ls=split(s)\n    ls2=[]\n    for x in ls\n \
    \       if consonants(x)==n\n            push!(ls2,x)\n        end\n    end\n\
    \    return ls2\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmphhlu9oio.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphhlu9oio.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhlu9oio.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhlu9oio.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphhlu9oio.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphhlu9oio.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhlu9oio.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhlu9oio.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphhlu9oio.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmphhlu9oio.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphhlu9oio.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphhlu9oio.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphhlu9oio.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004061
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s == \"\"\n        return []\n    end\n \
    \   words = split(s)\n    selected_words = []\n    num_consonants(word) = length(setdiff(char.(word),\
    \ ['a', 'e', 'i', 'o', 'u']))\n    for word in words\n        if num_consonants(word)\
    \ == n\n            push!(selected_words, word)\n        end\n    end\n    return\
    \ selected_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpbjtc13qc.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ char not defined\n  Stacktrace:\n   [1] (::var\"#num_consonants#1\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:24\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbjtc13qc.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbjtc13qc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbjtc13qc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ char not defined\n  Stacktrace:\n   [1] (::var\"#num_consonants#1\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:24\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbjtc13qc.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbjtc13qc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpbjtc13qc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ char not defined\n  Stacktrace:\n   [1] (::var\"#num_consonants#1\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:24\n   [2] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpbjtc13qc.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbjtc13qc.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6]"
  timestamp: 1660004061
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    length(words) == 0 &&\
    \ return []\n    selected_words = String[]\n    for word in words\n        num_consonants\
    \ = 0\n        for i = 1:length(word)\n            is_consonant(word[i]) && num_consonants\
    \ += 1\n        end\n        num_consonants == n && push!(selected_words, word)\n\
    \    end\n    return selected_words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"is_consonant(word[i])\
    \ && num_consonants\" around /tmp/tmpk98rc2b0.jl:25\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk98rc2b0.jl:1\nin expression starting at /tmp/tmpk98rc2b0.jl:1\n"
  stdout: ''
  timestamp: 1660004059
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n  strs = split(s)\n  num_cons = [\"bl\", \"cl\"\
    , \"fl\", \"gl\", \"pl\", \"sl\", \"br\", \"cr\", \"dr\", \"fr\", \"gr\", \"pr\"\
    , \"tr\", \"sc\", \"sk\", \"sm\", \"sn\", \"sp\", \"st\", \"sw\", \"ch\", \"sh\"\
    , \"th\", \"wh\"]\n  function count_cons(word)\n    count = 0\n    for i in range(1,length(word)-1)\n\
    \      if (word[i] in num_cons)\n        count += 1\n      end\n    end\n    count\n\
    \  end\n  words = []\n  for i in range(1,length(strs))\n    if (count_cons(strs[i])\
    \ == n)\n      push!(words, strs[i])\n    end\n  end\n  return words\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnvhufgq9.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpnvhufgq9.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvhufgq9.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvhufgq9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpnvhufgq9.jl:44\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvhufgq9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvhufgq9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpnvhufgq9.jl:46\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvhufgq9.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvhufgq9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpnvhufgq9.jl:47\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvhufgq9.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvhufgq9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpnvhufgq9.jl:49\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004061
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = s.split(\" \")\n    vec = Vector{String}()\n\
    \    for i in 1:length(words)\n        word = words[i]\n        word = word.lowercase()\n\
    \        consonants = 0\n        for j in 1:length(word)\n            if !(word[j]\
    \ in 'aeiou')\n                consonants += 1\n            end\n        end\n\
    \        if consonants == n\n            vec = push!(vec, words[i])\n        end\n\
    \    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnjs63o5l.jl:26\nin expression\
    \ starting at /tmp/tmpnjs63o5l.jl:26\n"
  stdout: ''
  timestamp: 1660004059
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"]\n    total_consonants = zeros(Int64, length(s))\n    selected_words\
    \ = []\n    for i = 1:length(s)\n        if s[i] in consonants\n            total_consonants[i]\
    \ = 1\n        end\n    end\n    for j = 1:length(s)\n        if s[j] in vowels\n\
    \            total_consonants[j] = 0\n        end\n    end\n    a, b = 1, 0\n\
    \    for k = 1:length(s)\n        if s[k] == \" \"\n            b = k\n      \
    \      push!(selected_words, s[a:b])\n            a = k + 1\n        end\n   \
    \ end\n    push!(selected_words, s[a:end])\n    selected_words = filter(x -> sum(total_consonants[x.indices])\
    \ == n, selected_words)\n    return selected_words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5mtw9jbi.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  type\
    \ String has no field indices\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] (::var\"#1#2\"{Int64, Vector{Int64}})(x::String)\n     @ Main\
    \ /tmp/tmp5mtw9jbi.jl:42\n   [3] filter(f::var\"#1#2\"{Int64, Vector{Int64}},\
    \ a::Vector{Any})\n     @ Base ./array.jl:2484\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5mtw9jbi.jl:42\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp5mtw9jbi.jl:50 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5mtw9jbi.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp5mtw9jbi.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  type String\
    \ has no field indices\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] (::var\"#1#2\"{Int64, Vector{Int64}})(x::String)\n     @ Main\
    \ /tmp/tmp5mtw9jbi.jl:42\n   [3] filter(f::var\"#1#2\"{Int64, Vector{Int64}},\
    \ a::Vector{Any})\n     @ Base ./array.jl:2484\n   [4] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp5mtw9jbi.jl:42\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp5mtw9jbi.jl:51 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5mtw9jbi.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp5mtw9jbi.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  type String has\
    \ no field indices\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] (::var\"#1#2\"{Int64, Vector{Int64}})(x::String)\n     @ Main /tmp/tmp5mtw9jbi.jl:42\n\
    \   [3] filter(f::var\"#1#2\"{Int64, Vecto"
  timestamp: 1660004062
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, ' ')\n    results = []\n  \
    \  for word in words\n        consonants = vowels = 0\n        for letter in word\n\
    \            if letter in \"aeiouAEIOU\"\n                vowels += 1\n      \
    \      else\n                consonants += 1\n            end\n        end\n \
    \       if consonants == n\n            push!(results, word)\n        end\n  \
    \  end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004058
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, ' ')\n    result = String[]\n\
    \    for i in 1:length(words)\n        counter = 0\n        for j in 1:length(words[i])\n\
    \            if(!(words[i][j] in 'aeiouAEIOU'))\n                counter += 1\n\
    \            end\n        end\n        if(counter == n)\n            push!(result,\
    \ words[i])\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp23sm85q6.jl:24\nin expression\
    \ starting at /tmp/tmp23sm85q6.jl:24\n"
  stdout: ''
  timestamp: 1660004060
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = Vector{String}()\n    s = replace(s,\
    \ r\"[^a-zA-Z ]\", \"\")\n    words = split(s)\n    for word in words\n      \
    \  consonants = 0\n        vowels = 0\n        for letter in word\n          \
    \  if letter in \"aeiouAEIOU\"\n                vowels += 1\n            else\n\
    \                consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpykbwumal.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpykbwumal.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykbwumal.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykbwumal.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpykbwumal.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpykbwumal.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykbwumal.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykbwumal.jl"
  timestamp: 1660004062
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # All consonants in the english alphabet\n \
    \   consonants = \"bcdfghjklmnpqrstvwxyz\"\n    # Array of words in string s\n\
    \    words = split(s)\n    # The solution vector\n    solution = []\n    # For\
    \ each word in words\n    for word in words\n        # Check how many consonants\
    \ are in the word\n        for j in 1:length(word)\n            if word[j] in\
    \ consonants\n                # If there are exactly n consonants, \n        \
    \        # add the word to the solution vector\n                if count(word,\
    \ consonants) == n\n                    push!(solution, word)\n              \
    \  end\n            end\n        end\n    end\n    return solution\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9yqsc7lr.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp9yqsc7lr.jl:45\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqsc7lr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqsc7lr.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp9yqsc7lr.jl:46\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqsc7lr.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqsc7lr.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp9yqsc7lr.jl:48\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqsc7lr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqsc7lr.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp9yqsc7lr.jl:49\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9yqsc7lr.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9yqsc7lr.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660004062
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    n_consonants = (x -> !isvowel(x)) # create a\
    \ function to test whether a character is a consonant\n    sel_words = [] # vector\
    \ to contain the selected words\n    word = [] # vector to contain a word\n  \
    \  for letter in collect(s)\n        if letter == ' ' # split words with a space\n\
    \            if count_chars(n_consonants, word) == n\n                sel_words\
    \ = [sel_words; join(word, \"\")]\n            end\n            word = []\n  \
    \      else\n            push!(word, letter)\n        end\n    end\n    if count_chars(n_consonants,\
    \ word) == n\n        sel_words = [sel_words; join(word, \"\")]\n    end\n   \
    \ return sel_words\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp39mns8_b.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp39mns8_b.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39mns8_b.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39mns8_b.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp39mns8_b.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp39mns8_b.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39mns8_b.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39mns8_b.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp39mns8_b.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp39mns8_b.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39mns8_b.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39mns8_b.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp39mns8_b.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_chars not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::Stri"
  timestamp: 1660004063
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    res = []\n    for i in\
    \ 1:length(words)\n        if count_consonants(words[i]) == n\n            push!(res,\
    \ words[i])\n        end\n    end\n    return res\nend\n    \nselect_words(\"\
    Mary had a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_consonants not defined\nStacktrace:\n\
    \ [1] select_words(s::String, n::Int64)\n   @ Main /tmp/tmpnbwprut7.jl:22\n [2]\
    \ top-level scope\n   @ /tmp/tmpnbwprut7.jl:29\nin expression starting at /tmp/tmpnbwprut7.jl:29\n"
  stdout: ''
  timestamp: 1660004062
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    out = []\n    for word\
    \ in words\n        num_consonants = length(findall(r\"^[^aeiouAEIOU]+$\", word))\n\
    \        if num_consonants == n\n            push!(out, word)\n        end\n \
    \   end\n    return out\nend\nprintln(select_words(\"Mary had a little lamb\"\
    , 4))\nprintln(select_words(\"Mary had a little lamb\", 3))\nprintln(select_words(\"\
    simple white space\", 2))\nprintln(select_words(\"Hello world\", 4))\nprintln(select_words(\"\
    Uncle sam\", 3))\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t\
    @test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0g5lv4nb.jl:36

    '
  stdout: "String[]\nString[]\nString[]\nString[]\nString[]\ntest set: Test Failed\
    \ at /tmp/tmp0g5lv4nb.jl:39\n  Expression: candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0g5lv4nb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g5lv4nb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0g5lv4nb.jl:40\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0g5lv4nb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g5lv4nb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0g5lv4nb.jl:42\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0g5lv4nb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g5lv4nb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0g5lv4nb.jl:43\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0g5lv4nb.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g5lv4nb.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660004063
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Step #1. \n    vec_words = split(s, r\"\\\
    s+\") # r\"\\s+\" is a regular expression where \"\\s\" means whitespace and \"\
    +\" means \"1 or more times\".\n    result = []\n    # Step #2. \n    for word\
    \ in vec_words \n        num_consonants = count_consonants(word)\n        if num_consonants\
    \ == n\n            push!(result, word)\n        end\n    end\n    # Step #3.\
    \ \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfk6m74cy.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpfk6m74cy.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfk6m74cy.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk6m74cy.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfk6m74cy.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpfk6m74cy.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfk6m74cy.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk6m74cy.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfk6m74cy.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpfk6m74cy.jl:24\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfk6m74cy.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk6m74cy.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfk6m74cy.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004064
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = Vector{String}()\n    for i in eachmatch(r\"\
    (\\w+)\", s)\n        word = match(r\"(\\w+)\", s)[i]\n        if count_consonants(word)\
    \ == n\n            push!(words, word)\n        end\n    end\n    return words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004064
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # Your code here\n    words = split(s)\n   \
    \ cons = [\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    ]\n    res = []\n    for word in words\n        ncons = 0\n        for letter\
    \ in word\n            letter = uppercase(letter)\n            if letter in cons\n\
    \                ncons += 1\n            end\n        end\n        if ncons ==\
    \ n\n            push!(res, word)\n        end\n    end\n    return res\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpax9sus70.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpax9sus70.jl:43\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax9sus70.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax9sus70.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpax9sus70.jl:44\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax9sus70.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax9sus70.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpax9sus70.jl:46\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax9sus70.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax9sus70.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpax9sus70.jl:47\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax9sus70.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax9sus70.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpax9sus70.jl:49\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004063
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    out = []\n    for\
    \ w in words\n        if number_of_consonants(w) == n\n            push!(out,\
    \ w)\n        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpsv8uvo08.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsv8uvo08.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsv8uvo08.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv8uvo08.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsv8uvo08.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsv8uvo08.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsv8uvo08.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv8uvo08.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsv8uvo08.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ number_of_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpsv8uvo08.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsv8uvo08.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv8uvo08.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsv8uvo08.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: number_of_consonants\
    \ not defined\n  Sta"
  timestamp: 1660004064
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmptcahlfnl.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmptcahlfnl.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # we need to slice and convert to Vector each\
    \ word, that's a \n    # cleaner way than splitting and then searching, \n   \
    \ # we also need to find out how many consonants each word contains,\n    # that\
    \ is what I tried to do here:\n    # this function will return a vector of tuples\
    \ of the form (word, number of consonants)\n    function extract_nconsonants(s::String,\
    \ n::Int64)::Vector{Tuple{String, Int64}}\n        v = split(s, \" \")\n     \
    \   consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    ]\n        for i in 1:length(v)\n            count = 0\n            for char in\
    \ v[i]\n                if char in consonants\n                    count += 1\n\
    \                end\n            end\n            v[i] = (v[i], count)\n    \
    \    end\n        return v\n    end\n    # now that we have this function, we\
    \ need to return only the words that contain exactly n consonants\n    v = extract_nconsonants(s,\
    \ n)\n    answer = []\n    for word in v\n        if word[2] == n\n          \
    \  push!(answer, word[1])\n        end\n    end\n    return answer\nend\nprintln(select_words(\"\
    Mary had a little lamb\", 4))\nprintln(select_words(\"Mary had a little lamb\"\
    , 3))\nprintln(select_words(\"simple white space\", 2))\nprintln(select_words(\"\
    Hello world\", 4))\nprintln(select_words(\"Uncle sam\", 3))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: ''
  timestamp: 1660004064
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    consonants(s::String)\
    \ = length(s) - length(matchall(r\"[aeiouAEIOU]\", s))\n    return [w for w in\
    \ words if consonants(w) == n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpfnax7x2n.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#consonants#2\")(::SubString{String})\n  Closest\
    \ candidates are:\n    (::var\"#consonants#2\")(!Matched::String) at /tmp/tmpfnax7x2n.jl:20\n\
    \  Stacktrace:\n    [1] (::var\"#1#3\"{Int64, var\"#consonants#2\"})(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [5] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [6] select_words(s::String, n::Int64)\n      @ Main /tmp/tmpfnax7x2n.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfnax7x2n.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfnax7x2n.jl:27\n"
  timestamp: 1660004065
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # check input\n    if n < 0 \n        throw(DomainError(\"\
    n must be positive!\"))\n    end\n    if s == \"\"\n        return String[]\n\
    \    end\n    # split string and pick out words\n    words = split(s)\n    word_consonants\
    \ = []\n    for word in words\n        if length(word) - length(findall(r\"[aeiouAEIOU]\"\
    , word)) == n\n            push!(word_consonants, word)\n        end\n    end\n\
    \    return word_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004061
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words_list = split(s)\n    result = []\n   \
    \ for word in words_list\n        if sum(is_letter.(collect(word))) - sum(is_vowel.(collect(word)))\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp5b46n4lb.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_letter not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5b46n4lb.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5b46n4lb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5b46n4lb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5b46n4lb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_letter not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5b46n4lb.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5b46n4lb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5b46n4lb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5b46n4lb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_letter not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp5b46n4lb.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5b46n4lb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5b46n4lb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp5b46n4lb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_letter not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, n::I"
  timestamp: 1660004065
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5dou1t03.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp5dou1t03.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dou1t03.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dou1t03.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5dou1t03.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp5dou1t03.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660004065
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # YOUR CODE HERE\n    # Return a Vector{String}\
    \ with all words in s that have n consanants\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpu2u3x9q2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpu2u3x9q2.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2u3x9q2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2u3x9q2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpu2u3x9q2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpu2u3x9q2.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        consonants = 0\n        for letter in word\n            if\
    \ ~ isvowel(letter)\n                consonants += 1\n            end\n      \
    \  end\n        if consonants == n\n            push!(result, word)\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpn2v59ha7.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpn2v59ha7.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpn2v59ha7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn2v59ha7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2v59ha7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn2v59ha7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpn2v59ha7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn2v59ha7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2v59ha7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn2v59ha7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isvowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpn2v59ha7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn2v59ha7.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2v59ha7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpn2v59ha7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isvowel not defined\n\
    \  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n  "
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    if s==\"\"\n        return Vector{String}()\n\
    \    end\n    words=split(s)\n    d=Dict{String,Int64}()\n    for word in words\n\
    \        count=0\n        for ch in word\n            if ch=='a' || ch=='e' ||\
    \ ch=='i' || ch=='o' || ch=='u' || ch=='y' || ch=='A' || ch=='E' || ch=='I' ||\
    \ ch=='O' || ch=='U' || ch=='Y'\n                continue\n            else\n\
    \                count+=1\n            end\n        end\n        if count==n\n\
    \            d[word]=n\n        end\n    end\n    arr=Vector{String}()\n    for\
    \ (key,value) in d\n        push!(arr,key)\n    end\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp26764vdr.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp26764vdr.jl:49\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26764vdr.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26764vdr.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp26764vdr.jl:54\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"f\", \"c\", \"b\", \"d\"]\
    \ == [\"b\", \"c\", \"d\", \"f\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26764vdr.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26764vdr.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # your code goes here\n    return vcat()\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp97l4ks_9.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp97l4ks_9.jl:27\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97l4ks_9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97l4ks_9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp97l4ks_9.jl:28\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97l4ks_9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97l4ks_9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp97l4ks_9.jl:30\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97l4ks_9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97l4ks_9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp97l4ks_9.jl:31\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97l4ks_9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97l4ks_9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp97l4ks_9.jl:33\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004065
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp5dou1t03.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp5dou1t03.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5dou1t03.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5dou1t03.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5dou1t03.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp5dou1t03.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, r\"\\s+\")\n    result = []\n\
    \    for w in words\n        if count_consonants(w) == n\n            push!(result,\
    \ w)\n        end\n    end\n    return result\nend\n \nprintln(select_words(\"\
    Mary had a little lamb\", 4))\nprintln(select_words(\"Mary had a little lamb\"\
    , 3))\nprintln(select_words(\"simple white space\", 2))\nprintln(select_words(\"\
    Hello world\", 4))\nprintln(select_words(\"Uncle sam\", 3))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: count_consonants not defined\nStacktrace:\n\
    \ [1] select_words(s::String, n::Int64)\n   @ Main /tmp/tmpkpgjsqkq.jl:22\n [2]\
    \ top-level scope\n   @ /tmp/tmpkpgjsqkq.jl:29\nin expression starting at /tmp/tmpkpgjsqkq.jl:29\n"
  stdout: ''
  timestamp: 1660004064
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpcsrw1g56.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpcsrw1g56.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsrw1g56.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsrw1g56.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcsrw1g56.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpcsrw1g56.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660004066
- exit_code: -1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # write your function here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpcm87l3so.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpcm87l3so.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcm87l3so.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcm87l3so.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcm87l3so.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmpcm87l3so.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660004066
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    words_with_n_consonants\
    \ = []\n    for word in words\n        consonants = 0\n        for letter in word\n\
    \            if !(letter in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n    \
    \            consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            push!(words_with_n_consonants, word)\n        end\n    end\n\
    \    return words_with_n_consonants\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkk16hq0l.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpkk16hq0l.jl:39\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk16hq0l.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk16hq0l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkk16hq0l.jl:40\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk16hq0l.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk16hq0l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkk16hq0l.jl:42\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk16hq0l.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk16hq0l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkk16hq0l.jl:43\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkk16hq0l.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkk16hq0l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkk16hq0l.jl:45\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: [\"a\", "
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, \" \")\n    v = Vector{String}()\n\
    \    for i in 1:length(words)\n        cnt = 0\n        for j in 1:length(words[i])\n\
    \            if (words[i][j] in \"bcdfghjklmnpqrstvwxyz\")\n                cnt\
    \ += 1\n            end\n        end\n        if (cnt == n)\n            push!(v,\
    \ words[i])\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_bdd4bbs.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp_bdd4bbs.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"lamb\"\
    ] == [\"Mary\", \"lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bdd4bbs.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bdd4bbs.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    v = split(s)\n    res = []\n    for i in 1:length(v)\n\
    \        if count_consonants(v[i]) == n\n            push!(res, v[i])\n      \
    \  end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp12q8dih4.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp12q8dih4.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp12q8dih4.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp12q8dih4.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12q8dih4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp12q8dih4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp12q8dih4.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp12q8dih4.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12q8dih4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp12q8dih4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp12q8dih4.jl:22\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp12q8dih4.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12q8dih4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp12q8dih4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004066
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, r\"\\s+\")\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    function count_consonants(s::String)::Int64\n\
    \        counter = 0\n        for l in s\n            if l in consonants\n   \
    \             counter += 1\n            end\n        end\n        return counter\n\
    \    end\n    selected_words = Vector{String}()\n    for w in words\n        if\
    \ count_consonants(w) == n\n            push!(selected_words, w)\n        end\n\
    \    end\n    return selected_words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpud5ozb1s.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpud5ozb1s.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching (::var\"#count_consonants#1\"{String})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#count_consonants#1\")(!Matched::String)\
    \ at /tmp/tmpud5ozb1s.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpud5ozb1s.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpud5ozb1s.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpud5ozb1s.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpud5ozb1s.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching (::var\"#count_consonants#1\"{String})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#count_consonants#1\")(!Matched::String)\
    \ at /tmp/tmpud5ozb1s.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpud5ozb1s.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpud5ozb1s.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpud5ozb1s.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpud5ozb1s.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  MethodError: no\
    \ method matching (::var\"#count_consonants#1\"{String})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#count_consonants#1\")(!Matched::String)\
    \ at /tmp/tmpud5ozb1s.jl:21\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpud5ozb1s.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src"
  timestamp: 1660004067
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    out = []\n    for word in split(s)\n       \
    \ nvowels = 0\n        for letter in word\n            if letter in [\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\"]\n                nvowels += 1\n            end\n\
    \        end\n        if nvowels == n\n            push!(out, word)\n        end\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph12stxeg.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmph12stxeg.jl:38\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph12stxeg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph12stxeg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmph12stxeg.jl:39\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph12stxeg.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph12stxeg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmph12stxeg.jl:41\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph12stxeg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph12stxeg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmph12stxeg.jl:42\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph12stxeg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph12stxeg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmph12stxeg.jl:44\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"]\n   Evaluated: String[] == "
  timestamp: 1660004065
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    l = split(s, \" \")\n    for i in l\n      \
    \  temp = count_consonants(i)\n        if temp == n\n            append!(final,i)\n\
    \        end\n    end\n    return final\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu6a6cnlt.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpu6a6cnlt.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6a6cnlt.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6a6cnlt.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6a6cnlt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6a6cnlt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6a6cnlt.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6a6cnlt.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6a6cnlt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6a6cnlt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6a6cnlt.jl:21\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6a6cnlt.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6a6cnlt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6a6cnlt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not defined\n  Stacktrace:\n   [1] "
  timestamp: 1660004066
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    x = split(s)\n    m = []\n    for i = 1:length(x)\n\
    \        if length(consonants(x[i])) == n\n            m = [m, x[i]]\n       \
    \ end\n    end\n    m\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpzq1fftrz.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpzq1fftrz.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzq1fftrz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq1fftrz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq1fftrz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzq1fftrz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzq1fftrz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq1fftrz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq1fftrz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzq1fftrz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpzq1fftrz.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq1fftrz.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq1fftrz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzq1fftrz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: consonants not\
    \ defined\n  Stacktrace:\n   [1] select_words(s::String, "
  timestamp: 1660004067
- exit_code: 1
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words_consonants = []\n    v = split(s)\n  \
    \  for i in v\n        if i != \"\"\n            nc = no_consonants(i)\n     \
    \       if nc == n\n                push!(words_consonants, i)\n            end\n\
    \        end\n    end\n    return words_consonants\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp3bq3qulw.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp3bq3qulw.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ no_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3bq3qulw.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3bq3qulw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3bq3qulw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3bq3qulw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ no_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3bq3qulw.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3bq3qulw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3bq3qulw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3bq3qulw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ no_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3bq3qulw.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3bq3qulw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3bq3qulw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3bq3qulw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: no_consonants\
    \ not defined\n  Stacktrace:\n   [1] select_words"
  timestamp: 1660004067
- exit_code: 0
  program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # If string s is empty\n    if s == \"\"\n \
    \       return []\n    end\n    # If string s is not empty, create an empty vector\
    \ and a flag\n    v = Vector{String}()\n    flag = 0\n    # Replace all spaces\
    \ with ' ' character\n    replace(s, r\"\\s+\" => \" \")\n    # Split string s\
    \ to words, and iterate through them\n    for word in split(s)\n        # iterate\
    \ through each char in word\n        for c in word\n            # if the char\
    \ is a consonant, increase flag\n            if c == 'B' || c == 'C' || c == 'D'\
    \ || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c\
    \ == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z' || c == 'b' || c\
    \ == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c\
    \ == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z'\n\
    \                flag += 1\n            end\n        end\n        # if the number\
    \ of consonants equals the input number, push word to vector\n        if flag\
    \ == n\n            push!(v, word)\n        end\n        # if the number of consonants\
    \ does not equal the input number, do nothing\n        # reset flag to 0\n   \
    \     flag = 0\n    end\n    # return vector\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1660004064
