name: HumanEval_117_select_words
language: jl
results:
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    # search for words that have n consonants\n\
    \    return split(s) |> filter((w) -> count_consonants(w) == n)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2r9qjvg2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2r9qjvg2.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r9qjvg2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r9qjvg2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2r9qjvg2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  MethodError:\
    \ no method matching filter(::var\"#1#2\"{Int64})\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n     @ Main\
    \ /tmp/tmp2r9qjvg2.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r9qjvg2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r9qjvg2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2r9qjvg2.jl:29\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2r9qjvg2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprcqvjcwa.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmprcqvjcwa.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprcqvjcwa.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprcqvjcwa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprcqvjcwa.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcqvjcwa.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    m = length(words)\n  \
    \  ans = Vector{String}()\n    for i = 1:m\n        if count_consonants(words[i])\
    \ == n\n            append!(ans, words[i])\n        end\n    end\n    return ans\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaew4kz3l.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpaew4kz3l.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaew4kz3l.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaew4kz3l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpaew4kz3l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaew4kz3l.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, r\"\\s+\")\n    keep = []\n\
    \    for word in words\n        if n_consonants(word) == n\n            push!(keep,\
    \ word)\n        end\n    end\n    return keep\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjp03fgeb.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ n_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpjp03fgeb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjp03fgeb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjp03fgeb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjp03fgeb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: n_consonants\
    \ not defined\n  Stack"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjp03fgeb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    #@assert !isempty(s)\n    #@assert n > 0\n \
    \   #@assert isalpha(s)\n    #@assert isspace(s)\n    s = replace(s, \" \" =>\
    \ \"\")\n    for i = 0:length(s)\n        for j = length(s):-1:i\n           \
    \ sub_str = s[i:j]\n            if length(regexp(r\"[A-Za-z]\", sub_str)) == n\n\
    \                #println(sub_str)\n            end\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white\
    \ space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) ==\
    \ [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\
    \", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpykf6wsl5.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  BoundsError:\
    \ attempt to access 18-codeunit String at index [0:18]\n  Stacktrace:\n   [1]\
    \ checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n    \
    \ @ ./strings/string.jl:261 [inlined]\n   [3] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpykf6wsl5.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpykf6wsl5.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpykf6wsl5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpykf6wsl5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  BoundsError:\
    \ attempt to access 18-codeunit String at index [0:18]\n  Stacktrace:\n   [1]\
    \ checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n    \
    \ @ ./strings/string.jl:261 [inlined]\n   [3] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpykf6wsl5.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpykf6wsl5.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpykf6wsl5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpykf6wsl5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  BoundsError: attempt\
    \ to access 16-codeunit String at index [0:16]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] select_words(s::String, n::Int64)\n     @ Main /tmp/tmpykf6wsl5.jl:26\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykf6wsl5.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    result = Vector{String}()\n    words = split(s,\
    \ \" \")\n    for word in words\n        consonants = 0\n        for letter in\
    \ word\n            if isConsonant(letter)\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb9jyyy2e.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ isConsonant not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmpb9jyyy2e.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9jyyy2e.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9jyyy2e.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpb9jyyy2e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: isConsonant not\
    \ defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9jyyy2e.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    A = split(s, \" \")\n    B = Vector{String}(undef,\
    \ 0)\n    for i in A\n        if count_consonants(i) == n\n            push!(B,\
    \ i)\n        end\n    end\n    return B\nend\nusing Test\n\n@testset begin\n\n\
    candidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) ==\
    \ [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvhni6lqj.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpvhni6lqj.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvhni6lqj.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhni6lqj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhni6lqj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhni6lqj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    num_cons = 0\n    words = []\n    aux = 0\n\
    \    cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n \
    \   for (i, ch) in enumerate(s)\n        if ch in cons\n            num_cons +=\
    \ 1\n        end\n        if ch == \" \"\n            if num_cons == n\n     \
    \           push!(words, s[aux+1:i-1])\n            end\n            num_cons\
    \ = 0\n            aux = i\n        end\n    end\n    if num_cons == n\n     \
    \   push!(words, s[aux+1:end])\n    end\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph14h80__.jl:45\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:46\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:48\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:49\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph14h80__.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph14h80__.jl:44\ntest set: Test\
    \ Failed at /tmp/tmph14h80__.jl:51\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph14h80__.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    selected_words = String[]\n\
    \    for word in words\n        consonants = 0\n        for letter in word\n \
    \           if letter in 'bcdfghjklmnpqrstvwxyz'\n                consonants +=\
    \ 1\n            end\n        end\n        if consonants == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppm3hg_s8.jl:24\nin expression\
    \ starting at /tmp/tmppm3hg_s8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    idx, elements = 1, []\n    while idx <= length(s)\n\
    \        word = match(r\"\\w+\", s[idx:end])\n        idx += length(word) + 1\n\
    \        if length(matchall(r\"[aeiou]\", word)) == n\n            push!(elements,\
    \ word)\n        end\n    end\n    return elements\nend\nselect_words(\"Mary had\
    \ a little lamb\", 4)\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: matchall not defined\nStacktrace:\n [1]\
    \ select_words(s::String, n::Int64)\n   @ Main /tmp/tmp0z977hkw.jl:23\n [2] top-level\
    \ scope\n   @ /tmp/tmp0z977hkw.jl:29\nin expression starting at /tmp/tmp0z977hkw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for w\
    \ in words\n        c = count_consonants(w)\n        if c == n\n            push!(result,\
    \ w)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe2rp8d14.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe2rp8d14.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe2rp8d14.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe2rp8d14.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpe2rp8d14.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2rp8d14.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for i\
    \ in 1:length(words)\n        if count_consonants(words[i]) == n\n           \
    \ push!(result, words[i])\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary\
    \ had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
    , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
    ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
    , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\",\
    \ \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu6m4kdln.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpu6m4kdln.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpu6m4kdln.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6m4kdln.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6m4kdln.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6m4kdln.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    numcons = Vector{Int64}()\n    counter = 0\n\
    \    start = 1\n    numcons = push!(numcons, 0)\n    for k in eachindex(s)\n \
    \       if s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n            push!(numcons,\
    \ counter)\n            counter = 0\n        elseif !(s[k] in [\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\"])\n            counter += 1\n        end\n    end\n \
    \   push!(numcons, counter)\n    my_vec = Vector{String}()\n    for i in 1:length(numcons)-1\n\
    \        if numcons[i] == n\n            push!(my_vec, s[start:i-1])\n       \
    \ end\n        start = i\n    end\n    my_vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4)\
    \ == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\"\
    , \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncx5u8rg.jl:46\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: String[] == [\"little\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:47\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: String[] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:49\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:50\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: String[] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpncx5u8rg.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpncx5u8rg.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpncx5u8rg.jl:52\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == [\"b\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncx5u8rg.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = select_words;\n\t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\
    \t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"\
    Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"\
    Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"\
    a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjmn4blpy.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"\
    ]\\n  MethodError: Cannot `convert` an object of type Nothing to an object of\
    \ type Vector{String}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    ...\\n  Stacktrace:\\n   [1] select_words(s::String, n::Int64)\\n     @ Main\
    \ /tmp/tmpjmn4blpy.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjmn4blpy.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjmn4blpy.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpjmn4blpy.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    ...\\n  Stacktrace:\\n   [1] select_words(s::String, n::Int64)\\n     @ Main\
    \ /tmp/tmpjmn4blpy.jl:20\\n   [2] macro expansion\\n     @ /s"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    new_strings = split(s, r\"\\s+\")\n    curr_ans = []\n    for i in new_strings\n\
    \        s_contains = 0\n        for j in i\n            if j in vowels\n    \
    \            s_contains += 1\n            end\n        end\n        if length(i)\
    \ - s_contains == n\n            push!(curr_ans, i)\n        end\n    end\n  \
    \  return curr_ans\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphsi9ygab.jl:40\n  Expression: candidate(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n   Evaluated: [\"Mary\", \"lamb\"\
    ] == [\"little\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:41\n  Expression: candidate(\"Mary had a little\
    \ lamb\", 3) == [\"Mary\", \"lamb\"]\n   Evaluated: [\"had\"] == [\"Mary\", \"\
    lamb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:43\n  Expression: candidate(\"Hello world\", 4)\
    \ == [\"world\"]\n   Evaluated: String[] == [\"world\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:44\n  Expression: candidate(\"Uncle sam\", 3)\
    \ == [\"Uncle\"]\n   Evaluated: [\"sam\"] == [\"Uncle\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphsi9ygab.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsi9ygab.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphsi9ygab.jl:46\n  Expression: candidate(\"a b c d e f\", 1)\
    \ == ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphsi9ygab.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s)\n    result = []\n    for word\
    \ in words\n        if count_consonants(word) == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little lamb\"\
    , 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3) == [\"\
    Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptcahlfnl.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptcahlfnl.jl:22\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptcahlfnl.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcahlfnl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptcahlfnl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcahlfnl.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    words = split(s, ' ') \n    filtered_words =\
    \ []\n    for word in words\n        vowel_count = 0\n        for char in word\n\
    \            if is_vowel(char)\n                vowel_count += 1\n           \
    \ end\n        end\n        if vowel_count == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a little\
    \ lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\", 3)\
    \ == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) == Vector{String}([]))\n\
    \t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\t@test(candidate(\"Uncle\
    \ sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4) == Vector{String}([]))\n\
    \t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3d3ptb9a.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ is_vowel not defined\n  Stacktrace:\n   [1] select_words(s::String, n::Int64)\n\
    \     @ Main /tmp/tmp3d3ptb9a.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3d3ptb9a.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3d3ptb9a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3d3ptb9a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: is_vowel not\
    \ defined\n  Stacktrace:\n   [1] se"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3d3ptb9a.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    s = split(s)\n    filter(x -> count_consonants(x)\
    \ == n, s)\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\t\
    @test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppkxth9vv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmppkxth9vv.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppkxth9vv.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppkxth9vv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppkxth9vv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /tmp/tmppkxth9vv.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppkxth9vv.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppkxth9vv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppkxth9vv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(x::SubString{String})\n\
    \     @ Main /tmp/tmppkxth9vv.jl:20\n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] select_words(s::String, n::Int64)\n     @\
    \ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkxth9vv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    \n    v = split(s, r\"\\s+\")\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for i = 1:length(v)\n    \
    \    count = 0\n        for j = 1:length(v[i])\n            if occursin(lowercase(v[i][j]),\
    \ consonants)\n                count += 1\n            end\n        end\n    \
    \    if count == n\n            push!(result, v[i])\n        end\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = select_words;\n\
    \t@test(candidate(\"Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"\
    Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple\
    \ white space\", 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\"\
    , 4) == [\"world\"])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t\
    @test(candidate(\"\", 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e\
    \ f\", 1) == [\"b\", \"c\", \"d\", \"f\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string s and a natural number n, you have been tasked to\
    \ implement \n    a function that returns a vector of all words from string s\
    \ that contain exactly \n    n consonants, in order these words appear in the\
    \ string s.\n    If the string s is empty then the function should return an empty\
    \ vector.\n    Note: you may assume the input string contains only letters and\
    \ spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n\
    \    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"\
    Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n \
    \   >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String,\
    \ n::Int64)::Vector{String} \n    vowel = \"aeiou\"\n    result = []\n    words\
    \ = split(s)\n    for i in words\n        if count_consonants(i) == n\n      \
    \      push!(result, i)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"Mary had a\
    \ little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\", 2) ==\
    \ Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"])\n\
    \t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\", 4)\
    \ == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
    c\", \"d\", \"f\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_u86gngi.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Mary had a little lamb\", 4) == [\"little\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"simple white space\", 2) == Vector{String}([])\n  UndefVarError:\
    \ count_consonants not defined\n  Stacktrace:\n   [1] select_words(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmp_u86gngi.jl:23\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_u86gngi.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u86gngi.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_u86gngi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world\", 4) == [\"world\"]\n  UndefVarError: count_consonants\
    \ not"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_u86gngi.jl:31\n"
  exit_code: 1
  status: SyntaxError
