name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m\n        return -1\n    end", "    if n > m\n        return\
    \ -1\n    end\n    avg = floor(Int64, (n + m) / 2)\n    s = \"\"\n    while avg\
    \ > 0\n        rem = div(avg, 2)\n        if rem * 2 == avg\n            s = \"\
    0\" * s\n        else\n            s = \"1\" * s\n        end\n        avg = rem\n\
    \    end\n    return string(\"0b\", s)\nend", "    if n > m \n        return -1\n\
    \    end\n    total = 0\n    for i in n:m\n        total += i\n    end\n    avg\
    \ = div(total, (m-n+1))\n    return convert(String, Int(Int64, avg, 2))\nend",
  "    if n > m\n        return -1\n    end\n    return string(int(round(Int64, (n\
    \ + m) / 2)))\nend\n@testset \"Example Tests\" begin\n    @test rounded_avg(1,\
    \ 5) == \"0b11\"\n    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10,\
    \ 20) == \"0b1111\"\n    @test rounded_avg(20, 33) == \"0b11010\"\nend\n@testset\
    \ \"Hidden Tests\" begin\n    @test rounded_avg(51, 50) == -1\n    @test rounded_avg(50,\
    \ 51) == \"0b11\"\n    @test rounded_avg(1, 10) == \"0b111\"\n    @test rounded_avg(50,\
    \ 30) == \"0b11101\"\n    @test rounded_avg(43, 42) == -1\n    @test rounded_avg(7,\
    \ 8) == \"0b111\"\n    @test rounded_avg(5, 1) == -1\n    @test rounded_avg(1,\
    \ 10000) == \"0b11110100001001\"\n    @test rounded_avg(1, 100000) == \"0b1111010100001001\"\
    \n    @test rounded_avg(1, 1000000) == \"0b1111010110010101\"\n    @test rounded_avg(1,\
    \ 10000000) == \"0b11110101110111001\"\n    @test rounded_avg(1, 100000000) ==\
    \ \"0b1111010111101110101\"\n    @test rounded_avg(1, 1000000000) == \"0b111101011111011110111\"\
    \n    @test rounded_avg(1, 10000000000) == \"0b11110101111110111101101\"\n   \
    \ @test rounded_avg(1, 100000000000) == \"0b1111010111111101111011101\"\n    @test\
    \ rounded_avg(1, 1000000000000) == \"0b111101011111111011110111001\"\n    @test\
    \ rounded_avg(1, 10000000000000) == \"0b", "    if n <= m\n        n > m ? -1\
    \ : string(Int(round(mean([n:m]))))\n    else\n        return -1\n    end\nend",
  "    if n > m\n        return -1\n    end\n    avg = (n + m) \xF7 2\n    return\
    \ binary(avg)\nend", "    if n > m\n        return -1\n    end\n    return binary(Int64(floor(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    sum = 0\n    for i = n:m\n\
    \        sum += i\n    end\n    average = convert(Int64, sum / (m - n + 1))\n\
    \    binary = convert(Binary, average)\n    return binary\nend", "    if n > m\n\
    \        return -1\n    end\n    output = round(Int64, sum(n:m)/(m-n+1))\n   \
    \ return \"0b$(binary(output))\"\nend", "    if n > m\n        return -1\n   \
    \ end\n    return \"0b\" * Int(b\"0\" * (Int(b\"1\" * (n+m)\xF72) + 1))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(bin(round(Int64,\
    \ (n + m) / 2)))\nend", "    if n > m\n        return -1\n    end\n    s = zero(Int64)\n\
    \    for i in n:m\n        s += i\n    end\n    s = s \xF7 (m - n + 1)\n    return\
    \ \"0b\" * string(s, base=2)\nend", "    if n>m\n        return -1\n    end\n\
    \    r = round(Int64, (n+m)/2)\n    return bin(r)\nend", "    \n    if n > m \n\
    \        return -1\n    end\n    average = round(Int64, (n + m) / 2)\n    average_binary\
    \ = bin(average)\n    return average_binary\nend", "    if n > m \n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\
    \nend", "    sum = 0\n    if n>m\n        return -1\n    end\n    for x in n:m\n\
    \        sum += x\n    end\n    avg = round(Int64,sum/(m-n+1))\n    return string(\"\
    0b\", decimal2binary(avg))\nend", "    if n > m\n        return -1\n    end\n\
    \    length = m - n + 1\n    sum = 0\n    for i in n:m\n        sum += i\n   \
    \ end\n    avg = round(Int64, sum / length)\n    return \"0b\" * string(dec2bin(avg))\n\
    end", "    if n <= m\n        mean = Int64(round(mean([n, m])))\n        return\
    \ \"0b\" * string(convert(Int64, mean, base=2))\n    else\n        return -1\n\
    \    end\nend", "    if n > m\n        return -1\n    end\n    ans = round(Int64,\
    \ (n + m) / 2)\n    return \"0b\" * string(ans)\nend", "    if n > m\n       \
    \ return -1\n    end\n    x = round(Int64, (n + m) / 2)\n    return bin(x)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
