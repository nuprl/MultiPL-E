name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n > m\n        return -1\n    end", "    if n > m\n        return\
    \ -1\n    end\n    avg = floor(Int64, (n + m) / 2)\n    s = \"\"\n    while avg\
    \ > 0\n        rem = div(avg, 2)\n        if rem * 2 == avg\n            s = \"\
    0\" * s\n        else\n            s = \"1\" * s\n        end\n        avg = rem\n\
    \    end\n    return string(\"0b\", s)\nend", "    if n > m \n        return -1\n\
    \    end\n    total = 0\n    for i in n:m\n        total += i\n    end\n    avg\
    \ = div(total, (m-n+1))\n    return convert(String, Int(Int64, avg, 2))\nend",
  "    if n > m\n        return -1\n    end\n    return string(int(round(Int64, (n\
    \ + m) / 2)))\nend\n@testset \"Example Tests\" begin\n    @test rounded_avg(1,\
    \ 5) == \"0b11\"\n    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10,\
    \ 20) == \"0b1111\"\n    @test rounded_avg(20, 33) == \"0b11010\"\nend\n@testset\
    \ \"Hidden Tests\" begin\n    @test rounded_avg(51, 50) == -1\n    @test rounded_avg(50,\
    \ 51) == \"0b11\"\n    @test rounded_avg(1, 10) == \"0b111\"\n    @test rounded_avg(50,\
    \ 30) == \"0b11101\"\n    @test rounded_avg(43, 42) == -1\n    @test rounded_avg(7,\
    \ 8) == \"0b111\"\n    @test rounded_avg(5, 1) == -1\n    @test rounded_avg(1,\
    \ 10000) == \"0b11110100001001\"\n    @test rounded_avg(1, 100000) == \"0b1111010100001001\"\
    \n    @test rounded_avg(1, 1000000) == \"0b1111010110010101\"\n    @test rounded_avg(1,\
    \ 10000000) == \"0b11110101110111001\"\n    @test rounded_avg(1, 100000000) ==\
    \ \"0b1111010111101110101\"\n    @test rounded_avg(1, 1000000000) == \"0b111101011111011110111\"\
    \n    @test rounded_avg(1, 10000000000) == \"0b11110101111110111101101\"\n   \
    \ @test rounded_avg(1, 100000000000) == \"0b1111010111111101111011101\"\n    @test\
    \ rounded_avg(1, 1000000000000) == \"0b111101011111111011110111001\"\n    @test\
    \ rounded_avg(1, 10000000000000) == \"0b", "    if n <= m\n        n > m ? -1\
    \ : string(Int(round(mean([n:m]))))\n    else\n        return -1\n    end\nend",
  "    if n > m\n        return -1\n    end\n    avg = (n + m) \xF7 2\n    return\
    \ binary(avg)\nend", "    if n > m\n        return -1\n    end\n    return binary(Int64(floor(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    sum = 0\n    for i = n:m\n\
    \        sum += i\n    end\n    average = convert(Int64, sum / (m - n + 1))\n\
    \    binary = convert(Binary, average)\n    return binary\nend", "    if n > m\n\
    \        return -1\n    end\n    output = round(Int64, sum(n:m)/(m-n+1))\n   \
    \ return \"0b$(binary(output))\"\nend", "    if n > m\n        return -1\n   \
    \ end\n    return \"0b\" * Int(b\"0\" * (Int(b\"1\" * (n+m)\xF72) + 1))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(bin(round(Int64,\
    \ (n + m) / 2)))\nend", "    if n > m\n        return -1\n    end\n    s = zero(Int64)\n\
    \    for i in n:m\n        s += i\n    end\n    s = s \xF7 (m - n + 1)\n    return\
    \ \"0b\" * string(s, base=2)\nend", "    if n>m\n        return -1\n    end\n\
    \    r = round(Int64, (n+m)/2)\n    return bin(r)\nend", "    \n    if n > m \n\
    \        return -1\n    end\n    average = round(Int64, (n + m) / 2)\n    average_binary\
    \ = bin(average)\n    return average_binary\nend", "    if n > m \n        return\
    \ -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(dec2bin(avg))\"\
    \nend", "    sum = 0\n    if n>m\n        return -1\n    end\n    for x in n:m\n\
    \        sum += x\n    end\n    avg = round(Int64,sum/(m-n+1))\n    return string(\"\
    0b\", decimal2binary(avg))\nend", "    if n > m\n        return -1\n    end\n\
    \    length = m - n + 1\n    sum = 0\n    for i in n:m\n        sum += i\n   \
    \ end\n    avg = round(Int64, sum / length)\n    return \"0b\" * string(dec2bin(avg))\n\
    end", "    if n <= m\n        mean = Int64(round(mean([n, m])))\n        return\
    \ \"0b\" * string(convert(Int64, mean, base=2))\n    else\n        return -1\n\
    \    end\nend", "    if n > m\n        return -1\n    end\n    ans = round(Int64,\
    \ (n + m) / 2)\n    return \"0b\" * string(ans)\nend", "    if n > m\n       \
    \ return -1\n    end\n    x = round(Int64, (n + m) / 2)\n    return bin(x)\nend",
  "    if n > m\n        return -1\n    end\n    k = (n + m) // 2\n    return \"0b\"\
    \ * string(k)\nend", "    if n > m\n        return -1\n    end\n    total = 0\n\
    \    for i in n:m\n        total += i\n    end\n    return int2str(float(total)\
    \ / (m - n + 1) + 0.5, base=2)\nend", "    if n > m \n        return -1\n    end\n\
    \    num = convert(Int64, round(Int64, (n + m) / 2))\n    return string(0b, num)\n\
    end", "    if n > m\n        return -1\n    end\n    floor(Int, (n + m) / 2) |>\
    \ inttobin\nend", "    res = Int64(round(Int64(n+m)/2))\n    if res < n \n   \
    \     return -1\n    end\n    return string(res)\nend", "    if n > m\n      \
    \  return -1\n    end\n    avg = trunc(Int64, (n + m) / 2)\n    binavg = bin(avg)\n\
    \    return binavg\nend", "    if n > m\n        return -1\n    end\n    b = binary(Int64,\
    \ round(Int64, (n + m) / 2))\n    return \"0b$b\"\nend", "    n <= m || return\
    \ -1 \n    num = Int64(round(sum(n:m)/(m-n+1)))\n    \"0b$(Int64(num))\"\nend",
  "    if n > m\n        return -1\n    end\n    sum = 0\n    for i = n:m\n      \
    \  sum += i\n    end\n    avg = convert(Int64, round(sum / (m - n + 1)))\n   \
    \ binary = \"\"\n    for i = 0:4\n        if bitand(avg, 1 << i) > 0\n       \
    \     binary = \"1\" * i\n        end\n    end\n    return \"0b\" * binary\nend\n\
    @testset \"rounded_avg examples\" begin\n    @test rounded_avg(1, 5) == \"0b11\"\
    \n    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10, 20) == \"0b1111\"\
    \n    @test rounded_avg(20, 33) == \"0b11010\"\nend\n \n \n\"\"\"Given a list\
    \ of positive integers, such as this one:\n    [5, 5, 9, 4, 1, 5, 9, 3, 6, 5,\
    \ 9, 0, 5, 5, 9]\n    Create a tuple of two elements: the first element is the\
    \ number of times\n    the maximum number appears in the list, and the second\
    \ element is the\n    maximum number. So for the list above, the tuple would be\
    \ (4, 9).\n    If the list is empty, return -1.\n    Example:\n    >>> list_to_tuple([5,\
    \ 5, 9, 4, 1, 5, 9, 3, 6, 5, 9, 0, 5, 5, 9])\n    (4, 9)\n    >>> list_to_tuple([2,\
    \ 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n    (10, 3)\n    >>> list_to_tuple([])\n\
    \    -1\n    \"\"\"", "    if n > m\n        return -1\n    end\n    return \"\
    0b\" * string(Int64, round(Int64, (n + m) / 2))\nend", "    if n > m\n       \
    \ return -1\n    end\n    avg = trunc(Int64, (n + m) / 2)\n    return \"0b\" *\
    \ string(base(avg, 2))\nend", "    if n > m\n        return -1\n    end\n    avg\
    \ = 0\n    for i in n:m\n        avg += i\n    end\n    avg = round(Int64, avg\
    \ / (m - n + 1))\n    \"0b$(string(avg, base=2))\"\nend", "    if n > m\n    \
    \    return -1\n    end\n    x = Int64((n + m) / 2)\n    return convert(String,\
    \ base(2, x))\nend", "    if n > m\n        return -1\n    end\n    average_rounded\
    \ = round(Int64, sum(n:m) / (1 + m - n))\n    return \"0b\" * string(pad(Int(average_rounded,\
    \ 2), \n        (1 + m - n) |> abs, \"0\"))\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg::Int64 = round(Int64,(n+m)/2)\n    return (bin(avg))\n\
    end", "    if (n < m) \n        res = Int64(round(Int, (n + m) / 2))\n       \
    \ return \"0b\" * string(res, base=2)\n    else \n        return -1\n    end\n\
    end", "    if n > m \n        return -1\n    end\n    s = 0 \n    for k in n:m\n\
    \        s += k\n    end\n    return bin(round(Int64, s/(m-n+1)))\nend", "   \
    \ if n > m\n        return -1\n    end\n    x = round(Int64, mean(n:m))\n    return\
    \ convert(String, binary(x))\nend", "    average = (n + m) / 2 \n    if n > m\
    \ \n        return -1 \n    else \n        return string(base(average, 2)) \n\
    \    end \nend", "    avgnum = convert(Int64, round(Int64, (n+m)/2))\n    if n\
    \ > m\n        return -1\n    elseif avgnum == 0\n        return \"0b0\"\n   \
    \ else\n        return \"0b\" * bin(avgnum)\n    end\nend", "    n > m && return\
    \ -1\n    avg = (n + m) / 2\n    i = Int(ceil(log2(avg)))\n    num_to_bin(avg,\
    \ i)\nend", "    if n > m\n        return -1\n    end\n    x = 0\n    y = 0\n\
    \    for i in n:m\n        x += i\n        y += 1\n    end\n    average = Int64(round(x/y))\n\
    \    binary = string(Int64(round(x/y)), \"b\")\n    return binary\nend", "   \
    \ if n > m\n        return -1\n    end\n    sum = 0\n    for i = n:m\n       \
    \ sum += i\n    end\n    average = sum / (m - n + 1)\n    return \"0b\" * dec2bin(round(Int64,\
    \ average))\nend", "    if n > m\n        return -1\n    end", "    if n > m\n\
    \        return -1\n    end\n    floor(Int, (n + m) / 2) |> Float64 |> binary_string\n\
    end", "    return -1 ? n > m : convert(String, Int(ceil(mean([n, m])))) * \"b\"\
    \ * \"11\"\nend", "    if n>m\n        return -1\n    end\n    avg = Int64(round(Int64,\
    \ (n+m)/2))\n    return \"0b\" * string(bits(avg))\nend", "    if n > m\n    \
    \    return -1\n    end\n    sum = 0\n    for i in n:m\n        sum += i\n   \
    \ end\n    newnum = round(Int64, sum / (m - n + 1))\n    newnum = bitstring(newnum)\n\
    \    return \"0b$newnum\"\nend", "    if n > m\n        return -1\n    end\n \
    \   s = 0\n    for i = n:m\n        s += i\n    end\n    avg = s / (m - n + 1)\n\
    \    rounded_avg = round(avg)\n    return string(\"0b\", binary(rounded_avg))\n\
    end", "    if n > m \n        return -1\n    end\n    avg = round(Int64, (n +\
    \ m) / 2)\n    bin_avg = bin(avg)\n    return bin_avg\nend\n ", "    total = n\n\
    \    count = 1\n    for i in (n+1):m\n        total += i\n        count += 1\n\
    \    end\n    avg = round(Int64, total/count)\n    if n > m\n        return -1\n\
    \    else\n        return string(0b, avg)\n    end\nend", "    if n > m\n    \
    \    return -1\n    end\n    avg = round(Int64,(n+m)/2)\n    bin_avg = convert(Int64,binary(avg))\n\
    \    bin_str = \"0b\" * string(bin_avg)\n    return bin_str\nend", "    if n <=\
    \ m\n        r = (n + m) / 2\n        r_str = Int(r, base=2)\n        str = string(\"\
    0b\", r_str)\n        return str\n    else\n        return -1\n    end\nend",
  "    if n > m\n        return -1\n    end\n    num = (n + m) / 2 \n    return \"\
    0b\" * bitstring(round(Int64, num))\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, mean([n:m]))\n    return \"0b$(Int(string(avg),\
    \ 2))\"\nend", "    if n > m\n        return -1\n    end\n    integer = floor(Int64,\
    \ (n + m) / 2)\n    return \"0b\" * string(digits(2, integer))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return \"0b\" * string(round(Int64, (n\
    \ + m) / 2))\nend", "    s=0\n    if m>n\n        for i in n:m\n            s+=i\n\
    \        end\n        x=s/(m-n+1)\n        x=round(Int64,x)\n        return string(\"\
    0b\",string(x, base=2))\n    else\n        return -1\n    end\nend", "    return\
    \ n > m ? -1 : convert(String, round(Int64, (n + m) / 2)) * \"b\" * convert(String,\
    \ round(Int64, (n + m) / 2))\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = convert(Int64, round(Int64, (n + m) / 2))\n    return \"0b\" * string(avg)\n\
    end", "    n > m && return -1\n    bin(div(n + m, 2))\nend", "    return -1 <:\
    \ Int64 ? m > n ? join([\"0b\", string(sum(n:m) \xF7 (m - n + 1))]) : -1 : Union{String,\
    \ Int64}\nend", "    if n > m\n        return -1\n    end\n    mean = round(Int64,\
    \ (n + m) / 2)\n    return \"0b\" * string(mean, base=2)\nend", "    \n    if\
    \ n > m\n        return -1\n    end\n    \n    sum = 0\n    for i in n:m\n   \
    \     sum += i\n    end\n    \n    avg = round(Int64, sum / (m - n + 1))\n   \
    \ return \"0b\" * string(Base.bits(avg))\nend", "    if n <= m\n        sum =\
    \ 0\n        for i in n:m\n            sum += i\n        end\n        return bin(round(Int64,\
    \ sum / (m - n + 1)))\n    else\n        return -1\n    end\nend", "    if n >\
    \ m\n        return -1\n    end\n    sum = 0\n    for i in n:m\n        sum +=\
    \ i\n    end\n    sum /= m - n + 1\n    return \"0b\" * string(Int(round(sum)))\n\
    end", "    if n>m\n        return -1\n    end\n    avg = round(Int64, (n+m)/2)\n\
    \    bin = bin(avg)\n    return \"0b$bin\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    avg = Int(round(mean([n, m])))\n    return \"0b$(Int(avg, 2))\"\
    \nend", "    if n > m\n        return -1\n    end\n    n_plus_m = n + m\n    num_of_elements\
    \ = (m - n) + 1\n    avg = round(Int64, n_plus_m / num_of_elements)\n    return\
    \ \"0b$(bin(avg))\"\nend", "    if n>m\n        return -1\n    end\n    return\
    \ decimal_to_binary(round(Int64,(n+m)/2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    sum = 0\n    count = 0\n    for i in n:m\n        sum += i\n\
    \        count += 1\n    end\n    average = sum//count\n    return \"0b$(Int(average))\"\
    \nend", "    if n > m\n        return -1\n    end\n    ans = convert(Int64, round(mean([n:m])))\n\
    \    out = \"0b\" * string(ans, base=2)\n    return out\nend", "    if n > m\n\
    \        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n    \"0b$(bin(avg)[2:end])\"\
    \nend\n \n \n@test rounded_avg(1, 5) == \"0b11\"\n@test rounded_avg(7, 5) == -1\n\
    @test rounded_avg(10, 20) == \"0b1111\"\n@test rounded_avg(20, 33) == \"0b11010\"\
    \n \n \n\"\"\"You are given two arrays. The first array is the list of elements,\
    \ \n    and the second array is the list of indices. Create a new array \n   \
    \ such that the elements are arranged in the order of the indices.\n    >>> sort_with_indices([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n    [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n    >>> sort_with_indices([5, 6, 8, 4, 3, 8, 2, 1, 7, 9],\
    \ [4, 5, 9, 0, 2, 3, 7, 1, 8, 6])\n    [3, 1, 4, 8, 6, 8, 7, 9, 2, 5]\n    >>>\
    \ sort_with_indices([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 1, 0, 3, 5, 4, 6, 7,\
    \ 8, 9])\n    [3, 2, 1, 4, 6, 5, 7, 8, 9, 10]\n    \"\"\"", "    mean = round(Int64,(n+m)/2)\n\
    \    return mean > m ? -1 : \"0b$(bin(mean))\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    return int2str(Int64(2), round(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    return \"0b\" * string(bin(round(Int64,\
    \ (n + m) / 2)))\nend", "    if n > m\n        return -1\n    end\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return \"0b$(Int(avg, base=2))\"\nend", "    if n > m\n  \
    \      return -1\n    end\n    a = round(Int64, (n + m) / 2)\n    return bin(a)\n\
    end", "    sum(n:m) % 2 == 0 ? convert(Int64, round(sum(n:m) / (m - n + 1)))::String\
    \ : -1\nend\n@testset \"Test cases\" begin\n    @test rounded_avg(1, 5) == \"\
    0b11\"\n    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10, 20) == \"\
    0b1111\"\n    @test rounded_avg(20, 33) == \"0b11010\"\nend\n ", "    if n > m\
    \ \n        return -1\n    end\n    return Integer(round(Int, (n + m) / 2)) |>\
    \ Int64 |> binary\nend", "    if n > m\n        return -1\n    end\n    avg =\
    \ round(Int64, (n + m) / 2)\n    return string(Int64, \"0b\", bin(avg))\nend",
  "    return n > m ? -1 : string(Int(dec2bin((n + m) \xF7 2)))\nend", "    if n >\
    \ m\n        return -1\n    end\n    avg = Int64(round(Int64(n + m) / 2))\n  \
    \  return string(Int64(2), \"b\", bin(avg)[3:end])\nend", "    n >= m && return\
    \ -1\n    sum_ = n\n    for i in n+1:m\n        sum_ += i\n    end\n    round(Int64,\
    \ sum_/(m-n+1)) |> to_binary\nend", "    # Check if n is greater than m\n    if\
    \ n > m\n        return -1\n    end\n    # Calculate the avg\n    avg = round(Int64,\
    \ (n + m) / 2)\n    # Convert to binary\n    return decimal_to_binary(avg)\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64,(n+m)/2)\n    avg_bin\
    \ = bin(avg)\n    return avg_bin\nend", "    if n <= m\n        return Int( round(\
    \ (n + m) / 2 ))\n    else\n        return -1\n    end\nend", "    if n > m\n\
    \        return -1\n    end\n    return Int(round(mean([n:m]))) |> bin\nend",
  "    if n > m \n        return -1\n    end\n    avg = round(Int64,(n+m)/2)\n   \
    \ return \"0b\" * string(bitstring(avg))\nend", "    if n > m\n        return\
    \ -1\n    end\n    s = n\n    for i = n + 1:m\n        s += i\n    end\n    return\
    \ \"0b\" * convert(String, base(2, round(s / (m - n + 1))))\nend", "    if n >\
    \ m\n        return -1\n    end\n    sum = Int64(0)\n    i = n\n    while i <=\
    \ m\n        sum += i\n        i += 1\n    end\n    avg = sum / (m - n + 1)\n\
    \    return \"0b\" * string(Int64, avg)\nend", "    if n <= m\n        return\
    \ binary(round(Int64, sum(n:m)/length(n:m)))\n    else\n        return -1\n  \
    \  end\nend", "    if n > m\n        return -1\n    end\n    nums = Int64[]\n\
    \    while n <= m\n        push!(nums, n)\n        n += 1\n    end\n    return\
    \ \"0b\" * string(dec2bin(round(Int64, sum(nums) / length(nums))))\nend", "  \
    \  if n > m\n        return -1\n    end\n    sum = 0\n    count = 0\n    for i\
    \ in n:m\n        sum += i\n        count += 1\n    end\n    return Int(round(sum/count))\n\
    end", "    if n > m\n        return -1\n    end\n    return dec2bin(Int(round(sum(n:m)/length(n:m))))\n\
    end", "    if n > m\n        return -1\n    end\n    average = round(Int64, sum(n:m)\
    \ / (m - n + 1))\n    decimal = decimal_to_binary(average)\n    return decimal\n\
    end", "    if n > m\n        return -1\n    end\n    bin(round(Int64, (n + m)\
    \ / 2))\nend", "    if n <= m\n        return( \"0b\" * string(bits(round(Int64,(n+m)/2))))\n\
    \    else\n        return(-1)\n    end\nend", "    if n > m\n        return -1\n\
    \    end\n    sum = 0\n    count = 0\n    while n <= m\n        sum += n\n   \
    \     n += 1\n        count += 1\n    end\n    avg = sum / count\n    rounded_avg\
    \ = round(avg)\n    str = \"0b\" * string(rounded_avg)\n    return str\nend",
  "    # Your code here\n    # You can add more local functions as needed\n    return\
    \ 0\nend\n\"\"\"\nTest in REPL\n\"\"\"", "    if n > m \n        return -1\n \
    \   end\n    return \"0b\" * string(Int(round(Int, (n + m) / 2)))\nend", "   \
    \ n, m = max(n, m), min(n, m)\n    if n > m \n        return -1\n    end\n   \
    \ avg = Int64(round(Int64, (n + m) / 2))\n    return \"0b$(dec2bin(avg))\"\nend\n\
    \"\"\"You are given two integers n and m.\n    Compute the greatest common divisor\
    \ of n and m.\n    If the GCD is 1, return 1. If either n or m is 0, return 0.\n\
    \    Do not use any built-in Python functions.\n    Example:\n    >>> gcd(45,\
    \ 15)\n    15\n    >>> gcd(0, 15)\n    0\n    >>> gcd(45, 0)\n    0\n    >>> gcd(45,\
    \ 35)\n    5\n    >>> gcd(5, 5)\n    5\n    >>> gcd(3, 5)\n    1\n    \"\"\"",
  "    if n > m \n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return bin(avg)\nend", "    if n > m\n        return -1\n    end\n    x =\
    \ Int64(round(Int64, (n + m) / 2))\n    return \"0b\" * string(dec2bin(x))\nend",
  "    if n > m\n        return -1\n    end\n    avg = (n + m)//2\n    return string(avg,\
    \ \"b\")\nend", "    # Binary conversion requires an integer\n    if n > m\n \
    \       return -1\n    end\n    avg = div(n + m, 2)\n    bin = bitstring(avg)\n\
    \    return bin\nend\n ", "    if n > m\n        return -1\n    end\n    avg =\
    \ round(Int64, (n + m) / 2)\n    return Int(avg, 2)\nend\n# Tests\nusing Test\n\
    @testset \"Rounded Avg\" begin\n    @test rounded_avg(1, 5) == \"0b11\"\n    @test\
    \ rounded_avg(7, 5) == -1\n    @test rounded_avg(10, 20) == \"0b1111\"\n    @test\
    \ rounded_avg(20, 33) == \"0b11010\"\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, (n + m) / 2)\n    return string(b\"0b\", base(avg,\
    \ 2))\nend", "    #Check if n is greater than m\n    if n > m\n        return\
    \ -1\n    end\n    #Compute average \n    avg = floor(Int64, (n + m)/2)\n    #Convert\
    \ average to binary\n    binary = bin(avg)\n    return binary\nend", "    if n\
    \ > m\n        return -1\n    end\n    avg = (n + m) / 2\n    return Int64(round(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    sum = 0\n    for i = n:m\n\
    \        sum += i\n    end\n    #print(sum, (m-n+1))\n    avg = sum//(m-n+1)\n\
    \    return \"0b\" * string(dec2bin(avg))\nend", "    mean = round(Int64, (n +\
    \ m) / 2)\n    if n > m\n        return -1\n    else\n        return \"0b\" *\
    \ string(convert(Int64, mean))\n    end\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = Int64(round(Int64(n + m) / 2))\n    return \"0b\" * string(bitstring(avg))\n\
    end", "    if n>m\n        return -1\n    end\n    return \nend\n ", "    \"\"\
    \"\n    >>> rounded_avg(n::Int64, m::Int64)::Union{String, Int64} \n    \"\"\"\
    \n    # check if n is greater than m\n    if n > m\n        return -1\n    end\n\
    \    # calculate the average\n    avg = round(Int64, (n + m) / 2)\n    # convert\
    \ the avg to binary\n    binary = decimal_to_binary(avg)\n    # return the result\n\
    \    return binary\nend", "    if n > m\n        return -1\n    end\n    average\
    \ = round(Int64, (n + m) / 2)\n    string(0x2, \"b\", bin(average))\nend", " \
    \   if n > m\n        return -1\n    end\n    avg = (n + m) / 2\n    if avg %\
    \ 2 == 1\n        avg = avg + 1\n    end\n    return \"0b\" * string(dec2bin(avg))\n\
    end", "    return n > m ? -1 : decimal_to_binary(round(Int64, (n + m) / 2))\n\
    end", "    if n > m\n        return -1\n    end\n    x = Int64(round(Int64, (n\
    \ + m) / 2))\n    return \"0b\" * string(digits(x, base=2))\nend\n@testset \"\
    Rounded Average (15 points)\" begin\n    @test rounded_avg(1, 5) == \"0b11\"\n\
    \    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10, 20) == \"0b1111\"\
    \n    @test rounded_avg(20, 33) == \"0b11010\"\nend\n ", "    if n > m \n    \
    \    return -1\n    end\n    # avg = sum([n, m])/2 # gives float, and then floor()\
    \ gives decimal\n    avg = (n + m) >> 1 # bitwise right shift(>>) gives integer\n\
    \    return \"0b$(bitstring(avg))\"\nend\nrounded_avg(20, 33)", "    if n>m\n\
    \        return -1\n    end\n    return binary(round(Int64, (n+m)/2))\nend\nrounded_avg(1,\
    \ 5)", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int(round(mean([n:m]))))\n\
    end", "    if n > m\n        return -1\n    end\n    return \"0b\" * string(Int64,\
    \ round(Int64, (n + m) / 2))\nend", "    # If n is greater than m, return -1\n\
    \    if n > m\n        return -1\n    else\n        # round_n = round(Int, sum(n:m)\
    \ / (m - n + 1))\n        # binary_n = binary(round_n)\n        binary_n = binary(round(Int,\
    \ sum(n:m) / (m - n + 1)))\n        return \"0b$binary_n\"\n    end\nend", " \
    \   if n > m\n        return -1\n    end\n    return \"0b\" * decimal_to_binary(Int64(floor(Int64(n\
    \ + m) / 2)))\nend", "    if n > m \n        return -1\n    end\n    sum = 0\n\
    \    for i in range(n, m+1)\n        sum += i\n    end\n    sum = round(Int64,\
    \ sum/(m-n+1))\n    return \"0b$(sum)\"\nend", "    r = round(Int64, (n + m) /\
    \ 2)\n    return r < n ? -1 : r < 0 ? r : \"0b$(String(r, 2))\"\nend", "    if\
    \ n > m\n        return -1\n    end\n    avg = convert(Int64, round(Int64, (n\
    \ + m) / 2))\n    return \"0b\" * string(dec2bin(avg))\nend", "    if (n > m)\n\
    \        return -1\n    end\n    sum = 0\n    for i = n:m\n        sum += i\n\
    \    end\n    binary = Int64(round(sum / (m - n + 1)))\n    string(0b, binary)\n\
    end", "    if n > m\n        return -1\n    end\n    avg = (n + m) / 2\n    bin\
    \ = int2bin(avg)\n    return \"0b$bin\"\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(Int64, floor(Int64, (n + m) / 2))\nend",
  "    if n > m\n        return -1\n    end\n    my_avg = round(Int64, (n + m) / 2)\n\
    \    return \"0b\" * string(bitstring(my_avg))\nend\n ", "    if n > m\n     \
    \   return -1\n    end\n    a = Int64(ceil(mean([n, m])))\n    r = parse(Int64,\
    \ string(a, base=2), base=2)\n    return string(\"0b\", r)\nend", "    if n >\
    \ m\n        return -1\n    end\n    avg = round(Int64, sum(n:m) / (m - n + 1))\n\
    \    \"0b$(bits(avg))\"\nend", "    if n > m \n        return -1\n    end\n  \
    \  average = round(Int64, (n + m) / 2)\n    bin_average = bin(average)\n    return\
    \ bin_average\nend", "    if n > m\n        return -1\n    end\n    i::Int64 =\
    \ (n + m) / 2\n    s::String = string(Int64(i))\n    s2::String = \"0b\" * s\n\
    \    return s2\nend", "    if n > m\n        return -1\n    end\n    binary =\
    \ to_binary(round(Int64, mean([n, m])))\n    return \"0b$binary\"\nend", "   \
    \ if n > m\n        return -1\n    end\n    sum = 0\n    for i in n:m\n      \
    \  sum += i\n    end\n    bin = convert(String, sum/(m-n+1))\n    bin = bin *\
    \ \"0b\"\n    return bin\nend\nprintln(rounded_avg(1, 5))\nprintln(rounded_avg(7,\
    \ 5))\nprintln(rounded_avg(10, 20))\nprintln(rounded_avg(20, 33))", "    if n\
    \ <= m\n        return bin(round(Int64, sum(i for i in n:m)/(m-n+1)))\n    else\n\
    \        return -1\n    end\nend", "    if n > m \n        return -1\n    end\n\
    \    average = round(Int64, (n + m) / 2)\n    return string(binary(average))\n\
    end", "    if n > m\n        return -1\n    end\n    return Int(round( (n + m)\
    \ / 2 ))\nend", "    if n > m \n        return -1\n    end\n    avg::Float64 =\
    \ (m+n)/2\n    bin_avg::String = Int64(round(avg))::String\n    return string(\"\
    0b\", bin_avg)\nend", "    # your code here\nend\n \n@testset \"Testing rounded_avg\"\
    \ begin\n    @test rounded_avg(1, 5) == \"0b11\"\n    @test rounded_avg(7, 5)\
    \ == -1\n    @test rounded_avg(10, 20) == \"0b1111\"\n    @test rounded_avg(20,\
    \ 33) == \"0b11010\"\nend;\n \n \n\"\"\"You are given an integer num. Your task\
    \ is to convert num to a binary string\n    that is equal to an integer with the\
    \ same number of 1s as num has.\n    Example:\n    >>> convert_to_binary(0)\n\
    \    \"0b0\"\n    >>> convert_to_binary(1)\n    \"0b1\"\n    >>> convert_to_binary(2)\n\
    \    \"0b11\"\n    >>> convert_to_binary(3)\n    \"0b11\"\n    >>> convert_to_binary(8)\n\
    \    \"0b1111\"\n    >>> convert_to_binary(9)\n    \"0b11111\"\n    \"\"\"", " \
    \   if n > m\n        return -1\n    end\n    avg = floor(Int64, (n + m) / 2)\n\
    \    return string(Int64, \"0b\", base(2, avg))\nend", "    if n > m\n       \
    \ return -1\n    end\n    return Int64(trunc(Int64, (n + m) / 2))\nend", "   \
    \ if n > m\n        return -1\n    end\n    sum = 0\n    for i in n:m\n      \
    \  sum += i\n    end\n    return \"0b\" * string(bits(floor(Int64, (sum / (m -\
    \ n + 1)))))\nend", "    if n > m\n        return -1\n    end\n    sum = 0\n \
    \   for i in n:m\n        sum += i\n    end\n    ans = round(Int64, sum/(m-n+1))\n\
    \    return string(\"0b\", bits(ans))\nend", "    if n>m\n        return -1\n\
    \    end\n    sm = floor(Int64, (n+m)/2)\n    return \"0b\"*string(dec2bin(sm))\n\
    end", "    if n > m\n        return -1\n    end\n    res = trunc(Int64, round(Int64,\
    \ (n + m) / 2))\n    return \"0b\" * string(res)\nend", "    x = (n + m) / 2\n\
    \    if n > m\n        -1\n    else\n        string(binary(x))\n    end\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return string(0b, avg)\nend", "    if n > m\n        return -1\n    end\n\
    \    avg = Int64(round(Int64, (n + m) / 2))\n    return  \"0b\" * string(dec2bin(avg))\n\
    end", "    if n > m\n        return -1\n    end\n    binary_rounded_avg = bits(round(Int64,\
    \ round(Float64, (n + m) / 2)))\n    binary_rounded_avg_str = \"0b\" * binary_rounded_avg\n\
    \    return binary_rounded_avg_str\nend\n \n```", "    lst = collect(n:m)\n  \
    \  if n > m\n        return -1\n    end\n    avg = round(Int64, sum(lst)/length(lst))\n\
    \    return string(@sprintf(\"0b%b\", avg))\nend", "    if n > m\n        return\
    \ -1\n    end\n    s = \"0b\"\n    decimal = convert(Int64, round(Int64, (n +\
    \ m) / 2))\n    while decimal > 0\n        dec_remainder = decimal % 2\n     \
    \   s = s * string(dec_remainder)\n        decimal = decimal \xF7 2\n    end\n\
    \    return s\nend", "    if n > m\n        return -1\n    end\n    count = 0\n\
    \    total = 0\n    while n <= m\n        total += n\n        n += 1\n       \
    \ count += 1\n    end\n    avg = trunc(Int64, total/count)\n    return string(\"\
    0b\", Int(avg))\nend", "    if n>m\n        return -1\n    end\n    average =\
    \ round(Int64,(n+m)/2)\n    return string(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace",
  "    if n > m \n        return -1\n    end\n    s = 0\n    while n <= m\n      \
    \  s += n\n        n += 1\n    end\n    return Int64(s / m).to(2)\nend", "   \
    \ if n > m\n        return -1\n    end\n    bin_array = []\n    for i in n:m\n\
    \        push!(bin_array, i)\n    end\n    avg = Int64(round(sum(bin_array)/length(bin_array)))\n\
    \    return \"0b$(binary(avg))\"\nend", "    n > m && return -1\n    avg = round(Int64,\
    \ (n + m) / 2)\n    return Int(avg, 2)\nend\n@testset \"Rounded Average\" begin\n\
    \    @test rounded_avg(1, 5) == \"0b11\"\n    @test rounded_avg(7, 5) == -1\n\
    \    @test rounded_avg(10, 20) == \"0b1111\"\n    @test rounded_avg(20, 33) ==\
    \ \"0b11010\"\nend", "    if n > m\n        return -1\n    end\n    total = 0\n\
    \    nums = collect(n:m)\n    for i in nums\n        total += i\n    end\n   \
    \ total = total // length(nums)\n    total = string(total, base=2)\n    return\
    \ \"0b$total\"\nend", "    (n <= m) ?  \n        return \"0b\" * convert(String,\
    \ base(2, round(sum(n:m)/(m-n+1)) )) \n    : \n        return -1\nend", "    if\
    \ n > m\n        return -1\n    end\n    a = collect(n:m)\n    avg = round(Int64,\
    \ sum(a)/length(a))\n    binary = \"\"\n    while avg != 0\n        binary = string(avg%2)\
    \ * binary\n        avg = div(avg, 2)\n    end\n    return \"0b\" * binary\nend",
  "    if n > m\n        return -1\n    end\n    sum = 0\n    for x in n:m\n     \
    \   sum += x\n    end\n    sum /= (m - n + 1)\n    return string(Int, \"0b\",\
    \ Int(round(sum)))\nend", "    if n > m\n        return -1\n    end\n    r = round(Int64,\
    \ sum(n:m)/length(n:m))\n    return binary(r)\nend", "    # if n and m are the\
    \ same, just return the number\n    if n == m\n        return string(n)\n    end\n\
    \    # if n is greater than m, return -1\n    if n > m\n        return -1\n  \
    \  end\n    # if n is less than m, then create a list of integers from n through\
    \ m\n    # which is the inclusive range inclusive\n    n_m_list = collect(n:m)\n\
    \    # find the average of the elements in the list\n    avg = round(sum(n_m_list)/length(n_m_list))\n\
    \    # convert the average to binary\n    bin_avg = string(convert(Int64, avg,\
    \ 2))\n    # return the binary representation of the average as a string\n   \
    \ return \"0b$bin_avg\"\nend", "    if n > m\n        return -1\n    end\n   \
    \ return bin(round(Int64,(n+m)/2))\nend", "    if n > m\n        return -1\n \
    \   end\n    return Int(round(mean([n:m])), base=2)\nend", "    if n > m\n   \
    \     return -1\n    end\n    total = 0\n    for i in n:m\n        total += i\n\
    \    end\n    return \"0b\" * string(Base.d2b(round(Int64, total / (m - n + 1))))\n\
    end", "    if n > m\n        return -1\n    end\n    total = 0\n    for k = n:m\n\
    \        total += k\n    end\n    avg = total / (m - n + 1)\n    rounded = floor(avg\
    \ + 0.5)\n    convert = string(Int64, \"0b\", rounded)\n    return convert\nend",
  "    if n>m\n        return -1\n    end\n    average = floor(Int64, round(Int64,\
    \ (n+m)/2))\n    return binary(average)\nend", "    if n > m\n        return -1\n\
    \    end\n    n = n + m + 1\n    m = m - 1\n    x = Int(ceil(Float64(n)/2))\n\
    \    bin = \"0b\"\n    while x > 0\n        bin = bin * x % 2\n        x = x \xF7\
    \ 2\n    end\n    return bin\nend", "    if n > m\n        return -1\n    end\n\
    \    round(Int64, sum(n:m)/(m-n+1)) |> Float64 |> int |> Float64 |> bits |> string\n\
    end", "    if n>m\n        return -1\n    end\n    sum = Int64(0)\n    for i in\
    \ n:m\n        sum += i\n    end\n    average = Int64(round(sum / (m-n+1)))\n\
    \    return \"0b\" * bin(average)\nend", "    if n > m \n        return -1\n \
    \   end\n    avg = round(Int64, (n + m) / 2)\n    return \"0b$(bin(avg))\"\nend",
  "    if n > m\n        return -1\n    end\n    avg = round(Int64, (n + m) / 2)\n\
    \    return \"0b$(string(avg, base=2))\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(BigInt(round(mean([n, m]))))\nend",
  "    if n > m\n        return -1\n    end\n    nums = n:m\n    sum = 0\n    n =\
    \ length(nums)\n    for x in nums\n        sum += x\n    end\n    avg = floor(Int64,\
    \ sum/n)\n    return bitstring(avg)\nend", "    if n > m\n        return -1\n\
    \    end\n    return \"0b\" * string(round(Int64, (n + m) / 2))\nend\n# test\n\
    @testset \"Rounded average\" begin\n    @test rounded_avg(1, 5) == \"0b11\"\n\
    \    @test rounded_avg(7, 5) == -1\n    @test rounded_avg(10, 20) == \"0b1111\"\
    \n    @test rounded_avg(20, 33) == \"0b11010\"\nend", "    n>m && return -1\n\
    \    return convert(String, Int(round(Int, mean([n, m]))))*\"b\"\nend", "    if\
    \ n > m\n        return -1\n    end\n    return bin(floor(Int64, (n + m) / 2))\n\
    end", "    if n > m \n        return -1\n    end\n    mean = round(Int64, (n +\
    \ m) / 2)\n    return \"0b\" * string(dec2bin(mean))\nend\nrounded_avg(20, 33)",
  "    s = []\n    for num in n:m \n        push!(s, num)\n    end\n    if n > m\n\
    \        return -1\n    else\n        return \"0b\" * string(round(Int64, mean(s)))\n\
    \    end\nend", "    if n > m\n        return -1\n    end\n    sum = 0\n    for\
    \ i in n:m\n        sum += i\n    end\n    sum = div(sum, abs(m-n) + 1)\n    return\
    \ \"0b\" * string(sum, base=2)\nend", "    if n > m \n        return -1\n    end\
    \ \n    avg = floor(Int64,(n+m)/2)\n    avg_str = bitstring(avg)\n    avg_str\
    \ = \"0b\" * avg_str\n    return avg_str\nend ", "    average = ceil(Int64, (n\
    \ + m) / 2)\n    if n > m\n        return -1\n    else\n        return \"0b\"\
    \ * string(dec2bin(average))\n    end\nend", "    if n > m\n        return -1\n\
    \    end\n    avg = round(Int64, mean(n:m))\n    return string(Int, \"0b\", base(avg,\
    \ 2))\nend\n\"\"\"Your task is to write a function that takes a list of strings\
    \ an prints them, one per line, in a rectangular frame.\n    Example:\n    >>>\
    \ text_box([\"Hello\", \"World\", \"in\", \"a\", \"frame\"])\n    *********\n\
    \    * Hello *\n    * World *\n    * in    *\n    * a     *\n    * frame *\n \
    \   *********\n    \"\"\"", "    avg = (n + m) / 2\n    if n > m\n        return\
    \ -1\n    else\n        return string(binary(avg))\n    end\nend", "    if n>m\n\
    \        return -1\n    end\n    avg = round(Int64,(n+m)/2)\n    binary = string(convert(Int64,\
    \ avg, base=2))\n    return \"0b$binary\"\nend", "    if n > m\n        return\
    \ -1\n    end\n    dec_avg = Int64(round(mean([n:m])))\n    bin_avg = decimal_to_binary(dec_avg)\n\
    \    return bin_avg\nend", "    sum(n:m) = int(sum(n:m))\n    if m >= n\n    \
    \    bin(round(Int, sum(n:m)/length(n:m)))\n    else\n        -1\n    end\nend",
  "    \n    if n>m\n        return -1\n    end\n    avg = sum(n:m)/(m-n+1)\n    return\
    \ string(dec2bin(round(avg)), \"b\")\n    \nend", "    if n > m \n        return\
    \ -1\n    end\n    # compute the sum of integers from n through m, inclusively\n\
    \    sum = Int64(0)\n    for i in n:m\n        sum += i\n    end\n    # compute\
    \ the rounded average\n    rounded_avg = round(Int64, sum / (m - n + 1))\n   \
    \ # convert the rounded average to binary\n    binary_avg = binary(rounded_avg)\n\
    \    return binary_avg\nend", "    if n>m\n        return -1\n    end\n    return\
    \ \"0b\"*string(int(round(mean([n:m])), 2))\nend", "    if n > m\n        return\
    \ -1\n    end\n    return \"0b\" * string(round(Int64, (n + m) / 2), base=2)\n\
    end", "    r = round(Int64, (n + m) / 2)\n    return -1 if n > m else r > 0 ?\
    \ \"0b$(Int64(r))\" : -1\nend", "    if (n>m)\n        return -1\n    end\n  \
    \  avg = round(Int64, (n+m)/2)\n    return string(base(avg, 2))\nend", "    if\
    \ n > m\n        return -1\n    end\n    return bin(round(Int64, sum(n:m)/(m-n+1)))\n\
    end", "    if n > m\n        return -1\n    end\n    bits = round(Int64, (n +\
    \ m) / 2)\n    return string(\"0b\", bits)\nend", "    if n > m\n        return\
    \ -1\n    end\n    sum = 0\n    for i in n:m\n        sum += i\n    end\n    str\
    \ = dec2bin(round(Int64, sum/(m-n+1)))\n    return \"0b$str\"\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
