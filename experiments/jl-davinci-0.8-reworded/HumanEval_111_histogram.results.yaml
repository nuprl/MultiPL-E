name: HumanEval_111_histogram
language: jl
results:
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    test = split(test)\n    dict = Dict()\n    for i in test\n   \
    \     dict[i] = get(dict, i, 0) + 1\n    end\n    maxval = maximum(values(dict))\n\
    \    maxdict = Dict()\n    for (k, v) in dict\n        if v == maxval\n      \
    \      maxdict[k] = v\n        end\n    end\n    return maxdict\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9tji0uv.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Any})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpe9tji0uv.jl:24\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpe9tji0uv.jl:44 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpe9tji0uv.jl:37\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9tji0uv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    #Create a dictionary and a vector\n    d = Dict()\n    v = split(test,\
    \ r\"\\s+\")\n    #For each element in the vector, add it to the dictionary if\
    \ not already in the dictionary\n    #if already in the dictionary, increment\
    \ the corresponding value\n    for x in v\n        if haskey(d, x)\n         \
    \   d[x] += 1\n        else\n            d[x] = 1\n        end\n    end\n    #Find\
    \ the highest value in the dictionary\n    maximum = maximum(collect(values(d)))\n\
    \    #Create a dictionary that will be returned. Add the element in the first\
    \ dictionary corresponding to the highest value\n    d1 = Dict()\n    for x in\
    \ v\n        if d[x] == maximum\n            d1[x] = maximum\n        end\n  \
    \  end\n    #Return the dictionary\n    return d1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3s3osnti.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmp3s3osnti.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3s3osnti.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3s3osnti.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp3s3osnti.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp3s3osnti.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3s3osnti.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3s3osnti.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp3s3osnti.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: maximum not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmp3s3osnti.jl:32\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3s3osnti.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3s3osnti.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp3s3osnti.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3s3osnti.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    h = Dict()\n    if test == \"\"\n        return h\n    end\n \
    \   for k in split(test)\n        if haskey(h, k)\n            h[k] += 1\n   \
    \     else\n            h[k] = 1\n        end\n    end\n    maximumValue = maximum(values(h))\n\
    \    for (k, v) in h\n        if v != maximumValue\n            delete!(h, k)\n\
    \        end\n    end\n    return h\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    \n    \n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcsgb_nl8.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\\
    n    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmpcsgb_nl8.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcsgb_nl8.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcsgb_nl8.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpcsgb_nl8.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmpcsgb_nl8.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcsgb_nl8.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    if length(test)==0\n        return Dict{String, Int64}()\n   \
    \ end\n    histo = Dict{String, Int64}()\n    for i = 1:length(test)\n       \
    \ if !haskey(histo, test[i])\n            histo[test[i]] = 1\n        else\n \
    \           histo[test[i]] += 1\n        end\n    end\n    max_histo = 0\n   \
    \ result_histo = []\n    for (key, value) in histo\n        if value > max_histo\n\
    \            max_histo = value\n            result_histo = []\n            push!(result_histo,\
    \ key)\n        elseif value == max_histo\n            push!(result_histo, key)\n\
    \        end\n    end\n    result = Dict{String, Int64}()\n    for el in result_histo\n\
    \        result[el] = max_histo\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvmf1_ugu.jl:52\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpvmf1_ugu.jl:25\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpvmf1_ugu.jl:52 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpvmf1_ugu.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmpvmf1_ugu.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpvmf1_ugu.jl:25\\n   [3] macro expansion\\n     @ /shared/centos"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    dct = Dict{String, Int64}()\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphs8yyybm.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphs8yyybm.jl:1\n\
    in expression starting at /tmp/tmphs8yyybm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    result = Dict{String, Int64}()\n    for c in test\n        #print(c)\n\
    \        if c in keys(result)\n            result[c] += 1\n        else\n    \
    \        result[c] = 1\n        end\n    end\n    return result\nend\n@assert\
    \ histogram(\"a b c\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n@assert histogram(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"b b b b a\") == Dict(\"b\"\
    \ => 4)\n@assert histogram(\"\") == Dict()\ntest = histogram(\"a b c\")\ntest2\
    \ = histogram(\"a b b a\")\ntest3 = histogram(\"a b c a b\")\ntest4 = histogram(\"\
    b b b b a\")\ntest5 = histogram(\"\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppbte53xh.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\\
    n    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmppbte53xh.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppbte53xh.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppbte53xh.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmppbte53xh.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmppbte53xh.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppbte53xh.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if !haskey(hist, letter)\n            hist[letter] = 1\n        else\n\
    \            hist[letter] += 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb3k2_b3a.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3k2_b3a.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3k2_b3a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3k2_b3a.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3k2_b3a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3k2_b3a.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3k2_b3a.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    test = Dict(lowercase(x) => count(lowercase(x)) for x in split(test))\
    \ \n    if max(test) > 1 # if any letter has occured more than once\n        return\
    \ Dict(key => value for (key, value) in test if value == max(test))\n    else\n\
    \        return test\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph7kqjejv.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  TypeError: non-boolean (Char) used in boolean context\\n  Stacktrace:\\\
    n    [1] _simple_count\\n      @ ./reduce.jl:1206 [inlined]\\n    [2] #count#271\\\
    n      @ ./reduce.jl:1201 [inlined]\\n    [3] #count#270\\n      @ ./reduce.jl:1199\
    \ [inlined]\\n    [4] count\\n      @ ./reduce.jl:1199 [inlined]\\n    [5] (::var\"\
    #1#4\")(x::SubString{String})\\n      @ Main ./none:0\\n    [6] iterate\\n   \
    \   @ ./generator.jl:47 [inlined]\\n    [7] _all(f::Base.var\"#318#320\", itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#4\"}, #unused#::Colon)\\n      @ Base ./reduce.jl:1156\\n    [8] all\\\
    n      @ ./reduce.jl:1152 [inlined]\\n    [9] Dict(kv::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#4\"})\\n      @ Base ./dict.jl:131\\n   [10] histogram(test::String)\\\
    n      @ Main /tmp/tmph7kqjejv.jl:19\\n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmph7kqjejv.jl:31 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmph7kqjejv.jl:30\\n  \\\
    n  caused by: TypeError: non-boolean (Char) used in boolean context\\n  Stacktrace:\\\
    n    [1] _simple_count\\n      @ ./reduce.jl:1206 [inlined]\\n    [2] #count#271\\\
    n      @ ./reduce.jl:1201 [inlined]\\n    [3] #count#270\\n      @ ./reduce.jl:1199\
    \ [inlined]\\n    [4] count\\n      @ ./reduce.jl:1199 [inlined]\\n    [5] (::var\"\
    #1#4\")(x::SubString{String})\\n      @ Main ./none:0\\n    [6] iterate\\n   \
    \   @ ./generator.jl:47 [inlined]\\n    [7] Dict{String, Int64}(kv::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#4\"})\\n      @ Base ./dict.jl:103\\n    [8] dict_with_eltype\\n   \
    \   @ ./abstractdict.jl:541 [inlined]\\n    [9] dict_with_eltype\\n      @ ./abstractdict.jl:548\
    \ [inlined]\\n   [10] Dict(kv::Base.Generator{Vector{SubString{String}}, var\"\
    #1#4\"})\\n      @ Base "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # Splits the string into a vector of letters using split function\n\
    \    letr = split(test)\n    # Initializing the dictionary \n    histo = Dict{String,\
    \ Int64}()\n    # Iterates through the elements in letr vector\n    for l in letr\n\
    \        # Defines a default value of 1 if the string is not found in the dictionary\n\
    \        # Updates the key value if the string is already in the dictionary\n\
    \        histo[l] = get(histo, l, 1) + 1\n    end\n    # Returns the dictionary\n\
    \    return histo\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpihb87qvm.jl:37\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"b\" => 3, \"\
    a\" => 3) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihb87qvm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihb87qvm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpihb87qvm.jl:38\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 2, \"b\" => 3, \"\
    a\" => 3) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihb87qvm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihb87qvm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpihb87qvm.jl:39\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"g\" => 2, \"c\" => 2, \"b\" => 2, \"a\" => 2, \"d\" => 2) == Dict(\"\
    g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihb87qvm.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihb87qvm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpihb87qvm.jl:40\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"g\" => 2, \"t\" => 2,\
    \ \"r\" => 2) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihb87qvm.jl:40 [inlined]\n [3]\
    \ ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihb87qvm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    \"Calculate the histogram using a string.\"\n    return histogram(readdlm(IOBuffer(test),'\
    \ '))\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfjnm08x4.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ readdlm not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmpfjnm08x4.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjnm08x4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjnm08x4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfjnm08x4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: readdlm\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpfjnm08x4.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjnm08x4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjnm08x4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfjnm08x4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: readdlm not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpfjnm08x4.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjnm08x4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjnm08x4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfjnm08x4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ readdlm not defined\n  Stacktrace:\n   [1] histogra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjnm08x4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    dict = Dict{String, Int64}()\n    for letter in test\n       \
    \ if letter in keys(dict)\n            dict[letter] += 1\n        else\n     \
    \       dict[letter] = 1\n        end\n    end\n    maximum(dict)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfki84bzk.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpfki84bzk.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpfki84bzk.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpfki84bzk.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpfki84bzk.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpfki84bzk.jl:24\\n   [3] macro expansion\\n     @ /shared/centos"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    res = Dict{String, Int64}()\n    for i in test.lowercase\n   \
    \     if haskey(res, i)\n            res[i] += 1\n        else\n            res[i]\
    \ = 1\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk3u8mq2h.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ String has no field lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpk3u8mq2h.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3u8mq2h.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3u8mq2h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpk3u8mq2h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type String has\
    \ no field lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpk3u8mq2h.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3u8mq2h.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3u8mq2h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpk3u8mq2h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type String has no field lowercase\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpk3u8mq2h.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3u8mq2h.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3u8mq2h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpk3u8mq2h.jl:37\n  Test threw "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3u8mq2h.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    # declare and initialize local variables\n    new_test = test\n\
    \    result = Dict{String, Int64}()\n    index = 0\n    max_index = 0\n    letter\
    \ = \"\"\n    max_letter = \"\"\n    count = 0\n    max_count = 0\n    # iterate\
    \ through the input String\n    for i in test\n        # if the letter is not\
    \ in the dictionary\n        if !haskey(result, i)\n            # add the letter\
    \ to the dictionary\n            result[i] = 1\n        # if the letter is in\
    \ the dictionary\n        else\n            # increment the letter's value in\
    \ the dictionary\n            result[i] += 1\n        end\n    end\n    # get\
    \ the max value in the dictionary\n    for (k, v) in result\n        if v > max_count\n\
    \            max_count = v\n        end\n    end\n    # iterate through the dictionary\n\
    \    for (k, v) in result\n        # if the value is less than the max value\n\
    \        if v < max_count\n            # delete the key from the dictionary\n\
    \            delete!(result, k)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprcb0znby.jl:61\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmprcb0znby.jl:33\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmprcb0znby.jl:61 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmprcb0znby.jl:60\\ntest set:\
    \ Error During Test at /tmp/tmprcb0znby.jl:62\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmprcb0znby.jl:33\\n   [3] macro expansion\\n     @ /shared/centos"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    hist = Dict()\n    str = split(test, \" \")\n    if length(str)\
    \ > 0\n        for c in str\n            if haskey(hist, c)\n                hist[c]\
    \ += 1\n            else\n                hist[c] = 1\n            end\n     \
    \   end\n    end\n    return hist\nend\nhistogram(\"a b b c a b\")\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3ppjvuz.jl:39\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3ppjvuz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3ppjvuz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpl3ppjvuz.jl:42\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3ppjvuz.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3ppjvuz.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpl3ppjvuz.jl:44\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3ppjvuz.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3ppjvuz.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3ppjvuz.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram=Dict{String, Int64}()\n    for word in split(test)\n\
    \        if haskey(histogram, word)\n            histogram[word] += 1\n      \
    \  else\n            histogram[word] = 1\n        end\n    end\n    count = maximum(values(histogram))\n\
    \    return filter(histogram) do (letter, occurrences)\n        occurrences ==\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_mxw92f.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpa_mxw92f.jl:27\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpa_mxw92f.jl:43 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpa_mxw92f.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_mxw92f.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    letter_occurence = Dict{String, Int64}()\n    for letter in test\n\
    \        letter_occurence[letter] = get(letter_occurence, letter, 0) + 1\n   \
    \ end\n    sorted_letter_occurence = sort(collect(letter_occurence), by=x->x[2],\
    \ rev=true)\n    max_occurence = sorted_letter_occurence[1][2]\n    max_occurence_letters\
    \ = filter(x->x[2] == max_occurence, sorted_letter_occurence)\n    return Dict(map(x->(x[1],\
    \ x[2]), max_occurence_letters))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp68xy659z.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp68xy659z.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp68xy659z.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp68xy659z.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp68xy659z.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:373\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp68xy659z.jl:21\\n   [3] macro expansion\\n     @ /shared/centos"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    return Dict(\"a\" => 0, \"b\" => 0, \"c\" => 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9iuekhm7.jl:26\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 0, \"\
    b\" => 0, \"a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9iuekhm7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9iuekhm7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9iuekhm7.jl:27\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 0, \"b\" => 0, \"\
    a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9iuekhm7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9iuekhm7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9iuekhm7.jl:28\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"c\" => 0, \"b\" => 0, \"a\" => 0) == Dict(\"g\" => 1, \"c\" => 1, \"\
    b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9iuekhm7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9iuekhm7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9iuekhm7.jl:29\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"c\" => 0, \"b\" => 0,\
    \ \"a\" => 0) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9iuekhm7.jl:29 [inlined]\n [3]\
    \ macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9iuekhm7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    testStr = split(test)\n    dict = Dict()\n    for i in testStr\n\
    \        if !(haskey(dict, i))\n            dict[i] = 1\n        else\n      \
    \      dict[i] += 1\n        end\n    end\n    dict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplvr271vc.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvr271vc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvr271vc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmplvr271vc.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvr271vc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvr271vc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvr271vc.jl:32\n"
  exit_code: 1
  status: SyntaxError
