language: jl
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    idx = argmax(length, strings)\n    if isempty(idx)\n        return\
    \ nothing\n    else\n        return strings[idx]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4h4t5imt.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp4h4t5imt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #264#265\"{typeof(length)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{String})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] argmax\n\
    \      @ ./reduce.jl:912 [inlined]\n   [11] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp4h4t5imt.jl:11\n   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmp4h4t5imt.jl:23 [inlined]\n\
    \   [14] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmp4h4t5imt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h4t5imt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  ArgumentError: invalid index: \"\
    x\" of type String\n  Stacktrace:\n    [1] to_index(i::String)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::String)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] longest(strings::Vector{String})\n      @ Main /tmp/tmp4h4t5imt.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    res\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(res)\n            res = strings[i]\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ reduce(max, strings, lt=length)\nend\nlongest([\"a\", \"bb\", \"ccc\"])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching mapreduce(::typeof(identity),\
    \ ::typeof(max), ::Vector{String}; lt=length)\nClosest candidates are:\n  mapreduce(::Any,\
    \ ::Any, ::Union{Base.AbstractBroadcasted, AbstractArray}; dims, init) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:322\
    \ got unsupported keyword argument \"lt\"\n  mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}...; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:324\n\
    \  mapreduce(::Any, ::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:289\n\
    \  ...\nStacktrace:\n [1] kwerr(::NamedTuple{(:lt,), Tuple{typeof(length)}}, ::Function,\
    \ ::Function, ::Function, ::Vector{String})\n   @ Base ./error.jl:163\n [2] reduce(op::Function,\
    \ A::Vector{String}; kw::Base.Pairs{Symbol, typeof(length), Tuple{Symbol}, NamedTuple{(:lt,),\
    \ Tuple{typeof(length)}}})\n   @ Base ./reducedim.jl:371\n [3] longest(strings::Vector{String})\n\
    \   @ Main /tmp/tmpjj0_hwwq.jl:14\n [4] top-level scope\n   @ /tmp/tmpjj0_hwwq.jl:16\n\
    in expression starting at /tmp/tmpjj0_hwwq.jl:16\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  mx = \"\"\n    for i in strings\n        if length(i) > length(mx)\n      \
    \      mx = i\n        end\n    end\n    return mx\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return strings[argmax(length.(strings))]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpsocfiagb.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsocfiagb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ #argmax#787\n      @ ./reducedim.jl:1117 [inlined]\n   [14] argmax\n      @\
    \ ./reducedim.jl:1117 [inlined]\n   [15] longest(strings::Vector{String})\n  \
    \    @ Main /tmp/tmpsocfiagb.jl:11\n   [16] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [17] macro expansion\n      @ /tmp/tmpsocfiagb.jl:18 [inlined]\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [19] top-level scope\n      @ /tmp/tmpsocfiagb.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    s =\
    \ strings[1]\n    for x in strings\n        if length(x) > length(s)\n       \
    \     s = x\n        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length = 0\n    for i in strings\n        if length(i) > length\n\
    \            length = length(i)\n            longest = i\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfiqk3phb.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpfiqk3phb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type typeof(longest) to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Function)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpfiqk3phb.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfiqk3phb.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfiqk3phb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfiqk3phb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpfiqk3phb.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfiqk3phb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfiqk3phb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfiqk3phb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: objects of type Int64 are not calla"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    return strings[first(x -> length(x) == max_length,\
    \ strings)]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpslbfdv4w.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpslbfdv4w.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching first(::var\"#1#2\"{Int64}, ::Vector{String})\n  Closest candidates\
    \ are:\n    first(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:417\n\
    \    first(::Any, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:448\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpslbfdv4w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslbfdv4w.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslbfdv4w.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpslbfdv4w.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching first(::var\"#1#2\"{Int64}, ::Vector{String})\n\
    \  Closest candidates are:\n    first(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:417\n\
    \    first(::Any, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:448\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpslbfdv4w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslbfdv4w.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslbfdv4w.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_length = length(strings) > 0 ? length(strings[1]) : 0 \n\
    \    max_idx = 1 \n    for i in 2:length(strings) \n        if length(strings[i])\
    \ > max_length \n            max_length = length(strings[i]) \n            max_idx\
    \ = i \n        end \n    end \n    length(strings) > 0 ? strings[max_idx] : nothing\
    \ \nend \n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    string\
    \ = strings[1]\n    for i = 2:length(strings)\n        string = (strings[i] >\
    \ string) ? strings[i] : string\n    end\n    return string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkqoisalq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpkqoisalq.jl:26\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqoisalq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqoisalq.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings) \n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(longest)\n            longest = string\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  return reduce(x -> x, strings) do x, y\n        if length(x) > length(y)\n\
    \            x\n        else\n            y\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpreu0zh9k.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpreu0zh9k.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching reduce(::var\"#1#3\", ::var\"#2#4\", ::Vector{String})\n  Closest candidates\
    \ are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpreu0zh9k.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpreu0zh9k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpreu0zh9k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpreu0zh9k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching reduce(::var\"#1#3\", ::var\"#2#4\", ::Vector{String})\n\
    \  Closest candidates are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpreu0zh9k.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpreu0zh9k.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpreu0z"
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest_string)\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    if\
    \ length(strings) == 1\n        return strings[1]\n    end\n    lenmax = length(strings[1])\n\
    \    ind = 1\n    for i = 2:length(strings)\n        if length(strings[i]) > lenmax\n\
    \            lenmax = length(strings[i])\n            ind = i\n        end\n \
    \   end\n    return strings[ind]\nend\nlongest([\"a\", \"bb\", \"ccc\"])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    return strings[argmax(length.(strings))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n  longest = strings[1]\n  for s in strings\n    if length(s) > length(longest)\n\
    \      longest = s\n    end\n  end\n  return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_z890ykg.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp_z890ykg.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp_z890ykg.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_z890ykg.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_z890ykg.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if strings == String[]\n        return nothing\n    elseif strings\
    \ == String[\"\"]\n        return \"\"\n    else\n        max_length = 0\n   \
    \     for s in strings\n            if length(s) > max_length\n              \
    \  max_length = length(s)\n            end\n        end\n        for s in strings\n\
    \            if length(s) == max_length\n                return s\n          \
    \  end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_idx\
    \ = 1\n    longest_len = length(strings[1])\n    for (i, s) in enumerate(strings)\n\
    \        if length(s) > longest_len\n            longest_idx = i\n           \
    \ longest_len = length(s)\n        end\n    end\n    return strings[longest_idx]\n\
    end\n \n \nif is_test()\n    import Pkg; Pkg.test(\"StringStuff\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: is_test not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpt27bbm2o.jl:26\nin expression starting at /tmp/tmpt27bbm2o.jl:26\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    try \n        return strings[argmax(length, strings)]\n    catch\n\
    \        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48iwwxji.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp48iwwxji.jl:23\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: nothing == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48iwwxji.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48iwwxji.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp48iwwxji.jl:24\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: nothing == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48iwwxji.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48iwwxji.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    best\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(best)\n            best = string\n        end\n    end\n    return best\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    n =\
    \ length(strings)\n    if n == 1\n        return strings[1]\n    end\n    str_len\
    \ = [length(strings[i]) for i in 1:n]\n    imax = argmax(str_len)\n    return\
    \ strings[imax]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return nothing if (strings == []) else first(sort(strings, by=length))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpj_te8e1j.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj_te8e1j.jl:11\n\
    in expression starting at /tmp/tmpj_te8e1j.jl:11\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    l = 0\n    longest = nothing\n    for string in strings\n   \
    \     if length(string) > l\n            l = length(string)\n            longest\
    \ = string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for (i, string) in enumerate(strings)\n        if length(string)\
    \ > length(longest_string)\n            longest_string = string\n        end\n\
    \    end\n    return longest_string\nend\nprintln(longest([\"\"]))\nprintln(longest([\"\
    a\", \"b\", \"c\"]))\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: '

    a

    ccc

    Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length(strings) > 0 ? strings[indmax(length.(strings))] : nothing\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp3y9bsi6x.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp3y9bsi6x.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp3y9bsi6x.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3y9bsi6x.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3y9bsi6x.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3y9bsi6x.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp3y9bsi6x.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3y9bsi6x.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3y9bsi6x.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlength\
    \ = maximum(length.(strings))\n    return first(strings[length.(strings) .== maxlength])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_len\
    \ = maximum(length.(strings))\n    idx = findfirst(length.(strings) .== max_len)\n\
    \    return strings[idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    for s in strings\n        if length(s) == max_length\n\
    \            return s\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    longest_string = strings[1]\n    longest_length = length(longest_string)\n\
    \    for i in 2:n\n        if length(strings[i]) > longest_length\n          \
    \  longest_string = strings[i]\n            longest_length = length(longest_string)\n\
    \        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    lengths\
    \ = [length(s) for s in strings]\n    index = indmax(lengths)\n    return strings[index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp29ee7ag9.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp29ee7ag9.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp29ee7ag9.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp29ee7ag9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp29ee7ag9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp29ee7ag9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp29ee7ag9.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp29ee7ag9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp29ee7ag9.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009104
- exit_code: -1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longests = strings[findmax(length.(strings))[2]]\n    if isempty(longests)\n\
    \        return nothing\n    else\n        return longests[1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpo0fcf0xf.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpo0fcf0xf.jl:11\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpo0fcf0xf.jl:23 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpo0fcf0xf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpo0fcf0xf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: Cannot `convert` an\
    \ object of type Char to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::Abstract"
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    lengths\
    \ = [length(s) for s in strings]\n    max_length = maximum(lengths)\n    idx =\
    \ findfirst(lengths .== max_length)\n    return strings[idx]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_str\
    \ = strings[1]\n    for str in strings\n        if length(str) > length(longest_str)\n\
    \            longest_str = str\n        end\n    end\n    return longest_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  l = length(strings[1])\n    ind = 1\n    for i in 2:length(strings)\n     \
    \   if length(strings[i]) > l\n            l = length(strings[i])\n          \
    \  ind = i\n        end\n    end\n    return strings[ind]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return nothing if length(strings) == 0\n    max = 0\n    max_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > max\n           \
    \ max = length(s)\n            max_string = s\n        end\n    end\n    return\
    \ max_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpws27eqv3.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpws27eqv3.jl:11\n\
    in expression starting at /tmp/tmpws27eqv3.jl:11\n"
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_idx = argmax(length, strings)\n    if isempty(max_idx)\n\
    \        return nothing\n    else\n        return strings[max_idx]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp155hdkc5.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp155hdkc5.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #264#265\"{typeof(length)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{String})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] argmax\n\
    \      @ ./reduce.jl:912 [inlined]\n   [11] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp155hdkc5.jl:11\n   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmp155hdkc5.jl:23 [inlined]\n\
    \   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmp155hdkc5.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp155hdkc5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  ArgumentError: invalid index: \"\
    x\" of type String\n  Stacktrace:\n    [1] to_index(i::String)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::String)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] longest(strings::Vector{String})\n      @ Main /tmp/tmp155hdkc5.jl:15\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8"
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = findmax(length.(strings))[2]\n    return strings[max_length]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    len = [length(string) for string in strings]\n    where = findmax(len)[2]\n\
    \    return strings[where]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf44uowru.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpf44uowru.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpf44uowru.jl:12\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpf44uowru.jl:20 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpf44uowru.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    idx = argmax(map(length, strings))\n    if isempty(idx)\n   \
    \     return nothing\n    else\n        return strings[idx]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpymn_9toa.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpymn_9toa.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ #argmax#787\n      @ ./reducedim.jl:1117 [inlined]\n   [14] argmax\n      @\
    \ ./reducedim.jl:1117 [inlined]\n   [15] longest(strings::Vector{String})\n  \
    \    @ Main /tmp/tmpymn_9toa.jl:11\n   [16] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [17] macro expansion\n      @ /tmp/tmpymn_9toa.jl:23 [inlined]\n\
    \   [18] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [19] top-level scope\n      @ /tmp/tmpymn_9toa.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for string in strings\n        if length(string)\
    \ > length(longest)\n            longest = string\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_idx\
    \ = 1\n    max_length = length(strings[1])\n    for i = 2:length(strings)\n  \
    \      if length(strings[i]) > max_length\n            longest_idx = i\n     \
    \       max_length = length(strings[i])\n        end\n    end\n    return strings[longest_idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    (s,\
    \ length) = (strings[1], length(strings[1]))\n    for i in 2:length(strings)\n\
    \        current = strings[i]\n        if length(current) > length\n         \
    \   (s, length) = (current, length(current))\n        end\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpqjqvcvg1.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpqjqvcvg1.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpqjqvcvg1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjqvcvg1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjqvcvg1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqjqvcvg1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: length not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpqjqvcvg1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjqvcvg1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjqvcvg1.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    return strings[findfirst(length.(strings).==max_length)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    max_length = 0\n    for str in strings\n\
    \        if str == nothing\n            return nothing\n        end\n        if\
    \ length(str) > max_length\n            max_length = length(str)\n           \
    \ longest = str\n        end\n    end\n    return longest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlength\
    \ = 0\n    maxindex = 0\n    for (i, s) in enumerate(strings)\n        if length(s)\
    \ > maxlength\n            maxlength = length(s)\n            maxindex = i\n \
    \       end\n    end\n    return strings[maxindex]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    lengths\
    \ = map(length, strings)\n    longest_index = findfirst(lengths .== maximum(lengths))\n\
    \    strings[longest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxl\
    \ = 0\n    maxi = 1\n    for i in 1:length(strings)\n        l = length(strings[i])\n\
    \        if l > maxl\n            maxl = l\n            maxi = i\n        end\n\
    \    end\n    return strings[maxi]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    n =\
    \ 1\n    for i in 2:length(strings)\n        if length(strings[i]) > length(strings[n])\n\
    \            n = i\n        end\n    end\n    return strings[n]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    # 1. How would you implement this function in Julia? \n    #\
    \    There are multiple correct answers, but you should get the same output.\n\
    \    # 2. What is the run time of this function, in terms of the length of `strings`?\n\
    \    # 3. What is the memory usage of this function, in terms of the length of\
    \ `strings`?\n    # 4. Is it necessary to loop over all strings? \n    #    If\
    \ not, how could you modify the function to stop looping early?\n    best = nothing\n\
    \    for s in strings\n        if best === nothing || length(s) > length(best)\n\
    \            best = s\n        end\n    end\n    return best\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    strings[findfirst(length.(strings) .== max_length)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    if\
    \ length(strings) == 1\n        return strings[1]\n    end\n    longest_yet =\
    \ strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) > length(longest_yet)\n\
    \            longest_yet = strings[i]\n        end\n    end\n    return longest_yet\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = -1\n    longest_string = \"\"\n    for s in strings\n        if length(s)\
    \ > max_length\n            max_length = length(s)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009102
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    if\
    \ length(strings) == 1\n        return strings[1]\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(longest_string)\n            longest_string = string\n        end\n \
    \   end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    for s in strings\n        if length(s) == max_length\n\
    \            return s\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_len = 0\n    max_str = nothing\n    for s in strings\n  \
    \      if length(s) > max_len\n            max_len = length(s)\n            max_str\
    \ = s\n        end\n    end\n    return max_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    l =\
    \ length(strings[1])\n    res = strings[1]\n    for s in strings\n        if length(s)\
    \ > l\n            l = length(s)\n            res = s\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = 0\n    max_string = \"\"\n    for s in strings\n        length = s |> strlength\n\
    \        if length > max_length\n            max_length = length\n           \
    \ max_string = s\n        end\n    end\n    return max_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp7b6gbgiw.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp7b6gbgiw.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: strlength\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp7b6gbgiw.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b6gbgiw.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b6gbgiw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7b6gbgiw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: strlength not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp7b6gbgiw.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b6gbgiw.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b6gbgiw.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_so_far\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(s) > length(longest_so_far)\n\
    \            longest_so_far = s\n        end\n    end\n    return longest_so_far\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    mx = 0\n    res = strings[1]\n    for i in 1:n\n        l = length(strings[i])\n\
    \        if l > mx\n            mx = l\n            res = strings[i]\n       \
    \ end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if strings == nothing \n        return nothing\n    end\n   \
    \ max_length = length(strings[1])\n    best_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        len = length(strings[i])\n        if len > max_length\n\
    \            max_length = len\n            best_string = strings[i]\n        end\n\
    \    end\n    return best_string\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkkoqwros.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpkkoqwros.jl:31\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpkkoqwros.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkkoqwros.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkkoqwros.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    indices\
    \ = findmax(length.(strings))\n    return strings[indices[1]]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgsw41fsw.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpgsw41fsw.jl:24\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"www\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgsw41fsw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgsw41fsw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_length = length(max(strings))\n    for string in strings\n\
    \        if length(string) == max_length\n            return string\n        end\n\
    \    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9pyfw5i3.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp9pyfw5i3.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: no method\
    \ matching max(::Vector{String})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmp9pyfw5i3.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pyfw5i3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pyfw5i3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9pyfw5i3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method matching\
    \ max(::Vector{String})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmp9pyfw5i3.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pyfw5i3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pyfw5i3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9pyfw5i3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  "
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    out = nothing\n    max_size = 0\n    for str in strings\n   \
    \     if length(str) > max_size\n            max_size = length(str)\n        \
    \    out = str\n        end\n    end\n    return out\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: -1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return findmax(strings) do s1, s2\n        if length(s1) > length(s2)\n\
    \            return true\n        elseif length(s1) < length(s2)\n           \
    \ return false\n        else\n            return true\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp9yv7_le2.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{var\"#1#2\"}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ String}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @\
    \ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl(op::Base.MappingRF{Base.var\"#260#261\"{var\"\
    #1#2\"}, Base.BottomRF{typeof(Base._rf_findmax)}}, nt::Base._InitialValue, itr::Base.Pairs{Int64,\
    \ String, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{String}})\n     \
    \ @ Base ./reduce.jl:49\n    [7] mapfoldl_impl(f::Base.var\"#260#261\"{var\"#1#2\"\
    }, op::typeof(Base._rf_findmax), nt::Base._InitialValue, itr::Base.Pairs{Int64,\
    \ String, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{String}})\n     \
    \ @ Base ./reduce.jl:44\n    [8] mapfoldl(f::Function, op::Function, itr::Base.Pairs{Int64,\
    \ String, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{String}}; init::Base._InitialValue)\n\
    \      @ Base ./reduce.jl:162\n    [9] mapfoldl(f::Function, op::Function, itr::Base.Pairs{Int64,\
    \ String, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{String}})\n     \
    \ @ Base ./reduce.jl:162\n   [10] findmax(f::var\"#1#2\", domain::Vector{String})\n\
    \      @ Base ./reduce.jl:803\n   [11] longest(strings::Vector{String})\n    \
    \  @ Main /tmp/tmp9yv7_le2.jl:11\n   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmp9yv7_le2.jl:26 [inlined]\n\
    \   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmp9yv7_le2.jl:25\ntest set:\
    \ Error "
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_len = 0\n    res = nothing\n    for s in strings\n      \
    \  if length(s) > max_len\n            max_len = length(s)\n            res =\
    \ s\n        end\n    end\n    return res\nend\n \n \n\"\"\" In out of a string,\
    \ return a vector of all strings within it, separated by `sep`.\n    >>> split(\"\
    \", ',')\n    String[]\n    >>> split(\"a\", ',')\n    String[\"a\"]\n    >>>\
    \ split(\"a,b\", ',')\n    String[\"a\", \"b\"]\n    >>> split(\"a,,b\", ',')\n\
    \    String[\"a\", \"\", \"b\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2mvl2qk2.jl:23\nin expression starting at /tmp/tmp2mvl2qk2.jl:23\n"
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_length = findmax(length, strings)[1]\n    idx = findfirst(x\
    \ -> length(x) == max_length, strings)\n    if isempty(idx)\n        return nothing\n\
    \    else\n        return strings[idx]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8eozz77q.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp8eozz77q.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(length)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ String}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @\
    \ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax(f::typeof(length),\
    \ domain::Vector{String})\n      @ Base ./reduce.jl:803\n   [11] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp8eozz77q.jl:11\n   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmp8eozz77q.jl:24 [inlined]\n\
    \   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmp8eozz77q.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    strings = sort(strings, by=length)\n    return strings[end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpqzmktfk7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpqzmktfk7.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpqzmktfk7.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqzmktfk7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqzmktfk7.jl:18\ntest set:\
    \ Test Failed at /tmp/tmpqzmktfk7.jl:20\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqzmktfk7.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqzmktfk7.jl:18\ntest set: Test Failed at /tmp/tmpqzmktfk7.jl:21\n\
    \  Expression: candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"\
    ]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqzmktfk7.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqzmktfk7.jl:18\nTest Summary: | Fail  Error\
    \  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max_len = 0\n    max_str = strings[1]\n    for str in strings\n        if length(str)\
    \ > max_len\n            max_len = length(str)\n            max_str = str\n  \
    \      end\n    end\n    return max_str\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  maxi = strings[1]\n    for s in strings\n        if length(s) > length(maxi)\n\
    \            maxi = s\n        end\n    end\n    return maxi\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length(strings) == 0 && return nothing\n    length(strings) ==\
    \ 1 && return strings[1]\n    ind = 1\n    for i = 2:length(strings)\n       \
    \ length(strings[i]) > length(strings[ind]) && (ind = i)\n    end\n    return\
    \ strings[ind]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = 0\n    longest_string = strings[1]\n    for s in strings\n        if length(s)\
    \ > max_length\n            max_length = length(s)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    len = length(strings)\n    if len == 0\n        return nothing\n\
    \    end\n    longest = strings[1]\n    for i = 2:len\n        longest = max(longest,\
    \ strings[i])\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt74nm9jn.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpt74nm9jn.jl:27\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt74nm9jn.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt74nm9jn.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_idx\
    \ = indmax(length.(strings))\n    return strings[longest_idx]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmphe2nq_a2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmphe2nq_a2.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmphe2nq_a2.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphe2nq_a2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphe2nq_a2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmphe2nq_a2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmphe2nq_a2.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphe2nq_a2.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphe2nq_a2.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) > 0\n        return strings[indmax(lengths(strings))]\n\
    \    else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgcxxfx95.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgcxxfx95.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: lengths\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpgcxxfx95.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgcxxfx95.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgcxxfx95.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgcxxfx95.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: lengths not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpgcxxfx95.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgcxxfx95.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgcxxfx95.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    s = nothing\n    l = 0\n    for i in strings\n        if length(i)\
    \ > l\n            s = i\n            l = length(i)\n        end\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    lengths\
    \ = [length(x) for x in strings]\n    ind = findmax(lengths)[2]\n    return strings[ind]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009104
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_index = first_index = nothing\n    max_length = first_length\
    \ = 0\n    for i in keys(strings)\n        if length(strings[i]) > max_length\n\
    \            max_length = length(strings[i])\n            max_index = i\n    \
    \    end\n        if i == 1\n            first_length = length(strings[i])\n \
    \           first_index = i\n        end\n    end\n    if max_length == first_length\n\
    \        return strings[first_index]\n    else\n        return strings[max_index]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp9zh7rjrz.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp9zh7rjrz.jl:34\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: invalid\
    \ index: nothing of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::Nothing)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp9zh7rjrz.jl:24\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp9zh7rjrz.jl:34 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp9zh7rjrz.jl:33\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length_strings = length.(strings)\n    if isempty(length_strings)\n\
    \        return nothing\n    end\n    max_length = maximum(length_strings)\n \
    \   max_length_idx = findfirst(length_strings .== max_length)\n    return strings[max_length_idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return maximum(strings, lt=bylength)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqmweym7j.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqmweym7j.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: bylength\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpqmweym7j.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmweym7j.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmweym7j.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqmweym7j.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: bylength not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpqmweym7j.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmweym7j.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmweym7j.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqmweym7j.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: bylength not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpqmweym7j.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqmweym7j.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqmweym7j.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    length(strings[1])\n    idx = 1\n    for i = 2:n\n        if length(strings[i])\
    \ > length(strings[idx])\n            idx = i\n        end\n    end\n    return\
    \ strings[idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  length(strings) == 1 && return strings[1]\n    lengths = map(s -> length(s),\
    \ strings)\n    return strings[argmax(lengths)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    # initialize best index and length\n    best_i, best_len = nothing,\
    \ nothing\n    # if no string, return nothing\n    if isempty(strings)\n     \
    \   return nothing\n    # iterate through strings and consider the best\n    for\
    \ (i, str) in enumerate(strings)\n        # if the string is the first one, \n\
    \        # or longer than best length, update best\n        if isnothing(best_i)\
    \ || length(str) > best_len\n            best_i, best_len = i, length(str)\n \
    \       end\n    end\n    # return the best string\n    return strings[best_i]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9aub9am_.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9aub9am_.jl:1\n\
    in expression starting at /tmp/tmp9aub9am_.jl:1\n"
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    longest_string = strings[1]\n    for i = 2:n\n        if length(strings[i])\
    \ > length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_str\
    \ = strings[1]\n    longest_len = length(longest_str)\n    for string in strings[2:end]\n\
    \        if length(string) > longest_len\n            longest_str = string\n \
    \           longest_len = length(string)\n        end\n    end\n    return longest_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ argmax(strings) do s\n        length(s)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max_length = maximum(length.(strings))\n    max_strings = strings[findall(length.(strings)\
    \ .== max_length)]\n    return max_strings[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    s =\
    \ strings[1]\n    for str in strings\n        if length(str) > length(s)\n   \
    \         s = str\n        end\n    end\n    return s\nend\nend # module\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_f48fpnp.jl:22\nin expression starting at /tmp/tmp_f48fpnp.jl:22\n"
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ===\
    \ nothing || length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_len\
    \ = length(strings[1])\n    result = strings[1]\n    for string in strings\n \
    \       if length(string) > max_len\n            max_len = length(string)\n  \
    \          result = string\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max(strings,\
    \ by=length)\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp3x6tfaov.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp3x6tfaov.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching max(::Vector{String}; by=length)\n  Closest candidates are:\n    max(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\
    \ got unsupported keyword argument \"by\"\n    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\
    \ got unsupported keyword argument \"by\"\n    max(::Any, !Matched::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\
    \ got unsupported keyword argument \"by\"\n    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp3x6tfaov.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3x6tfaov.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3x6tfaov.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3x6tfaov.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching max(::Vector{String}; by=length)\n  Closest\
    \ candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\
    \ got unsupported keyword argument \"by\"\n    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\
    \ got unsupported keyword argument \"by\"\n    max(::Any, !Matched::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\
    \ got unsupported keyword argument \"by\"\n    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp3x6tfaov.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3x6tfaov.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/po"
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest_string = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i])\
    \ > length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max_length = 0\n    max_length_index = 1\n    for i in 1:length(strings)\n\
    \        if length(strings[i]) > max_length\n            max_length = length(strings[i])\n\
    \            max_length_index = i\n        end\n    end\n    return strings[max_length_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_str\
    \ = \"\"\n    for string in strings\n        if length(string) > length(max_str)\n\
    \            max_str = string\n        end\n    end\n    return max_str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_so_far\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(longest_so_far)\n            longest_so_far = string\n        end\n \
    \   end\n    return longest_so_far\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max_length = length(strings[1])\n    max_length_index = 1\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > max_length\n            max_length = length(strings[i])\n\
    \            max_length_index = i\n        end\n    end\n    return strings[max_length_index]\n\
    end\nlongest([\"a\", \"bb\", \"ccc\"])\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    if\
    \ length(strings) == 1\n        return strings[1]\n    end\n    best = strings[1]\n\
    \    for i = 2:length(strings)\n        if length(strings[i]) > length(best)\n\
    \            best = strings[i]\n        end\n    end\n    return best\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_string\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(max_string)\n            max_string = strings[i]\n        end\n    end\n\
    \    return max_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    strings |> length |> imax |> (strings[])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbc74i2ep.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpbc74i2ep.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: imax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpbc74i2ep.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc74i2ep.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc74i2ep.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbc74i2ep.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: imax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpbc74i2ep.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc74i2ep.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc74i2ep.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpbc74i2ep.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: imax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpbc74i2ep.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbc74i2ep.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbc74i2ep.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest_string = strings[1]\n    for string in strings\n        if length(string)\
    \ > length(longest_string)\n            longest_string = string\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: -1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_str\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(max_str)\n            max_str = strings[i]\n        end\n    end\n\
    \    return max_str\nend\n    \nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nprintln(longest([\"\
    a\", \"b\", \"c\"]))\nprintln(longest([]))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching longest(::Vector{Any})'
  stdout: 'ccc

    a

    '
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest_string = strings[1]\n    for string in strings\n    \
    \    if length(string) > length(longest_string)\n            longest_string =\
    \ string\n        end\n    end\n    longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_vhwgdqt.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp_vhwgdqt.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp_vhwgdqt.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_vhwgdqt.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_vhwgdqt.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    # type annotation is optional and helpful for debugging, but\
    \ not strictly necessary here\n    if length(strings) == 0\n        return nothing\n\
    \    end\n    longest_len = 0\n    longest_idx = 0\n    for (i, s) in enumerate(strings)\n\
    \        if length(s) > longest_len\n            longest_len = length(s)\n   \
    \         longest_idx = i\n        end\n    end\n    return strings[longest_idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    idx = indmax([length(s) for s in strings])\n    return strings[idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpruzj1xvc.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpruzj1xvc.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpruzj1xvc.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruzj1xvc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpruzj1xvc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpruzj1xvc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpruzj1xvc.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruzj1xvc.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpruzj1xvc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpruzj1xvc.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpruzj1xvc.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpruzj1xvc.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpruzj1xvc.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length(strings) == 0 && return nothing\n    strings[sortperm(lengths(strings))][end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgur5itc3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpgur5itc3.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: lengths\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpgur5itc3.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgur5itc3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgur5itc3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpgur5itc3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: lengths not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpgur5itc3.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgur5itc3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgur5itc3.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    sorted_strings\
    \ = sort(strings, by=string_length)\n    return sorted_strings[end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpxygqyc0t.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpxygqyc0t.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: string_length\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpxygqyc0t.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxygqyc0t.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxygqyc0t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxygqyc0t.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: string_length not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpxygqyc0t.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxygqyc0t.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxygqyc0t.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    foldl(strings, strings[1],\
    \ (x, y) -> length(x) > length(y) ? x : y)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgec1e3vc.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpgec1e3vc.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching foldl(::Vector{String}, ::String, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    foldl(::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:180\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpgec1e3vc.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgec1e3vc.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgec1e3vc.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpgec1e3vc.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching foldl(::Vector{String}, ::String, ::var\"\
    #1#2\")\n  Closest candidates are:\n    foldl(::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:180\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpgec1e3vc.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgec1e3vc.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgec1e3vc.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    # find the position of the longest string\n    pos = findmax(length.(strings))[2]\n\
    \    # return the string, or nothing if there are no strings\n    if isempty(pos)\n\
    \        return nothing\n    else\n        return strings[pos]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8_xxuzbt.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp8_xxuzbt.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp8_xxuzbt.jl:12\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp8_xxuzbt.jl:25 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp8_xxuzbt.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    ind_max\
    \ = 1\n    m = length(strings[1])\n    for i = 2:length(strings)\n        s =\
    \ strings[i]\n        if length(s) > m\n            m = length(s)\n          \
    \  ind_max = i\n        end\n    end\n    return strings[ind_max]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return nothing if isempty(strings)\n    longest = strings[1]\n\
    \    for str in strings[2:end]\n        if length(str) > length(longest)\n   \
    \         longest = str\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpz6cktym5.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6cktym5.jl:11\n\
    in expression starting at /tmp/tmpz6cktym5.jl:11\n"
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for str in strings\n        if length(str) > length(longest_string)\n\
    \            longest_string = str\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ===\
    \ nothing || length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009105
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    maxLength = maximum(length, strings)\n    idx = findfirst(length.(strings)\
    \ .== maxLength)\n    return strings[idx]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp84az4y_9.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp84az4y_9.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Function,\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{typeof(length),\
    \ typeof(max)}, #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\n      @ Base\
    \ ./reduce.jl:353\n    [6] _mapreduce(f::typeof(length), op::typeof(max), #unused#::IndexLinear,\
    \ A::Vector{String})\n      @ Base ./reduce.jl:402\n    [7] _mapreduce_dim\n \
    \     @ ./reducedim.jl:330 [inlined]\n    [8] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [9] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [10]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [11] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [12] #maximum#747\n      @ ./reducedim.jl:890\
    \ [inlined]\n   [13] maximum\n      @ ./reducedim.jl:890 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp84az4y_9.jl:11\n   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp84az4y_9.jl:20 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp84az4y_9.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009110
- exit_code: -1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    maximum(strings, by=length)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpb7zkcq3j.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: no method\
    \ matching mapreduce(::typeof(identity), ::typeof(max), ::Vector{String}; by=length)\n\
    \  Closest candidates are:\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}; dims, init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:322\
    \ got unsupported keyword argument \"by\"\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}...; kw...) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:324\n\
    \    mapreduce(::Any, ::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:289\n\
    \    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:by,), Tuple{typeof(length)}},\
    \ ::Function, ::Function, ::Function, ::Vector{String})\n     @ Base ./error.jl:163\n\
    \   [2] _maximum(f::Function, a::Vector{String}, ::Colon; kw::Base.Pairs{Symbol,\
    \ typeof(length), Tuple{Symbol}, NamedTuple{(:by,), Tuple{typeof(length)}}})\n\
    \     @ Base ./reducedim.jl:894\n   [3] _maximum(a::Vector{String}, ::Colon; kw::Base.Pairs{Symbol,\
    \ typeof(length), Tuple{Symbol}, NamedTuple{(:by,), Tuple{typeof(length)}}})\n\
    \     @ Base ./reducedim.jl:893\n   [4] #maximum#746\n     @ ./reducedim.jl:889\
    \ [inlined]\n   [5] longest(strings::Vector{String})\n     @ Main /tmp/tmpb7zkcq3j.jl:11\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpb7zkcq3j.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpb7zkcq3j.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpb7zkcq3j.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method matching\
    \ mapreduce(::typeof(identity), ::typeof(max), ::Vector{String}; by=length)\n\
    \  Closest candidates are:\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}; dims, init) at ~/.conda/en"
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for (i, s) in enumerate(strings)\n        if i == 1 continue\
    \ end\n        if length(s) > length(longest)\n            longest = s\n     \
    \   end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max\
    \ = 1\n    for i = 2:length(strings)\n        if length(strings[i]) > length(strings[max])\n\
    \            max = i\n        end\n    end\n    return strings[max]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_length = 0\n    longest_string = nothing\n    for s in strings\n\
    \        if length(s) > max_length\n            max_length = length(s)\n     \
    \       longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  length_max = length(strings[1])\n    index_max = 1\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length_max\n            length_max = length(strings[i])\n\
    \            index_max = i\n        end\n    end\n    return strings[index_max]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009107
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    return reduce(max, strings,\
    \ 1) do x, y\n        length(x) < length(y) ? y : x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpsod_pv71.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpsod_pv71.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching reduce(::var\"#1#2\", ::typeof(max), ::Vector{String}, ::Int64)\n \
    \ Closest candidates are:\n    reduce(::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpsod_pv71.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsod_pv71.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsod_pv71.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsod_pv71.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching reduce(::var\"#1#2\", ::typeof(max), ::Vector{String},\
    \ ::Int64)\n  Closest candidates are:\n    reduce(::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpsod_pv71.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsod_pv71.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsod_pv71.jl:20\nTest Summary:\
    \ | Pa"
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    len\
    \ = 0\n    res = \"\"\n    for s in strings\n        if length(s) > len\n    \
    \        len = length(s)\n            res = s\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    long = nothing\n    longest = 0\n    for s in strings\n     \
    \   if length(s) > longest\n            long = s\n            longest = length(s)\n\
    \        end\n    end\n    return long\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    strings[argmax(length,\
    \ strings)]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpln2y88qy.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpln2y88qy.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  ArgumentError: invalid\
    \ index: \"x\" of type String\n  Stacktrace:\n    [1] to_index(i::String)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::String)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpln2y88qy.jl:12\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpln2y88qy.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpln2y88qy.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpln2y88qy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  ArgumentError: invalid index: \"zzzz\" of type String\n  Stacktrace:\n   \
    \ [1] to_index(i::String)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::String)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpln2y88qy.jl:12\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpln2y88qy.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpln2y88qy.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longuest_length\
    \ = 0\n    index = 0\n    for i in 1:length(strings)\n        if length(strings[i])\
    \ > longuest_length\n            longuest_length = length(strings[i])\n      \
    \      index = i\n        end\n    end\n    return strings[index]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max = 0\n    longest_string = strings[1]\n    for i in 1:length(strings)\n\
    \        if length(strings[i]) > max\n            max = length(strings[i])\n \
    \           longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\n        \n    \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_str\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(longest_str)\n            longest_str = strings[i]\n        end\n   \
    \ end\n    return longest_str\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlen\
    \ = length(strings[1])\n    longest = strings[1]\n    for string in strings\n\
    \        if length(string) > maxlen\n            maxlen = length(string)\n   \
    \         longest = string\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n  if isempty(strings)\n    return nothing\n  end\n  longest_string\
    \ = strings[1]\n  for i = 2:length(strings)\n    if length(strings[i]) > length(longest_string)\n\
    \      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009108
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    len_max = 0\n    longest_str = nothing\n    for str in strings\n\
    \        if len(str) > len_max\n            len_max = len(str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpq0y11xkg.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpq0y11xkg.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: len\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpq0y11xkg.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0y11xkg.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0y11xkg.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpq0y11xkg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: len not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpq0y11xkg.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0y11xkg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0y11xkg.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ strings[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpszu4u3w1.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpszu4u3w1.jl:23\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszu4u3w1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszu4u3w1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return nothing if isempty(strings)\n    longest = strings[1]\n\
    \    for s in strings[2:end]\n        if length(s) > length(longest)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpu1l1kt6i.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu1l1kt6i.jl:11\n\
    in expression starting at /tmp/tmpu1l1kt6i.jl:11\n"
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    length_of_strings\
    \ = [length(s) for s in strings]\n    longest_length = maximum(length_of_strings)\n\
    \    return strings[indmin(length_of_strings)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptotkkl20.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmptotkkl20.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmin\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmptotkkl20.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptotkkl20.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptotkkl20.jl:22\ntest set:\
    \ Error During Test at /tmp/tmptotkkl20.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmin not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmptotkkl20.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptotkkl20.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptotkkl20.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if !isempty(strings)\n        str = strings[1]\n        for s\
    \ in strings\n            if length(s) > length(str)\n                str = s\n\
    \            end\n        end\n        return str\n    else\n        return nothing\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ strings[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpszu4u3w1.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpszu4u3w1.jl:23\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszu4u3w1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszu4u3w1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    strings[argmax(length.(strings))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlen\
    \ = 0\n    longest = nothing\n    for s in strings\n        if length(s) > maxlen\n\
    \            maxlen = length(s)\n            longest = s\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ strings[argmax(map(length, strings))]\nend\n# test\n@test longest([]) == nothing\n\
    @test longest([\"a\", \"b\", \"c\"]) == \"a\"\n@test longest([\"a\", \"bb\", \"\
    ccc\"]) == \"ccc\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpzdkm28cu.jl:17

    in expression starting at /tmp/tmpzdkm28cu.jl:17

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = 0\n    longest_string = strings[1]\n    for string in strings\n        if\
    \ length(string) > max_length\n            max_length = length(string)\n     \
    \       longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'ccc

    Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_len = 0\n    max_string = nothing\n    for string in strings\n\
    \        len = length(string)\n        if len > max_len\n            max_len =\
    \ len\n            max_string = string\n        end\n    end\n    return max_string\n\
    end\nlongest([\"a\", \"bb\", \"ccc\"])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'ccc

    Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  max_len = -1\n    max_len_str = \"\"\n    for str in strings\n        if length(str)\
    \ > max_len\n            max_len = length(str)\n            max_len_str = str\n\
    \        end\n    end\n    return max_len_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    index\
    \ = 1\n    for i in 1:length(strings)\n        if length(strings[i]) > length(strings[index])\n\
    \            index = i\n        end\n    end\n    return strings[index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    sorted_strings\
    \ = sort(strings, lt=(s1, s2) -> length(s1) > length(s2))\n    return sorted_strings[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return strings[indmax(length.(strings))]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwsih4dsq.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpwsih4dsq.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpwsih4dsq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsih4dsq.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsih4dsq.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwsih4dsq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpwsih4dsq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsih4dsq.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsih4dsq.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwsih4dsq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpwsih4dsq.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsih4dsq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsih4dsq.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxindex\
    \ = indmax(map(x -> length(x), strings))\n    return strings[maxindex]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp4gdyvl9k.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp4gdyvl9k.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp4gdyvl9k.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gdyvl9k.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gdyvl9k.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4gdyvl9k.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp4gdyvl9k.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gdyvl9k.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gdyvl9k.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longeststring = nothing\n    if isempty(strings)\n        return\
    \ nothing\n    end\n    for str in strings\n        if (longeststring == nothing)\
    \ || (length(str) > length(longeststring))\n            longeststring = str\n\
    \        end\n    end\n    return longeststring\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    maxlen\
    \ = 0\n    for s in strings\n        if length(s) > maxlen\n            maxlen\
    \ = length(s)\n            longstring = s\n        end\n    end\n    return longstring\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpnys54g27.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpnys54g27.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: longstring\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpnys54g27.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnys54g27.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnys54g27.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnys54g27.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: longstring not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpnys54g27.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnys54g27.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnys54g27.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009113
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = 0\n    for string in strings\n        if length(string) > max_length\n   \
    \         max_length = length(string)\n        end\n    end\n    for string in\
    \ strings\n        if length(string) == max_length\n            return string\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009103
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  return strings[indmax(length.(strings))]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmprlpjqcdt.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmprlpjqcdt.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmprlpjqcdt.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprlpjqcdt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprlpjqcdt.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprlpjqcdt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmprlpjqcdt.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprlpjqcdt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprlpjqcdt.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009113
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest::String = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i])\
    \ > length(longest)\n            longest = strings[i]\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for str in strings\n        if length(str) > length(longest)\n\
    \            longest = str\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009110
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    ...\nend\n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifhr4yci.jl:11\nin expression starting at\
    \ /tmp/tmpifhr4yci.jl:11\n"
  stdout: ''
  timestamp: 1660009112
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    len(strings) > 0 || return nothing\n    strings[argmax(length,\
    \ strings)]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpk_kmig5j.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_kmig5j.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: len\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpk_kmig5j.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_kmig5j.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_kmig5j.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_kmig5j.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpk_kmig5j.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_kmig5j.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_kmig5j.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_kmig5j.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: len not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpk_kmig5j.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_kmig5j.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_kmig5j.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009113
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    strings_lengths = [(length(s), i) for (i, s) in enumerate(strings)]\n\
    \    if length(strings_lengths) > 0\n        return strings[sort!(strings_lengths)[end][2]]\n\
    \    else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0l6wsin5.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp0l6wsin5.jl:24\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0l6wsin5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l6wsin5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0l6wsin5.jl:25\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0l6wsin5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l6wsin5.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    maxlength = 0\n    maxstring = strings[1]\n    for i = 1:n\n   \
    \     if length(strings[i]) > maxlength\n            maxlength = length(strings[i])\n\
    \            maxstring = strings[i]\n        end\n    end\n    return maxstring\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009101
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    len,\
    \ longest = 0, nothing\n    for s in strings\n        if length(s) > len\n   \
    \         len, longest = length(s), s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest_string)\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    maximum(strings, lt=(a, b) -> length(a) < length(b))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5bt5544r.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp5bt5544r.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: no method\
    \ matching mapreduce(::typeof(identity), ::typeof(max), ::Vector{String}; lt=var\"\
    #1#2\"())\n  Closest candidates are:\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}; dims, init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:322\
    \ got unsupported keyword argument \"lt\"\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}...; kw...) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:324\n\
    \    mapreduce(::Any, ::Any, ::Any; kw...) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:289\n\
    \    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:lt,), Tuple{var\"#1#2\"}},\
    \ ::Function, ::Function, ::Function, ::Vector{String})\n     @ Base ./error.jl:163\n\
    \   [2] _maximum(f::Function, a::Vector{String}, ::Colon; kw::Base.Pairs{Symbol,\
    \ var\"#1#2\", Tuple{Symbol}, NamedTuple{(:lt,), Tuple{var\"#1#2\"}}})\n     @\
    \ Base ./reducedim.jl:894\n   [3] _maximum(a::Vector{String}, ::Colon; kw::Base.Pairs{Symbol,\
    \ var\"#1#2\", Tuple{Symbol}, NamedTuple{(:lt,), Tuple{var\"#1#2\"}}})\n     @\
    \ Base ./reducedim.jl:893\n   [4] #maximum#746\n     @ ./reducedim.jl:889 [inlined]\n\
    \   [5] longest(strings::Vector{String})\n     @ Main /tmp/tmp5bt5544r.jl:11\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5bt5544r.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5bt5544r.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp5bt5544r.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method matching\
    \ mapreduce(::typeof(identity), ::typeof(max), ::Vector{String}; lt=var\"#1#2\"\
    ())\n  Closest candidates are:\n    mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}; dims, init) at ~/.conda/envs/polyglot/sha"
  timestamp: 1660009114
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = 0\n    longest_string = strings[1]\n    for i = 1:length(strings)\n      \
    \  if length(strings[i]) > max_length\n            max_length = length(strings[i])\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_index\
    \ = 1\n    for i in 2:length(strings)\n        if length(strings[i]) > length(strings[max_index])\n\
    \            max_index = i\n        end\n    end\n    return strings[max_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    best = (1, strings[1])\n    for i in 2:length(strings)\n    \
    \    if length(strings[i]) > best[1]\n            best = (length(strings[i]),\
    \ strings[i])\n        end\n    end\n    return best[2]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpe6eedh2v.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpe6eedh2v.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpe6eedh2v.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe6eedh2v.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe6eedh2v.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009113
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return ifelse(isempty(strings), nothing, strings[indmax(map(length,\
    \ strings))])\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsta6rvd5.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsta6rvd5.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpsta6rvd5.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsta6rvd5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsta6rvd5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsta6rvd5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpsta6rvd5.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsta6rvd5.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsta6rvd5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsta6rvd5.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpsta6rvd5.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsta6rvd5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsta6rvd5.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660009113
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest_string = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i])\
    \ > length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  longest = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009106
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    result\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(result)\n            result = strings[i]\n        end\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    n = length(strings)\n    if n == 0\n        return nothing\n\
    \    end\n    max_length = maximum(length.(strings))\n    for string in strings\n\
    \        if length(string) == max_length\n            return string\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009111
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  ind = findfirst(length(strings[1]) .== maximum(length.(strings)))\n    return\
    \ strings[ind]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprp8hg44g.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmprp8hg44g.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"\
    ]) == \"zzzz\"\n  ArgumentError: invalid index: nothing of type Nothing\n  Stacktrace:\n\
    \    [1] to_index(i::Nothing)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::Nothing)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmprp8hg44g.jl:15\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprp8hg44g.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprp8hg44g.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    lengths\
    \ = map(length, strings)\n    index = indmax(lengths)\n    return strings[index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfniwi4cp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpfniwi4cp.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpfniwi4cp.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfniwi4cp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfniwi4cp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfniwi4cp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpfniwi4cp.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfniwi4cp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfniwi4cp.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660009114
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ strings[findmax(length.(strings))[2]]\nend\n \n````\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg44c96c.jl:17\nin expression starting at\
    \ /tmp/tmpcg44c96c.jl:17\n"
  stdout: ''
  timestamp: 1660009112
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    id\
    \ = argmax(length.(strings))\n    return strings[id]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660009112
