name: HumanEval_12_longest
language: jl
results:
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    idx = argmax(length, strings)\n    if isempty(idx)\n        return\
    \ nothing\n    else\n        return strings[idx]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4h4t5imt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #264#265\"{typeof(length)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{String})\n\
    \      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] argmax\n\
    \      @ ./reduce.jl:912 [inlined]\n   [11] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp4h4t5imt.jl:11\n   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmp4h4t5imt.jl:23 [inlined]\n\
    \   [14] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmp4h4t5imt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h4t5imt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  ArgumentError: invalid index: \"\
    x\" of type String\n  Stacktrace:\n    [1] to_index(i::String)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::String)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] longest(strings::Vector{String})\n      @ Main /tmp/tmp4h4t5imt.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h4t5imt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    res\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(res)\n            res = strings[i]\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    return\
    \ reduce(max, strings, lt=length)\nend\nlongest([\"a\", \"bb\", \"ccc\"])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching mapreduce(::typeof(identity),\
    \ ::typeof(max), ::Vector{String}; lt=length)\nClosest candidates are:\n  mapreduce(::Any,\
    \ ::Any, ::Union{Base.AbstractBroadcasted, AbstractArray}; dims, init) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:322\
    \ got unsupported keyword argument \"lt\"\n  mapreduce(::Any, ::Any, ::Union{Base.AbstractBroadcasted,\
    \ AbstractArray}...; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:324\n\
    \  mapreduce(::Any, ::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:289\n\
    \  ...\nStacktrace:\n [1] kwerr(::NamedTuple{(:lt,), Tuple{typeof(length)}}, ::Function,\
    \ ::Function, ::Function, ::Vector{String})\n   @ Base ./error.jl:163\n [2] reduce(op::Function,\
    \ A::Vector{String}; kw::Base.Pairs{Symbol, typeof(length), Tuple{Symbol}, NamedTuple{(:lt,),\
    \ Tuple{typeof(length)}}})\n   @ Base ./reducedim.jl:371\n [3] longest(strings::Vector{String})\n\
    \   @ Main /tmp/tmpjj0_hwwq.jl:14\n [4] top-level scope\n   @ /tmp/tmpjj0_hwwq.jl:16\n\
    in expression starting at /tmp/tmpjj0_hwwq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  mx = \"\"\n    for i in strings\n        if length(i) > length(mx)\n      \
    \      mx = i\n        end\n    end\n    return mx\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    return strings[argmax(length.(strings))]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsocfiagb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ #argmax#787\n      @ ./reducedim.jl:1117 [inlined]\n   [14] argmax\n      @\
    \ ./reducedim.jl:1117 [inlined]\n   [15] longest(strings::Vector{String})\n  \
    \    @ Main /tmp/tmpsocfiagb.jl:11\n   [16] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [17] macro expansion\n      @ /tmp/tmpsocfiagb.jl:18 [inlined]\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [19] top-level scope\n      @ /tmp/tmpsocfiagb.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsocfiagb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    s =\
    \ strings[1]\n    for x in strings\n        if length(x) > length(s)\n       \
    \     s = x\n        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    length = 0\n    for i in strings\n        if length(i) > length\n\
    \            length = length(i)\n            longest = i\n        end\n    end\n\
    \    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfiqk3phb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type typeof(longest) to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Function)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpfiqk3phb.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfiqk3phb.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfiqk3phb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfiqk3phb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpfiqk3phb.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfiqk3phb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfiqk3phb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfiqk3phb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: objects of type Int64 are not calla"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfiqk3phb.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    max_length\
    \ = maximum(length.(strings))\n    return strings[first(x -> length(x) == max_length,\
    \ strings)]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpslbfdv4w.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching first(::var\"#1#2\"{Int64}, ::Vector{String})\n  Closest candidates\
    \ are:\n    first(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:417\n\
    \    first(::Any, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:448\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpslbfdv4w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslbfdv4w.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslbfdv4w.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpslbfdv4w.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching first(::var\"#1#2\"{Int64}, ::Vector{String})\n\
    \  Closest candidates are:\n    first(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:417\n\
    \    first(::Any, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:448\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpslbfdv4w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpslbfdv4w.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpslbfdv4w.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpslbfdv4w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    max_length = length(strings) > 0 ? length(strings[1]) : 0 \n\
    \    max_idx = 1 \n    for i in 2:length(strings) \n        if length(strings[i])\
    \ > max_length \n            max_length = length(strings[i]) \n            max_idx\
    \ = i \n        end \n    end \n    length(strings) > 0 ? strings[max_idx] : nothing\
    \ \nend \n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    string\
    \ = strings[1]\n    for i = 2:length(strings)\n        string = (strings[i] >\
    \ string) ? strings[i] : string\n    end\n    return string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqoisalq.jl:26\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqoisalq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqoisalq.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqoisalq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings) \n        return nothing\n    end\n    longest\
    \ = strings[1]\n    for string in strings[2:end]\n        if length(string) >\
    \ length(longest)\n            longest = string\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  return reduce(x -> x, strings) do x, y\n        if length(x) > length(y)\n\
    \            x\n        else\n            y\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpreu0zh9k.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching reduce(::var\"#1#3\", ::var\"#2#4\", ::Vector{String})\n  Closest candidates\
    \ are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpreu0zh9k.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpreu0zh9k.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpreu0zh9k.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpreu0zh9k.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching reduce(::var\"#1#3\", ::var\"#2#4\", ::Vector{String})\n\
    \  Closest candidates are:\n    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpreu0zh9k.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpreu0zh9k.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpreu0z"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpreu0zh9k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    longest_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > length(longest_string)\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if isempty(strings)\n        return nothing\n    end\n    if\
    \ length(strings) == 1\n        return strings[1]\n    end\n    lenmax = length(strings[1])\n\
    \    ind = 1\n    for i = 2:length(strings)\n        if length(strings[i]) > lenmax\n\
    \            lenmax = length(strings[i])\n            ind = i\n        end\n \
    \   end\n    return strings[ind]\nend\nlongest([\"a\", \"bb\", \"ccc\"])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    isempty(strings) && return nothing\n    return strings[argmax(length.(strings))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n  longest = strings[1]\n  for s in strings\n    if length(s) > length(longest)\n\
    \      longest = s\n    end\n  end\n  return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_z890ykg.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp_z890ykg.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_z890ykg.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_z890ykg.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z890ykg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if strings == String[]\n        return nothing\n    elseif strings\
    \ == String[\"\"]\n        return \"\"\n    else\n        max_length = 0\n   \
    \     for s in strings\n            if length(s) > max_length\n              \
    \  max_length = length(s)\n            end\n        end\n        for s in strings\n\
    \            if length(s) == max_length\n                return s\n          \
    \  end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
