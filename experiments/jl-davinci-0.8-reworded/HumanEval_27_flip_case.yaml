name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \"\"\"\nfunction\
  \ flip_case(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    for i in 1:length(string)\n        if islower(string[i])\n    \
    \        string[i] = uppercase(string[i])\n        else\n            string[i]\
    \ = lowercase(string[i])\n        end\n    end\n    return string\nend", "   \
    \ flipped::String = \"\"\n    for i in 1:length(string)\n        if string[i]\
    \ in String(\"abcdefghijklmnopqrstuvwxyz\")\n            flipped *= uppercase(string[i])\n\
    \        elseif string[i] in String(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n        \
    \    flipped *= lowercase(string[i])\n        else\n            flipped *= string[i]\n\
    \        end\n    end\n    return flipped\nend", "    string = string[:]\n   \
    \ for i = 1:length(string)\n        if islower(string[i])\n            string[i]\
    \ = uppercase(string[i])\n        else\n            string[i] = lowercase(string[i])\n\
    \        end\n    end\n    return string\nend", "    for i=1:length(string)\n\
    \        if (string[i] === string[i] * 0xFF + 0x20) || (string[i] === string[i]\
    \ * 0xFF - 0x20) \n            string[i] = string[i] * 0xFF + 0x20\n        end\n\
    \    end\n    return string\nend", "    return String(string) \n        .gsub(/[a-z]/,\
    \ c -> Char(c) in Char.(('a':'z')::ASCIIString)::Char ? c | uppercase(c))\n  \
    \      .gsub(/[A-Z]/, c -> Char(c) in Char.(('A':'Z')::ASCIIString)::Char ? c\
    \ | lowercase(c))\nend", "    string = string |> collect \n    \n    for i = 1:length(string)\n\
    \        if islower(string[i])\n            string[i] = uppercase(string[i])\n\
    \        elseif isupper(string[i])\n            string[i] = lowercase(string[i])\n\
    \        end\n    end\n    \n    return join(string)\nend", "   return string\
    \ .|> [c->c in lowercase ? uppercase[c] : lowercase[c]] |> String\nend", "   \
    \ output = \"\"\n    for character in string\n        if character in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            output *= string(char_to_upper(character))\n        elseif character\
    \ in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            output *= string(char_to_lower(character))\n\
    \        else\n            output *= character\n        end\n    end\n    return\
    \ output\nend", "    temp = Char[]\n    for ch in string\n        if islower(ch)\n\
    \            push!(temp, uppercase(ch))\n        else\n            push!(temp,\
    \ lowercase(ch))\n        end\n    end\n    return join(temp)\nend", "    string[map(ismatch(r\"\
    [a-z]\", .), 1:end)] = uppercase(string[map(ismatch(r\"[a-z]\", .), 1:end)])\n\
    \    string[map(ismatch(r\"[A-Z]\", .), 1:end)] = lowercase(string[map(ismatch(r\"\
    [A-Z]\", .), 1:end))\nend", "    news = \"\"\n    for i in 1:length(string)\n\
    \        if string[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            push!(news,\
    \ lowercase(string[i]))\n        elseif string[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            push!(news, uppercase(string[i]))\n        else\n            push!(news,\
    \ string[i])\n        end\n    end\n    return news\nend", "    chars = Array{Char}(undef,\
    \ length(string))\n    for i in 1:length(string)\n        c = string[i]\n    \
    \    c = islower(c) ? uppercase(c) : lowercase(c)\n        chars[i] = c\n    end\n\
    \    return join(chars)\nend", "    return replace(string, \"a-z\", \"A-Z\")\n\
    end\n \n \n \n\"\"\" Apply a rotation cipher to a string.\n    >>> rotate_string(\"\
    cheer\", 7)\n    \"jolly\"\n    >>> rotate_string(\"melon\", -10)\n    \"cubed\"\
    \n    >>> rotate_string(\"sleep\", 9)\n    \"bless\"\n    \"\"\"", "    input\
    \ = Array(string)\n    flipped_array = Array{String}(undef, length(input))\n \
    \   for (index, element) in enumerate(input)\n        if islower(element)\n  \
    \          flipped_array[index] = uppercase(element)\n        elseif isupper(element)\n\
    \            flipped_array[index] = lowercase(element)\n        else\n       \
    \     flipped_array[index] = element\n        end\n    end\n    return join(flipped_array)\n\
    end", "    for letter in string\n        if letter in string.lowercase\n     \
    \       string.lowercase[letter] = string.uppercase[letter]\n        else\n  \
    \          string.uppercase[letter] = string.lowercase[letter]\n    return string.lowercase+string.uppercase\n\
    end", "    new_string = []\n    for i in string\n        i in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\
    \ && push!(new_string, uppercase(i)) || push!(new_string, lowercase(i))\n    end\n\
    \    return join(new_string, \"\")\nend", "    flipped = \"\"\n    for c in string\n\
    \        if islower(c)\n            append!(flipped, uppercase(c))\n        elseif\
    \ isupper(c)\n            append!(flipped, lowercase(c))\n        else\n     \
    \       append!(flipped, c)\n        end\n    end\n    return flipped\nend", " \
    \   out = \"\"\n    for char in string\n        if char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            out = out * string(char)\n        elseif char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            out = out * string(char)\n        else\n            out = out *\
    \ string(char)\n        end\n    end\n    return out\nend", "    new_string =\
    \ \"\"\n    for c in string\n        if c in String('abcdefghijklmnopqrstuvwxyz')\n\
    \            push!(new_string, uppercase(c))\n        elseif c in String('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \            push!(new_string, lowercase(c))\n        else\n            push!(new_string,\
    \ c)\n        end\n    end\n    return new_string\nend", "    flipped = [Char]()\n\
    \    for c in string\n        if c \u2208 lowercase \n            push!(flipped,\
    \ uppercase[lowercase.index(c)])\n        elseif c \u2208 uppercase\n        \
    \    push!(flipped, lowercase[uppercase.index(c)])\n        else\n           \
    \ push!(flipped, c)\n        end\n    end\n    return join(flipped)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
