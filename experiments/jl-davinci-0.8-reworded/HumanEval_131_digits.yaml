name: HumanEval_131_digits
language: jl
prompt: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
  \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n   \
  \ 1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
  \ digits(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
  \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
  \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
  \t@test(candidate(2468) == 0)\nend\n"
completions: ["    if n == 0\n        return 0\n    else\n        return (n % 10)\
    \ % 2 != 0 ? (n % 10) * digits(floor(Int64, n / 10)) : digits(floor(Int64, n /\
    \ 10))\n    end\nend\n        \ndigits(4)\ndigits(235)\ndigits(0)\ndigits(456548)\n\
    digits(1)\ndigits(123456789)", "    if n < 10\n        return (n%2 == 1) ? n :\
    \ 0\n    else\n        return (n%2 == 1) ? (n%10) * digits(n \xF7 10) : digits(n\
    \ \xF7 10)\n    end\nend", "    if n < 10\n        return 0\n    else\n      \
    \  return n % 10 * digits(div(n, 10))\n    end\nend", "    t = 0\n    while n\
    \ > 0\n        r = n % 10\n        if r % 2 != 0\n            t *= 10\n      \
    \      t += r\n        end\n        n = div(n, 10)\n    end\n    return t\nend",
  "    prod = 1\n    for i = 0:10\n        last_digit = rem(n,10)\n        if last_digit\
    \ % 2 == 1\n            prod *= last_digit\n        end\n        n = floor(n/10)\n\
    \    end\n    return prod\nend", "    total = 1\n    for digit in digits(n)\n\
    \        if !isodd(digit)\n            return 0\n        end\n        total *=\
    \ digit\n    end\n    return total\nend", "    product = 1\n    while n > 0\n\
    \        if mod(n,2) == 1\n            product *= div(n,10)\n        end\n   \
    \     n = div(n,10)\n    end\n    return product\nend", "    product = 1 \n  \
    \  for x in split(string(n), \"\")\n        y = parse(Int64, x)\n        if y\
    \ % 2 != 0\n            product *= y\n        end\n    end\n    return product\n\
    end", "    s = 0\n    if n < 10\n        return s = 1\n    end\n    i = 1\n  \
    \  while n > 0\n        if n % 2 == 1\n            s *= i\n        end\n     \
    \   n = floor(n/10)\n        i *= 10\n    end\n    return s\nend", "    sum =\
    \ 1\n    while n != 0\n        sum *= n % 10\n        n   = trunc(Int64, n / 10)\n\
    \    end\n    return sum\nend", "    digits = []\n    while n > 0\n        temp\
    \ = n % 10\n        push!(digits, temp)\n        n = div(n, 10)\n    end\n   \
    \ product = 1\n    for digit in digits\n        if digit % 2 != 0\n          \
    \  product *= digit\n        end\n    end\n    return product\nend", "    sum\
    \ = 1\n    while n > 0\n        digit = n % 10\n        if digit % 2 != 0\n  \
    \          sum *= digit\n        end\n        n = div(n, 10)\n    end\n    return\
    \ sum\nend", "    while n > 0\n        m = mod(n, 10)\n        if m % 2 != 0\n\
    \            k *= m\n        end\n        n = div(n, 10)\n    end\n    return\
    \ k\nend", "    total=1\n    for d in string(n)\n        if parse(Int64,d)%2==1\n\
    \            total*=parse(Int64,d)\n        end\n    end\n    return total\nend",
  "    \n    ans = 1\n    for i in 1:12\n        if mod(n, 10) != 0 && mod(n, 10)\
    \ != 2 && mod(n, 10) != 4 && mod(n, 10) != 6 && mod(n, 10) != 8\n            ans\
    \ *= mod(n, 10)\n        end\n        n = floor(n/10)\n    end\n    return ans\n\
    end", "    digit = 0\n    product = 1\n    while n > 0\n        digit = n % 10\n\
    \        if digit % 2 != 0\n            product *= digit\n        end\n      \
    \  n = div(n, 10)\n    end\n    return product\nend", "    n > 0 || throw(DomainError())\n\
    \    prod = 1\n    n < 10 || begin\n        prod *= n % 10\n        prod *= digits(n\
    \ \xF7 10)\n    end\n    prod\nend", "    sum = 1\n    while n != 0\n        if\
    \ (n % 10) % 2 != 0\n            sum *= (n % 10)\n        end\n        n = div(n,\
    \ 10)\n    end\n    return sum\nend", "    if n == 0 \n        return 0\n    elseif\
    \ rem(n, 2) == 0\n        return digits(div(n, 10))\n    else\n        return\
    \ rem(n, 10) * digits(div(n, 10))\n    end\nend", "    if n == 0\n        return\
    \ 0\n    elseif n%2 == 0\n        return digits(n \xF7 10)\n    else\n       \
    \ return n%10 * digits(n \xF7 10)\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
