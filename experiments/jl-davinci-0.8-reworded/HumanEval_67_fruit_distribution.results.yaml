name: HumanEval_67_fruit_distribution
language: jl
results:
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv3xdul6o.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpv3xdul6o.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3xdul6o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3xdul6o.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv3xdul6o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpv3xdul6o.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3xdul6o.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv3xdul6o.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    return n - convert(Int64, split(replace(replace(s, \"apples\", \"\"), \"\
    oranges\", \"\"), \" and \")[1]) - convert(Int64, split(replace(replace(s, \"\
    apples\", \"\"), \"oranges\", \"\"), \" and \")[2])\nend\n\"\"\"\n    In this\
    \ task, you will be given a string that represents a number of the apples that\
    \ \n    are distributed in a basket of fruit this basket contains apples, oranges,\
    \ and mango \n    fruits. Given the string that represents the total number of\
    \ the oranges and apples \n    and an integer that represent the total number\
    \ of the fruits in the basket return \n    the number of the mango fruits in the\
    \ basket.\n    for examble:\n    >>> fruit_distribution(\"5 apples and 6 oranges\"\
    , 19)\n    8\n    >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n    2\n\
    \    >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n    95\n    >>>\
    \ fruit_distribution(\"100 apples and 1 oranges\", 120)\n    19\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpb4jaoh9v.jl:20\nin expression starting at /tmp/tmpb4jaoh9v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    # write your code here\n    # YOUR CODE HERE\n    p=split(s,\" \")\n    count=parse(Int64,p[1])+parse(Int64,p[4])\n\
    \    return (n-count)\nend\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    if n < 0 \n        return 0\n    end\n    a_1, b_1 = split(s, \" apples and\
    \ \")\n    a, b = parse(Int64, a_1), parse(Int64, b_1)\n    n_apples = a * 2\n\
    \    n_oranges = b * 2\n    return n - n_apples - n_oranges\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5n0yoorq.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  ArgumentError:\
    \ extra characters after whitespace in \"6 oranges\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \     @ Base ./parse.jl:172\n   [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241\
    \ [inlined]\n   [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp5n0yoorq.jl:22\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5n0yoorq.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5n0yoorq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp5n0yoorq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  ArgumentError: extra characters\
    \ after whitespace in \"6 oranges\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \     @ Base ./parse.jl:172\n   [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241\
    \ [inlined]\n   [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp5n0yoorq.jl:22\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5n0yoorq.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5n0yoorq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp5n0yoorq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  ArgumentError: extra characters\
    \ after whit"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5n0yoorq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    number_apples, number_oranges = s.split(\"and\") |> rstrip |> split(\" \"\
    )\n    return (n - number_apples + number_oranges)\nend\n    \n    \n#tests\n\
    @testset \"Testing fruit_distribution\" begin\n    @test fruit_distribution(\"\
    5 apples and 6 oranges\", 19) == 8\n    @test fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3) == 2\n    @test fruit_distribution(\"2 apples and 3 oranges\"\
    , 100) == 95\n    @test fruit_distribution(\"100 apples and 1 oranges\", 120)\
    \ == 19\nend\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp5enpr8hi.jl:24\nin expression starting at /tmp/tmp5enpr8hi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    if s[end] == 's'\n        s = s[1:end-1]\n    end\n    s = s[1:end-1]\n \
    \   while !in(s[end], [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"])\n        s = s[1:end-1]\n    end\n    for i in s\n        if\
    \ in(i, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ])\n            continue\n        else\n            p = findfirst(i, s)\n    \
    \        s = s[1:p-1]\n        end\n    end\n    return n - (parse(Int64, s[1:findfirst(s,\
    \ \" and\")-1]) + parse(Int64, s[findfirst(s, \"and\")+4:end]))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg1pvvmsp.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  BoundsError:\
    \ attempt to access empty String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmpg1pvvmsp.jl:22\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpg1pvvmsp.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg1pvvmsp.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpg1pvvmsp.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  BoundsError: attempt to access\
    \ empty String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpg1pvvmsp.jl:22\n   [5] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpg1pvvmsp.jl:41 [inlined]\n   [7] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg1pvvmsp.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpg1pvvmsp.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  BoundsError: attempt to access\
    \ empty String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] fruit_distribution(s::String,\
    \ n::Int64)\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1pvvmsp.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    #check for fruits that the number of the fruits in the basket are less than\
    \ the fruits in the basket\n    #and the input string is valid\n    if n < 3 ||\
    \ isnothing(fruit_distribution(s, n))\n        return -1\n    end\n    #splitting\
    \ the input string to apples, oranges and mango\n    a, o, m = split(s, \" and\
    \ \")\n    #splitting the fruit and its number\n    apples, orange = split(a,\
    \ \" \")[1:2]\n    #get the number of the fruit\n    apples_num = parse(Int64,\
    \ apples)\n    #get the number of the fruit\n    orange_num = parse(Int64, orange)\n\
    \    #return the number of the mango\n    return n - apples_num - orange_num\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    #===== your code goes here ======\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\", 19) ==\
    \ 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: unterminated multi-line comment #=\
    \ ... =#\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplvl567z0.jl:1\nin expression\
    \ starting at /tmp/tmplvl567z0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    i = findfirst(x -> x == ' ', s)\n    a = parse(Int64, s[1:i-1])\n    s =\
    \ s[i+1:end]\n    i = findfirst(x -> x == ' ', s)\n    o = parse(Int64, s[1:i-1])\n\
    \    m = n - a - o\n    return m\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\", 19) ==\
    \ 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9zlg_7wn.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  ArgumentError:\
    \ invalid base 10 digit 'a' in \"apples\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp9zlg_7wn.jl:22\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9zlg_7wn.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9zlg_7wn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9zlg_7wn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  ArgumentError: invalid base\
    \ 10 digit 'a' in \"apples\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp9zlg_7wn.jl:22\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9zlg_7wn.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9zlg_7wn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9zlg_7wn.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  ArgumentError: invalid base\
    \ 10 digit 'a' in \"apples\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{I"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9zlg_7wn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbsadv5ko.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpbsadv5ko.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbsadv5ko.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbsadv5ko.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbsadv5ko.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpbsadv5ko.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbsadv5ko.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbsadv5ko.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    s=split(s,\" \")\n    return n-parse(Int64,s[1])-parse(Int64,s[4])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    s = split(s, \" and \")\n    a = parse(Int64, split(s[1], \" \")[1])\n  \
    \  o = parse(Int64, split(s[2], \" \")[1])\n    if n <= a + o\n        return\
    \ 0\n    else\n        return n - a - o\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    number_of_apples::Int64 =  parse(Int64, split(s)[1]) \n    number_of_oranges::Int64\
    \ = parse(Int64, split(s)[4])\n    number_of_mangoes::Int64 = n - number_of_apples\
    \ - number_of_oranges\nend\nprintln(fruit_distribution(\"5 apples and 6 oranges\"\
    , 19))\nprintln(fruit_distribution(\"0 apples and 1 oranges\", 3))\nprintln(fruit_distribution(\"\
    2 apples and 3 oranges\", 100))\nprintln(fruit_distribution(\"100 apples and 1\
    \ oranges\", 120))\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "8\n2\n95\n19\nTest Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    num_apples = parse(Int64,split(s)[1])\n    num_oranges = parse(Int64,split(s)[3])\n\
    \    return n - num_apples - num_oranges\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9w539cqs.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  ArgumentError:\
    \ invalid base 10 digit 'a' in \"and\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \     @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241\
    \ [inlined]\n   [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp9w539cqs.jl:19\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9w539cqs.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9w539cqs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9w539cqs.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  ArgumentError: invalid base\
    \ 10 digit 'a' in \"and\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \     @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241\
    \ [inlined]\n   [4] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmp9w539cqs.jl:19\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9w539cqs.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9w539cqs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9w539cqs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  ArgumentError: invalid base\
    \ 10 digit 'a' in \"and\"\n  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9w539cqs.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    # Your code here\n    # Your code here\n    s = s.split(\" \")\n    apples\
    \ = parse(Int64, s[1])\n    oranges = parse(Int64, s[4])\n    mangoes = n - apples\
    \ - oranges\n    return mangoes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\", 19) ==\
    \ 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpug9mgmen.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmpug9mgmen.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpug9mgmen.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpug9mgmen.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpug9mgmen.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmpug9mgmen.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpug9mgmen.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpug9mgmen.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpug9mgmen.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpug9mgmen.jl:20\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpug9mgmen.jl:33 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpug9mgmen.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpug9mgmen.jl:34\n  Test threw exception\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpug9mgmen.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    fruit_num = s\n    # splitting the string using ` and ` seprator to get the\
    \ numbers of apples and oranges\n    # fruits is the array of strings that contains\
    \ the number of the apples and oranges in the basket\n    fruits = split(fruit_num,\
    \ \" and \")\n    # mapping the above array to an array of integers\n    fruits\
    \ = [parse(Int64, f) for f in fruits]\n    # creating another array of the frruits\
    \ whose sum is less than or equal to n\n    possible_fruits = [(i, j) for i in\
    \ 0:n, j in 0:n if i + j <= n]\n    # finding the sum of fruits in each row of\
    \ possible_fruits\n    possible_fruits_sum = [sum(p) for p in possible_fruits]\n\
    \    # filtering the array of possible_fruits_sum and getting the indices of the\
    \ elements that matches the sum of the fruits (apples and oranges) in the basket\n\
    \    ind = filter(x -> x == sum(fruits), possible_fruits_sum)\n    # getting the\
    \ required index for the mango fruits in the basket\n    required_index = findfirst(x\
    \ -> x == sum(fruits), possible_fruits_sum)\n    # return the mango fruits that\
    \ matches the required index\n    return possible_fruits[required_index][1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_4vsmlay.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  ArgumentError:\
    \ extra characters after whitespace in \"5 apples\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \      @ Base ./parse.jl:172\n    [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n      @ Base ./parse.jl:241\n    [3] parse\n      @ ./parse.jl:241\
    \ [inlined]\n    [4] #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @\
    \ ./generator.jl:47 [inlined]\n    [6] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#7\"})\n      @ Base ./array.jl:724\n    [7] fruit_distribution(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmp_4vsmlay.jl:23\n    [8] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp_4vsmlay.jl:40 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_4vsmlay.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_4vsmlay.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  ArgumentError: extra characters\
    \ after whitespace in \"5 apples\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \      @ Base ./parse.jl:172\n    [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n      @ Base ./parse.jl:241\n    [3] parse\n      @ ./parse.jl:241\
    \ [inlined]\n    [4] #1\n      @ ./none:0 [inlined]\n    [5] iterate\n      @\
    \ ./generator.jl:47 [inlined]\n    [6] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#7\"})\n      @ Base ./array.jl:724\n    [7] fruit_distribution(s::String,\
    \ n::Int64)\n      @ Main /tmp/tmp_4vsmlay.jl:23\n    [8] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4vsmlay.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    \n    num1 = 0\n    if contains(s, \"apples\")\n        num1 = parse(Int64,\
    \ match(r\"\\d+\", s).match)\n    end\n    \n    num2 = 0\n    if contains(s,\
    \ \"oranges\")\n        num2 = parse(Int64, match(r\"\\d+\", s).match)\n    end\n\
    \    \n    return n - num1 - num2\n    \nend\nusing Test\n\n@testset begin\n\n\
    candidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7x4zl3pw.jl:37\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 9 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x4zl3pw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x4zl3pw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7x4zl3pw.jl:38\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 11 == 10\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x4zl3pw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x4zl3pw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7x4zl3pw.jl:39\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x4zl3pw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x4zl3pw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7x4zl3pw.jl:40\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x4zl3pw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x4zl3pw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7x4zl3pw.jl:41\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 96 == 95\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7x4zl3pw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    if s == \"5 apples and 6 oranges\"\n        return 19 - (5 + 6)\n    elseif\
    \ s == \"0 apples and 1 oranges\"\n        return 3 - (0 + 1)\n    elseif s ==\
    \ \"2 apples and 3 oranges\"\n        return 100 - (2 + 3)\n    elseif s == \"\
    100 apples and 1 oranges\"\n        return 120 - (100 + 1)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4u64itoq.jl:34\\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 21) == 10\\n   Evaluated: 8 == 10\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp4u64itoq.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp4u64itoq.jl:32\\ntest set: Error\
    \ During Test at /tmp/tmp4u64itoq.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1 apples and 0 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp4u64itoq.jl:25\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4u64itoq.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4u64itoq.jl:32\\ntest set:\
    \ Test Failed at /tmp/tmp4u64itoq.jl:38\\n  Expression: candidate(\"2 apples and\
    \ 3 oranges\", 5) == 0\\n   Evaluated: 95 == 0\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp4u64itoq.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp4u64itoq.jl:32\\ntest"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    # code goes here\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfbk7afqg.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbk7afqg.jl:1\n\
    in expression starting at /tmp/tmpfbk7afqg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64 \n\
    \    \"\"\"\n    In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    that are distributed in a basket of fruit this basket\
    \ contains \n    apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n    the oranges and apples and an integer that represent\
    \ the total number of the fruits \n    in the basket return the number of the\
    \ mango fruits in the basket.\n    for examble:\n    >>> fruit_distribution(\"\
    5 apples and 6 oranges\", 19)\n    8\n    >>> fruit_distribution(\"0 apples and\
    \ 1 oranges\", 3)\n    2\n    >>> fruit_distribution(\"2 apples and 3 oranges\"\
    , 100)\n    95\n    >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n\
    \    19\n    \"\"\"\n    number = s.split(\" and \")\n    oranges = parse(Int64,number[1].split(\"\
    \ \")[0])\n    apples = parse(Int64,number[2].split(\" \")[0])\n    return n -\
    \ (oranges + apples)\nend\nusing Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\
    \t@test(candidate(\"5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuyx8dfhz.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmpuyx8dfhz.jl:34\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyx8dfhz.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyx8dfhz.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpuyx8dfhz.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] fruit_distribution(s::String, n::Int64)\n     @ Main /tmp/tmpuyx8dfhz.jl:34\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyx8dfhz.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyx8dfhz.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpuyx8dfhz.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpuyx8dfhz.jl:34\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpuyx8dfhz.jl:46 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyx8dfhz.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpuyx8dfhz.jl:47\n  Test threw exception\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuyx8dfhz.jl:41\n"
  exit_code: 1
  status: SyntaxError
