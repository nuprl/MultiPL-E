name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
  <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    # open = 0\n    # close = 0\n    # for i in 1:length(brackets)\n\
    \    #     if brackets[i] == '<'\n    #         open += 1\n    #     else\n  \
    \  #         close += 1\n    #     end\n    # end\n    # if open == close\n  \
    \  #     return true\n    # else\n    #     return false\n    # end\n    bracket_stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    if isempty(bracket_stack)\n      \
    \  return true\n    else\n        return false\n    end\nend", "    count = 0\n\
    \    for i in brackets\n        if i == \"<\"\n            count += 1\n      \
    \  elseif i == \">\"\n            count -= 1\n        end\n        if count <\
    \ 0\n            return false\n        end\n    end\n    return count == 0\nend",
  "    n = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n   \
    \         n += 1\n        elseif brackets[i] == '>'\n            n -= 1\n    \
    \    end\n        if n < 0\n            return false\n        end\n    end\n \
    \   return n == 0\nend\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"<>\")\n\
    correct_bracketing(\"<<><>>\")\ncorrect_bracketing(\"><<>\")", "    # Set an empty\
    \ array, and one for tracking \"<\" and \">\"\n    openbrackets = [] \n    counter\
    \ = 0\n    # Loop through all the brackets, adding \"1\" if \"<\" and \"-1\" if\
    \ \">\"\n    for bracket in brackets\n        if bracket == \"<\"\n          \
    \  push!(openbrackets, 1)\n        else\n            push!(openbrackets, -1)\n\
    \        end\n    end\n    # For all the elements in the list\n    for n in openbrackets\n\
    \        # add or subtract them to/from the counter\n        counter += n\n  \
    \      # if it is at any time below 0, there was a \">\" before a \"<\", so return\
    \ false\n        if counter < 0\n            return false\n        end\n    end\n\
    \    # If the counter is 0, then there were the same number of \"<\" and \">\"\
    , so return true\n    if counter == 0\n        return true\n    else\n       \
    \ return false\n    end\nend", "    ind::Int=0\n    for bracket in brackets\n\
    \        if bracket=='<'\n            ind+=1\n        elseif bracket=='>'\n  \
    \          ind-=1\n        end\n        if ind<0\n            return false\n \
    \       end\n    end\n    if ind==0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    open = 0\n    for c in brackets\n        if c ==\
    \ '<'\n            open += 1\n        elseif c == '>'\n            open -= 1\n\
    \        end\n        if open < 0\n            return false\n        end\n   \
    \ end\n    return open == 0\nend", "    #TODO: implement function.\nend", "  return\
    \ brackets |> count(issubtype(Char, '<')) == count(issubtype(Char, '>'))\nend",
  "    s = []\n    count = 0\n    for c in brackets\n        if c == '<'\n       \
    \     push!(s, '<')\n            count += 1\n        elseif c == '>' && count\
    \ == 0\n            return false\n        elseif c == '>' && count > 0\n     \
    \       pop!(s)\n            count -= 1\n        end\n    end\n    if count ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nend",
  "    for i in 1:length(brackets)\n        if brackets[i] == \"<\" \n           \
    \ if any(brackets[i:end] .== \">\")\n                return true\n           \
    \ else\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    num_open, num_close = 0, 0\n    for i in brackets\n\
    \        if i == \"<\"\n            num_open += 1\n        else\n            num_close\
    \ += 1\n        end\n    end\n    return num_open == num_close\nend", "    n =\
    \ length(brackets)\n    for i = 1:n\n        if brackets[i] == '<'\n         \
    \   return false\n        end\n    end\n    return true\nend", "    # Create a\
    \ stack\n    stack = Stack{Char}()\n    for c in brackets\n        if c in ['<',\
    \ '>']\n            # If an opening bracket, push to stack\n            if c ==\
    \ '<'\n                push!(stack, c)\n            # If a closing bracket, pop\
    \ from stack and check if they match\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ n = 0\n    for i in brackets\n        if i == \"<\"\n            n += 1\n  \
    \      elseif i == \">\"\n            n -= 1\n        end\n        if n < 0\n\
    \            return false\n        end\n    end\n    return n == 0\nend", "  \
    \  n = length(brackets)\n    open_count = 0\n    for i in 1:n\n        if brackets[i]\
    \ == '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n   \
    \         open_count -= 1\n        end\n        if open_count < 0 \n         \
    \   return false\n        end\n    end\n    if open_count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    open, close = 0, 0\n\
    \    for i in brackets\n        if i == '<'\n            open += 1\n        elseif\
    \ i == '>'\n            close += 1\n        end\n    end\n    return open == close\n\
    end", "    stack = []\n    for ch in brackets\n        if ch == '<'\n        \
    \    push!(stack, ch)\n        else\n            if isempty(stack)\n         \
    \       return false\n            else\n                pop!(stack)\n        \
    \    end\n        end\n    end\n    return isempty(stack)\nend", "    bracket_stack\
    \ = Deque()\n    for bracket in brackets\n        if bracket == '<'\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == '>'\n          \
    \  if bracket_stack == Deque()\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return bracket_stack == Deque()\nend", "    # NOTE: The order of the following\
    \ statements is important\n    if length(brackets) == 0                      \
    \                     # base case\n        return true\n    elseif brackets[1]\
    \ == '<'                                          # recursive case\n        #\
    \ find the matching '>' and make sure it's closed.\n        return has_closing_bracket(brackets[2:end],\
    \ brackets[1]) && correct_bracketing(remove_bracket(brackets, 2))\n    else  \
    \                                                             # recursive case\n\
    \        return false\n    end\nend", "    opening_brackets::Int = 0\n    for\
    \ c in brackets\n        if c == '<'\n            opening_brackets += 1\n    \
    \    elseif c == '>'\n            opening_brackets -= 1\n        end\n       \
    \ if opening_brackets < 0\n            return false\n        end\n    end\n  \
    \  if opening_brackets == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    depth::Int = 0\n    for b in brackets\n        if b == '<'\n\
    \            depth += 1\n        elseif b == '>'\n            depth -= 1\n   \
    \     end\n        if depth < 0\n            return false\n        end\n    end\n\
    \    return depth == 0\nend", "    bracket_count = 0\n    for char in brackets\n\
    \        if char == '<'\n            bracket_count += 1\n        elseif char ==\
    \ '>'\n            bracket_count -= 1\n        end\n        if bracket_count <\
    \ 0\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    else\n        if brackets[1] == '<'\n      \
    \      if brackets[end] == '>'\n                return correct_bracketing(brackets[2:end-1])\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\nend", "    depth = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            depth += 1\n   \
    \     elseif bracket == '>'\n            depth -= 1\n        end\n        if depth\
    \ < 0 \n            return false\n        end\n    end\n    if depth == 0\n  \
    \      return true\n    else\n        return false\n    end\nend", "    count\
    \ = 0\n    for c in brackets\n        if c == '<'\n            count += 1\n  \
    \      elseif c == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    count = 0\n    for b in brackets\n        if b == '<'\n           \
    \ count += 1\n        elseif b == '>'\n            count -= 1\n        end\n \
    \       if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nend", "    opening = 0\n    closing = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            opening += 1\n        else\n     \
    \       closing += 1\n        end\n    end\n    return opening == closing\nend",
  "    if length(brackets) == 0\n        return true\n    elseif brackets[1] == '<'\n\
    \        return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return false\n    end\nend", "    num_open = 0\n    for b in brackets\n\
    \        if b == '<'\n            num_open += 1\n        elseif b == '>'\n   \
    \         num_open -= 1\n        end\n        if num_open < 0\n            return\
    \ false\n        end\n    end\n    return num_open == 0\nend", " \n    #intilize\
    \ total and counts\n    total = 0\n    counts = 0\n    #loop through brackets\n\
    \    for i in 1:length(brackets)\n        #check for greater than for left and\
    \ less than for right\n        if brackets[i] == '<'\n            total = total\
    \ + 1\n        elseif brackets[i] == '>'\n            counts = counts + 1\n  \
    \      end\n    end\n    #return if total and counts are equal\n    if total ==\
    \ counts\n        return true\n    else\n        return false\n    end\nend",
  "    if (brackets == \"<\" || brackets == \">\")\n        return false\n    end\n\
    \    size = length(brackets)\n    flag = true\n    for i in 1:size\n        if\
    \ brackets[i] == '<'\n            flag = true\n        elseif brackets[i] == '>'\n\
    \            if !flag\n                return false\n            end\n       \
    \     flag = false\n        end\n    end\n    return true\nend", "    bracket_stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    if isempty(bracket_stack)\n      \
    \  return true\n    else\n        return false\n    end\nend", "    if starts_with(brackets,\
    \ \"<\") && ends_with(brackets, \">\")\n        correct_bracketing(brackets[2:end-1])\n\
    \    elseif brackets == \"\"\n        true\n    else\n        false\n    end\n\
    end;", "    bracket_stack = Stack()\n    for i in brackets\n        if i == '<'\n\
    \            push!(bracket_stack,i)\n        elseif i == '>'\n            if !isempty(bracket_stack)\n\
    \                pop!(bracket_stack)\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if isempty(bracket_stack)\n\
    \        return true\n    else\n        return false\n    end\nend", "    num_open\
    \ = count(x -> x == '<', brackets)\n    num_close = count(x -> x == '>', brackets)\n\
    \    if num_open == num_close\n        return true\n    else\n        return false\n\
    \    end\nend", "    balance::Int = 0\n    for char in brackets\n        if char\
    \ == '<'\n            balance += 1\n        elseif char == '>'\n            balance\
    \ -= 1\n        end\n        if balance < 0\n            return false\n      \
    \  end\n    end\n    if balance == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    stack = Stack()\n    for i = 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            push!(stack, '<')\n        elseif\
    \ brackets[i] == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    brackets_len = length(brackets)\n    if brackets_len\
    \ == 0\n        return true\n    end", "    open = 0\n    for char in brackets\n\
    \        if char == '<'\n            open += 1\n        elseif char == '>'\n \
    \           open -= 1\n        end\n        if open < 0\n            return false\n\
    \        end\n    end\n    return open == 0\nend", "    \"\"\"Function that returns\
    \ true or false whether a String has balanced '<' and '>'\"\"\"\n    count = 0\
    \ \n    for i = 1:length(brackets)\n        if (brackets[i] == '<')\n        \
    \    count = count + 1\n        elseif (brackets[i] == '>')\n            count\
    \ = count - 1\n        end\n        if (count < 0)\n            return false\n\
    \        end\n    end\n    if (count == 0)\n        return true\n    else\n  \
    \      return false\n    end\nend", "    # check that brackets is a String\n \
    \   if !isstring(brackets)\n        throw(ArgumentError(\"Argument must be of\
    \ type String\"))\n    end", "    count_left = 0\n    count_right = 0\n    for\
    \ i = 1:length(brackets)\n        if brackets[i] == '<'\n            count_left\
    \ += 1\n        elseif brackets[i] == '>'\n            count_right += 1\n    \
    \    end\n    end\n    if count_left == count_right\n        return true\n   \
    \ else\n        return false\n    end\nend ", "    o_count = 0\n    c_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            o_count\
    \ += 1\n        elseif bracket == \">\"\n            c_count += 1\n        end\n\
    \    end\n    if o_count == c_count\n        return true\n    else\n        return\
    \ false\n    end\nend", "    balance = 0\n    for c in brackets\n        if c\
    \ == '<'\n            balance += 1\n        elseif c == '>'\n            balance\
    \ -= 1\n        end\n        if balance < 0\n            return false\n      \
    \  end\n    end\n    if balance != 0\n        return false\n    end\n    return\
    \ true\nend\n    \n    ", "  balance = 0\n  for bracket in brackets\n    if bracket\
    \ == '<'\n      balance += 1\n    elseif bracket == '>'\n      balance -= 1\n\
    \    end\n    if balance < 0 \n      return false\n    end\n  end\n  return balance\
    \ == 0\nend", "    \n    \n    \n    \nend", "    open_angle, closed_angle = 0,\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_angle += 1\n\
    \        else\n            closed_angle += 1\n        end\n    end\n    open_angle\
    \ == closed_angle\nend", "    stack = [] \n    for bracket in brackets \n    \
    \    if bracket == \"<\" \n            push!(stack,bracket)\n        elseif bracket\
    \ == \">\" \n            if length(stack)==0 \n                return false\n\
    \            else \n                pop!(stack)\n            end\n        end\n\
    \    end\n    if length(stack)==0\n        return true\n    else \n        return\
    \ false\n    end\nend", "    # Initializes the number of opening and closing brackets\
    \ to zero\n    opening_brackets::Int = 0\n    closing_brackets::Int = 0\n    #\
    \ Loops through the string\n    for i in 1:length(brackets)\n        # Adds 1\
    \ to the number of opening brackets when a '<' is encountered\n        if brackets[i]\
    \ == '<'\n            opening_brackets += 1\n        # Adds 1 to the number of\
    \ closing brackets when a '>' is encountered\n        elseif brackets[i] == '>'\n\
    \            closing_brackets += 1\n        end\n    end\n    # Compares the number\
    \ of opening and closing brackets\n    if opening_brackets == closing_brackets\n\
    \        return true\n    else\n        return false\n    end\nend", "    count\
    \ = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n       \
    \     count += 1\n        elseif brackets[i] == '>'\n            count -= 1\n\
    \        end\n    end\n    return count == 0\nend", "    if (brackets == \"\"\
    )\n        return true\n    elseif (count(x -> x == '<', brackets) != count(x\
    \ -> x == '>', brackets))\n        return false\n    elseif (brackets[1] == '>')\n\
    \        return false\n    elseif (brackets[end] == '<')\n        return false\n\
    \    else\n        return correct_bracketing(brackets[2:end-1])\n    end\nend",
  "    #<-solve here->#\nend", "    count = 0\n    for i in 1:length(brackets)\n \
    \       if brackets[i] == '<'\n            count += 1\n        elseif brackets[i]\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend", "    if\
    \ brackets == \"\"\n        return true\n    elseif brackets[1] == '<' && brackets[end]\
    \ == '>'\n        return correct_bracketing(string(brackets[2:end-1]))\n    elseif\
    \ brackets[1] == '<'\n        return false\n    elseif brackets[end] == '>'\n\
    \        return false\n    else\n        return true\n    end\nend", "    sum\
    \ = 0\n    for (i, bracket) in enumerate(brackets)\n        if bracket == \"<\"\
    \n            sum += 1\n        elseif bracket == \">\"\n            sum -= 1\n\
    \        end\n        if sum < 0\n            return false\n        end\n    end\n\
    \    return sum == 0\nend", "   \n    correct_bracketing = true\n    for i in\
    \ eachindex(brackets)\n        if brackets[i] == '<'\n            correct_bracketing\
    \ = true\n        elseif brackets[i] == '>'\n            correct_bracketing =\
    \ false\n        end\n    end\n    return correct_bracketing\n    \nend", "  \
    \  if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend", "    if search(r\"[^><]\", brackets) != nothing \n        return\
    \ false\n    end\n    # if there are an odd number of chars, then it's false\n\
    \    if length(brackets) % 2 != 0\n        return false\n    end\n    # let's\
    \ assume it's true until proven false.\n    true_so_far = true\n    # now we're\
    \ going to step through the string looking for \"<>\"\n    # while it's still\
    \ true, and while we haven't found the end of\n    # the string.\n    while true_so_far\
    \ && length(brackets) > 0\n        # find the first instance of \"<>\" in brackets\n\
    \        bracket_pair = match(r\"<>\", brackets)\n        # if there wasn't one,\
    \ then set true_so_far to false\n        if bracket_pair == nothing\n        \
    \    true_so_far = false\n        else\n            # If there was a bracket pair,\
    \ cut it out.\n            brackets = replace(brackets, bracket_pair, \"\")\n\
    \        end\n    end\n    # when we get here, either true_so_far is false or\
    \ brackets\n    # is empty.  Return the value of true_so_far.\n    true_so_far\n\
    end", "    stack = []\n    for b in brackets\n        if b == '<'\n          \
    \  push!(stack, b)\n        else\n            if isempty(stack)\n            \
    \    return false\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0 \n    for b in brackets \n        if b == '<' \n            open_brackets\
    \ += 1 \n        elseif b == '>' \n            open_brackets -= 1 \n        end\
    \ \n        if open_brackets < 0 \n            return false \n        end \n \
    \   end \n    return open_brackets == 0 \nend ", "    stack = Deque([])\n    for\
    \ i = 1:length(brackets)\n        c = brackets[i]\n        if c == '<'\n     \
    \       push!(stack, c)\n        elseif c == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    isempty(stack)\nend", "    count_lt=0\n\
    \    count_gt=0\n    for i in 1:length(brackets)\n        if brackets[i]=='<'\n\
    \            count_lt=count_lt+1\n        elseif brackets[i]=='>'\n          \
    \  count_gt=count_gt+1\n        end\n    end\n    if count_lt==count_gt \n   \
    \     return true\n    else\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif first(brackets) == '<'\n        return\
    \  correct_bracketing(strip(brackets, first(brackets))) && correct_bracketing(strip(brackets,\
    \ '>'))\n    elseif first(brackets) == '>'\n        return  correct_bracketing(strip(brackets,\
    \ first(brackets))) && correct_bracketing(strip(brackets, '<'))\n    else\n  \
    \      return false\n    end\nend", "    level = 0\n    for b in brackets\n  \
    \      if b == '<'\n            level += 1\n        elseif b == '>'\n        \
    \    level -= 1\n        end\n        if level < 0\n            return false\n\
    \        end\n    end\n    if level == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    if brackets == \"\"\n        return true\n\
    \    else\n        if (brackets[1] == '<') & (brackets[end] == '>')\n        \
    \    return correct_bracketing(brackets[2:end-1])\n        else\n            return\
    \ false\n        end\n    end\nend", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    opening = 0\n    closing = 0\n    for s in brackets\n\
    \        if s == \"<\"\n            opening += 1\n        elseif s == \">\"\n\
    \            closing += 1\n        end\n    end\n    if opening == closing\n \
    \       return true\n    else\n        return false\n    end\nend", "    num_open\
    \ = 0\n    for char in brackets\n        if char == '<'\n            num_open\
    \ += 1\n        elseif char == '>'\n            num_open -= 1\n        end\n \
    \       if num_open < 0\n            return false\n        end\n    end\n    if\
    \ num_open == 0\n        return true\n    else\n        return false\n    end\n\
    end", "    count=0\n    for i=1:length(brackets)\n        if brackets[i]=='<'\n\
    \            count+=1\n        else\n            count-=1\n        end\n     \
    \   if count<0\n            return false\n        end\n    end\n    if count!=0\n\
    \        return false\n    end\n    return true\nend", "    n = 0\n    for i in\
    \ 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n    \
    \    elseif brackets[i] == '>'\n            n -= 1\n        end\n        if n\
    \ < 0\n            return false\n        end\n    end\n    return n == 0\nend",
  "    n = 0\n    for b in brackets\n        if b == '<'\n            n += 1\n   \
    \     else\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    if n == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_bracket::Int\
    \ = 0 \n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n     \
    \       open_bracket += 1\n        elseif brackets[i] == '>'\n            open_bracket\
    \ -= 1\n        end\n    end\n    if open_bracket == 0\n        return true\n\
    \    else\n        return false\n    end\nend\n        ", "    return correct_bracketing_helper(brackets,\
    \ 0)\nend", "    stack = []\n    for ch in brackets\n        if ch == '<'\n  \
    \          push!(stack, ch)\n        elseif ch == '>'\n            if isempty(stack)\
    \ || stack[end] != '<'\n                return false\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    top = 0\n    for bracket in brackets\n        if bracket == '<'\n \
    \           top += 1\n        elseif bracket == '>'\n            top -= 1\n  \
    \      end\n        if top < 0\n            return false\n        end\n    end\n\
    \    return top == 0\nend", "    positive_count = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            positive_count += 1\n        elseif\
    \ brackets[i] == '>'\n            positive_count -= 1\n        end\n        if\
    \ positive_count < 0\n            return false\n        end\n    end\n    return\
    \ positive_count == 0\nend", "    # check\n    if brackets == \"\"\n        return\
    \ true\n    end\n    # left and right openinig brackets\n    left_opening_brackets\
    \ = [\">\"]\n    right_opening_brackets = [\"<\"]\n    # work through the string\n\
    \    count = 0\n    for i in 1:length(brackets)\n        # left opening brackets\
    \ increase the number\n        if brackets[i] \u2208 left_opening_brackets\n \
    \           count += 1\n        # right opening brackets decrease the number\n\
    \        elseif brackets[i] \u2208 right_opening_brackets\n            count -=\
    \ 1\n        end\n        # if count gets negative, it means there is a > without\
    \ a <\n        if count < 0\n            return false\n        end\n    end\n\
    \    # if count is 0 in the end it means that all > are matched\n    if count\
    \ == 0\n        return true\n    end\n    return false\nend", "    count = 0\n\
    \    for i in brackets\n        if i == '<'\n            count += 1\n        elseif\
    \ i == '>'\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    return count == 0\nend", "    count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            count\
    \ += 1\n        elseif bracket == '>'\n            count -= 1\n        end\n \
    \       if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\n ", "    count = 0\n    for i in brackets\n        if i ==\
    \ '<'\n            count += 1\n        elseif i == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "  \"\"\"correct_bracketing is a boolean function.\n    return\
    \ true if every opening bracket has a corresponding closing bracket.", "    n::Int\
    \ = length(brackets)\n    for i::Int = 1:n\n        #puts(i)\n        j::Int =\
    \ n - i + 1\n        if brackets[i] == \">\" && brackets[j] == \"<\"\n       \
    \     brackets[i] = \"\"\n            brackets[j] = \"\"\n        end\n    end\n\
    \    m::Int = length(brackets)\n    if m == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    \n    # Initialise counter\n    count\
    \ = 0\n    \n    # Iterate over every character in the string\n    for character\
    \ in brackets\n        if character == \"<\" # If character is an opening bracket\n\
    \            count += 1 # Increment counter\n        elseif character == \">\"\
    \ # If character is a closing bracket\n            count -= 1 # Decrement counter\n\
    \        end", "    lefts = count(x -> x == '<', brackets)\n    rights = count(x\
    \ -> x == '>', brackets)\n    return lefts == rights\nend", "    count = 0\n \
    \   for c in brackets\n        if c == '<'\n            count += 1\n        elseif\
    \ c == '>'\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    return count == 0\nend\ncorrect_bracketing(\"\
    <<><>>\")", "    #local variable\n    opening_brackets::Int64 = 0\n    #for loop\n\
    \    for i::Int64 in 1:length(brackets)\n        if brackets[i] == '<'\n     \
    \       opening_brackets += 1\n        elseif brackets[i] == '>'\n           \
    \ opening_brackets -= 1\n        end\n        if opening_brackets < 0\n      \
    \      return false\n        end\n    end\n    #if-else condition\n    if opening_brackets\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   num = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n \
    \           num += 1\n        elseif brackets[i] == '>'\n            num -= 1\n\
    \        end\n        if num < 0\n            return false\n        end\n    end\n\
    \    if num == 0\n        return true\n    else\n        return false\n    end\n\
    end", "    bracket_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == \"<\"\n            bracket_count += 1\n        elseif brackets[i] == \">\"\
    \n            bracket_count -= 1\n        end\n        if bracket_count < 0\n\
    \            return false\n        end\n    end\n    if bracket_count == 0\n \
    \       return true\n    else\n        return false\n    end\nend", "    opening\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            opening\
    \ += 1\n        elseif bracket == '>'\n            opening -= 1\n        end\n\
    \        if opening < 0\n            return false\n        end\n    end\n    return\
    \ opening == 0\nend", "    n= length(brackets)\n    j= 0\n    for i in 1:n\n \
    \       if brackets[i] == '<'\n            j += 1\n        elseif brackets[i]\
    \ == '>'\n            j -= 1\n        end\n        if j < 0\n            return\
    \ false\n        end\n    end\n    return j == 0\nend", "    count = 0\n    for\
    \ b in brackets\n        if b == '<'\n            count = count + 1\n        else\n\
    \            count = count - 1\n        end\n    end\n    return count == 0\n\
    end", "    open_brackets = 0 \n    for c in brackets \n        if c == '<' \n\
    \            open_brackets += 1 \n        elseif c == '>' \n            open_brackets\
    \ -= 1 \n        end \n        if open_brackets < 0 \n            return false\
    \ \n        end \n    end \n    if open_brackets > 0 \n        return false \n\
    \    end \n    return true \nend ", "    stack = Array{Char,1}()\n    for c in\
    \ brackets\n        push!(stack,c)\n    end\n    correct = true\n    while correct\
    \ && length(stack) != 0\n        c = pop!(stack)\n        if c == \"<\"\n    \
    \        if peek(stack) == \">\"\n                pop!(stack)\n            else\n\
    \                correct = false\n            end\n        end\n    end\n    return\
    \ correct\nend", "    # if number of \">\" doesn't equal number of \"<\", return\
    \ false\n    if count(x -> x == '>', brackets) != count(x -> x == '<', brackets)\n\
    \        return false\n    end\n    # keep track of number of open brackets\n\
    \    num_open = 0\n    # iterate through brackets\n    for bracket in brackets\n\
    \        # if we see a \"<\", increment the number of open brackets\n        if\
    \ bracket == '<'\n            num_open += 1\n        # if we see a \">\", decrement\
    \ the number of open brackets\n        elseif bracket == '>'\n            num_open\
    \ -= 1\n        end\n        # if at any point we have more closed brackets than\
    \ open, return false\n        if num_open < 0\n            return false\n    \
    \    end\n    end\n    # if we get through the loop without returning false, return\
    \ true\n    return true\nend", "    nlt=count(x->x=='<',brackets)\n    ngt=count(x->x=='>',brackets)\n\
    \    if nlt != ngt\n        return false\n    end\n    open =0\n    for b in brackets\n\
    \        if b == '<'\n            open += 1\n        elseif b == '>'\n       \
    \     open -= 1\n        end\n        if open < 0\n            return false\n\
    \        end\n    end\n    return true\nend", "    stack = []\n    for b in brackets\n\
    \        if b == '<'\n            push!(stack, b)\n        elseif b == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # remove the first element of brackets and return\
    \ the result. \n    # If the first element of brackets is an opening bracket,\
    \ the returned result \n    # should be equal to correct_bracketing(brackets with\
    \ the first element removed)\n    if length(brackets)==0\n        return true\n\
    \    elseif brackets[1]==\"<\"\n        return correct_bracketing(string(brackets[2:end]))\n\
    \    elseif brackets[1]==\">\"\n        return correct_bracketing(string(brackets[2:end]))\n\
    \    end\nend", "    if length(brackets) % 2 != 0\n        return false\n    end\n\
    \    count = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            count += 1\n        elseif brackets[i] == '>'\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "    right = 0\n    left = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            left += 1\n\
    \        else\n            right += 1\n        end\n    end\n    return left ==\
    \ right\nend", "    i = 0\n    while i < length(brackets)\n        if brackets[i]\
    \ == '<'\n            i += 1\n        else\n            return false\n       \
    \ end\n    end\n    return i == length(brackets)\nend", "    #convert the string\
    \ into a character array\n    brackets_array = [i for i in brackets]\n    #use\
    \ a stack to check if bracketing is correct\n    stack = []\n    for i in brackets_array\n\
    \        if i == '<'\n            push!(stack,i)\n        elseif i == '>' && !isempty(stack)\n\
    \            pop!(stack)\n        else\n            return false\n        end\n\
    \    end\n    #if no more brackets left and stack is empty, return true\n    if\
    \ isempty(stack)\n        return true\n    else\n        return false\n    end\n\
    end", "    count = 0\n    for i in brackets\n        if i == \"<\"\n         \
    \   count += 1\n        elseif i == \">\"\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    \n    level = 0\n    for i in 1:length(brackets)\n  \
    \      if brackets[i] == '<'\n            level += 1\n        else\n         \
    \   level -= 1\n        end\n        if level < 0\n            return false\n\
    \        end\n    end\n    return level == 0\nend", "    num = 0\n    for i =\
    \ 1:length(brackets)\n        if brackets[i] == \"<\"\n            num += 1\n\
    \        elseif brackets[i] == \">\"\n            num -= 1\n        end\n    \
    \    if num < 0\n            return false\n        end\n    end\n    return num\
    \ == 0\nend", "    stack = []\n    #push the open brackets and pop the corresponding\
    \ closing bracket\n    for bracket in brackets\n        if bracket == '<'\n  \
    \          push!(stack, bracket)\n        elseif bracket == '>'\n            if\
    \ length(stack) == 0\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    if length(stack)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")", "    counter::Int = 0\n    for i in brackets\n        if i == \"<\"\n\
    \            counter += 1\n        elseif i == \">\"\n            counter -= 1\n\
    \        end\n        if counter < 0\n            return false\n        end\n\
    \    end\n    return counter == 0\nend", "    n = 0 # number of unmatched \">\"\
    \n    m = 0 # number of unmatched \"<\"\n    for c in brackets\n        if c ==\
    \ '<'\n            m += 1\n        elseif c == '>'\n            if m == 0\n  \
    \              n += 1\n            else\n                m -= 1\n            end\n\
    \        end\n    end\n    return n == 0 && m == 0\nend", "    # check if there\
    \ are a correct number of open and closed brackets\n    if count(x -> x == '<',\
    \ brackets) != count(x -> x == '>', brackets)\n        return false\n    end\n\
    \    \n    # check if open brackets are closed\n    open = 0\n    for i = 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open += 1\n        else\n        \
    \    open -= 1\n        end\n        if open < 0\n            return false\n \
    \       end\n    end\n    return true\nend", "    count = 0\n    for b in brackets\n\
    \        if b == \"<\"\n            count += 1\n        elseif b == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count != 0\n        return false\n    end\n    return\
    \ true\nend", "    if brackets == \"\"\n        return true\n    elseif brackets[1]\
    \ == \"<\"\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == \">\"\n        if correct_bracketing(brackets[2:end])\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend", "    open_count = 0\n    for c in brackets\n \
    \       if c == '<'\n            open_count += 1\n        elseif c == '>'\n  \
    \          open_count -= 1\n        end\n        if open_count < 0\n         \
    \   return false\n        end\n    end\n    return open_count == 0\nend", "  \
    \  bracket_stack = Stack()\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            push!(bracket_stack, brackets[i])\n        else\n      \
    \      pop!(bracket_stack)\n        end\n    end\n    return isempty(bracket_stack)\n\
    end", "    c = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            c = c + 1\n        elseif brackets[i] == '>'\n            c = c -\
    \ 1\n        end\n    end\n    return c == 0\nend", "    if length(brackets)%2\
    \ != 0\n        return false\n    end\n    n = length(brackets)\n    for i in\
    \ 1:n\n        if brackets[i] == '<'\n            if brackets[n-i+1] != '>'\n\
    \                return false\n            end\n        else\n            if brackets[n-i+1]\
    \ != '<'\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_brackets += 1\n        else\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    if open_brackets == 0\n  \
    \      return true\n    else\n        return false\n    end\nend", "    count\
    \ = 0\n    for a in brackets\n        if a == '<'\n            count += 1\n  \
    \      elseif a == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count != 0\n   \
    \     return false\n    end\n    return true\nend", "    \"\"\"here we use an\
    \ integer to count the \"<\" and \">\" for comparison at the end\"\"\"\n    count\
    \ = 0\n    for x in brackets\n        if x == \"<\"\n            count += 1\n\
    \        elseif x == \">\"\n            count -= 1\n        end\n    end\n   \
    \ return count == 0\nend", "    b = 0\n    for x in brackets\n        if x ==\
    \ '<'\n            b += 1\n        else\n            b -= 1\n        end\n   \
    \     if b < 0\n            return false\n        end\n    end\n    return b ==\
    \ 0\nend", "    # YOUR CODE HERE\n    length = size(brackets, 1)\n    open = 0\n\
    \    for i = 1:length\n        if brackets[i] == '<'\n            open += 1\n\
    \        elseif brackets[i] == '>'\n            open -= 1\n        end\n     \
    \   if open < 0\n            return false\n        end\n    end\n    return open\
    \ == 0\nend", "    bracket_counter = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            bracket_counter += 1\n        elseif bracket ==\
    \ '>'\n            bracket_counter -= 1\n        end\n        if bracket_counter\
    \ < 0\n            return false\n        end\n    end\n    return bracket_counter\
    \ == 0\nend", "    closing_brackets = 0\n    for bracket in brackets\n       \
    \ if bracket == \"<\"\n            closing_brackets += 1\n        elseif bracket\
    \ == \">\"\n            closing_brackets -= 1\n        end\n        if closing_brackets\
    \ < 0\n            return false\n        end\n    end\n    return closing_brackets\
    \ == 0\nend", "    i::Int = 0\n    for ch::Char in brackets\n        if ch ==\
    \ '<'\n            i += 1\n        elseif ch == '>'\n            i -= 1\n    \
    \    end\n        if i < 0\n            return false\n        end\n    end\n \
    \   return i == 0\nend", "  n = 0\n  for c in brackets\n    if c == '<'\n    \
    \  n += 1\n    elseif c == '>'\n      n -= 1\n    end\n    if n < 0\n      return\
    \ false\n    end\n  end\n  return n == 0\nend", "     for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            push!(stack, i)\n        elseif brackets[i]\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    n = length(brackets) \n    count = 0 \n\
    \    for i in 1:n \n        if count < 0 return false end \n        if brackets[i]\
    \ == '<' count = count + 1 \n        elseif brackets[i] == '>' count = count -\
    \ 1 \n        end \n    end \n    return count == 0 \nend", "    count = 0\n \
    \   for letter in brackets\n        if letter == '<'\n            count += 1\n\
    \        elseif letter == '>'\n            count -= 1\n        end\n    end\n\
    \    return count == 0\nend", "    opens = 0 \n    closes = 0 \n    for (bracket_index,\
    \ bracket) in enumerate(brackets)\n        if bracket == '<'\n            opens\
    \ += 1\n        elseif bracket == '>'\n            closes += 1\n        end \n\
    \        if closes > opens\n            return false\n        end \n    end \n\
    \    if opens == closes\n        return true\n    else \n        return false\n\
    \    end \nend ", "    open_count = 0\n    for ch in brackets\n        if ch ==\
    \ '<'\n            open_count += 1\n        else\n            open_count -= 1\n\
    \        end\n        if open_count < 0\n            return false\n        end\n\
    \    end\n    if open_count != 0\n        return false\n    end\n    return true\n\
    end", "    open::Int = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open += 1\n        elseif brackets[i] == '>'\n         \
    \   open -= 1\n        end\n        if open < 0\n            return false\n  \
    \      end\n    end\n    return open == 0\nend", "    if length(brackets) % 2\
    \ != 0 return false end\n    l,r = 1,length(brackets)\n    while l<r\n       \
    \ l += 1\n        r -= 1\n        while brackets[l] != \"<\" && l<r\n        \
    \    l += 1\n        end\n        while brackets[r] != \">\" && l<r\n        \
    \    r -= 1\n        end\n        if brackets[l] != \"<\" || brackets[r] != \"\
    >\"\n            return false\n        end\n    end\n    return true\nend", " \
    \   n = 0\n    for b in brackets\n        if b == '<'\n            n += 1\n  \
    \      elseif b == '>'\n            n -= 1\n        end\n        if n < 0\n  \
    \          return false\n        end\n    end\n    if n == 0\n        return true\n\
    \    else\n        return false\n    end\nend", "    return brackets == join(reverse(brackets),\
    \ \"\")\nend", "    #-- if every opening bracket has a corresponding closing bracket\n\
    \    open::Int = 0\n    close::Int = 0\n    for i in brackets\n        if i ==\
    \ \"<\"\n            open += 1\n        elseif i == \">\"\n            close +=\
    \ 1\n        end\n    end\n    if open == close\n        return true\n    else\n\
    \        return false\n    end\nend", "    \n    stack = []\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            push!(stack, brackets[i])\n      \
    \  elseif brackets[i] == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if isempty(stack)\n        return true\n    else\n    \
    \    return false\n    end\nend", "    for i in 1:length(brackets)\n        if\
    \ brackets[i] == '<'\n            for j in i:length(brackets)\n              \
    \  if brackets[j] == '>'\n                    return true\n                end\n\
    \            end\n            return false\n        end\n    end\n    return true\n\
    end", "    brackets = [char for char in brackets]\n    curr = 0\n    for b in\
    \ brackets\n        if b == '<'\n            curr += 1\n        elseif b == '>'\n\
    \            curr -= 1\n        end\n        if curr < 0\n            return false\n\
    \        end\n    end\n    return curr == 0\nend", "    counter = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            counter += 1\n        elseif\
    \ i == \">\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    return counter == 0\nend",
  "    openCount = 0\n    for b in brackets\n        if b == '<'\n            openCount\
    \ += 1\n        elseif b == '>'\n            openCount -= 1\n        end\n   \
    \     if openCount < 0\n            return false\n        end\n    end\n    return\
    \ openCount == 0\nend\n \ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"<>\"\
    )\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"><<>\")", "    n = 0\n\
    \    for c in brackets\n        if c == '<'\n            n += 1\n        elseif\
    \ c == '>'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend", "  opencell = 0\n  for\
    \ cell in brackets \n    if cell == \"<\"\n      opencell += 1\n    elseif cell\
    \ == \">\"\n      opencell -= 1\n    end\n    if opencell < 0\n      return false\n\
    \    end\n  end\n  if opencell == 0\n    return true\n  else\n    return false\n\
    \  end\nend", "    opened_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            opened_brackets += 1\n        elseif bracket ==\
    \ '>'\n            opened_brackets -= 1\n        end\n        if opened_brackets\
    \ < 0\n            return false\n        end\n    end\n    if opened_brackets\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   count = 0\n    for c in brackets\n        if c == '<'\n            count +=\
    \ 1\n        elseif c == '>'\n            count -= 1\n        end\n        if\
    \ count < 0\n            return false\n        end\n    end\n    return count\
    \ == 0\nend", "    count = 0\n    for char in brackets\n        if char == '<'\n\
    \            count += 1\n        elseif char == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    stack = []\n    for b in brackets\n        if b == '<'\n\
    \            push!(stack, b)\n        elseif b == '>'\n            if isempty(stack)\
    \ || pop!(stack) != '<'\n                return false\n            end\n     \
    \   end\n    end\n    return isempty(stack)\nend", "    open_count = 0\n    closed_count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            open_count +=\
    \ 1\n        elseif i == \">\"\n            closed_count += 1\n        end\n \
    \   end\n    if open_count == closed_count\n        return true\n    else\n  \
    \      return false\n    end\nend", "    count = 0\n    for i in brackets\n  \
    \      if i == \"<\"\n            count += 1\n        elseif i == \">\"\n    \
    \        count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    n = length(brackets)\n    if n%2 != 0\n\
    \        return false\n    end\n    n_bracket = 0\n    for i in 1:n\n        if\
    \ brackets[i] == '<'\n            n_bracket += 1\n        elseif brackets[i] ==\
    \ '>'\n            n_bracket -= 1\n        end\n        if n_bracket < 0\n   \
    \         return false\n        end\n    end\n    return true\nend", "    \"\"\
    \"check if correct bracketing\"\"\"\n    count = 0\n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            count = count + 1\n        elseif bracket\
    \ == \">\"\n            count = count - 1\n        end\n        if count < 0\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "    depth = 0\n    for c in brackets\n        if c == '<'\n            depth +=\
    \ 1\n        elseif c == '>'\n            depth -= 1\n        end\n        if\
    \ depth < 0\n            return false\n        end\n    end\n    return depth\
    \ == 0\nend", "    i = 0\n    for b in brackets\n        if b == '<'\n       \
    \     i += 1\n        else\n            i -= 1\n        end\n        if i < 0\n\
    \            return false\n        end\n    end\n    return i == 0\nend", "  \
    \  open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    paren_count =\
    \ 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n         \
    \   paren_count += 1\n        else\n            paren_count -= 1\n        end\n\
    \        if paren_count < 0\n            return false\n        end\n    end\n\
    \    if paren_count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    nbrackets = 0\n    for i in 1:length(brackets)\n        if\
    \ brackets[i] == \"<\"\n            nbrackets += 1\n        elseif brackets[i]\
    \ == \">\"\n            nbrackets -= 1\n        end\n        if nbrackets < 0\n\
    \            return false\n        end\n    end\n    return nbrackets == 0\nend",
  "    len = 0\n    for b in brackets\n        if b == '<'\n            len += 1\n\
    \        else\n            len -= 1\n        end\n        if len < 0\n       \
    \     return false\n        end\n    end\n    return len == 0\nend", "  if length(brackets)%2\
    \ != 0\n    return false\n  end\n  matches = 0\n  for bracket in brackets\n  \
    \  if bracket == '<'\n      matches += 1\n    else\n      matches -= 1\n    end\n\
    \    if matches < 0\n      return false\n    end\n  end\n  return matches == 0\n\
    end", "    counter = 0\n    for char in brackets\n        if char == \"<\"\n \
    \           counter += 1\n        elseif char == \">\"\n            counter -=\
    \ 1\n        end\n        if counter < 0\n            return false\n        end\n\
    \    end\n    if counter == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    bracket_count::Int = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            bracket_count += 1\n        else\n\
    \            bracket_count -= 1\n        end\n        if bracket_count < 0\n \
    \           return false\n        end\n    end\n    return bracket_count == 0\n\
    end", "    count = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            count += 1\n        elseif bracket == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend", "    counter = 0\n    for char in brackets\n\
    \        if char == '<'\n            counter += 1\n        elseif char == '>'\n\
    \            counter -= 1\n        end\n        if counter < 0\n            return\
    \ false\n        end\n    end\n    if counter == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    count = 0 \n    for b in brackets \n\
    \        if b == '<' \n            count += 1 \n        elseif b == '>' \n   \
    \         count -= 1 \n        end \n        if count < 0 \n            return\
    \ false \n        end \n    end \n    return count == 0 \nend ", "    \n    \n\
    \    \n    \n    \n    \n    return false\nend", "    bracket_count = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            bracket_count +=\
    \ 1\n        elseif bracket == '>'\n            bracket_count -= 1\n        end\n\
    \        if bracket_count < 0\n            return false\n        end\n    end\n\
    \    return bracket_count == 0\nend", "    count = 0\n    for b in brackets\n\
    \        if b == '<'\n            count += 1\n        elseif b == '>'\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    counter = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            counter += 1\n        elseif\
    \ i == \">\"\n            counter -= 1\n        end\n        if counter < 0\n\
    \            return false\n        end\n    end\n    if counter == 0\n       \
    \ return true\n    else\n        return false\n    end\nend", "    n = 0\n   \
    \ for s in brackets\n        if s == '<'\n            n += 1\n        elseif s\
    \ == '>'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend", "    c = 0\n    for b\
    \ in brackets\n        if b == '<'\n            c += 1\n        elseif b == '>'\n\
    \            c -= 1\n        end\n        if c < 0\n            return false\n\
    \        end\n    end\n    return c == 0\nend\n ", "    bracket_counter = 0\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            bracket_counter\
    \ += 1\n        elseif bracket == \">\"\n            bracket_counter -= 1\n  \
    \      end\n        if bracket_counter < 0\n            return false\n       \
    \ end\n    end\n    return bracket_counter == 0\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<' && brackets[end] ==\
    \ '>'\n        return correct_bracketing(string(brackets[2:end-1]))\n    else\n\
    \        return false\n    end\nend", "    left = 0\n    right = 0\n    for char\
    \ in brackets\n        if char == '<'\n            left += 1\n        elseif char\
    \ == '>'\n            right += 1\n        end\n    end\n    return (left == right)\n\
    end", "    f = 0\n    for i in brackets\n        if i == \"<\"\n            f\
    \ += 1\n        elseif i == \">\"\n            f -= 1\n        end\n        if\
    \ f < 0\n            return false\n        end\n    end\n    if f == 0\n     \
    \   return true\n    else\n        return false\n    end\nend", "    x = 0\n \
    \   for i in 1:length(brackets)\n        if brackets[i] == \"<\"\n           \
    \ x += 1\n        elseif brackets[i] == \">\"\n            x -= 1\n        end\n\
    \    end\n    return x == 0\nend", "    count = 0\n    for s in brackets\n   \
    \     if s == \"<\"\n            count += 1\n        elseif s == \">\"\n     \
    \       count -= 1\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend", "    if lastindex(brackets) ==\
    \ 0\n        return false\n    end\n    if brackets[1] == '>'\n        return\
    \ false\n    end\n    if lastindex(brackets) == 1\n        return false\n    end\n\
    \    counter = 0\n    for char in brackets\n        if char == '<'\n         \
    \   counter += 1\n        elseif char == '>'\n            counter -= 1\n     \
    \   end\n        if counter < 0\n            return false\n        end\n    end\n\
    \    if counter == 0\n        return true\n    else\n        return false\n  \
    \  end\nend", "    open = 0\n    for ch in brackets\n        if ch == '<'\n  \
    \          open += 1\n        elseif ch == '>'\n            open -= 1\n      \
    \  end\n        if open < 0\n            return false\n        end\n    end\n\
    \    return open == 0\nend", "    n = 0\n    for b in brackets\n        if b ==\
    \ '<'\n            n += 1\n        elseif b == '>'\n            n -= 1\n     \
    \   end\n        if n < 0\n            return false\n        end\n    end\n  \
    \  return n == 0\nend", "    b = 0\n    for s = brackets\n        if s == '<'\n\
    \            b += 1\n        else\n            b -= 1\n        end\n        if\
    \ b < 0\n            return false\n        end\n    end\n    if b == 0\n     \
    \   return true\n    else\n        return false\n    end\nend", "    depth = 0\n\
    \    for c in brackets\n        if c == '<'\n            depth += 1\n        elseif\
    \ c == '>'\n            depth -= 1\n        end\n        if depth < 0\n      \
    \      return false\n        end\n    end\n    return depth == 0\nend", "    count\
    \ = 0\n    for c in brackets\n        if c == '<'\n            count += 1\n  \
    \      elseif c == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    i = 0\n    for b in brackets\n        if b == '<'\n            i =\
    \ i + 1\n        else\n            i = i - 1\n        end\n        if i < 0\n\
    \            return false\n        end\n    end\n    return i == 0\nend", "  \
    \  if length(brackets)%2 != 0\n        return false\n    end\n    brackets_lst\
    \ = []\n    for i in brackets\n        if i == \"<\"\n            push!(brackets_lst,\
    \ i)\n        elseif i == \">\"\n            if isempty(brackets_lst)\n      \
    \          return false\n            elseif pop!(brackets_lst) != \"<\"\n    \
    \            return false\n            end\n        end\n    end\n    if isempty(brackets_lst)\n\
    \        return true\n    else\n        return false\n    end\nend", "    num_open\
    \ = 0\n    for b in brackets\n        if b == '<'\n            num_open += 1\n\
    \        elseif b == '>'\n            num_open -= 1\n        end\n        if num_open\
    \ < 0\n            return false\n        end\n    end\n    return num_open ==\
    \ 0\nend", "    if occursin(\"<\", brackets) && !occursin(\">\", brackets)\n \
    \       return false\n    elseif !occursin(\"<\", brackets) && occursin(\">\"\
    , brackets)\n        return false\n    else\n        return true\n    end\nend",
  "    count::Int = 0\n    for bracket in brackets\n        if bracket == \"<\"\n\
    \            count += 1\n        elseif bracket == \">\"\n            count -=\
    \ 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "    open_brackets = 0\n    for c in brackets\n\
    \        if c == '<'\n            open_brackets += 1\n        elseif c == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    count = 0\n    for char in brackets\n        if char == '<'\n     \
    \       count += 1\n        elseif char == '>'\n            count -= 1\n     \
    \   end\n        if count < 0\n            return false\n        end\n    end\n\
    \    return count == 0\nend", "    count = 0\n    for i in brackets\n        if\
    \ i == '<'\n            count += 1\n        elseif i == '>'\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend\n\"\"\"\n    >>> code_to_ascii(\"A\")\n    \".\"\n    >>> code_to_ascii(\"\
    a\")\n    \".\"\n    >>> code_to_ascii(\"0\")\n    \"..\"\n    >>> code_to_ascii(\"\
    5\")\n    \"..\"\n    >>> code_to_ascii(\" \")\n    \".....\"\n    >>> code_to_ascii(\"\
    .\")\n    \"...\"\n    >>> code_to_ascii(\"!\")\n    \"...\"\n    >>> code_to_ascii(\"\
    E\")\n    \".\"\n    >>> code_to_ascii(\"i\")\n    \"..\"\n    >>> code_to_ascii(\"\
    s\")\n    \"...\"\n    >>> code_to_ascii(\"t\")\n    \"-\"\n    >>> code_to_ascii(\"\
    w\")\n    \".---\"\n    >>> code_to_ascii(\"n\")\n    \"-.\"\n    >>> code_to_ascii(\"\
    ~\")\n    \"--.-\"\n    >>> code_to_ascii(\"?\")\n    \"..--..\"\n    >>> code_to_ascii(\"\
    /\")\n    \"-..-.\"\n    >>> code_to_ascii(\";\")\n    \"-.-.-.\"\n    >>> code_to_ascii(\"\
    =\")\n    \"-...-\"\n    >>> code_to_ascii(\"+\")\n    \".-.-.\"\n    >>> code_to_ascii(\"\
    \\\"\")\n    \".-..-.\"\n    >>> code_to_ascii(\"$\")\n    \"...-..-\"\n    >>>\
    \ code_to_ascii(\"@\")\n    \".--.-.\"\n    >>> code_to_ascii(\"&\")\n    \".-...\"\
    \n    >>> code_to_ascii(\"#\")\n    \"", "    bracket_count = 0 \n    for (i,\
    \ bracket) in enumerate(brackets)\n        if bracket == \"<\"\n            bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            bracket_count -= 1\n    \
    \    end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    if bracket_count == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    count = 0\n    for b in brackets\n        if b ==\
    \ \"<\"\n            count += 1\n        elseif b == \">\"\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    if count != 0\n        return false\n    end\n    return true\n\
    end\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\
    <<><>>\")\ncorrect_bracketing(\"><<>\")", "    k = 0\n    for c in brackets\n\
    \        if c == '<'\n            k += 1\n        elseif c == '>'\n          \
    \  k -= 1\n        end\n        if k < 0\n            return false\n        end\n\
    \    end\n    return k == 0\nend", "    count = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            count += 1\n        elseif brackets[i]\
    \ == '>'\n            count -= 1\n        end\n    end\n    return count == 0\n\
    end", "    @assert(brackets != \"\")\n    balance = 0\n    for b in brackets\n\
    \        if b == '<'\n            balance += 1\n        elseif b == '>'\n    \
    \        balance -= 1\n        end\n        if balance < 0\n            return\
    \ false\n        end\n    end\n    return balance == 0\nend", "    return brackets_match(0,\
    \ brackets)\nend", "    opencounter = 0\n    for bracket in brackets\n       \
    \ if bracket == \"<\"\n            opencounter += 1\n        elseif bracket ==\
    \ \">\"\n            opencounter -= 1\n        end\n    end\n    return opencounter\
    \ == 0\nend", "    lefts = 0\n    rights = 0\n    for x in brackets\n        if\
    \ x == \"<\"\n            lefts += 1\n        elseif x == \">\"\n            rights\
    \ += 1\n        end\n    end\n    return lefts == rights\nend", "    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend", "  for i in 1:length(brackets)\n    if brackets[i]\
    \ == '<' && brackets[end-i+1] != '>'\n      return false\n    end\n  end\n  return\
    \ true\nend", "    cnt = 0\n    for b in brackets\n        if b == '<'\n     \
    \       cnt += 1\n        elseif b == '>'\n            cnt -= 1\n        end\n\
    \        if cnt < 0\n            return false\n        end\n    end\n    return\
    \ cnt == 0\nend", "    # YOUR CODE HERE\n    count_left_bracket = 0\n    count_right_bracket\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count_left_bracket\
    \ += 1\n        elseif i == \">\"\n            count_right_bracket += 1\n    \
    \    end\n    end\n    if count_left_bracket != count_right_bracket\n        return\
    \ false\n    else\n        return true\n    end\nend", "    count = 0\n    for\
    \ b in brackets\n        if b == '<'\n            count += 1\n        elseif b\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend", "  l = length(brackets)\
    \ \n  for i in 1:l \n    if brackets[i] == '<'\n      for j in (i+1):l \n    \
    \    if brackets[j] == '>'\n          return true\n        end\n      end\n  \
    \    return false\n    end\n  end\n  if l == 0\n    return true\n  else\n    return\
    \ false\n  end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
