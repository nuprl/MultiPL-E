name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
  <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    # open = 0\n    # close = 0\n    # for i in 1:length(brackets)\n\
    \    #     if brackets[i] == '<'\n    #         open += 1\n    #     else\n  \
    \  #         close += 1\n    #     end\n    # end\n    # if open == close\n  \
    \  #     return true\n    # else\n    #     return false\n    # end\n    bracket_stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    if isempty(bracket_stack)\n      \
    \  return true\n    else\n        return false\n    end\nend", "    count = 0\n\
    \    for i in brackets\n        if i == \"<\"\n            count += 1\n      \
    \  elseif i == \">\"\n            count -= 1\n        end\n        if count <\
    \ 0\n            return false\n        end\n    end\n    return count == 0\nend",
  "    n = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n   \
    \         n += 1\n        elseif brackets[i] == '>'\n            n -= 1\n    \
    \    end\n        if n < 0\n            return false\n        end\n    end\n \
    \   return n == 0\nend\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"<>\")\n\
    correct_bracketing(\"<<><>>\")\ncorrect_bracketing(\"><<>\")", "    # Set an empty\
    \ array, and one for tracking \"<\" and \">\"\n    openbrackets = [] \n    counter\
    \ = 0\n    # Loop through all the brackets, adding \"1\" if \"<\" and \"-1\" if\
    \ \">\"\n    for bracket in brackets\n        if bracket == \"<\"\n          \
    \  push!(openbrackets, 1)\n        else\n            push!(openbrackets, -1)\n\
    \        end\n    end\n    # For all the elements in the list\n    for n in openbrackets\n\
    \        # add or subtract them to/from the counter\n        counter += n\n  \
    \      # if it is at any time below 0, there was a \">\" before a \"<\", so return\
    \ false\n        if counter < 0\n            return false\n        end\n    end\n\
    \    # If the counter is 0, then there were the same number of \"<\" and \">\"\
    , so return true\n    if counter == 0\n        return true\n    else\n       \
    \ return false\n    end\nend", "    ind::Int=0\n    for bracket in brackets\n\
    \        if bracket=='<'\n            ind+=1\n        elseif bracket=='>'\n  \
    \          ind-=1\n        end\n        if ind<0\n            return false\n \
    \       end\n    end\n    if ind==0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    open = 0\n    for c in brackets\n        if c ==\
    \ '<'\n            open += 1\n        elseif c == '>'\n            open -= 1\n\
    \        end\n        if open < 0\n            return false\n        end\n   \
    \ end\n    return open == 0\nend", "    #TODO: implement function.\nend", "  return\
    \ brackets |> count(issubtype(Char, '<')) == count(issubtype(Char, '>'))\nend",
  "    s = []\n    count = 0\n    for c in brackets\n        if c == '<'\n       \
    \     push!(s, '<')\n            count += 1\n        elseif c == '>' && count\
    \ == 0\n            return false\n        elseif c == '>' && count > 0\n     \
    \       pop!(s)\n            count -= 1\n        end\n    end\n    if count ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nend",
  "    for i in 1:length(brackets)\n        if brackets[i] == \"<\" \n           \
    \ if any(brackets[i:end] .== \">\")\n                return true\n           \
    \ else\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    num_open, num_close = 0, 0\n    for i in brackets\n\
    \        if i == \"<\"\n            num_open += 1\n        else\n            num_close\
    \ += 1\n        end\n    end\n    return num_open == num_close\nend", "    n =\
    \ length(brackets)\n    for i = 1:n\n        if brackets[i] == '<'\n         \
    \   return false\n        end\n    end\n    return true\nend", "    # Create a\
    \ stack\n    stack = Stack{Char}()\n    for c in brackets\n        if c in ['<',\
    \ '>']\n            # If an opening bracket, push to stack\n            if c ==\
    \ '<'\n                push!(stack, c)\n            # If a closing bracket, pop\
    \ from stack and check if they match\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ n = 0\n    for i in brackets\n        if i == \"<\"\n            n += 1\n  \
    \      elseif i == \">\"\n            n -= 1\n        end\n        if n < 0\n\
    \            return false\n        end\n    end\n    return n == 0\nend", "  \
    \  n = length(brackets)\n    open_count = 0\n    for i in 1:n\n        if brackets[i]\
    \ == '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n   \
    \         open_count -= 1\n        end\n        if open_count < 0 \n         \
    \   return false\n        end\n    end\n    if open_count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    open, close = 0, 0\n\
    \    for i in brackets\n        if i == '<'\n            open += 1\n        elseif\
    \ i == '>'\n            close += 1\n        end\n    end\n    return open == close\n\
    end", "    stack = []\n    for ch in brackets\n        if ch == '<'\n        \
    \    push!(stack, ch)\n        else\n            if isempty(stack)\n         \
    \       return false\n            else\n                pop!(stack)\n        \
    \    end\n        end\n    end\n    return isempty(stack)\nend", "    bracket_stack\
    \ = Deque()\n    for bracket in brackets\n        if bracket == '<'\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == '>'\n          \
    \  if bracket_stack == Deque()\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return bracket_stack == Deque()\nend", "    # NOTE: The order of the following\
    \ statements is important\n    if length(brackets) == 0                      \
    \                     # base case\n        return true\n    elseif brackets[1]\
    \ == '<'                                          # recursive case\n        #\
    \ find the matching '>' and make sure it's closed.\n        return has_closing_bracket(brackets[2:end],\
    \ brackets[1]) && correct_bracketing(remove_bracket(brackets, 2))\n    else  \
    \                                                             # recursive case\n\
    \        return false\n    end\nend", "    opening_brackets::Int = 0\n    for\
    \ c in brackets\n        if c == '<'\n            opening_brackets += 1\n    \
    \    elseif c == '>'\n            opening_brackets -= 1\n        end\n       \
    \ if opening_brackets < 0\n            return false\n        end\n    end\n  \
    \  if opening_brackets == 0\n        return true\n    else\n        return false\n\
    \    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
