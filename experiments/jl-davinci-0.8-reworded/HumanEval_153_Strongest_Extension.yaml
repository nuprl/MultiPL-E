name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a vector of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ vector.\n    For example, if you are given \"Slices\" as the class and a vector\
  \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: ["  strengths = [(ext, count(isupper, ext) - count(islower, ext)) for\
    \ ext in extensions]\n  println(strengths)\n  return class_name * \".\" * maximum(strengths)[1]\n\
    end", "    strength_vec = []\n    for ext in extensions\n        strength_vec\
    \ = push!(strength_vec, Count_Strength(ext))\n    end\n    if length(strength_vec)\
    \ == 1\n        return class_name * \".\" * extensions[1]\n    else\n        index\
    \ = findmax(strength_vec)[2]\n        return class_name * \".\" * extensions[index]\n\
    \    end\nend", "    max_strength = 0\n    strongest_extension = \"\"\n    for\
    \ ext in extensions\n        strength = sum(isupper.(ext)) - sum(islower.(ext))\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         strongest_extension = ext\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    S = zeros(extensions)\n    for i in 1:length(extensions)\n      \
    \  for j in 1:length(extensions[i])\n            if isupper(extensions[i][j])\n\
    \                S[i] += 1\n            else\n                S[i] -= 1\n    \
    \        end\n        end\n    end\n    return class_name * \".\" * extensions[findmax(S)[2]]\n\
    end", "    strengths = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        capitals = sum(isupper.(extension))\n        small_letters\
    \ = sum(islower.(extension))\n        strength = capitals - small_letters\n  \
    \      if strength > strengths\n            strengths = strength\n           \
    \ strongest_extension = extension\n        end\n    end\n    return(class_name\
    \ * \".\" * strongest_extension)\nend", "    best_extension = \"\"\n    best_strength\
    \ = 0.0\n    for extension in extensions\n        strength = count_upper(extension)\
    \ - count_lower(extension)\n        if strength > best_strength\n            best_strength\
    \ = strength\n            best_extension = extension\n        end\n    end\n \
    \   return class_name * \".\" * best_extension\nend", "    # strongness of each\
    \ extension\n    strengths = map(extension -> count_upper(extension) - count_lower(extension),\
    \ extensions)\n    # index of strongest\n    strongest_idx = indmax(strengths)\n\
    \    return \"$class_name.$(extensions[strongest_idx])\"\nend", "    # YOUR CODE\
    \ HERE\nend", "    class_name = \".\"*class_name\n    strongest_ext = \"\"\n \
    \   max_strength = 0\n    for ext in extensions\n        strength = sum(string.isupper(ext))\
    \ - sum(string.islower(ext))\n        if strength > max_strength\n           \
    \ max_strength = strength\n            strongest_ext = ext\n        end\n    end\n\
    \    return class_name*\".\"*strongest_ext\nend", "    num_upper = x -> count(isupper,\
    \ x)\n    num_lower = x -> count(islower, x)\n    s_ext = x -> num_upper(x) -\
    \ num_lower(x)\n    curr_max = x -> (x[1], s_ext(x[1]))\n    strongest = foldl(curr_max,\
    \ (\"\", 0.0), extensions)\n    return class_name * \".\" * strongest[1]\nend\n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\"\"\"You will\
    \ be given a dictionary (hash) and a set of keys. The first value\n    in the\
    \ dictionary is the definition of the word. You should return the\n    definition\
    \ of the most words that appear in the set. If several definitions\n    appear\
    \ the same number of times then you should return the definition\n    that has\
    \ the most words.\n    For example, if you are given the dictionary\n    {\"function\"\
    : [\"A function is a relation or expression involving one or more variables\"\
    ,\n    \"A function is a named section of a program that performs a specific task\"\
    ],\n    \"name\": [\"A name is a noun, pronoun, or other language unit that signifies\
    \ a person or thing\",\n    \"A name is a word or term used for identification.\"\
    ]}\n    and the set [\"function\", \"name\", \"name\"] then you should return\n\
    \    \"A name is a noun, pronoun, or other language unit that signifies a person\
    \ or thing\"\n    since it appears in the set two times and it has the most words.\n\
    \    Example:\n    >>> Most_Common_Definition({\"A\": [\"a\", \"b\"], \"B\": [\"\
    a\"]}, [\"A\", \"B\"])\n    \"a\"\n    \"\"\"", "    # Your code here\nend", " \
    \   if length(extensions) == 0\n        return class_name\n    end\n    strength_vector\
    \ = zeros(Int64, length(extensions))\n    for i in 1:length(extensions)\n    \
    \    counter_upper = 0\n        counter_lower = 0\n        for j in 1:length(extensions[i])\n\
    \            if string(extensions[i][j]) == uppercase(string(extensions[i][j]))\n\
    \                counter_upper += 1\n            else\n                counter_lower\
    \ += 1\n            end\n        end\n        strength_vector[i] = round(Int64,\
    \ counter_upper - counter_lower)\n    end\n    return class_name * \".\" * extensions[findmax(strength_vector)[2]]\n\
    end\n# This cell will test your code.\n# You should not change anything below\
    \ this line.\n# Test Strongest_Extension\ntests = Test(\"Strongest_Extension\"\
    ,function=(Strongest_Extension, [\"class_name\",\"extensions\"]))\ntests.run()\n\
    \ ", "    idx_strongest_extension = index_of_the_strongest_extension(extensions)\n\
    \    return \"$class_name.$(extensions[idx_strongest_extension])\"\nend", "  \
    \  # your code here\nend\n@testset \"Strongest extension\" begin\n    @test Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\
    \n    @test Strongest_Extension(\"Sandwich\", [\"Paste\", \"Rice\", \"Cow\"])\
    \ == \"Sandwich.Rice\"\n    @test Strongest_Extension(\"Car\", [\"Lamborghini\"\
    , \"Tesla\", \"McLaren\"]) == \"Car.Lamborghini\"\n    @test Strongest_Extension(\"\
    Burger\", [\"Fries\", \"Drink\", \"Shake\"]) == \"Burger.Drink\"\n    @test Strongest_Extension(\"\
    Coffee\", [\"TEA\", \"LATTE\", \"cappuccino\"]) == \"Coffee.cappuccino\"\n   \
    \ @test Strongest_Extension(\"Milk\", [\"WATER\", \"DRINK\", \"SOY\"]) == \"Milk.WATER\"\
    \n    @test Strongest_Extension(\"Hamburger\", [\"Soda\", \"Salad\", \"Chips\"\
    ]) == \"Hamburger.Soda\"\n    @test Strongest_Extension(\"HotDog\", [\"BEER\"\
    , \"Chips\", \"Soda\"]) == \"HotDog.BEER\"\n    @test Strongest_Extension(\"drink\"\
    , [\"WATER\", \"JUICE\", \"coke\"]) == \"drink.WATER\"\n    @test Strongest_Extension(\"\
    Drink\", [\"BEER\", \"Coffee\", \"Soda\"]) == \"Drink.Coffee\"\n    @test Strongest_Extension(\"\
    Fruit\", [\"ORANGE\", \"Apple\", \"Avocado\"]) == \"Fruit.ORANGE\"\n    @test\
    \ Strongest_Extension(\"Cake\", [\"Cheese\", \"Cookie\", \"Soda\"]) == \"Cake.Cookie\"\
    \n    @test Strongest_Extension(\"Candy\", [\"Gummies\", \"Bar\", \"Cake\"]) ==\
    \ \"Candy.Gummies\"\n    @test Strongest_Extension(\"Bread\", [\"WHEAT\", \"Rye\"\
    , \"FREN", "    strength_extensions = [strength_extension(extension) for extension\
    \ in extensions]\n    strongest_extension = extensions[argmax(strength_extensions)]\n\
    \    return class_name * \".\" * strongest_extension\nend", "    sm = 0\n    cap\
    \ = 0\n    strength = 0\n    strongest_extension = \"\"\n    for e in extensions\n\
    \        cap = sum(isupper.(e))\n        sm = sum(islower.(e))\n        s = cap\
    \ - sm\n        if s >= strength\n            strength = s\n            strongest_extension\
    \ = e\n        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end", "    strength_data = []\n    for ext in extensions\n        uppercase_count\
    \ = sum(isuppercase.(ext))\n        lowercase_count = sum(islowercase.(ext))\n\
    \        push!(strength_data, (ext, uppercase_count - lowercase_count))\n    end\n\
    \    strength_data = sort(strength_data, by = x -> x[2])\n    return \"$class_name.$(strength_data[end][1])\"\
    \nend\n        \n ", "    # Write your code here\n    strength = 0\n    strength_key\
    \ = 0\n    for i in 1:length(extensions)\n        if count(extensions[i], \"A\"\
    ):!=0 || count(extensions[i], \"B\"):!=0 || \n            count(extensions[i],\
    \ \"C\"):!=0 || count(extensions[i], \"D\"):!=0 || \n            count(extensions[i],\
    \ \"E\"):!=0 || count(extensions[i], \"F\"):!=0 || \n            count(extensions[i],\
    \ \"G\"):!=0 || count(extensions[i], \"H\"):!=0 || \n            count(extensions[i],\
    \ \"I\"):!=0 || count(extensions[i], \"J\"):!=0 || \n            count(extensions[i],\
    \ \"K\"):!=0 || count(extensions[i], \"L\"):!=0 || \n            count(extensions[i],\
    \ \"M\"):!=0 || count(extensions[i], \"N\"):!=0 || \n            count(extensions[i],\
    \ \"O\"):!=0 || count(extensions[i], \"P\"):!=0 || \n            count(extensions[i],\
    \ \"Q\"):!=0 || count(extensions[i], \"R\"):!=0 || \n            count(extensions[i],\
    \ \"S\"):!=0 || count(extensions[i], \"T\"):!=0 || \n            count(extensions[i],\
    \ \"U\"):!=0 || count(extensions[i], \"V\"):!=0 || \n            count(extensions[i],\
    \ \"W\"):!=0 || count(extensions[i], \"X\"):!=0 || \n            count(extensions[i],\
    \ \"Y\"):!=0 || count(extensions[i], \"Z\"):!=0\n            strength_key += 1\n\
    \        end\n        if count(extensions[i], \"a\"):!=0 || count(extensions[i],\
    \ \"b\"):!=0 || \n            count(extensions[i],", "    cap, sm = 0, 0\n   \
    \ strength = 0.0\n    class_strength = 0.0\n    s = \"\"\n    for extension in\
    \ extensions\n        for letter in extension\n            if letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n                cap += 1\n            elseif letter in \"abcdefghijklmnopqrstuvwxyz\"\
    \n                sm += 1\n            end\n        end\n        class_strength\
    \ = cap - sm\n        if class_strength > strength\n            strength = class_strength\n\
    \            s = extension\n        end\n        cap, sm = 0, 0\n    end\n   \
    \ return class_name * \".\" * s\nend", "    \n    streng = 0\n    str_ext = \"\
    \"\n    for i in 1:length(extensions)\n        ext = extensions[i]\n        num_of_caps\
    \ = sum(isupper.(ext))\n        num_of_smalls = sum(islower.(ext))\n        if\
    \ streng < num_of_caps - num_of_smalls\n            streng = num_of_caps - num_of_smalls\n\
    \            str_ext = ext\n        end\n    end\n    return class_name * \".\"\
    \ * str_ext\nend", "    # Your code here.\nend", "    biggest_strength = 0\n \
    \   strongest_extension = \"\"\n    for extension in extensions\n        # go\
    \ through the extension and count the number of uppercase\n        uppercase_count\
    \ = 0\n        lowercase_count = 0\n        for letter in extension\n        \
    \    if letter in upper_letters\n                uppercase_count += 1\n      \
    \      elseif letter in lower_letters\n                lowercase_count += 1\n\
    \            end\n        end\n        strength = uppercase_count - lowercase_count\n\
    \        if strength > biggest_strength\n            biggest_strength = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    CAP = 0\n    SM = 0\n \
    \   for extension in extensions\n        for letter in extension\n           \
    \ if isupper(letter)\n                CAP += 1\n            elseif islower(letter)\n\
    \                SM += 1\n            end\n        end\n    end\n    strength\
    \ = CAP - SM\n    return \"my_class.AA\"\nend", "    strength_list = []\n    for\
    \ extension in extensions\n        strength = count_caps(extension) - count_lower(extension)\n\
    \        push!(strength_list, strength)\n    end\n    sorted_strengths = sort(strength_list)\n\
    \    best_strength = sorted_strengths[1]\n    index = findfirst(strength_list,\
    \ best_strength)\n    return \"$class_name.$(extensions[index])\"\nend", "   \
    \ @assert !isempty(extensions)\n    str_ext = extensions[1]\n    str_ratio = ratio(str_ext)\n\
    \    for ext in extensions[2:end]\n        ratio_ext = ratio(ext)\n        if\
    \ ratio_ext > str_ratio\n            str_ratio = ratio_ext\n            str_ext\
    \ = ext\n        end\n    end\n    return \"$class_name.$str_ext\"\nend", "  \
    \  class_name = \".\" * class_name * \".\"\n    max_strength = -1.\n    strength\
    \ = -1.\n    max_strength_ind = -1.\n    for i in 1:length(extensions)\n     \
    \   strength = (count(isupper, extensions[i]) - count(islower, extensions[i]))/length(extensions[i])\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         max_strength_ind = i\n        end\n    end\n    return class_name *\
    \ extensions[max_strength_ind]\nend", "    if length(extensions) == 0\n      \
    \  return class_name\n    end\n    strengths = zeros(length(extensions))\n   \
    \ for i in 1:length(extensions)\n        ext = extensions[i]\n        strengths[i]\
    \ = Strongest_Extension_Strength(ext)\n    end\n    strongest_index = argmax(strengths)\n\
    \    strongest_extension = extensions[strongest_index]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    strongest_name = \"\"\n    strongest_strength = 0.0\n    for name\
    \ in extensions\n        name_strength = strength(name)\n        if name_strength\
    \ > strongest_strength\n            strongest_strength = name_strength\n     \
    \       strongest_name = name\n        end\n    end\n    class_name * \".\" *\
    \ strongest_name\nend", "    strengths = [0 for i in 1:length(extensions)]\n \
    \   for i in 1:length(extensions)\n        count = 0\n        for j in 1:length(extensions[i])\n\
    \            if isupper(extensions[i][j])\n                count += 1\n      \
    \      end\n        end\n        strengths[i] = count - length(extensions[i])\n\
    \    end\n    if length(extensions) == 1\n        index = 1\n    else\n      \
    \  index = findmax(strengths)[2]\n    end\n    extension = extensions[index]\n\
    \    return \"$class_name.$extension\"\nend", "    strs = [extension_strength(s)\
    \ for s in extensions]\n    return \"$class_name.$(extensions[indmax(strs)])\"\
    \nend", "    \n    n = length(extensions)\n    sum_uppercase = 0\n    sum_lowercase\
    \ = 0\n    for i in 1:n\n        sum_uppercase = 0\n        sum_lowercase = 0\n\
    \        for j in 1:length(extensions[i])\n            if islowercase(extensions[i][j])\n\
    \                sum_lowercase += 1\n            elseif isuppercase(extensions[i][j])\n\
    \                sum_uppercase += 1\n            end\n        end\n        sum_upper_lowercase\
    \ = sum_uppercase - sum_lowercase\n        extensions[i] = [sum_upper_lowercase,\
    \ extensions[i]]\n    end\n    ind = indmax(extensions)\n    return string(class_name,\
    \ \".\", extensions[ind][2])\nend", "    return \"Not yet implemented\"\nend",
  "    s = 0.0\n    str = \".\"\n    for i = 1:length(extensions)\n        a = 0\n\
    \        b = 0\n        for j = 1:length(extensions[i])\n            if('A' <=\
    \ extensions[i][j] <= 'Z')\n                a += 1\n            elseif('a' <=\
    \ extensions[i][j] <= 'z')\n                b += 1\n            end\n        end\n\
    \        if(a - b > s)\n            s = a - b\n            str = extensions[i]\n\
    \        end\n    end\n    return string(class_name, \".\", str)\nend", "    #\
    \ count number of upper case letters in every element in vector\n    num_upper\
    \ = [sum(isupper.(x)) for x in extensions]\n    # count number of lower case letters\
    \ in every element in vector\n    num_lower = [sum(islower.(x)) for x in extensions]\n\
    \    # calculate the strength of each extension\n    strength = [num_upper[i]\
    \ - num_lower[i] for i in 1:length(num_upper)]\n    # find index of the highest\
    \ strength\n    max_ind = indmax(strength)\n    return class_name * \".\" * extensions[max_ind]\n\
    end", "    \n    # Find the strength of the extension\n    # CAP: number of the\
    \ uppercase letters in the extension's name\n    # SM: number of lowercase letters\
    \ in the extension's name\n    # strength = CAP - SM\n    function strength(extension)::Real\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension\n          \
    \  if letter in upper_letters\n                CAP += 1\n            elseif letter\
    \ in lower_letters\n                SM += 1\n            end\n        end\n  \
    \      strength = CAP - SM\n        return strength\n    end\n    \n    # Sort\
    \ the extensions in descending order according to their strength\n    sorted_extensions\
    \ = []\n    while length(extensions) > 0\n        strongest_extension = extensions[1]\n\
    \        strongest_strength = strength(strongest_extension)\n        for extension\
    \ in extensions\n            current_strength = strength(extension)\n        \
    \    if current_strength > strongest_strength\n                strongest_extension\
    \ = extension\n                strongest_strength = current_strength\n       \
    \     end\n        end\n        push!(sorted_extensions, strongest_extension)\n\
    \        deleteat!(extensions, findfirst(extensions, strongest_extension))\n \
    \   end\n    \n    # Return the class name and the strongest extension\n    return\
    \ \"$class_name.$(sorted_extensions[1])\"\nend", "    \n    \"\"\"Determines the\
    \ strength of each extension in the vector using the \n        function extension_strength\"\
    \"\"\n    strength = [extension_strength(ext) for ext in extensions]\n    \n \
    \   \"\"\"Finds the index of the maximum strength in the strength vector\"\"\"\
    \n    max_index = findmax(strength)[2]\n    \n    \"\"\"Return the class_name\
    \ with the extension\"\"\"\n    return class_name * \".\" * extensions[max_index]\n\
    \    \nend\n    ", "    strengths = [sum(isupper.(extension)) - sum(islower.(extension))\
    \ for extension in extensions]\n    i = argmax(strengths)\n    return \"$class_name.$(extensions[i])\"\
    \nend", "    strength = 0\n    name = \"\"\n    for ext in extensions\n      \
    \  num_uppers = sum(1 for c in ext if isupper(c))\n        num_lowers = sum(1\
    \ for c in ext if islower(c))\n        if (num_uppers - num_lowers) > strength\n\
    \            strength = num_uppers - num_lowers\n            name = ext\n    \
    \    end\n    end\n    return class_name * \".\" * name\nend", "  strength = 0\
    \ \n  strongest = \"\"\n  for extension in extensions\n    cap = count(extension,\
    \ isupper)\n    sm = count(extension, islower)\n    if cap - sm > strength\n \
    \     strength = cap - sm\n      strongest = extension\n    end\n  end\n  return\
    \ class_name * \".\" * strongest\nend", "    strength = [0 for i in 1:length(extensions)]\n\
    \    for i in 1:length(extensions)\n        strength[i] = count(extensions[i],\
    \ isuppercase) - count(extensions[i], islowercase)\n    end\n    strength = round(Int,\
    \ strength, digits=0)\n    idx = indmax(strength)\n    return class_name * \"\
    .\" * extensions[idx]\nend", "    best_strength = -Inf\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        strength = sum(isupper.(extension))\
    \ - sum(islower.(extension))\n        if strength > best_strength\n          \
    \  best_strength = strength\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # I assume that the function is case-sensitive,\n    # that is, \"AA\" and\
    \ \"aA\" are different extensions", "    #s = 0\n    #c = 0\n    #e = 0\n    #for\
    \ i in 1:length(extensions)\n    #    if count(isupper, extensions[i]) > c\n \
    \   #        c = count(isupper, extensions[i])\n    #        s = count(islower,\
    \ extensions[i])\n    #        e = i\n    #    elseif count(isupper, extensions[i])\
    \ == c\n    #        if count(islower, extensions[i]) < s\n    #            s\
    \ = count(islower, extensions[i])\n    #            e = i\n    #        end\n\
    \    #    end\n    #end\n    #return \"$class_name.$(extensions[e])\"\n    #end\n\
    \    return \"$class_name.$(extensions[findmax(extensions)[2]])\"\nend", "   \
    \ strength = fill(0, length(extensions))\n    for i in 1:length(extensions)\n\
    \        for ch in extensions[i]\n            if isalpha(ch)\n               \
    \ if isupper(ch)\n                    strength[i] += 1\n                else\n\
    \                    strength[i] -= 1\n                end\n            end\n\
    \        end\n    end\n    m = findmax(strength)[1]\n    return class_name * \"\
    .\" * extensions[m]\nend", "    sorted_extensions = sort(extensions, \n      \
    \  by = (extension -> ((sum(isupper.(extension)) - sum(islower.(extension))) /\
    \ length(extension))),\n        rev = true)\n    println(sorted_extensions)\n\
    \    return string(class_name, \".\", sorted_extensions[1])\nend", "    # YOUR\
    \ CODE HERE\n    max_strength = -1\n    strongest_extension = \"\"\n    for i\
    \ in 1:length(extensions)\n        extension = extensions[i]\n        strength\
    \ = count_caps(extension) - count_smalls(extension)\n        if strength > max_strength\n\
    \            max_strength = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    \"\"\"\n    input:\n    class_name: a string\n    extensions: a vector of strings\n\
    \    output:\n    a string\n    \"\"\"\n    x = argmax(extensions)\n    strength\
    \ = (sum([isupper(c) for c in extensions[x]]) - sum([islower(c) for c in extensions[x]]))/length(extensions[x])\n\
    \    return \"$class_name.$extensions[x]\"\nend", "    _, idx = sort(-[(count(isupper,\
    \ n) - count(islower, n)) for n in extensions])\n    return class_name * \".\"\
    \ * extensions[idx[1]]\nend", "    strengths = [-1 for i in extensions]\n    for\
    \ i in 1:length(extensions)\n        extensions[i] = symbol(extensions[i])\n \
    \       strengths[i] = Strong_Ext(extensions[i])\n    end\n    if length(extensions)\
    \ == 1\n        return class_name * \".\" * extensions[1]\n    end\n    strengths,\
    \ indexes = sort(strengths, rev=true)\n    return class_name * \".\" * extensions[indexes[1]]\n\
    end", "    strengths = [strength(ex) for ex in extensions]\n    sorted_strengths\
    \ = sort(strengths)\n    strongest_strength = sorted_strengths[end]\n    strongest_extension\
    \ = extensions[argmax(strengths)]\n    return class_name * \".\" * strongest_extension\n\
    end", "    strongest = \"\"\n    strongest_strength = 0\n    for extension in\
    \ extensions\n        caps = 0\n        smalls = 0\n        for letter in extension\n\
    \            if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                caps +=\
    \ 1\n            elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n             \
    \   smalls += 1\n            end\n        end\n        strength = caps - smalls\n\
    \        if strength > strongest_strength\n            strongest = extension\n\
    \            strongest_strength = strength\n        end\n    end\n    return \"\
    $class_name.$strongest\"\nend", "    strengths = [length(extension[x]) - length(lowercase(extension[x]))\
    \ for x in 1:length(extension)]\n    strength_index = findmax(strengths)[2]\n\
    \    return class_name * \".\" * extensions[strength_index]\nend", "    strength_list\
    \ = []\n    for (i, ext) in enumerate(extensions)\n        strength_list = vcat(strength_list,\
    \ [sum(isupper.(ext)) - sum(islower.(ext)), i])\n    end\n    index = sort(strength_list)[end][2]\
    \ + 1\n    return class_name * \".\" * extensions[index]\nend", "    @assert length(extensions)\
    \ > 0, \"You should have at least one extension!\"\n    strength_res = 0\n   \
    \ strongest_ext = \"\"\n    for ex in extensions\n        a_strength = ExStrength(ex)\n\
    \        if a_strength > strength_res\n            strength_res = a_strength\n\
    \            strongest_ext = ex\n        end\n    end\n    return \"$class_name.$strongest_ext\"\
    \nend", "    a = 0\n    length = 0\n    for string in extensions\n        c =\
    \ 0\n        s = 0\n        for ch in string\n            if (Int(ch) >= 65 &&\
    \ Int(ch) <= 90)\n                c += 1\n            else\n                s\
    \ += 1\n            end\n        end\n        if (c - s > a)\n            a =\
    \ c - s\n            length = lengthof(string)\n            class_name = string\n\
    \        elseif (c - s == a)\n            if (lengthof(string) < length)\n   \
    \             length = lengthof(string)\n                class_name = string\n\
    \            end\n        end\n    end\n    return class_name\nend", "    strength\
    \ = Dict()\n    for i in 1:length(extensions)\n        CAP = sum(isupper.(extensions[i]))\n\
    \        SM = sum(islower.(extensions[i]))\n        strength[extensions[i]] =\
    \ CAP - SM\n    end\n    strength = sort(collect(strength), by = x -> x[2])\n\
    \    return string(class_name, \".\", strength[end][1])\nend", "    strongest\
    \ = 0.0\n    strongest_ind = 0\n    for i in 1:length(extensions)\n        CAP\
    \ = count(x -> x >= 'A' && x <= 'Z', extensions[i])\n        SM = count(x -> x\
    \ >= 'a' && x <= 'z', extensions[i])\n        strength = CAP - SM\n        if\
    \ strength > strongest\n            strongest = strength\n            strongest_ind\
    \ = i\n        end\n    end\n    return \"$class_name.$(extensions[strongest_ind])\"\
    \nend", "    strength=0\n    for i in extensions\n        if strength < get_strength(i)\n\
    \            strength = get_strength(i)\n            strongest_extension = i\n\
    \        end\n    end\n    return(class_name * \".\" * strongest_extension)\n\
    end", "    if length(extensions) == 0\n        return class_name\n    end\n  \
    \  strongest_extension_name = extensions[1]\n    strongest_extension_strength\
    \ = extensions[1] |> count_uppercase - count_lowercase", "    \"\"\"Takes the\
    \ class name (String) and a vector of extensions (Strings).\n    Returns the name\
    \ of the class and the strongest extension (String).\n    \"\"\"\n    strength\
    \ = []\n    for i in 1:length(extensions)\n        count_upper_case = sum(isupper.(extensions[i]))\n\
    \        count_lower_case = sum(islower.(extensions[i]))\n        push!(strength,\
    \ count_upper_case - count_lower_case)\n    end\n    strongest_extension = extensions[indmax(strength)]\n\
    \    return \"$class_name.$strongest_extension\"\nend", "    # Your code here\n\
    end", "    # Calculate the strength of each extension\n    strengths = [count(isupper,\
    \ ex) - count(islower, ex) for ex in extensions]\n    # Find the index of the\
    \ strongest extension\n    index = findmax(strengths)[2]\n    # Return the requested\
    \ string\n    return \"$class_name.$(extensions[index])\"\nend", "    strength=0\n\
    \    strongest=\"\"\n    for i=1:length(extensions)\n        if strength<=count(extensions[i],\
    \ isupper)-count(extensions[i], islower)\n            strength=count(extensions[i],\
    \ isupper)-count(extensions[i], islower)\n            strongest=extensions[i]\n\
    \        end\n    end\n    return string(class_name, \".\", strongest)\nend",
  "    #boucle sur le vecteur d'extension\n    var = \"\"\n    for e in extensions\n\
    \        var = var + \",\" + e\n    end\n    var = split(var, \",\")\n    strong\
    \ = \"\"\n    strength = 0\n    for e in var\n        #determination de la force\
    \ de l'extension\n        extension = e\n        cap = get_upper(extension)\n\
    \        sm = get_lower(extension)\n        new_strength = cap - sm\n        if\
    \ new_strength > strength\n            strength = new_strength\n            strong\
    \ = extension\n        end\n    end\n    return class_name + \".\" + strong\n\
    end\n        ", "    strength = 0\n    extension = \"\"\n    for i in extensions\n\
    \        s = number_of_uppercase_letters(i) - number_of_lowercase_letters(i)\n\
    \        if s > strength\n            strength = s\n            extension = i\n\
    \        end\n    end\n    return \"$class_name.$extension\"\nend", "    \n  \
    \  strongest_strength::Int64 = -Inf\n    strongest_extension::String = \"\"\n\
    \    \n    for extension in extensions\n        strength::Int64 = 0\n        for\
    \ character in extension\n            if isalpha(character)\n                if\
    \ isupper(character)\n                    strength += 1\n                else\n\
    \                    strength -= 1\n                end\n            end\n   \
    \     end\n        if strength > strongest_strength\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    \n    return class_name * \".\" * strongest_extension\nend", "    #=\n  \
    \  Make an array of functions that will get the number of uppercase and lowercase\n\
    \    letters in the extension name\n    =#\n    const get_CAP_and_SM = [num_uppercase,\
    \ num_lowercase]\n    function num_uppercase(ext::String)::Int\n        count\
    \ = 0\n        for i in 1:length(ext)\n            if isupper(ext[i])\n      \
    \          count += 1\n            end\n        end\n        return count\n  \
    \  end\n    function num_lowercase(ext::String)::Int\n        count = 0\n    \
    \    for i in 1:length(ext)\n            if islower(ext[i])\n                count\
    \ += 1\n            end\n        end\n        return count\n    end\n    #=\n\
    \    Make a function that takes an extension and returns the number of uppercase\n\
    \    letters minus the number of lowercase letters\n    =#\n    function strength(ext::String)::Int\n\
    \        return get_CAP_and_SM[1](ext) - get_CAP_and_SM[2](ext)\n    end\n   \
    \ #=\n    Make a function that gets the index of the largest element in an array.\n\
    \    This is used in the event that we have two extensions with the same strength\n\
    \    =#\n    function ind_max(x::Array{Int, 1})::Int\n        imax = 1\n     \
    \   for i in 2:length(x)\n            if x[i] > x[imax]\n                imax\
    \ = i\n            end\n        end\n        return imax\n    end\n    #=\n  \
    \  Get the strengths of all of the extensions and then return the string in the\n\
    \    desired format\n    =#\n    strengths = [strength(ext) for ext in extensions]\n\
    \    return class_name * \".\" * extensions[ind_max(strengths)]\nend", "    return\
    \ class_name*\".\"*extensions[indmax(extensions_strength(extensions))]\nend",
  "    CAP = 0\n    SM = 0\n    curr_class = \"\"\n    for i in extensions\n     \
    \   for j in i\n            if j in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n           \
    \     CAP += 1\n            elseif j in 'abcdefghijklmnopqrstuvwxyz'\n       \
    \         SM += 1\n            end\n        end\n        if CAP - SM >= CAP -\
    \ SM\n            curr_class = i\n        end\n    end\n    Strongest_Extension\
    \ = class_name * \".\" * curr_class\n    return Strongest_Extension\nend", " \
    \   if length(extensions) == 0\n        return string(class_name)\n    end\n \
    \   strengths = [Extension_Strength(x) for x in extensions]\n    return string(class_name,\"\
    .\",extensions[1 + findmax(strengths)[2]])\nend", "    # 1. Create an empty dictionary\n\
    \    # 2. For each extension in extensions\n    #   a. Count the number of uppercase\
    \ characters in extension.\n    #   b. Count the number of lowercase characters\
    \ in extension.\n    #   c. Compute the strength of the extension (uppercase minus\
    \ lowercase)\n    #   d. Add the extension name and strength to the dictionary\n\
    \    # 3. Loop over the dictionary, and extract the name of the strongest extension\n\
    \    # 4. Return the string class_name + \".\" + strongest_extension_name\nend",
  "    if isempty(extensions) return class_name\n    strengths = [sum(isupper.(x))\
    \ - sum(islower.(x)) for x in extensions]\n    return \"$class_name.$(extensions[argmax(strengths)])\"\
    \nend", "    strengths = map(x -> count_uppercase(x) - count_lowercase(x), extensions)\n\
    \    strongest_idx = argmax(strengths)\n    return \"$class_name.$(extensions[strongest_idx])\"\
    \nend", "    max_extension_strength = -Inf\n    max_extension_name = \"\"\n  \
    \  for ext in extensions\n        # get the number of uppercase letters\n    \
    \    num_upper = length(filter(x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', ext))\n\
    \        # get the number of lowercase letters\n        num_lower = length(filter(x\
    \ -> x in 'abcdefghijklmnopqrstuvwxyz', ext))\n        # get the strength of the\
    \ extension\n        ext_strength = num_upper - num_lower\n        # update the\
    \ max_extension_strength\n        if ext_strength > max_extension_strength\n \
    \           max_extension_strength = ext_strength\n            max_extension_name\
    \ = ext\n        end\n    end\n    return \"$class_name.$max_extension_name\"\n\
    end", "    strength = -1 #Initialize strength variable at -1\n    output_name\
    \ = \"\" #Initialize output variable\n    for ext in extensions #Loop through\
    \ extensions\n        #Count upper and lower case letters for each extension\n\
    \        uppers = sum(char in keys(Dict('A' => 0,'B' => 0,'C' => 0,'D' => 0,'E'\
    \ => 0,'F' => 0,'G' => 0,'H' => 0,'I' => 0,'J' => 0,'K' => 0,'L' => 0,'M' => 0,'N'\
    \ => 0,'O' => 0,'P' => 0,'Q' => 0,'R' => 0,'S' => 0,'T' => 0,'U' => 0,'V' => 0,'W'\
    \ => 0,'X' => 0,'Y' => 0,'Z' => 0)) for char in ext)\n        lowers = sum(char\
    \ in keys(Dict('a' => 0,'b' => 0,'c' => 0,'d' => 0,'e' => 0,'f' => 0,'g' => 0,'h'\
    \ => 0,'i' => 0,'j' => 0,'k' => 0,'l' => 0,'m' => 0,'n' => 0,'o' => 0,'p' => 0,'q'\
    \ => 0,'r' => 0,'s' => 0,'t' => 0,'u' => 0,'v' => 0,'w' => 0,'x' => 0,'y' => 0,'z'\
    \ => 0)) for char in ext)\n        #For this extension, compare the current strength\
    \ value with the strength\n        #of the extension. If the extension is stronger,\
    \ replace the strength\n        #and output_name values with the values of the\
    \ extension.\n        if (uppers - lowers) > strength\n            strength =\
    \ uppers - lowers\n            output_name = ext\n        end\n    end\n    return\
    \ class_name * \".\" * output_name #Return the class_name and extension\nend",
  "    x = Vector{Int}()\n    for i in extensions\n        CAP = sum(isupper.(i))\n\
    \        SM = sum(islower.(i))\n        push!(x, CAP - SM)\n    end\n    class_name\
    \ * \".\" * extensions[indmax(x)]\nend", "    strengths = [sum(map(isupper, word))\
    \ - sum(map(islower, word)) for word in extensions]\n    highest_strength = maximum(strengths)\n\
    \    return class_name * \".\" * extensions[findfirst(strengths .== highest_strength)[1]]\n\
    end", "    strengths = Vector{Float64}(undef, length(extensions)) # create vector\
    \ of strengths\n    for e in 1:length(extensions)\n        # check the number\
    \ of uppercase letters in the extension's name\n        upper = length(filter(c\
    \ -> isupper(c), extensions[e]))\n        # check the number of lowercase letters\
    \ in the extension's name\n        lower = length(filter(c -> islower(c), extensions[e]))\n\
    \        strengths[e] = upper - lower\n    end\n    index = findmax(strengths)[2]\
    \ # find the index of the maximum\n    return \"$class_name.$(extensions[index])\"\
    \nend", "    \n    strength_index = ones(Int64, length(extensions))\n    #CAP\
    \ = Vector{Int64}(undef, length(extensions))\n    #SM = Vector{Int64}(undef, length(extensions))\n\
    \    #strength = Vector{Float64}(undef, length(extensions))\n    CAP = 0\n   \
    \ SM = 0\n    strength = 0\n    for i in eachindex(extensions)\n        for j\
    \ in eachindex(extensions[i])\n            if isalpha(extensions[i][j])\n    \
    \            if isupper(extensions[i][j])\n                    CAP += 1\n    \
    \            elseif islower(extensions[i][j])\n                    SM += 1\n \
    \               end\n            end\n        end\n        strength = (CAP - SM)/length(extensions[i])\n\
    \        #strength[i] = (CAP[i] - SM[i])/length(extensions[i])\n        if strength\
    \ > (CAP - SM)/length(extensions[i])\n            strength = (CAP - SM)/length(extensions[i])\n\
    \            strength_index[i] = i\n        end\n    end\n    return string(class_name,\
    \ \".\", extensions[strength_index[1]])\nend", "    best_extension = \"\"\n  \
    \  best_strength = 0\n    for e in extensions\n        strength = uppercase(e)\
    \ - lowercase(e)\n        if strength > best_strength\n            best_extension\
    \ = e\n            best_strength = strength\n        end\n    end\n    return\
    \ \"$class_name.$best_extension\"\nend\n \n \n \n\"\"\"You are given a vector\
    \ of strings and a number (target_length). The vector \n    contains only names\
    \ of people, one name for each element of the vector. \n    Your task is to return\
    \ the number of elements that have a name of length\n    at least target_length.\n\
    \    Example:\n    >>> Long_Names([\"John\", \"Pete\", \"Elon\", \"Mark\", \"\
    Jeff\"], 4)\n    2\n    \"\"\"", "    strength = Dict()\n    for extension in\
    \ extensions\n        cap_letters = sum(isupper.(extension))\n        sm_letters\
    \ = sum(islower.(extension))\n        strength[extension] = cap_letters - sm_letters\n\
    \    end\n    strongest_extension = argmax(strength)\n    return  \"$class_name.$strongest_extension\"\
    \nend", "    strength = -Inf\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        new_strength = length(filter(c -> isupper(c), extension))\
    \ - length(filter(c -> islower(c), extension))\n        if new_strength > strength\n\
    \            strength = new_strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end", "    ################################################################################\n\
    \    #                                                                       \
    \       #\n    #   Write your code here                                      \
    \                 #\n    #                                                   \
    \                           #\n    ################################################################################\n\
    end", "    strongest_extension = \"\"\n    strongest_extension_strength = -Inf\n\
    \    for ext in extensions\n        current_extension_strength = 0\n        for\
    \ ch in ext\n            if isupper(ch)\n                current_extension_strength\
    \ += 1\n            elseif islower(ch)\n                current_extension_strength\
    \ -= 1\n            end\n        end\n        if current_extension_strength >\
    \ strongest_extension_strength\n            strongest_extension_strength = current_extension_strength\n\
    \            strongest_extension = ext\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    for i = 1:length(extensions)\n   \
    \     # println(i)\n        numerator = count(isupper, extensions[i])\n      \
    \  # println(numerator)\n        denominator = count(islower, extensions[i])\n\
    \        # println(denominator)\n        if denominator == 0 \n            denominator\
    \ = 1\n        end\n        strength = numerator/denominator\n        # println(strength)\n\
    \        if strength == maximum(denominator/numerator)\n            extension\
    \ = extensions[i]\n        end\n    end\n    return \"$class_name.$extension\"\
    \nend", "    dict = Dict()\n    for ext in extensions\n        dict[ext] = sum(isuppercase.(ext))\
    \ - sum(islowercase.(ext))\n    end\n    strongest_ext = \"\"\n    strongest_value\
    \ = 0\n    for ext in extensions\n        if dict[ext] > strongest_value\n   \
    \         strongest_value = dict[ext]\n            strongest_ext = ext\n     \
    \   end\n    end\n    return \"$class_name.$strongest_ext\"\nend", "    return\
    \ \"\"\nend", "    strengths = Float64[]\n    for i in 1:length(extensions)\n\
    \        CAP = length(extensions[i]) - length(replace(extensions[i], r\"[^A-Z]\"\
    , \"\"))\n        SM = length(extensions[i]) - length(replace(extensions[i], r\"\
    [^a-z]\", \"\"))\n        strength = (CAP - SM)/length(extensions[i])\n      \
    \  push!(strengths, strength)\n    end\n    max_strength = maximum(strengths)\n\
    \    i = 1\n    while strengths[i] != max_strength\n        i += 1\n    end\n\
    \    return \"$class_name.$(extensions[i])\"\nend\n\"\"\"Coding in the Dark\n\
    \    You are given a light source, a compass, a piece of paper and a pencil. You\
    \ \n    are also given a list of moves to execute, each move can be one of the\
    \ \n    following: \"left\" - that turns the pencil left, \"right\" - that turns\
    \ the \n    pencil right, \"up\" - that moves the pencil upwards (with the direction\
    \ of the \n    pencil remaining the same), \"down\" - that moves the pencil downwards\
    \ \n    (with the direction of the pencil remaining the same), \"put\" - that\
    \ draws \n    a line from the previous position of the pencil to the current position\
    \ (if \n    the previous position is not given then a line is drawn from the center\
    \ of \n    the paper to the current position).\n    The function should return\
    \ the number of lines drawn.\n    Example:\n    >>> Coding_in_the_Dark([\"up\"\
    , \"left\", \"put\", \"down\", \"right\", \"put\"])\n    2\n    \"\"\"", "   \
    \ strengths = [extension(name) for name in extensions]\n    return class_name\
    \ * \".\" * extensions[argmax(strengths)]\nend", "    #    class_name = \"my_class\"\
    \n    #    extensions = [\"AA\", \"Be\", \"CC\"]\n    if length(extensions) ==\
    \ 0\n        return class_name\n    end\n    strengths = [ext_strength(ext) for\
    \ ext in extensions]\n    strongest_ind = argmax(strengths)\n    return class_name\
    \ * \".\" * extensions[strongest_ind]\nend", "    strength = []\n    extension_index\
    \ = []\n    for e in extensions\n        CAP = length(findall(r\"[A-Z]\", e))\n\
    \        SM = length(findall(r\"[a-z]\", e))\n        push!(strength, CAP-SM)\n\
    \        push!(extension_index, e)\n    end\n    v = strength[1]\n    f = extension_index[1]\n\
    \    for i in 2:length(strength)\n        if strength[i] > v\n            v =\
    \ strength[i]\n            f = extension_index[i]\n        end\n    end\n    return\
    \ class_name * \".\" * f\nend\n        \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n#print(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\n    ", "    return class_name\
    \ * \".\" * maximum_strength_extension(extensions)\nend", "    if length(extensions)\
    \ == 0\n        return \"\"\n    end\n    strength_list = [strength(extension)\
    \ for extension in extensions]\n    max_strength = maximum(strength_list)\n  \
    \  max_index = findfirst(strength_list, max_strength)\n    strongest_extension\
    \ = extensions[max_index]\n    return class_name * \".\" * strongest_extension\n\
    end", "    \n    max_strength = -1\n    strongest_extension = \"\"\n    \n   \
    \ for extension in extensions\n        cap = 0\n        sm = 0\n        for i\
    \ in extension\n            if(i >= 'A' && i <= 'Z')\n                cap += 1\n\
    \            elseif(i >= 'a' && i <= 'z')\n                sm += 1\n         \
    \   end\n        end\n        if((cap - sm) > max_strength)\n            max_strength\
    \ = cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    \n    return class_name * \".\" * strongest_extension\nend", "    ext_max_strength\
    \ = -2\n    strongest_extension = \"\"\n    for ext in extensions\n        ext_strength\
    \ = Ext_Strength(ext)\n        if (ext_strength > ext_max_strength)\n        \
    \    ext_max_strength = ext_strength\n            strongest_extension = ext\n\
    \        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end", "    # Return the strongest extension\n    return class_name*\".\"*strongest_extension(extensions)\n\
    end", "    strengths = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        CAP = length(join(extensions[i] .== uppercase(extensions[i])))\n    \
    \    SM = length(join(extensions[i] .== lowercase(extensions[i])))\n        strengths[i]\
    \ = CAP - SM\n    end\n    return(class_name * \".\" * extensions[argmax(strengths)])\n\
    end\n \n\"\"\"Returns the class that is the strongest extension for the two classes\
    \ given.\n    The strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n    letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n    You should find the strongest extension and return\
    \ a string in this \n    format: ClassName.StrongestExtensionName.\n    If there\
    \ are two or more extensions with the same strength, you should\n    choose the\
    \ one that comes first in the vector.\n    For example, if you are given \"Slices\"\
    \ as the class and a vector of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\
    \n    \"\"\"", "    strength = [length(regexp(string(ext), \"[A-Z]\")) - length(regexp(string(ext),\
    \ \"[a-z]\")) for ext in extensions]\n    return string(class_name, \".\", extensions[findmax(strength)[2]])\n\
    end", "    #TODO \nend", "    ...\nend\n```", "    strength::Dict{String, Float64}\
    \ = Dict{String, Float64}()\n    for i in 1:length(extensions)\n        strength[extensions[i]]\
    \ = (count(isupper, extensions[i]) - count(islower, extensions[i])) / length(extensions[i])\n\
    \    end\n    sorted_ext = sort(collect(strength), by = x -> x[2])\n    return\
    \ class_name * \".\" * sorted_ext[1][1]\nend", "    strength_list = map(ext ->\
    \ sum(isupper.(ext)) - sum(islower.(ext)), extensions)\n    indx = indmax(strength_list)\n\
    \    return \"$class_name.$(extensions[indx])\"\nend", "    sm_vec = [sum(islower.(extension))\
    \ for extension in extensions]\n    cap_vec = [sum(isupper.(extension)) for extension\
    \ in extensions]\n    strength_vec = [cap_vec[i] - sm_vec[i] for i in 1:length(extensions)]\n\
    \    strongest_extension = extensions[find(x -> x == maximum(strength_vec), strength_vec)[1]]\n\
    \    return class_name * \".\" * strongest_extension\nend", "    # Step 1: Find\
    \ the strength of the extensions\n    strengths = zeros(Float64, length(extensions))\n\
    \    for (i, extension) in enumerate(extensions)\n        strength = (sum(isupper.(extension))\
    \ - sum(islower.(extension))) / length(extension)\n        strengths[i] = strength\n\
    \    end\n    # Step 2: Find the strongest extension\n    max_index = argmax(strengths)\n\
    \    # Step 3: return the name of the class and the strongest extension\n    return\
    \ string(class_name, \".\", extensions[max_index])\nend", "    strength_of_extensions=Array{Int64}(length(extensions))\n\
    \    j=1\n    while (j <= length(extensions))\n        strength_of_extensions[j]=sum(isupper.(extensions[j]))-sum(islower.(extensions[j]))\n\
    \        j+=1\n    end\n    num,pos=findmax(strength_of_extensions)\n    return\
    \ string(class_name, \".\", extensions[pos])\nend\n \n \n\"\"\"Given a vector\
    \ of integers, return a vector of vectors, where each vector\n    has only the\
    \ elements from the input vector, which are in the first line\n    of the Pascal's\
    \ triangle.\n    The first line of the Pascal's triangle is: [1, 1, 1, 1, 1, 1,\
    \ 1]\n    Example:\n    >>> Pascal_Triangle_Top([2, 3, 5, 7, 6, 1, 4])\n    [2,\
    \ 3, 5, 7, 6, 1, 4]\n    \"\"\"", "    strengths = [count_cap(ext) - count_sm(ext)\
    \ for ext in extensions]\n    pos = findmax(strengths)[2]\n    return string(class_name,\
    \ \".\", extensions[pos])\nend", "    \"\"\"\n    Inputs: \n        class_name:\
    \ string\n        extensions: vector of strings\n    Output:\n        string\n\
    \    \"\"\"\n    # Your code here\n    # Find the strongest extension\n    strong_str\
    \ = \"\"\n    strong_ratio = 0.0\n    for ext in extensions\n        count_upper\
    \ = 0\n        count_lower = 0\n        for letter in ext\n            if letter\
    \ in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                count_upper += 1\n        \
    \    elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n                count_lower\
    \ += 1\n            end\n        end\n        ratio = count_upper - count_lower\n\
    \        if ratio > strong_ratio\n            strong_ratio = ratio\n         \
    \   strong_str = ext\n        end\n    end\n    return class_name * \".\" * strong_str\n\
    end", "    # implementation\nend\n```\n## Input / Output", "    strength = 0\n\
    \    for i in 1:length(extensions)\n        x = count(isupper,extensions[i])\n\
    \        y = count(islower,extensions[i])\n        if x-y > strength\n       \
    \     class_name = class_name * \".\" * extensions[i]\n            strength =\
    \ x-y\n        end\n    end\n    return class_name\nend", "    # initialize\n\
    \    caps, sms = 0, 0\n    max_strength = -Inf\n    strongest_extension = \"\"\
    \n    for extension in extensions\n        for char in extension\n           \
    \ if char in 'abcdefghijklmnopqrstuvwxyz'\n                sms += 1\n        \
    \    elseif char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                caps += 1\n\
    \            end\n        end\n        strength = caps - sms\n        if strength\
    \ > max_strength\n            max_strength = strength\n            strongest_extension\
    \ = extension\n        end\n        caps, sms = 0, 0\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = -Inf\n    strength_ext\
    \ = \"\"\n    for e in extensions\n        s = sum(uppercase(e)) - sum(lowercase(e))\n\
    \        if s > strength\n            strength = s\n            strength_ext =\
    \ e\n        end\n    end\n    return \"$class_name.$strength_ext\"\nend", " \
    \   CAP = 0\n    SM = 0\n    result = String(\"my_class\")\n    for i = 1:length(extensions)\n\
    \        for j = 1:length(extensions[i])\n            if isupper(extensions[i][j])\n\
    \                CAP += 1\n            elseif islower(extensions[i][j])\n    \
    \            SM += 1\n            end\n        end\n        if CAP - SM >= CAP\
    \ - SM\n            result = string(class_name, \".\", extensions[i])\n      \
    \  end\n    end\n    return result\nend", "    return class_name\nend", "    \"\
    \"\"\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n  \
    \  \"my_class.AA\"\n    \"\"\"\n    strength = 0\n    strongest_extension = \"\
    \"\n    for extension in extensions\n        s = strength_of_extension(extension)\n\
    \        if s > strength\n            strength = s\n            strongest_extension\
    \ = extension\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    strength_map = Dict()\n    class_ext = String[]\n    for ext in extensions\n\
    \        num_uppercase = length(collect(ext[i] for i in 1:length(ext) if ext[i]\
    \ in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))\n        num_lowercase = length(collect(ext[i]\
    \ for i in 1:length(ext) if ext[i] in string(\"abcdefghijklmnopqrstuvwxyz\")))\n\
    \        strength = num_uppercase - num_lowercase\n        strength_map[ext] =\
    \ strength\n    end\n    # Get the max strength in the map\n    max_value = maximum(values(strength_map))\n\
    \    for (ext, strength) in strength_map\n        if strength == max_value\n \
    \           # Get the first extension with the strongest strength\n          \
    \  push!(class_ext, ext)\n            break\n        end\n    end\n    return\
    \ class_name * \".\" * class_ext[1]\nend", "    strength_dict = Dict{String, Int}()\n\
    \    for extension in extensions\n        if isempty(extension)\n            continue\n\
    \        end\n        CAP = sum(isupper.(extension))\n        SM = sum(islower.(extension))\n\
    \        strength_dict[extension] = CAP - SM\n    end\n    sorted_strength_dict\
    \ = sort(collect(strength_dict), by=x->x[2])\n    if isempty(sorted_strength_dict)\n\
    \        return class_name\n    end\n    strongest_extension = sorted_strength_dict[end][1]\n\
    \    return string(class_name, \".\", strongest_extension)\nend", "    strength(x)\
    \ = sum(UpperCase(x)) - sum(LowerCase(x))\n    i = indmax(strength.(extensions))\n\
    \    return class_name * \".\" * extensions[i]\nend", "    strengths = []\n  \
    \  for i in 1:length(extensions)\n        strength = 0\n        for k in 1:length(extensions[i])\n\
    \            strength += isupper(extensions[i][k]) - islower(extensions[i][k])\n\
    \        end\n        append!(strengths, strength)\n    end\n    idx = argmax(strengths)\n\
    \    return string(class_name, \".\", extensions[idx])\nend", "    strength =\
    \ 0.0\n    strongest = \"\"\n    for extension in extensions\n        CAP = count(extension,\
    \ x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n        SM = count(extension, x ->\
    \ x in 'abcdefghijklmnopqrstuvwxyz')\n        st = CAP - SM\n        if st > strength\n\
    \            strength = st\n            strongest = extension\n        end\n \
    \   end\n    return string(class_name, \".\", strongest)\nend", "    # TODO -\
    \ code\nend", "    max_value = -1\n    max_index = 0\n    for i in 1:length(extensions)\n\
    \        new_value = count_upper(extensions[i]) - count_lower(extensions[i])\n\
    \        if new_value > max_value\n            max_value = new_value\n       \
    \     max_index = i\n        end\n    end\n    return class_name * \".\" * extensions[max_index]\n\
    end", "    strength(ext) = length(uppercase(ext)) - length(lowercase(ext))\n \
    \   strongest_extension = extensions[1]\n    for ext in extensions\n        if\
    \ strength(ext) > strength(strongest_extension)\n            strongest_extension\
    \ = ext\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    max_strength = 0\n    for i in 1:length(extensions)\n        ext\
    \ = extensions[i]\n        strength = length(filter(isupper, ext)) - length(filter(islower,\
    \ ext))\n        if strength > max_strength\n            max_strength = strength\n\
    \            strongest_extension = ext\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend\n \n \n \n\"\"\"You are given a vector of\
    \ names. You have to remove the name in the middle. \n    If there are several\
    \ names in the middle, remove one of them. If the vector \n    contains only one\
    \ name, return an empty vector.\n    Example:\n    >>> Middle_Name([\"A\", \"\
    B\", \"C\", \"D\", \"E\"])\n    [\"A\", \"B\", \"D\", \"E\"]\n    \"\"\"", " \
    \   # initialize variables\n    strongest_extension_strength = -Inf\n    strongest_extension_name\
    \ = \"\"\n    # define function to check the strength of each extension\n    function\
    \ get_strength(word)\n        cap = length(regexp(word, \"[A-Z]\"))\n        sm\
    \ = length(regexp(word, \"[a-z]\"))\n        return cap - sm\n    end\n    # use\
    \ for loop to iterate through each extension\n    for ext in extensions\n    \
    \    # if the strength of current extension is greater than the current strongest\
    \ extension\n        if get_strength(ext) > strongest_extension_strength\n   \
    \         # update the strongest extension name and strength\n            strongest_extension_name\
    \ = ext\n            strongest_extension_strength = get_strength(ext)\n      \
    \  end\n    end\n    # return the string of strongest extension name (Class.StrongestExtension)\n\
    \    return class_name * \".\" * strongest_extension_name\nend\nStrongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"])", "    # Calculate extension strengths\n\
    \    CAP = count(ext::Char in upper(extensions) if ext isa String)\n    SM = count(ext::Char\
    \ in lower(extensions) if ext isa String)\n    strength = CAP - SM\n    # Find\
    \ strongest\n    max = maximum(strength)\n    # Return class and name of strongest\
    \ extension\n    return class_name * \".\" * extensions[indmax(strength)]\nend\n\
    println(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]))", "    CAPs = []\n    SMs = []\n    strengths = []\n    strongest_ext = \"\
    \"\n    strongest_strength = 0\n    for ext in extensions\n        CAP = 0\n \
    \       SM = 0\n        strength = 0\n        for char in ext\n            if\
    \ char in string('A':'Z')\n                CAP += 1\n            elseif char in\
    \ string('a':'z')\n                SM += 1\n            end\n        end\n   \
    \     strength = CAP - SM\n        if strength > strongest_strength\n        \
    \    strongest_strength = strength\n            strongest_ext = ext\n        end\n\
    \    end\n    return class_name * \".\" * strongest_ext\nend", "    strength_of_extension(extension::String)\
    \ = sum(isupper.(extension)) - sum(islower.(extension))\n    sorted_extensions\
    \ = sort(extensions, by = strength_of_extension)\n    return \"$class_name.$(sorted_extensions[end])\"\
    \nend", "    strengths = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        strengths[i] = strength(extensions[i])\n    end\n    strongest_extension\
    \ = extensions[findmin(strengths)[2]]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    str_tmp = -1\n    class_tmp = \"\"\n    for i = 1:length(extensions)\n\
    \        c_tmp = count(isalpha, extensions[i])\n        l_tmp = length(extensions[i])\
    \ - c_tmp\n        strength = c_tmp - l_tmp\n        if strength > str_tmp\n \
    \           str_tmp = strength\n            class_tmp = extensions[i]\n      \
    \  end\n    end\n    return class_name * \".\" * class_tmp\nend", "    num_caps\
    \ = [count(islower, x) for x in extensions]\n    num_sm = [count(isupper, x) for\
    \ x in extensions]\n    extension_strength = [num_caps[i] - num_sm[i] for i in\
    \ 1:length(num_caps)]\n    return class_name * \".\" * extensions[extension_strength.==\
    \ minimum(extension_strength)][1]\nend", "    extend_names = []\n    strength\
    \ = []\n    for i in extensions\n        a, b = 0, 0\n        for j in i\n   \
    \         if(j in uppercase(j))\n                a += 1\n            elseif(j\
    \ in lowercase(j))\n                b += 1\n            end\n        end\n   \
    \     append!(extend_names, i)\n        append!(strength, a - b)\n    end\n  \
    \  idx = argmax(strength)\n    return string(class_name, \".\", extend_names[idx])\n\
    end\nprintln(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))\nprintln(Strongest_Extension(\"\
    her_class\", [\"AA\", \"aB\", \"cc\"]))\nprintln(Strongest_Extension(\"her_class\"\
    , [\"AA\", \"aB\", \"cc\", \"ddDDD\", \"DD\", \"ee\", \"FFF\"]))", "    extension_strengths\
    \ = zeros(length(extensions))\n    for i in 1:length(extensions)\n        CAP\
    \ = length(findall(isupper, extensions[i]))\n        SM = length(findall(islower,\
    \ extensions[i]))\n        extension_strengths[i] = CAP - SM\n    end\n    strongest_extension_index\
    \ = findmax(extension_strengths)[2]\n    return class_name * \".\" * extensions[strongest_extension_index]\n\
    end", "    strongest = 0\n    strongest_name = \"\"\n    for (i, ext) in enumerate(extensions)\n\
    \        strength = 0\n        for l in ext\n            if isalpha(l)\n     \
    \           if isupper(l)\n                    strength += 1\n               \
    \ else\n                    strength -= 1\n                end\n            end\n\
    \        end\n        if strength > strongest\n            strongest = strength\n\
    \            strongest_name = ext\n        end\n    end\n    return string(class_name,\
    \ \".\", strongest_name)\nend", "    \"\"\"\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\n    class_name =\
    \ \"my_class\"\n    extensions = [\"AA\", \"Be\", \"CC\"]\n    print(\"my_class.AA\"\
    )\n    return class_name +\".\"+ strongest_extension\nend\nend", "    # YOUR CODE\
    \ HERE\n    end", "    strengths = []\n    for extension in extensions\n     \
    \   strengths = append!(strengths, (length(upperCase(extension)) - length(lowerCase(extension))))\n\
    \    end\n    return \"my_class.$(extensions[maximum(strengths)])\"\nend", " \
    \   strength = [length(extension) - sum(isdigit(extension)) for extension in extensions]\n\
    \    return class_name * \".\" * extensions[sortperm(strength)[end]]\nend", " \
    \   max_ext = \"\"\n    max_strength = 0\n    for ext in extensions\n        sum_upper\
    \ = 0\n        sum_lower = 0\n        for c in ext\n            if isupper(c)\n\
    \                sum_upper += 1\n            elseif islower(c)\n             \
    \   sum_lower += 1\n            end\n        end\n        strength = sum_upper\
    \ - sum_lower\n        if strength > max_strength\n            max_strength =\
    \ strength\n            max_ext = ext\n        end\n    end\n    return class_name\
    \ * \".\" * max_ext\nend", "    strength = -Inf\n    strongest_extension = \"\"\
    \n    for extension in extensions\n        cap_count = sum(isupper.(extension))\n\
    \        sm_count = sum(islower.(extension))\n        curr_strength = cap_count\
    \ - sm_count\n        if curr_strength > strength\n            strength = curr_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    class_name\
    \ * \".\" * strongest_extension\nend", "    extension_counts = [(sum(isupper(extension)),\
    \ sum(islower(extension)), i) for (i, extension) in enumerate(extensions)]\n \
    \   extension_strengths = [(cap - sm, i) for (cap, sm, i) in extension_counts]\n\
    \    strongest_extension_index = findmax(extension_strengths)[2]\n    strongest_extension\
    \ = extensions[strongest_extension_index]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    max_strength = -1000\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        strength = Int(sum(extension .>= 'A')) - Int(sum(extension\
    \ .<= 'Z'))\n        if strength > max_strength\n            max_strength = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ \"$class_name.$strongest_extension\"\nend", "    if isempty(extensions)\n  \
    \      return string(class_name)\n    end\n    max_strength = -Inf\n    max_i\
    \ = 1\n    for i in 1:length(extensions)\n        strength = Extensions.strength(extensions[i])\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         max_i = i\n        end\n    end\n    return string(class_name, \".\"\
    , extensions[max_i])\nend", "    \"\"\"Strongest Extension\"\"\"\n    # your code\n\
    end\n \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"\
    my_class.AA\"\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n \n \n#### Question 3 ####\n \n\"\
    \"\"You are given a string and an integer n. You need to move the first n\n  \
    \  characters of the string to the end of the string.\n    Example:\n    >>> move_string(\"\
    some_string\", 3)\n    \"ringsome_st\"\n    \"\"\"", "    c = count(ext, isupper)\n\
    \    s = count(ext, islower)\n    for ext in extensions\n        if c > s\n  \
    \          class_name = class_name + \".\" + ext\n            return class_name\n\
    \        end\n    end\nend\n        ", "    # Your code goes here.\nend", "  \
    \  num_capitals = [Int8(x) for x in caps(extensions)]\n    num_small = [Int8(x)\
    \ for x in small(extensions)]\n    strengths = [x-y for (x,y) in zip(num_capitals,\
    \ num_small)]\n    max_strength = findmax(strengths)[1]\n    indices = findall(strengths\
    \ .== max_strength)\n    index = Int(indices[1])\n    return string(class_name,\
    \ \".\", extensions[index])\nend\n    ", "    strengths = [sum(isalpha.(toupper.(ext))\
    \ .- isalpha.(tolower.(ext))) for ext in extensions]\n    StrongestExt = extensions[argmax(strengths)]\n\
    \    return class_name * \".\" * StrongestExt\nend", "    strongest = -Inf\n \
    \   strongest_extension = \"\"\n    for i in 1:length(extensions)\n        cap\
    \ = count(x -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', extensions[i])\n        sm =\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz', extensions[i])\n        strength\
    \ = cap - sm\n        if strength > strongest\n            strongest = strength\n\
    \            strongest_extension = extensions[i]\n        end\n    end\n    return\
    \ \"$class_name.$strongest_extension\"\nend", "    max_strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in 1:length(extensions)\n        curr_strength = extension_strength(extensions[i])\n\
    \        if (curr_strength > max_strength) || (curr_strength == max_strength &&\
    \ extensions[i] < strongest_extension)\n            max_strength = curr_strength\n\
    \            strongest_extension = extensions[i]\n        end\n    end\n    return\
    \ string(class_name, \".\", strongest_extension)\nend", "    \"\"\" takes a string\
    \ class_name and a vector of extensions, returns a string \"\"\"\n    sm_vec =\
    \ zeros(Int64, length(extensions))\n    cap_vec = zeros(Int64, length(extensions))\n\
    \    for i = 1:length(extensions)\n        sm_vec[i] = sum(x -> islower(x), collect(extensions[i]))\n\
    \        cap_vec[i] = sum(x -> isupper(x), collect(extensions[i]))\n    end\n\
    \    strength_vec = cap_vec - sm_vec\n    strongest_extension = extensions[indmax(strength_vec)]\n\
    \    return string(class_name, \".\", strongest_extension)\nend\n \nprint(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))", "    \n    # find the\
    \ strength of each extension\n    extension_strengths = [0 for i in 1:length(extensions)]\n\
    \    for i in 1:length(extensions)\n        for j in 1:length(extensions[i])\n\
    \            if isupper(extensions[i][j])\n                extension_strengths[i]\
    \ += 1\n            elseif islower(extensions[i][j])\n                extension_strengths[i]\
    \ -= 1\n            end\n        end\n    end\n    \n    # find the max strength\
    \ extension\n    index_max_strength = 1\n    for i in 2:length(extension_strengths)\n\
    \        if extension_strengths[i] > extension_strengths[index_max_strength]\n\
    \            index_max_strength = i\n        end\n    end\n    return class_name\
    \ * \".\" * extensions[index_max_strength]\nend", "    \"\"\"Returns the strongest\
    \ extension string from a vector of extensions. \n    \"\"\"\n    strength = 0.0\n\
    \    extension = class_name\n    for x in extensions\n        caps = length(uppercase(x))\n\
    \        lowers = length(lowercase(x))\n        if strength < caps - lowers\n\
    \            strength = caps - lowers\n            extension = \"$class_name.$x\"\
    \n        end\n    end\n    return extension\nend", "    strengths = map(ext ->\
    \ (sum(isdigit(ext) .- islower(ext)) - sum(isdigit(ext) .- isupper(ext))), extensions)\n\
    \    max_index = findmax(strengths)[2]\n    class_name * \".\" * extensions[max_index]\n\
    end", "    strength = 0\n    index = 1\n    i = 1\n    while i <= length(extensions)\n\
    \        if caps_minus_small(extensions[i]) > strength\n            strength =\
    \ caps_minus_small(extensions[i])\n            index = i\n        end\n      \
    \  i = i + 1\n    end\n    return class_name * \".\" * extensions[index]\nend\n\
    \        ", "    r\"\"\"Return the name of the strongest extension for class_name,\
    \ in the format\n    ClassName.StrongestExtensionName.\n    If there are two or\
    \ more extensions with the same strength, you should\n    choose the one that\
    \ comes first in the vector.\n    \"\"\"\n    return class_name\nend", "    strongest\
    \ = (0, \"\")\n    for extension in extensions\n        cap, sm = 0, 0\n     \
    \   for c in extension\n            if isupper(c)\n                cap += 1\n\
    \            else\n                sm += 1\n            end\n        end\n   \
    \     strength = cap - sm\n        if strength > strongest[1]\n            strongest\
    \ = (strength, extension)\n        end\n    end\n    class_name * \".\" * strongest[2]\n\
    end", "    max_strength = -1\n    max_extension = \"\"\n    for ext in extensions\n\
    \        strength = count(isupper, ext) - count(islower, ext)\n        if strength\
    \ > max_strength\n            max_strength = strength\n            max_extension\
    \ = ext\n        end\n    end\n    return class_name * \".\" * max_extension\n\
    end", "    cap_counts = count(x -> isupper(x), extensions)\n    sm_counts = count(x\
    \ -> islower(x), extensions)\n    strengths = cap_counts - sm_counts\n    strongest_ext\
    \ = argmax(strengths)\n    return \"$class_name.$(extensions[strongest_ext])\"\
    \nend", "    class_name\nend", "    # your code here\nend", "    is_upper = x\
    \ -> x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    strength(ext) = sum(is_upper(x) for\
    \ x in ext) - sum(!is_upper(x) for x in ext)\n    strength_ext = map(strength,\
    \ extensions)\n    idx = indmax(strength_ext)\n    return class_name * \".\" *\
    \ extensions[idx]\nend", "    strengths = map(extension -> sum(isupper(extension))\
    \ - sum(islower(extension)), extensions)\n    index = findmax(strengths)[2]\n\
    \    return \"$class_name.$(extensions[index])\"\nend", "    strengths = [sum(isupper.(x))\
    \ - sum(islower.(x)) for x in extensions]\n    for i in 1:length(strengths)\n\
    \        strengths[i] = Float64(strengths[i])/length(extensions[i])\n    end\n\
    \    max_strength = argmax(strengths)\n    return class_name * \".\" * extensions[max_strength]\n\
    end", "    strength_list = []\n    for i in 1:length(extensions)\n        CAP\
    \ = sum(islower.(extensions[i]))\n        SM = sum(isupper.(extensions[i]))\n\
    \        push!(strength_list, CAP-SM)\n    end\n    index = indmax(strength_list)\n\
    \    return \"$class_name.$(extensions[index])\"\nend", "    \"\"\"\n    >>> Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\n    st\
    \ = 0.0\n    res = class_name\n    for ext in extensions\n        new_st = sum(isupper.(ext))\
    \ - sum(islower.(ext))\n        if new_st > st\n            st = new_st\n    \
    \        res = class_name * \".\" * ext\n        end\n    end\n    return res\n\
    end", " \n    \"\"\"Creates a dictionary which contains the name of the extensions\
    \ and their \n    strength.\n    \"\"\"\n    dict = Dict()\n    for i in extensions\n\
    \        dict[i] = strength(i)\n    end", "    sum_exts = [sum(isupper.(ext))-sum(islower.(ext))\
    \ for ext in extensions]\n    ext_idx = findmax(sum_exts)[2]\n    return \"$class_name.$(extensions[ext_idx])\"\
    \nend", "    strength = 0.0\n    result = \"\"\n    for extension in extensions\n\
    \        s = count_upper(extension) - count_lower(extension)\n        if s > strength\n\
    \            strength = s\n            result = extension\n        end\n    end\n\
    \    return string(class_name, \".\", result)\nend", "    strength = []\n    for\
    \ i in 1:length(extensions)\n        s = 0\n        for j in 1:length(extensions[i])\n\
    \            if isupper(extensions[i][j])\n                s = s + 1\n       \
    \     else\n                s = s - 1\n            end\n        end\n        push!(strength,s)\n\
    \    end\n    k = findmax(strength)[2]\n    return string(class_name, \".\", extensions[k])\n\
    end", "    # Returns the extension with the highest strength\n    strongest_extension\
    \ = extensions[1]\n    strongest_strength = 0\n    for extension in extensions\n\
    \        extension_strength = calculate_strength(extension)\n        if extension_strength\
    \ > strongest_strength\n            strongest_extension = extension\n        \
    \    strongest_strength = extension_strength\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    ## need to compute strength\
    \ of each extension\n    ## return class_name + strongest_extension\n    ## strenght\
    \ = CAP - SM\n    \n    ##initialize variables\n    strongest_extension = \"\"\
    \n    highest_strength = 0\n    current_strength = 0\n    \n    ## finds the strongest\
    \ extension\n    for i in 1:length(extensions)\n        current_strength = count_caps(extensions[i])\
    \ - count_smls(extensions[i])\n        if current_strength > highest_strength\n\
    \            strongest_extension = extensions[i]\n            highest_strength\
    \ = current_strength\n        end\n    end\n    \n    ## return statement\n  \
    \  class_name*\".\"*strongest_extension\nend", "    STRONGEST_EXTENSION = \"\"\
    \n    STRONGEST_EXTENSION_STRENGTH = -100\n    STRONGEST_EXTENSION_STRENGTH_UPPERCASE\
    \ = 0\n    STRONGEST_EXTENSION_STRENGTH_LOWERCASE = 0\n    STRONGEST_EXTENSION_STRENGTH_TEMP\
    \ = 0\n    STRONGEST_EXTENSION_STRENGTH_UPPERCASE_TEMP = 0\n    STRONGEST_EXTENSION_STRENGTH_LOWERCASE_TEMP\
    \ = 0\n    for extension in extensions\n        for char in extension\n      \
    \      if(char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n                STRONGEST_EXTENSION_STRENGTH_UPPERCASE_TEMP\
    \ += 1\n            elseif(char in \"abcdefghijklmnopqrstuvwxyz\")\n         \
    \       STRONGEST_EXTENSION_STRENGTH_LOWERCASE_TEMP += 1\n            end\n  \
    \      end\n        STRONGEST_EXTENSION_STRENGTH_TEMP = STRONGEST_EXTENSION_STRENGTH_UPPERCASE_TEMP\
    \ - STRONGEST_EXTENSION_STRENGTH_LOWERCASE_TEMP\n        if(STRONGEST_EXTENSION_STRENGTH_TEMP\
    \ > STRONGEST_EXTENSION_STRENGTH)\n            STRONGEST_EXTENSION = extension\n\
    \            STRONGEST_EXTENSION_STRENGTH = STRONGEST_EXTENSION_STRENGTH_TEMP\n\
    \            STRONGEST_EXTENSION_STRENGTH_UPPERCASE = STRONGEST_EXTENSION_STRENGTH_UPPERCASE_TEMP\n\
    \            STRONGEST_EXTENSION_STRENGTH_LOWERCASE = STRONGEST_EXTENSION_STRENGTH_LOWERCASE_TEMP\n\
    \        end\n        STRONGEST_EXTENSION_STRENGTH_TEMP = 0\n        STRONGEST_EXTENSION_STRENGTH_UPPERCASE_TEMP\
    \ = 0\n        STRONGEST_EXTENSION_STRENGTH_LOWERCASE_TEMP = 0\n    end\n    return\
    \ class_name * \".\" * STRONGEST_EXTENSION\nend", "    class_name_ = string(class_name)\n\
    \    strength = 0.0\n    strongest_extension = \"\"\n    for i in extensions\n\
    \        if count_capitals(i) - count_small(i) > strength\n            strength\
    \ = count_capitals(i) - count_small(i)\n            strongest_extension = i\n\
    \        end\n    end\n    return string(class_name_, \".\", strongest_extension)\n\
    end\nprintln(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))", " \
    \   return class_name * \".\" * highestStrengthExtension(extensions)\nend", " \
    \   # your code here\nend", "    i = 0\n    strongest_extension = \"\"\n    strongest_score\
    \ = 0\n    for ext in extensions\n        i = i + 1\n        CAP, SM = 0, 0\n\
    \        for c in ext\n            if isupper(c)\n                CAP = CAP +\
    \ 1\n            elseif islower(c)\n                SM = SM + 1\n            end\n\
    \        end\n        score = CAP - SM\n        if score > strongest_score\n \
    \           strongest_score = score\n            strongest_extension = ext\n \
    \       end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    num_extensions = length(extensions)\n    highest_strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in 1:num_extensions\n        extension = extensions[i]\n \
    \       strength = num_capitals(extension) - num_small(extension)\n        if\
    \ strength > highest_strength\n            highest_strength = strength\n     \
    \       strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = Dict()\n    for extension\
    \ in extensions\n        sm = 0\n        cap = 0\n        for letter in extension\n\
    \            if letter in ('a'..'z')\n                sm += 1\n            elseif\
    \ letter in ('A'..'Z')\n                cap += 1\n            end\n        end\n\
    \        strength[extension] = cap - sm\n    end\n    return class_name * \".\"\
    \ * sort(collect(keys(strength)), by=x->(strength[x],x))[end]\nend", "    # You\
    \ can add any number of lines\n    # Your function starts here:\n    \n    \n\
    \    # End of your function\nend", "    extensions_strength = [extension_strength(extension)\
    \ for extension in extensions]\n    strongest_extension_index = findmax(extensions_strength)[2]\n\
    \    return class_name * \".\" * extensions[strongest_extension_index]\nend",
  "    best_strength = -Inf\n    best_extension = \"\"\n    best_extension_index =\
    \ 0\n    for i = 1:length(extensions)\n        extension = extensions[i]\n   \
    \     strength = get_strength(extension)\n        if strength > best_strength\n\
    \            best_strength = strength\n            best_extension = extension\n\
    \            best_extension_index = i\n        end\n    end\n    return best_extension_index\
    \ == 0 ? \"No Extensions\" : \"$class_name.$best_extension\"\nend", "    # Your\
    \ code here:\n    strength = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        upper = 0\n        lower = 0\n        for j in 1:length(extensions[i])\n\
    \            if extensions[i][j] in string(\"abcdefghijklmnopqrstuvwxyz\")\n \
    \               lower += 1\n            elseif extensions[i][j] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n                upper += 1\n            end\n        end\n        strength[i]\
    \ = upper - lower\n    end\n    arg = argmax(strength)\n    return class_name\
    \ * \".\" * extensions[arg]\nend", "    strongest_extension = extensions[1]\n\
    \    strongest_strength = 0\n    for i in extensions[2:end]\n        # strength\
    \ calculation\n        num_caps = count(x -> isupper(x), i)\n        num_sm =\
    \ count(x -> islower(x), i)\n        current_strength = num_caps - num_sm\n  \
    \      if current_strength > strongest_strength\n            strongest_strength\
    \ = current_strength\n            strongest_extension = i\n        end\n    end\n\
    \    return join([class_name, \".\", strongest_extension])\nend", "    \n    nExtensions\
    \ = length(extensions)\n    strengths = zeros(nExtensions)\n    for i in 1:nExtensions\n\
    \        strengths[i] = count_letters(extensions[i])\n    end\n    indStrongest\
    \ = findall(strengths .== minimum(strengths))[1]\n    strongestExtension = extensions[indStrongest]\n\
    \    return class_name * \".\" * strongestExtension\nend", "    CAP = 0\n    SM\
    \ = 0\n    biggest = 0.0\n    x = 0\n    for i in 1:length(extensions)\n     \
    \   for j in 1:length(extensions[i])\n            if isupper(extensions[i][j])\n\
    \                CAP += 1\n            elseif islower(extensions[i][j])\n    \
    \            SM += 1\n            end\n        end\n        if (CAP - SM) > biggest\n\
    \            biggest = CAP - SM\n            x = i\n        end\n        CAP =\
    \ 0\n        SM = 0\n    end\n    return \"$class_name.$(extensions[x])\"\nend",
  "    num_uppercase = 0\n    num_lowercase = 0\n    strongest_extension = \"\"\n\
    \    strength = 0\n    for i in extensions\n        num_uppercase = sum(isupper.(string(i)))\n\
    \        num_lowercase = sum(islower.(string(i)))\n        extension_strength\
    \ = num_uppercase - num_lowercase\n        if extension_strength > strength\n\
    \            strength = extension_strength\n            strongest_extension =\
    \ i\n        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end\nprintln(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"]))", "    strongest_extension = \"\"\n    max_strength = 0.0\n    for\
    \ extension in extensions\n        strength = uppercase_letters(extension) - lowercase_letters(extension)\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         strongest_extension = extension\n        end\n    end\n    class_name\
    \ * \".\" * strongest_extension\nend", "    most_uppercase = 0\n    extension_name\
    \ = \"\"\n    for extension in extensions\n        n_uppercase = sum(isupper.(extension))\n\
    \        n_lowercase = sum(islower.(extension))\n        if n_uppercase - n_lowercase\
    \ > most_uppercase\n            most_uppercase = n_uppercase - n_lowercase\n \
    \           extension_name = extension\n        end\n    end\n    return \"$class_name.$extension_name\"\
    \nend", "    # Your code here\nend", "    # Replace pass with your code\n    m\
    \ = size(extensions)[1]\n    if m == 0\n        return class_name\n    end\n \
    \   max_extension = extensions[1]\n    max_strength = Strength(extensions[1])\n\
    \    for i = 2:m\n        if Strength(extensions[i]) > max_strength\n        \
    \    max_extension = extensions[i]\n            max_strength = Strength(extensions[i])\n\
    \        end\n    end\n    return class_name * \".\" * max_extension\nend", " \
    \   # COMPLETE\n    return \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        strength_tmp = 0\n        for\
    \ c in extension\n            if isupper(c)\n                strength_tmp += 1\n\
    \            elseif islower(c)\n                strength_tmp -= 1\n          \
    \  end\n        end\n        if strength_tmp > strength\n            strength\
    \ = strength_tmp\n            strongest_extension = extension\n        end\n \
    \   end\n    return class_name * \".\" * strongest_extension\nend", "    max_strength\
    \ = -Inf\n    strongest_extension = \"\"\n    for i in 1:length(extensions)\n\
    \        strength = (sum(extensions[i] .>= 'A') - sum(extensions[i] .<= 'z'))\
    \ / length(extensions[i])\n        if strength > max_strength\n            max_strength\
    \ = strength\n            strongest_extension = extensions[i]\n        end\n \
    \   end\n    return class_name * \".\" * strongest_extension\nend", "    strongest_extension_name::String\
    \ = \"\"; strongest_extension_strength::Float64 = 0.0; \n    for ext in extensions\n\
    \        # get CAP, SM\n        CAP::Int = 0; SM::Int = 0;\n        for c in ext\n\
    \            if c in string('A':'Z')\n                CAP += 1\n            elseif\
    \ c in string('a':'z')\n                SM += 1\n            end\n        end\n\
    \        # calculate strength\n        strength::Float64 = CAP - SM\n        #\
    \ update name and strength\n        if strength > strongest_extension_strength\n\
    \            strongest_extension_name = ext\n            strongest_extension_strength\
    \ = strength\n        end\n    end\n    if strongest_extension_name == \"\"\n\
    \        return class_name\n    else\n        return class_name * \".\" * strongest_extension_name\n\
    \    end\nend", "    CAP = 0\n    SM = 0\n    for e in extensions\n        CAP_temp\
    \ = length(filter(x -> isupper(x), e))\n        SM_temp = length(filter(x -> islower(x),\
    \ e))\n        if CAP_temp - SM_temp > CAP - SM\n            CAP = CAP_temp\n\
    \            SM = SM_temp\n            strongest_extension = e\n        end\n\
    \    end\n    return \"$class_name.$strongest_extension\"\nend", "    num_caps\
    \ = map(x -> length(regexp(x, \"[A-Z]\")), extensions)\n    num_smalls = map(x\
    \ -> length(regexp(x, \"[a-z]\")), extensions)\n    strengths = (num_caps - num_smalls)./num_smalls\n\
    \    best_ext = extensions[argmax(strengths)]\n    return \"$class_name.$best_ext\"\
    \nend", "    c = count(x->x in 'A':'Z', class_name)\n    s = count(x->x in 'a':'z',\
    \ class_name)\n    str = 0\n    for x in extensions\n        ex_c = count(y->y\
    \ in 'A':'Z', x)\n        ex_s = count(y->y in 'a':'z', x)\n        if ex_c -\
    \ ex_s > str\n            strong = x\n            str = ex_c - ex_s\n        end\n\
    \    end\n    class_name * \".\" * strong\nend", "    strength = Vector{Float64}(undef,\
    \ length(extensions))\n    for (i, ext) in enumerate(extensions)\n        strength[i]\
    \ = length(findall(ext, r\"[A-Z]\")) - length(findall(ext, r\"[a-z]\"))\n    end\n\
    \    m = findmax(strength)[2]\n    return \"$class_name.$(extensions[m])\"\nend",
  "    \"\"\"\n    This function returns the name of the strongest class, given a\
    \ \n    class name and a vector of extensions.\n    \"\"\"\n    strongest_extension\
    \ = extensions[1]\n    strongest_strength = strength(extensions[1])\n    for extension\
    \ in extensions[2:end]\n        curr_strength = strength(extension)\n        if\
    \ curr_strength > strongest_strength\n            strongest_strength = curr_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    # not the fastest implementation,\
    \ but easy to read\n    ext_strengths = [count(ext, c->c in isupper), \n     \
    \                count(ext, c->c in islower) for ext in extensions]\n    max_strength_idx\
    \ = findmax(ext_strengths[:,1] - ext_strengths[:,2])[2]\n    return \"$class_name.$(extensions[max_strength_idx])\"\
    \nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
