name: HumanEval_87_get_row
language: jl
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested vectors,\n  \
  \  which is similar to matrix, however, unlike matrices,\n    each row may contain\
  \ a different number of columns.\n    Given lst, and integer x, find integers x\
  \ in the vector,\n    and return vector of tuples, [(x1, y1), (x2, y2) ...] such\
  \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort\
  \ coordinates initially by rows in ascending order.\n    Also, sort coordinates\
  \ of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[],\
  \ [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
  \ x::Int64)::Vector{Tuple{Int64, Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    (result::Vector{Tuple{Int64, Int64}}) = Vector{Tuple{Int64, Int64}}(undef,\
    \ 0)\n    row = 0\n    for row_lst in lst\n        if x in row_lst\n         \
    \   column = count(row_lst .== x)\n            for j in findall(row_lst .== x)\n\
    \                push!(result, (row, column - j))\n            end\n        end\n\
    \        row += 1\n    end\n    sort!(result, by = t -> t[1])\n    for i in 1:length(result)\n\
    \        result[i] = sort(result[i], by = t -> t[2], rev = true)\n    end\n  \
    \  return result\nend", "    @assert length(lst) > 0 \"Length of the list is 0!\"\
    \n    coords = []\n    for i in eachindex(lst)\n        for j in eachindex(lst[i])\n\
    \            if lst[i][j] == x\n                push!(coords, (i, j))\n      \
    \      end\n        end\n    end\n    sorted_coords = sort(coords, by = x -> x[1])\n\
    \    sorted_coords_by_col = sort(sorted_coords, by = x -> x[2], rev = true)\n\
    \    return sorted_coords_by_col\nend", "    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end", "    index_list = []\n    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n\
    \            if lst[i][j] == x\n                push!(index_list, (i, j))\n  \
    \          end\n        end\n    end\n    sort!(index_list, by = x -> (x[1], -x[2]))\n\
    \    return index_list\nend", "    res = Vector{Tuple{Int64, Int64}}()\n    for\
    \ (r, v) in enumerate(lst)\n        for (c, n) in enumerate(v)\n            if\
    \ n == x\n                push!(res, (r, c))\n            end\n        end\n \
    \   end\n    sort!(res, by=x->x[1])\n    res2 = Vector{Tuple{Int64, Int64}}()\n\
    \    for (r, v) in enumerate(res)\n        push!(res2, (v[1], -v[2]))\n    end\n\
    \    sort!(res2, by=x->x[2])\n    for (r, v) in enumerate(res2)\n        res2[r]\
    \ = (v[1], -v[2])\n    end\n    return res2\nend", "  vector_aux = []\n  for i\
    \ in 1:length(lst)\n    for j in 1:length(lst[i])\n      if lst[i][j] == x\n \
    \       push!(vector_aux, (i-1, j-1))\n      end\n    end\n  end\n  sort!(vector_aux,\
    \ by=x->x[1])\n  return sort!(vector_aux, by=x->x[2], rev=true)\nend\nget_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)", "    (row_index,\
    \ column_index) = findall(x -> x == x, lst)\n    coordinate = Tuple{Int64, Int64}[(row_index[i],\
    \ column_index[i]) for i in 1:length(row_index)]\n    sort!(coordinate, by = tuple(i\
    \ -> i[1], i -> -i[2]))\n    return coordinate\nend", "    \"\"\"\n    get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}}\n    \"\"\"\n    result = Vector{Tuple{Int64,\
    \ Int64}}()\n    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n \
    \           if lst[i][j] == x\n                push!(result, (i-1, j-1))\n   \
    \         end\n        end\n    end\n    sort!(result, by = x -> x[1])\n    for\
    \ i in 1:length(result)\n        if i > 1 && result[i][1] == result[i-1][1]\n\
    \            result[i-1:i] = sort(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend", "    if lst == []\n        return\
    \ []\n    end\n    nrows = length(lst)\n    ncols = length(lst[1])\n    idx =\
    \ [j for i in 1:nrows, j in 1:ncols if lst[i][j] == x]\n    idx = sort(idx, by\
    \ = y -> ((x -> floor(x / ncols))(y), (x -> mod(x, ncols))(y)))\n    return [(x\
    \ -> floor(x / ncols))(y), (x -> mod(x, ncols))(y)] for y in idx]\nend", "   \
    \ coordinate_lst = []\n    for i = 1:length(lst)\n        for j = 1:length(lst[i])\n\
    \            if lst[i][j] == x\n                coord = (i-1, j-1)\n         \
    \       push!(coordinate_lst, coord)\n            end\n        end\n    end\n\
    \    sorted_rows = sort(coordinate_lst, by = (x -> x[1]))\n    sorted_cols = sort(sorted_rows,\
    \ by = (x -> x[2]), rev = true)\n    return sorted_cols\nend", "    ret = Tuple{Int64,\
    \ Int64}[]\n    n = length(lst)\n    for i = 1:n\n        m = length(lst[i])\n\
    \        for j = 1:m\n            if lst[i][j] == x\n                push!(ret,\
    \ (i - 1, j - 1))\n            end\n        end\n    end\n    sort!(ret, by=x->(x[1],\
    \ -x[2]))\n    return ret\nend", "    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->(x[1], -x[2]))\n    return result\nend", "    if lst == []\n        return\
    \ []\n    end\n    tuple_list = []\n    for i in 1:length(lst)\n        vector\
    \ = lst[i]\n        for j in 1:length(vector)\n            if vector[j] == x\n\
    \                tuple_list = append!(tuple_list, (i-1, j-1))\n            end\n\
    \        end\n    end\n    tuple_list = sort(tuple_list, (row, column) -> (row,\
    \ -column))\n    return tuple_list\nend", "    # Get the length of the vector\n\
    \    rows = length(lst)\n    result = Vector{Tuple{Int64, Int64}}()\n    # Cycle\
    \ through the rows\n    for row in 1:rows\n        # Cycle through the rows\n\
    \        cols = length(lst[row])\n        for col in 1:cols\n            # Check\
    \ if x == element\n            if x == lst[row][col]\n                # If it\
    \ is, add the row, col tuple to the result\n                push!(result, (row-1,\
    \ col-1))\n            end\n        end\n    end\n    return sort(result, by =\
    \ [x -> x[1], x -> -x[2]])\nend", "    row = size(lst, 1)\n    vector = Tuple{Int64,\
    \ Int64}[]\n    if row == 0\n        return vector\n    end\n    for i in 1:row\n\
    \        col = size(lst[i], 1)\n        for j in 1:col\n            if lst[i][j]\
    \ == x\n                push!(vector, (i-1, j-1))\n            end\n        end\n\
    \    end\n    sorted = sort(vector, by = [(x[1], x[2]) for x in vector])\n   \
    \ return sorted\nend", "    # initialize result vector\n    result = []\n    if\
    \ lst == []\n        return result\n    end\n    # iterate through each nested\
    \ vector\n    for i in 1:length(lst)\n        # iterate through each element of\
    \ the nested vector\n        for j in 1:length(lst[i])\n            # If the element\
    \ is equal to x, push the tuple to result\n            if lst[i][j] == x\n   \
    \             push!(result, (i-1, j-1))\n            end\n        end\n    end\n\
    \    # sort based on rows in ascending order and columns in descending order\n\
    \    sort!(result, by = (x -> x[1]), rev = false)\n    sort!(result, by = (x ->\
    \ x[2]), rev = true)\n    return result\nend", "    result = []\n    for (index_row,\
    \ row) in enumerate(lst)\n        for (index_column, value) in enumerate(row)\n\
    \            if x == value\n                push!(result, (index_row, index_column))\n\
    \            end\n        end\n    end\n    return sort(result, by = x -> (x[1],\
    \ -x[2]))\nend", "  row_vec = Vector{Tuple{Int64, Int64}}()\n  for i in eachindex(lst)\n\
    \    row = lst[i]\n    for j in eachindex(row)\n      if row[j] == x\n       \
    \ push!(row_vec, (i, j))\n      end\n    end\n  end\n  row_vec\nend", "    result\
    \ = Tuple{Int64, Int64}[]\n    for i = 1:length(lst)\n        for j = 1:length(lst[i])\n\
    \            if lst[i][j] == x\n                push!(result, (i-1, j-1))\n  \
    \          end\n        end\n    end\n    sort!(result, by=x->(x[1], -x[2]))\n\
    \    return result\nend", "    result = Vector{Tuple{Int64, Int64}}(undef, 0)\n\
    \    for i = 1:length(lst)\n        j = 1\n        while j <= length(lst[i])\n\
    \            if lst[i][j] == x\n                push!(result, (i - 1, j - 1))\n\
    \            end\n            j += 1\n        end\n    end\n    return sort(result,\
    \ by = (a, b) -> (a[1] <=> b[1], b[2] <=> a[2]))\nend\n "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
