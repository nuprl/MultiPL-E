language: jl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits(x::Vector{Int64}) = unique_digits(deepcopy(x))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpk3316ib0.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpk3316ib0.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type var\"#unique_digits#1\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpk3316ib0.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk3316ib0.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk3316ib0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpk3316ib0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type var\"#unique_digits#1\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpk3316ib0.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    not_unique = Vector{Int64}()\n    for elem in x\n        if any([typeof(x)\
    \ == Int64 for x in digits(elem)])\n            push!(not_unique, elem)\n    \
    \    end\n    end\n    return deleteat!(x, not_unique)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0b0t0ei4.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp0b0t0ei4.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [15]\n  Stacktrace:\n    [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Int64})\n      @ Base ./abstractarray.jl:691\n    [2] checkbounds\n\
    \      @ ./abstractarray.jl:656 [inlined]\n    [3] _deleteat!(a::Vector{Int64},\
    \ inds::Vector{Int64}, dltd::Base.Nowhere)\n      @ Base ./array.jl:1479\n   \
    \ [4] _deleteat!\n      @ ./array.jl:1475 [inlined]\n    [5] deleteat!\n     \
    \ @ ./array.jl:1469 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n     \
    \ @ Main /tmp/tmp0b0t0ei4.jl:19\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0b0t0ei4.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0b0t0ei4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0b0t0ei4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [152]\n  Stacktrace:\n    [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Int64})\n      @ Base ./abstractarray.jl:691\n    [2] checkbounds\n\
    \      @ ./abstractarray.jl:656 [inlined]\n    [3] _deleteat!(a::Vector{Int64},\
    \ inds::Vector{Int64}, dltd::Base.Nowhere)\n      @ Base ./array.jl:1479\n   \
    \ [4] _deleteat!\n      @ ./array.jl:1475 [inlined]\n    [5] deleteat!\n     \
    \ @ ./array.jl:1469 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n     \
    \ @ Main /tmp/tmp0b0t0ei4.jl:19\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0b0t0ei4.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0b0t0ei4.jl:25\ntest"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    y = Int64[]\n    \n    for i in x\n        digits = digits(i)\n   \
    \     is_unique = true\n        for j in digits\n            if j % 2 == 0\n \
    \               is_unique = false\n                break\n            end\n  \
    \      end\n        if is_unique == true\n            push!(y, i)\n        end\n\
    \    end\n    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzkq3b5x1.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpzkq3b5x1.jl:36\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzkq3b5x1.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzkq3b5x1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzkq3b5x1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzkq3b5x1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzkq3b5x1.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzkq3b5x1.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzkq3b5x1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzkq3b5x1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzkq3b5x1.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzkq3b5x1.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzkq3b5x1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzkq3b5x1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Ma"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    x = [i for i in x if has_even_digit(i) == false]\n    sort!(x)\n  \
    \  return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7hql6fpk.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp7hql6fpk.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(i::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmp7hql6fpk.jl:14\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7hql6fpk.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7hql6fpk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7hql6fpk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(i::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmp7hql6fpk.jl:14\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7hql6fpk.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7hql6fpk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7hql6fpk.jl:25\n  Test threw exceptio"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    odds = Vector{Int64}() \n    for i in x \n        if !(occursin(\"2\", i)\
    \ || occursin(\"4\", i) || occursin(\"6\", i) || occursin(\"8\", i) || occursin(\"\
    0\", i))\n            push!(odds, i)\n        end\n    end\n    odds\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjk6rz9u1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpjk6rz9u1.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching occursin(::String, ::Int64)\n  Closest candidates are:\n   \
    \ occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjk6rz9u1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjk6rz9u1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjk6rz9u1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpjk6rz9u1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching occursin(::String, ::Int64)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjk6rz9u1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjk6rz9u1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjk6rz9u1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpjk6rz9u1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ occursin(::String, ::Int64)\n  Closest candidates are:\n    occursin(::Union{Abstra"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filtered = filter(x) do a\n        return any(digits(a) .% 2 .== 0)\n   \
    \ end\n    return sort(x[filtered])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaodbz2yp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpaodbz2yp.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [[1422]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpaodbz2yp.jl:16\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpaodbz2yp.jl:23 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpaodbz2yp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaodbz2yp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [[152, 323, 1422, 10]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n     @ Base\
    \ ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n\
    \   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n   [4] getindex\n\
    \     @ ./abstractarray.jl:1218 [inlined]\n   [5] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpaodbz2yp.jl:16\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpaodbz2yp.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpaodbz2yp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaodbz2yp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError: attempt to\
    \ access 4-element Ve"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    vec = []\n    for i in x\n        if iseven(i) == false\n            push!(vec,\
    \ i)\n        end\n    end\n    return sort(vec)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvdl1vjzz.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpvdl1vjzz.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdl1vjzz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdl1vjzz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvdl1vjzz.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdl1vjzz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdl1vjzz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvdl1vjzz.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdl1vjzz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdl1vjzz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = zeros(Int64,0)\n    for i in x\n        if i%2 == 0\n            continue\n\
    \        elseif i%5 == 0\n            continue\n        elseif i%10 == 0\n   \
    \         continue\n        elseif i%20 == 0\n            continue\n        elseif\
    \ i%25 == 0\n            continue\n        elseif i%50 == 0\n            continue\n\
    \        elseif i%100 == 0\n            continue\n        elseif i%200 == 0\n\
    \            continue\n        elseif i%500 == 0\n            continue\n     \
    \   elseif i%1000 == 0\n            continue\n        elseif i%2000 == 0\n   \
    \         continue\n        elseif i%5000 == 0\n            continue\n       \
    \ elseif i%10000 == 0\n            continue\n        elseif i%20000 == 0\n   \
    \         continue\n        elseif i%50000 == 0\n            continue\n      \
    \  else\n            push!(y,i)\n        end\n    end\n    y = sort(y)\n    return\
    \ y\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpclcbgsta.jl:54

    '
  stdout: "test set: Test Failed at /tmp/tmpclcbgsta.jl:57\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 33] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclcbgsta.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclcbgsta.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpclcbgsta.jl:58\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclcbgsta.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclcbgsta.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpclcbgsta.jl:59\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclcbgsta.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclcbgsta.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpclcbgsta.jl:60\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclcbgsta.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclcbgsta.jl:56\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # return a sorted Vector{Int64} containing only elements of x without even\
    \ digits\n    return sort(x[(x .% 2) .!= 0])\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp074q24dg.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp074q24dg.jl:23\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp074q24dg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp074q24dg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp074q24dg.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp074q24dg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp074q24dg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp074q24dg.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp074q24dg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp074q24dg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your solution here\n    return x\nend\nx = unique_digits([15, 33, 1422,\
    \ 1])\nprintln(x)\n@testset \"Test unique_digits\" begin\n    @test unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n    @test unique_digits([152, 323, 1422, 10])\
    \ == []\nend\n \n \n \n \n \n\"\"\"Given a vector of positive integers x. return\
    \ a sorted vector of all \n    elements that hasn't any odd digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpbpk166xx.jl:18

    in expression starting at /tmp/tmpbpk166xx.jl:18

    '
  stdout: '[15, 33, 1422, 1]

    '
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    xunique = Int64[]\n    n = 0\n    for elem in x\n        if all(elem % 2\
    \ != 0 for elem in digits(elem))\n            append!(xunique, elem)\n       \
    \ end\n    end\n    xunique = sort(xunique)\n    return xunique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuivfw6pz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpuivfw6pz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuivfw6pz.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuivfw6pz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuivfw6pz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuivfw6pz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpuivfw6pz.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        push!(y, i) if !(has_even_digit(i))\n   \
    \ end\n    sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp39vr6do7.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp39vr6do7.jl:15\n\
    in expression starting at /tmp/tmp39vr6do7.jl:15\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = []\n    for i in x\n        flag = 0\n        #transform\
    \ each number from the vector into an array of chars\n        str = string(i)\n\
    \        for j in str\n            if parse(Int64, j) % 2 == 0\n             \
    \   flag = 1\n                break\n            end\n        end\n        if\
    \ flag == 0\n            push!(unique_digits, i)\n        end\n    end\n    sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    is_vowel(char) = char in ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for\
    \ el in x\n        if sum(is_vowel(char) for char in string(el)) == 0\n      \
    \      push!(res, el)\n        end\n    end\n    return sort(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpznokl7mr.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpznokl7mr.jl:27\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznokl7mr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznokl7mr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpznokl7mr.jl:28\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznokl7mr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznokl7mr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpznokl7mr.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznokl7mr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznokl7mr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpznokl7mr.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznokl7mr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznokl7mr.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if any(dig in \"02468\" for dig in string(i))\n\
    \            continue\n        else\n            push!(y, i)\n        end\n  \
    \  end\n    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    count = 0\n    for i in x\n        if contains(digits(i), 0) || contains(digits(i),\
    \ 2) || contains(digits(i), 4) || contains(digits(i), 6) || contains(digits(i),\
    \ 8)\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsfigzpvx.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpsfigzpvx.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsfigzpvx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsfigzpvx.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsfigzpvx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsfigzpvx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsfigzpvx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsfigzpvx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsfigzpvx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsfigzpvx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/s"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Array{Int64}(length(x))\n    p = 0\n    for i in 1:length(x)\n      \
    \  if !is_even(x[i])\n            p += 1\n            y[p] = x[i]\n        end\n\
    \    end\n    sort(y[1:p])\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp51_p2xzq.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp51_p2xzq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp51_p2xzq.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51_p2xzq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51_p2xzq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp51_p2xzq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp51_p2xzq.jl:13\n\
    \   [2] macro e"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Array{Int64}(0)\n    for i = 1:length(x)\n        unique\
    \ = true\n        for j = 1:length(x[i])\n            char = convert(Int64, string(x[i][j]))\n\
    \            if char % 2 == 0\n                unique = false\n            end\n\
    \        end\n        if unique\n            push!(unique_digits, x[i])\n    \
    \    end\n    end\n    sort(unique_digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpl9n1fw9r.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpl9n1fw9r.jl:33\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpl9n1fw9r.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl9n1fw9r.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl9n1fw9r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl9n1fw9r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpl9n1fw9r.jl:13\n\
    \   [2] macro e"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # call function `no_even` to filter out all even numbers\n    return sort(x[no_even(x)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9pbrkc1z.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp9pbrkc1z.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: no_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9pbrkc1z.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pbrkc1z.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pbrkc1z.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9pbrkc1z.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: no_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9pbrkc1z.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pbrkc1z.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pbrkc1z.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9pbrkc1z.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: no_even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9pbrkc1z.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9pbrkc1z.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9pbrkc1z.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9pbrkc1z.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: no_even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     "
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    n = length(x)\n    out = Vector{Int64}(undef, 0)\n    for i in 1:n\n    \
    \    if(mod(x[i], 2) == 1)\n            push!(out, x[i])\n        end\n    end\n\
    \    sort!(out)\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp03cdghpl.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp03cdghpl.jl:29\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03cdghpl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03cdghpl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp03cdghpl.jl:30\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03cdghpl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03cdghpl.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp03cdghpl.jl:31\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp03cdghpl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp03cdghpl.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # ...\n    y = []\n    for k in x\n        if !has_even_digit(k)\n      \
    \      push!(y, k)\n        end\n    end\n    return sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7uq0t013.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp7uq0t013.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7uq0t013.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uq0t013.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uq0t013.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7uq0t013.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7uq0t013.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uq0t013.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uq0t013.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7uq0t013.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7uq0t013.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uq0t013.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uq0t013.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7uq0t013.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if (i % 2 == 0) || (i % 5 == 0)\n       \
    \     continue\n        else\n            push!(y, i)\n        end\n    end\n\
    \    sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3ki14ebx.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp3ki14ebx.jl:28\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 33] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ki14ebx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ki14ebx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ki14ebx.jl:29\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ki14ebx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ki14ebx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ki14ebx.jl:30\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ki14ebx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ki14ebx.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3ki14ebx.jl:31\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ki14ebx.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3ki14ebx.jl:27\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    all_odds = []\n    for i = 1:length(x)\n        if all(even(digits(x[i])))\
    \ == false\n            push!(all_odds, x[i])\n        end\n    end\n    sort(all_odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpg_4n_2uy.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpg_4n_2uy.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg_4n_2uy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_4n_2uy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_4n_2uy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg_4n_2uy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg_4n_2uy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_4n_2uy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_4n_2uy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg_4n_2uy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg_4n_2uy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_4n_2uy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_4n_2uy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg_4n_2uy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpg_4n_2uy.jl:15\n\
    \   [2] macro"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Int64[]\n    for i in x\n        if all(dig != \"2\" && dig\
    \ != \"4\" && dig != \"6\" && dig != \"8\" && dig != \"0\" for dig in collect(string(i)))\n\
    \            push!(unique_digits, i)\n        end\n    end\n    sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp19ostsnw.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp19ostsnw.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19ostsnw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19ostsnw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp19ostsnw.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19ostsnw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19ostsnw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp19ostsnw.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19ostsnw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19ostsnw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp19ostsnw.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19ostsnw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19ostsnw.jl:25\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    r = Array{Int64}(length(x))\n    j = 0\n    for i = 1:length(x)\n       \
    \ if !contains(string(x[i]), '2') & !contains(string(x[i]), '4')\n           \
    \ & !contains(string(x[i]), '6') & !contains(string(x[i]), '8')\n            j\
    \ += 1\n            r[j] = x[i]\n        end\n    end\n    r = r[1:j]\n    sort!(r)\n\
    \    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"contains\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz8x6m2aa.jl:17\nin expression starting at /tmp/tmpz8x6m2aa.jl:17\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    z = []\n    for i in x\n        if i < 10\n            push!(z, i)\n    \
    \    elseif i > 10 && i < 100\n            if i % 2 != 0\n                push!(z,\
    \ i)\n            end\n        elseif i > 100 && i < 1000\n            if i %\
    \ 2 != 0 && i % 10 != 0\n                push!(z, i)\n            end\n      \
    \  elseif i > 1000 && i < 10000\n            if i % 2 != 0 && i % 10 != 0 && i\
    \ % 100 != 0\n                push!(z, i)\n            end\n        elseif i >\
    \ 10000 && i < 100000\n            if i % 2 != 0 && i % 10 != 0 && i % 100 !=\
    \ 0 && i % 1000 != 0\n                push!(z, i)\n            end\n        elseif\
    \ i > 100000 && i < 1000000\n            if i % 2 != 0 && i % 10 != 0 && i % 100\
    \ != 0 && i % 1000 != 0 && i % 10000 != 0\n                push!(z, i)\n     \
    \       end\n        elseif i > 1000000 && i < 10000000\n            if i % 2\
    \ != 0 && i % 10 != 0 && i % 100 != 0 && i % 1000 != 0 && i % 10000 != 0 && i\
    \ % 100000 != 0\n                push!(z, i)\n            end\n        elseif\
    \ i > 10000000 && i < 100000000\n            if i % 2 != 0 && i % 10 != 0 && i\
    \ % 100 != 0 && i % 1000 != 0 && i % 10000 != 0 && i % 100000 != 0 && i % 1000000\
    \ != 0\n                push!(z, i)\n            end\n        elseif i > 100000000\
    \ && i < 1000000000\n            if i % 2 != 0 && i % 10 != 0 && i % 100 != 0\
    \ && i % 1000 != 0 && i % 10000 != 0 && i % 100000 != 0 && i % 1000000 != 0 &&\
    \ i % 10000000 != 0\n                push!(z, i)\n            end\n        elseif\
    \ i > 1000000000 && i < 10000000000\n            if i % 2 != 0 && i % 10 != 0\
    \ && i % 100 != 0 && i % 1000 != 0 && i % 10000 != 0 && i % 100000 != 0 && i %\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxayext8t.jl:1\nin expression starting at /tmp/tmpxayext8t.jl:1\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return [x for x in x if all(map(iseven, digits(x)))]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi5yce2cp.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpi5yce2cp.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5yce2cp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5yce2cp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi5yce2cp.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi5yce2cp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi5yce2cp.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi5yce2cp.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi5yce2cp.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi5yce2cp.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = convert(Vector{Int64}, collect(0:9))\n    x_unique = Vector{Int64}()\n\
    \    for el in x\n        for i in digits\n            if el % i == 0\n      \
    \          append!(x_unique, el)\n                break\n            end\n   \
    \     end\n    end\n    return x_unique\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9h2yilsp.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp9h2yilsp.jl:30\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  DivideError: integer\
    \ division error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n \
    \  [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9h2yilsp.jl:17\n \
    \  [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h2yilsp.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h2yilsp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9h2yilsp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  DivideError: integer\
    \ division error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n \
    \  [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9h2yilsp.jl:17\n \
    \  [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h2yilsp.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h2yilsp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9h2yilsp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  DivideError: integer division\
    \ error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp9h2yilsp.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h2yilsp.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h2yilsp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9h2yilsp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return [e for e in x if !any([e in d for d in [10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90]])]\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplqk3a21t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmplqk3a21t.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqk3a21t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqk3a21t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplqk3a21t.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqk3a21t.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqk3a21t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplqk3a21t.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqk3a21t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqk3a21t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplqk3a21t.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplqk3a21t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplqk3a21t.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    function is_unique(num::Int64)::Bool\n        for digit in string(num)\n\
    \            if iseven(parse(Int64, digit))\n                return false\n  \
    \          end\n        end\n        return true\n    end\n    return sort(filter(is_unique,\
    \ x))\nend\n    \n# Tests\nprintln(unique_digits([15, 33, 1422, 1]))\nprintln(unique_digits([152,\
    \ 323, 1422, 10]))\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: '[1, 15, 33]

    Int64[]

    Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    x = filter(a -> !search(r\"(2|4|6|8|0)\", string(a)), x)\n    return\
    \ sort(x)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpncm8pcce.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpncm8pcce.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpncm8pcce.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpncm8pcce.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpncm8pcce.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpncm8pcce.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpncm8pcce.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpncm8pcce.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(a::Int64)\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpncm8pcce.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpncm8pcce.jl:24 [inlined]\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    even_digits = [0, 2, 4, 6, 8]\n    odd_digits = [1, 3, 5, 7, 9]\n    res\
    \ = Int64[]\n    for i in x\n        is_odd = true\n        if i == 0\n      \
    \      is_odd = false\n        else\n            digits = digits(i)\n        \
    \    for j in digits\n                if j in even_digits\n                  \
    \  is_odd = false\n                    break\n                end\n          \
    \  end\n        end\n        if is_odd\n            push!(res, i)\n        end\n\
    \    end\n    return sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbblasiya.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpbblasiya.jl:40\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbblasiya.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbblasiya.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbblasiya.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbblasiya.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbblasiya.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbblasiya.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbblasiya.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbblasiya.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbblasiya.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbblasiya.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbblasiya.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbblasiya.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpbblasiya.jl:21\n\
    \   ["
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #write your code here\n    x_filtered = []\n    for i in x\n        j = i\n\
    \        while j > 0\n            if mod(j,2) == 0\n                break\n  \
    \          end\n            j = div(j,10)\n        end\n        if j == 0\n  \
    \          push!(x_filtered,i)\n        end\n    end\n    sort(x_filtered)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"Function the returns all numbers with all odd digits.\"\"\"\n    y=Int64[]\n\
    \    for i in x\n        while i>0\n            if i%2==0\n                break\n\
    \            end\n            i = div(i,10)\n        end\n        if i==0\n  \
    \          push!(y,i)\n        end\n    end\n    sort(y)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdyzuetwf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpdyzuetwf.jl:33\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyzuetwf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyzuetwf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdyzuetwf.jl:35\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyzuetwf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyzuetwf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdyzuetwf.jl:36\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdyzuetwf.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpdyzuetwf.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977962
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_unique = Int64[]\n    for i in x\n        is_unique = true\n        for\
    \ j in digits(i)\n            if j%2 == 0\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique\n \
    \           push!(x_unique, i)\n        end\n    end\n    return sort(x_unique)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    xunique = filter(!contains(Int64, x))\n    sort(xunique)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5ah0ezvb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp5ah0ezvb.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Type{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp5ah0ezvb.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ah0ezvb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ah0ezvb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5ah0ezvb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Type{Int64}, ::Vector{Int64})\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp5ah0ezvb.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ah0ezvb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ah0ezvb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5ah0ezvb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Type{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/uti"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    Y = Int[]\n    for i = 1:length(x)\n        if !has_even_digit(x[i]) \n \
    \           push!(Y, x[i])\n        end\n    end\n    return sort(Y)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgvwawvua.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgvwawvua.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgvwawvua.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvwawvua.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvwawvua.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgvwawvua.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgvwawvua.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvwawvua.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvwawvua.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgvwawvua.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgvwawvua.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvwawvua.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvwawvua.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgvwawvua.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = Int64[]\n    for i in x\n        if i < 10 \n            push!(res,\
    \ i)\n        elseif i < 100\n            if (rem(i, 10) != 0) && (rem(i, 2) !=\
    \ 0)\n                push!(res, i)\n            end\n        elseif i < 1000\n\
    \            if (rem(i, 10) != 0) && (rem(i, 2) != 0) && (rem(i, 100) != 0)\n\
    \                push!(res, i)\n            end\n        else\n            if\
    \ (rem(i, 10) != 0) && (rem(i, 2) != 0) && (rem(i, 100) != 0) && (rem(i, 1000)\
    \ != 0)\n                push!(res, i)\n            end\n        end\n    end\n\
    \    sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmg_xcu9n.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpmg_xcu9n.jl:39\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg_xcu9n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg_xcu9n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmg_xcu9n.jl:40\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg_xcu9n.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg_xcu9n.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmg_xcu9n.jl:41\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg_xcu9n.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg_xcu9n.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # find unique numbers\n    unique_x = unique(x)\n    # initialize and allocate\
    \ a vector\n    result = zeros(Int64, length(unique_x))\n    j = 1\n    # loop\
    \ over each element of unique\n    for i in unique_x\n        if iseven(i) ==\
    \ false\n            result[j] = i\n            j += 1\n        end\n    end\n\
    \    return sort(result[1:j-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfqpzlke8.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpfqpzlke8.jl:33\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpzlke8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpzlke8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfqpzlke8.jl:34\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpzlke8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpzlke8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfqpzlke8.jl:35\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpzlke8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpzlke8.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    s = Set([])\n    for e in x\n        if !has_even_digit(e)\n            push!(s,\
    \ e)\n        end\n    end\n    sort(collect(s))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpg35q3644.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpg35q3644.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg35q3644.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35q3644.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35q3644.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg35q3644.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg35q3644.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35q3644.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35q3644.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg35q3644.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg35q3644.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35q3644.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35q3644.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpg35q3644.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977963
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = []\n    for y in x\n        if any(i % 2 == 0 for i in digits(y)) ==\
    \ false\n            push!(res, y)\n        end\n    end\n    return sort(res)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977960
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for a in x\n        if all(mod.(div(a, 10.^(0:floor(log10(a)))),\
    \ 2) .!= 0)\n            push!(y, a)\n        end\n    end\n    sort(y)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"10.^\"; add space(s) to clarify\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8bm36sbs.jl:15\nin expression\
    \ starting at /tmp/tmp8bm36sbs.jl:15\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # store the output\n    res = Int64[]\n    for a in x\n        # store the\
    \ digits of a\n        x = Int64[]\n        while a > 0\n            push!(x,\
    \ a % 10)\n            a = div(a, 10)\n        end\n        # check if all digits\
    \ of a are odd\n        push!(res, a) if all(a % 2 != 0 for a in x)\n    end\n\
    \    # return the result\n    return sort(res)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc4nwm5oa.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4nwm5oa.jl:23\n\
    in expression starting at /tmp/tmpc4nwm5oa.jl:23\n"
  stdout: ''
  timestamp: 1659977961
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    iseven(x) = all( x[i] % 2 != 0 for i in 1:endof(x) )\n    unique_digits =\
    \ Array(Int64, 0)\n    for i in x\n        y = digits(i)\n        if iseven(y)\n\
    \            push!(unique_digits, i)\n        end\n    end\n    sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphst7wm8m.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmphst7wm8m.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching Array(::Type{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   Array(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmphst7wm8m.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphst7wm8m.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphst7wm8m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphst7wm8m.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching Array(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmphst7wm8m.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphst7wm8m.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphst7wm8m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphst7wm8m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ Array(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stack"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # return your answer here\n    return [i for i in x if sum(digits(i) .% 2\
    \ .== 0) == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv9_9uil_.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpv9_9uil_.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv9_9uil_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv9_9uil_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv9_9uil_.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv9_9uil_.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpv9_9uil_.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # must be of type Int64\n    # Vector{Int64} == Array{Int64, 1}\n    noevens\
    \ = Int[]\n    for i in x\n        if ! has_even(i)\n            push!(noevens,\
    \ i)\n        end\n    end\n    sort(noevens)\nend\nunique_digits([15, 33, 1422,\
    \ 1])\nunique_digits([152, 323, 1422, 10])\n \nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: has_even not defined\nStacktrace:\n [1]\
    \ unique_digits(x::Vector{Int64})\n   @ Main /tmp/tmpfvbr5qw7.jl:17\n [2] top-level\
    \ scope\n   @ /tmp/tmpfvbr5qw7.jl:23\nin expression starting at /tmp/tmpfvbr5qw7.jl:23\n"
  stdout: ''
  timestamp: 1659977962
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9a9dph5c.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9a9dph5c.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9a9dph5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9a9dph5c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9a9dph5c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9a9dph5c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9a9dph5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9a9dph5c.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Int64[]\n    for i in x\n        if(is_even(i) == false)\n\
    \            push!(unique_digits, i)\n        end\n    end\n    sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcsrf_gf_.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpcsrf_gf_.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcsrf_gf_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsrf_gf_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsrf_gf_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcsrf_gf_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcsrf_gf_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsrf_gf_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsrf_gf_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcsrf_gf_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcsrf_gf_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsrf_gf_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsrf_gf_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcsrf_gf_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcsrf_gf_.jl:15\n"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x[not.(in.(digit.(x), [0, 2, 4, 6, 8]))])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkp90ov85.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpkp90ov85.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkp90ov85.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp90ov85.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp90ov85.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkp90ov85.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkp90ov85.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp90ov85.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp90ov85.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkp90ov85.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpkp90ov85.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp90ov85.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp90ov85.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkp90ov85.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digit not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpkp90ov85.jl:13\n\
    \   [2] m"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    u = unique(x)\n    new_u = []\n    for num in u\n        if all(string(num)[i]\
    \ % 2 != 0 for i in 1:length(string(num)))\n            push!(new_u, num)\n  \
    \      end\n    end\n    sort(new_u)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjx1dtogw.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpjx1dtogw.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Char, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(i::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n\
    \      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n\
    \    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpjx1dtogw.jl:16\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpjx1dtogw.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpjx1dtogw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjx1dtogw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Char, ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\"{Int64})(i::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n\
    \      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n\
    \    [5] all\n      @ ./reduce.jl:1070 [inlined]\n"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_elements = Set{Int64}()\n    odd_elements = Set{Int64}()\n    # odd_elements_vector\
    \ = Vector{Int64}()\n    for i in x\n        convert(Set{Int64}, digits(i)) ===\
    \ unique_elements && push!(odd_elements, i)\n    end\n    sort(odd_elements)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5kluv1aa.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp5kluv1aa.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Set{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractSet\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:433\n    convert(::Type{T},\
    \ !Matched::AbstractSet) where T<:AbstractSet at ~/.conda/envs/polyglot/share/julia/base/set.jl:434\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp5kluv1aa.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kluv1aa.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kluv1aa.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5kluv1aa.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Set{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractSet\
    \ at ~/.conda/envs/polyglot/share/julia/base/set.jl:433\n    convert(::Type{T},\
    \ !Matched::AbstractSet) where T<:AbstractSet at ~/.conda/envs/polyglot/share/julia/base/set.jl:434\n\
    \    convert(::Type{T}, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp5kluv1aa.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kluv1aa.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kluv1aa"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return filter(x -> all(i -> i % 2 != 0, digits(x)), x)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptssjxmtx.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmptssjxmtx.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptssjxmtx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptssjxmtx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptssjxmtx.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptssjxmtx.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptssjxmtx.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_res = Int64[]\n    for i in x\n        digit_res = true\n        while\
    \ i >= 1\n            if rem(i, 2) == 0\n                digit_res = false\n \
    \               break\n            end\n            i = div(i, 10)\n        end\n\
    \        if digit_res\n            push!(x_res, i)\n        end\n    end\n   \
    \ return sort(x_res)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp131srfds.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp131srfds.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp131srfds.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp131srfds.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp131srfds.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp131srfds.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp131srfds.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp131srfds.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp131srfds.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp131srfds.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # convert vector elements to string\n    x_str = string.(x)\n    # find even\
    \ digits\n    even_digits = [\"2\", \"4\", \"6\", \"8\", \"0\"]\n    # find elements\
    \ having even digits\n    x_str_has_even_digits = [x_str[i] for i in 1:length(x_str)\
    \ if any(x_str[i] .== even_digits)]\n    if length(x_str_has_even_digits) != 0\n\
    \        # remove elements having even digits from the original vector\n     \
    \   x_no_even_digits = x .- parse.(Int64, x_str_has_even_digits)\n        # sort\
    \ the vector with unique digits\n        return sort(x_no_even_digits)\n    else\n\
    \        return sort(x)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu9xjg04n.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpu9xjg04n.jl:33\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9xjg04n.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9xjg04n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9xjg04n.jl:34\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9xjg04n.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9xjg04n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9xjg04n.jl:35\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9xjg04n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9xjg04n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu9xjg04n.jl:36\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9xjg04n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9xjg04n.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977965
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # First, we filter out all the integers that have an even digit\n    output\
    \ = filter(x) do i\n        # Check if any of the digits of i are even.\n    \
    \    # We use the % operator in order to extract each digit of the number.\n \
    \       # Note: This function is written recursively to allow for any number of\
    \ digits.\n        function has_even_digit(i::Int64)::Bool\n            return\
    \ i < 10 ? i % 2 == 0 : (i % 2 == 0) || has_even_digit(i \xF7 10)\n        end\n\
    \        !has_even_digit(i)\n    end\n    # Then, we sort this list in ascending\
    \ order.\n    return sort(output)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if all(ismatch.(r\"\\d\", collect(string(i))).==false)\n\
    \            push!(y, i)\n        end\n    end\n    return sort(y)\nend\n    \
    \    \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_rfnqgtu.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp_rfnqgtu.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_rfnqgtu.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rfnqgtu.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rfnqgtu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_rfnqgtu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_rfnqgtu.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rfnqgtu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rfnqgtu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_rfnqgtu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismatch not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_rfnqgtu.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_rfnqgtu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_rfnqgtu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_rfnqgtu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp_rfnqgtu.jl:15\n"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    k = []\n    for i in x\n        if contains_even_digit(i) == false\n    \
    \        push!(k, i)\n        end\n    end\n    return sort(k)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpn0bytmma.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpn0bytmma.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: contains_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0bytmma.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0bytmma.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0bytmma.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0bytmma.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: contains_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0bytmma.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0bytmma.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0bytmma.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0bytmma.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: contains_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0bytmma.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0bytmma.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0bytmma.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0bytmma.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: contains_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Ve"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(filter(y -> length(findall(isodd, digits(y))) == length(digits(y)),\
    \ x)));\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp7ogyi0sb.jl:12 expected\
    \ \"end\", got \")\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ogyi0sb.jl:13\n\
    in expression starting at /tmp/tmp7ogyi0sb.jl:13\n"
  stdout: ''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_odd = []\n    for i in x\n        if isodd(i)\n            push!(x_odd,\
    \ i)\n        end\n    end\n    x_odd\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5vturrgm.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp5vturrgm.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vturrgm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vturrgm.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5vturrgm.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vturrgm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vturrgm.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5vturrgm.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vturrgm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vturrgm.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5vturrgm.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5vturrgm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5vturrgm.jl:25\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # All even numbers between 0 and 10\n    evens = [0, 2, 4, 6, 8]\n    # Loop\
    \ through each element in x\n    for i in 1:length(x)\n        # Loop through\
    \ all evens\n        for k in 1:length(evens)\n            # If the element has\
    \ an even digit\n            if contains(string(x[i]), string(evens[k]))\n   \
    \             # Delete the whole element\n                deleteat!(x, i)\n  \
    \          end\n        end\n    end\n    # Sort the remainder of the vector\n\
    \    sort!(x)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgxmoa8bj.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpgxmoa8bj.jl:34\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmpgxmoa8bj.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxmoa8bj.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxmoa8bj.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgxmoa8bj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmpgxmoa8bj.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxmoa8bj.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxmoa8bj.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgxmoa8bj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError: attempt to\
    \ access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmpgxmoa8bj.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxmoa8bj.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxmoa8bj.jl:33\ntest set:\
    \ Er"
  timestamp: 1659977966
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Int64[]\n    for i in x\n        s = string(i)\n        s = split(s,\
    \ \"\")\n        if all(i in [\"1\", \"3\", \"5\", \"7\", \"9\"] for i in s)\n\
    \            push!(y, i)\n        end\n    end\n    sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977963
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    one_digit_numbers = [i for i in x if i<10];\n    two_digit_numbers = [i for\
    \ i in x if i>=10 && i<100];\n    three_digit_numbers = [i for i in x if i>=100\
    \ && i<1000];\n    four_digit_numbers = [i for i in x if i>=1000 && i<10000];\n\
    \    five_digit_numbers = [i for i in x if i>=10000 && i<100000];\n    six_digit_numbers\
    \ = [i for i in x if i>=100000 && i<1000000];\n    seven_digit_numbers = [i for\
    \ i in x if i>=1000000 && i<10000000];\n    eight_digit_numbers = [i for i in\
    \ x if i>=10000000 && i<100000000];\n    nine_digit_numbers = [i for i in x if\
    \ i>=100000000 && i<1000000000];\n    ten_digit_numbers = [i for i in x if i>=1000000000\
    \ && i<10000000000];\n    # Maybe this can be improved\n    one_digit_result =\
    \ sort(one_digit_numbers);\n    two_digit_result = sort([i for i in two_digit_numbers\
    \ if i%2!=0]);\n    three_digit_result = sort([i for i in three_digit_numbers\
    \ if i%2!=0 && (div(i,10)%2)!=0 && (div(i,100)%2)!=0]);\n    four_digit_result\
    \ = sort([i for i in four_digit_numbers if i%2!=0 && (div(i,10)%2)!=0 && (div(i,100)%2)!=0\
    \ && (div(i,1000)%2)!=0]);\n    five_digit_result = sort([i for i in five_digit_numbers\
    \ if i%2!=0 && (div(i,10)%2)!=0 && (div(i,100)%2)!=0 && (div(i,1000)%2)!=0 &&\
    \ (div(i,10000)%2)!=0\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp1e9v3ayq.jl:29\nin expression starting at /tmp/tmp1e9v3ayq.jl:29\n"
  stdout: ''
  timestamp: 1659977964
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(filt(y -> !any(i -> iseven(i), digits(y)), x))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsnlqokmp.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpsnlqokmp.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: filt\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsnlqokmp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnlqokmp.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnlqokmp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnlqokmp.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: filt\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsnlqokmp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnlqokmp.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnlqokmp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnlqokmp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: filt not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsnlqokmp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnlqokmp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnlqokmp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnlqokmp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: filt not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsnlqokmp.jl:13\n\
    \   [2] macro"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        if has_even_digit(i) \n            deleteat!(x, findall(x\
    \ .== i))\n        end\n    end\n    x\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpiia5jgd1.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpiia5jgd1.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiia5jgd1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiia5jgd1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiia5jgd1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiia5jgd1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiia5jgd1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiia5jgd1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiia5jgd1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiia5jgd1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiia5jgd1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiia5jgd1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiia5jgd1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiia5jgd1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977966
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # YOUR CODE HERE\nend\nprintln(unique_digits([15, 33, 1422, 1]))\nprintln(unique_digits([152,\
    \ 323, 1422, 10]))\n \n \n#######################################################################\n\
    ########################### Problem 6 ################################\n#######################################################################\n\
    \"\"\"An array x is said to be palindromic if x == reverse(x). Given a vector\
    \ \n    of positive integers x. return a sorted vector of all palindromic\n  \
    \  elements.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\nClosest candidates are:\n  convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n  convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n  convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n  ...\nStacktrace:\n
    [1] unique_digits(x::Vector{Int64})\n   @ '''
  stdout: None
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Int64[]\n    for i in x\n        if i == 0\n            continue\n  \
    \      end\n        while i > 0\n            if i % 2 == 0\n                i\
    \ = -1\n                break\n            end\n            i = i / 10\n     \
    \   end\n        if i != -1\n            push!(y, i)\n        end\n    end\n \
    \   return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpftmc64zh.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpftmc64zh.jl:36\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpftmc64zh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpftmc64zh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpftmc64zh.jl:37\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpftmc64zh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpftmc64zh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpftmc64zh.jl:38\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0, 0, 0] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpftmc64zh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpftmc64zh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpftmc64zh.jl:39\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpftmc64zh.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpftmc64zh.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x[map(i -> i % 2 == 1, map(i -> Int(digits(i, 10)[end]), x))])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqdbada2n.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpqdbada2n.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Int64, ::Int64)\n  Closest candidates are:\n    digits(::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ ::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main /tmp/tmpqdbada2n.jl:13\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpqdbada2n.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpqdbada2n.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpqdbada2n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqdbada2n.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Int64, ::Int64)\n  Closest candidates are:\n    digits(::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ ::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main /tmp/tmpqdbada2n.jl:13\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect\n    \
    \  @ ./array.jl:744 [inlined]\n    [4] collect_similar\n      @ ./array.jl:653\
    \ [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpqdbada2n.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.j"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Vector of unique-digit numbers\n    unique_digit_numbers = []\n    for\
    \ num in x\n        # If the number doesn't have any even digit, add to unique_digit_numbers\n\
    \        if !has_even_digit(num)\n            push!(unique_digit_numbers, num)\n\
    \        end\n    end\n    # Return sorted vector of unique-digit numbers\n  \
    \  sort(unique_digit_numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6mdjer31.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp6mdjer31.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6mdjer31.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mdjer31.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mdjer31.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6mdjer31.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6mdjer31.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mdjer31.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mdjer31.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6mdjer31.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6mdjer31.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mdjer31.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mdjer31.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6mdjer31.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = []\n    for num in x\n        num_str = string(num)\n   \
    \     while num_str != \"\":\n            if num_str[end] in [\"0\", \"2\", \"\
    4\", \"6\", \"8\"]\n                break\n            end\n            num_str\
    \ = num_str[1:end-1]\n        end\n        if num_str == \"\"\n            push!(unique_digits,\
    \ num)\n        end\n    end\n    sort(unique_digits)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p5i9fl2.jl:17\nin expression starting at\
    \ /tmp/tmp5p5i9fl2.jl:17\n"
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = findall(i -> !any(dig in \"02468\" for dig in string(i)), x)\n    sort(y)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp4flbapk.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpp4flbapk.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 2, 4] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4flbapk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4flbapk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp4flbapk.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [3, 4] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4flbapk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4flbapk.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp4flbapk.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [1, 3] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp4flbapk.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpp4flbapk.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = x[map(is_unique_digit, x)]\n    sort(y)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9g4m1_t4.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp9g4m1_t4.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9g4m1_t4.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9g4m1_t4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9g4m1_t4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9g4m1_t4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9g4m1_t4.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9g4m1_t4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9g4m1_t4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9g4m1_t4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9g4m1_t4.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9g4m1_t4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9g4m1_t4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9g4m1_t4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: is_unique_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n   "
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    not_even_set = Set()\n    even_set = Set()\n    for i in x\n        (i %\
    \ 2 == 0) ? push!(even_set, i) : push!(not_even_set, i)\n    end\n    return Vector(not_even_set)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjg_8ole5.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpjg_8ole5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Vector)(::Set{Any})\n  Closest candidates are:\n    (Vector)()\
    \ at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjg_8ole5.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjg_8ole5.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjg_8ole5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjg_8ole5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Vector)(::Set{Any})\n  Closest candidates are:\n    (Vector)() at\
    \ ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpjg_8ole5.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjg_8ole5.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjg_8ole5.jl:24\ntest "
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return x[all(i -> i % 2 != 0, \n                map(digits, x))]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppoqdr5zk.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppoqdr5zk.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Vector{Int64})\n     @ Main\
    \ /tmp/tmppoqdr5zk.jl:13\n   [2] _all\n     @ ./reduce.jl:1157 [inlined]\n   [3]\
    \ #all#757\n     @ ./reducedim.jl:902 [inlined]\n   [4] all\n     @ ./reducedim.jl:902\
    \ [inlined]\n   [5] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmppoqdr5zk.jl:13\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppoqdr5zk.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmppoqdr5zk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppoqdr5zk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Vector{Int64})\n     @ Main\
    \ /tmp/tmppoqdr5zk.jl:13\n   [2] _all\n     @ ./reduce.jl:1157 [inlined]\n   [3]\
    \ #all#757\n     @ ./reducedim.jl:902 [inlined]\n   [4] all\n     @ ./reducedim.jl:902\
    \ [inlined]\n   [5] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmppoqdr"
  timestamp: 1659977968
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    isunique = Set{Int64}()\n    for digit in string.(x)\n        if !(any([parse(Int64,digit[i])\
    \ % 2 == 0 for i in 1:length(digit)]))\n            push!(isunique, parse(Int64,digit))\n\
    \        end\n    end\n    return sort(collect(isunique))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filter(v -> !any(i -> iseven(i), digits(v)), x)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd5o044jf.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpd5o044jf.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5o044jf.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5o044jf.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd5o044jf.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd5o044jf.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd5o044jf.jl:19\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Your code here...\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp6949fgbk.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp6949fgbk.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp6949fgbk.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6949fgbk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6949fgbk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6949fgbk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp6949fgbk.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6949fgbk.jl:22 [inlined]\n\
    \   [4] "
  timestamp: 1659977969
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # Find all elements that don't have even digits\n    y = filter(x)\
    \ do xi\n        for digit in digits(xi)\n            if digit % 2 == 0\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    end\n    \n    # Sort that vector\n    return sort(y)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977965
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if !contains(i, y) & all(digits(i) .% 2 .!=\
    \ 0)\n            push!(y, i)\n        end\n    end\n    return sort(y)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4tvkxsba.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4tvkxsba.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Int64, ::Vector{Any})\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4tvkxsba.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tvkxsba.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tvkxsba.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4tvkxsba.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Int64, ::Vector{Any})\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n  Stacktrace:\n\
    \   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp4tvkxsba.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tvkxsba.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tvkxsba.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4tvkxsba.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ contains(::Int64, ::Vector{Any})\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = Vector{Int64}()\n    for value in x\n        if !has_even_digit(value)\n\
    \            push!(res, value)\n        end\n    end\n    sort(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5jao_x9l.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp5jao_x9l.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5jao_x9l.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jao_x9l.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jao_x9l.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5jao_x9l.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5jao_x9l.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jao_x9l.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jao_x9l.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5jao_x9l.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5jao_x9l.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jao_x9l.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jao_x9l.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5jao_x9l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977968
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_unique = filter(x) do a\n        !any(digits(a) .% 2 .== 0)\n    end\n\
    \    sort(x_unique)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x[map(lambda x: !any(elem in (\"0\", \"2\", \"4\", \"6\", \"\
    8\") for elem in string(x)), x)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvucxu876.jl:13\nin expression starting at\
    \ /tmp/tmpvucxu876.jl:13\n"
  stdout: ''
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return x[findall(i -> !occursin(\"2\", string(i)), x)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpejrb_vb8.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpejrb_vb8.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejrb_vb8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejrb_vb8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpejrb_vb8.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejrb_vb8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejrb_vb8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpejrb_vb8.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejrb_vb8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejrb_vb8.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977968
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = map(string, x)\n    x = filter(n -> !occursin(\"2\", n) && !occursin(\"\
    4\", n) && !occursin(\"6\", n) && !occursin(\"8\", n) && !occursin(\"0\", n),\
    \ x)\n    return sort(parse.(Int64, x))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977966
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    fx = x[x .% 2 == 1]\n    fx = [y for y in fx if ~contains(digits(y),2) &&\
    \ ~contains(digits(y),4) && ~contains(digits(y),6) && ~contains(digits(y),8) &&\
    \ ~contains(digits(y),0)]\n    sort(fx)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph9zn0g8j.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmph9zn0g8j.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  ArgumentError: invalid\
    \ index: false of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @\
    \ Base ./indices.jl:293\n    [2] to_index(A::Vector{Int64}, i::Bool)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:330 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1221 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmph9zn0g8j.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmph9zn0g8j.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmph9zn0g8j.jl:21\ntest set:\
    \ Error During Test at /tmp/tmph9zn0g8j.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  ArgumentError: invalid\
    \ index: false of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @\
    \ Base ./indices.jl:293\n    [2] to_index(A::Vector{Int64}, i::Bool)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:330 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1221 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmph9zn0g8j.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmph9zn0g8j.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmph9zn0g8j.jl:21\ntest set:\
    \ Error During Test at /tmp/tmph9zn0g8j.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  ArgumentError: invalid index:\
    \ false of type Bool\n  Stacktrace:\n    [1"
  timestamp: 1659977969
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    answer = []\n    for i in x\n        if(sum(isodd.(digits(i))) == length(digits(i)))\n\
    \            push!(answer, i)\n        end\n    end\n    sort(answer)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977967
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    tmp=[]\n    for val in x\n        if(isEven(val))\n            continue\n\
    \        else\n            push!(tmp,val)\n        end\n    end\n    return sort(tmp)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_t9mt45_.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_t9mt45_.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: isEven\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_t9mt45_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t9mt45_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t9mt45_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_t9mt45_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: isEven\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_t9mt45_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t9mt45_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t9mt45_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_t9mt45_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: isEven not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_t9mt45_.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_t9mt45_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_t9mt45_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_t9mt45_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: isEven not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp_t9mt45_.jl:15\n\
    \   ["
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\n    new_x = []\n    for i in x\n        count = 0\n   \
    \     for j in string(i)\n            if int(j) % 2 == 0\n                count\
    \ += 1\n            end\n        end\n        if count == 0\n            push!(new_x,\
    \ i)\n        end\n    end\n    sort(new_x)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7li8m796.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp7li8m796.jl:33\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: int\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7li8m796.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7li8m796.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7li8m796.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7li8m796.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: int not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7li8m796.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7li8m796.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7li8m796.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7li8m796.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7li8m796.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7li8m796.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7li8m796.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7li8m796.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: int not defined\n \
    \ Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7li8m796.jl:18\n\
    \   [2] macro exp"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpklvzyyza.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpklvzyyza.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpklvzyyza.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklvzyyza.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklvzyyza.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpklvzyyza.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpklvzyyza.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklvzyyza.jl:22 [inlined]\n\
    \   [4] "
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    Check if digits are all odd.\n    \"\"\"\n    function all_odd(i::Int64)::Bool\n\
    \        for j in digits(i)\n            if j % 2 == 0\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    \"\"\"\
    \n    Return an integer vector of all numbers with odd digits.\n    \"\"\"\n \
    \   return [i for i in x if all_odd(i)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqu394sw4.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpqu394sw4.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqu394sw4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqu394sw4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqu394sw4.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 31] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqu394sw4.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqu394sw4.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    2     2      4\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if check_unique(i)\n            push!(y,\
    \ i)\n        end\n    end\n    sort(y)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpn0x7h122.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpn0x7h122.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0x7h122.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0x7h122.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0x7h122.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0x7h122.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0x7h122.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0x7h122.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0x7h122.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0x7h122.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn0x7h122.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0x7h122.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0x7h122.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpn0x7h122.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: check_unique not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tm"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    lst = []\n    for i in x\n        if i % 2 == 0\n            lst = append!(lst,\
    \ i)\n        end\n    end\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy2cu16pg.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpy2cu16pg.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2cu16pg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2cu16pg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpy2cu16pg.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2cu16pg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2cu16pg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpy2cu16pg.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2cu16pg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2cu16pg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpy2cu16pg.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy2cu16pg.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy2cu16pg.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filter(n -> count(digits(n), mod, 2) == 0, x)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmgnif9yd.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmgnif9yd.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching count(::Vector{Int64}, ::typeof(mod), ::Int64)\n  Closest candidates\
    \ are:\n    count(::Any, ::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1201\n\
    \    count(::Union{Base.AbstractBroadcasted, AbstractArray}; dims, init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:404\n\
    \    count(::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1199\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmpmgnif9yd.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmgnif9yd.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmgnif9yd.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmgnif9yd.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmgnif9yd.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching count(::Vector{Int64}, ::typeof(mod), ::Int64)\n  Closest candidates\
    \ are:\n    count(::Any, ::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1201\n\
    \    count(::Union{Base.AbstractBroadcasted, AbstractArray}; dims, init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:404\n\
    \    count(::Any; init) at ~/.conda/envs/polyglot/share/julia/base/reduce.jl:1199\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmpmgnif9yd.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmgnif9yd.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmg"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return [x[i] for i in 1:length(x) if contains(r\"\\d*[13579]\\d*\", string(x[i]))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4y8jx8e_.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp4y8jx8e_.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Regex, ::String)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n    [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [5] collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmp4y8jx8e_.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4y8jx8e_.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4y8jx8e_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4y8jx8e_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Regex, ::String)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n  Stacktrace:\n\
    \    [1] (::var\"#2#4\"{Vector{Int64}})(i::Int64)\n      @ Main ./none:0\n   \
    \ [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n      @\
    \ ./generator.jl:44 [inlined]\n    [4] grow_to!\n      @ ./array.jl:797 [inlined]\n\
    \    [5] collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmp4y8jx8e_.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ "
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = []\n    for i in x\n        if ~is_even(i)\n            push!(res,\
    \ i)\n        end\n    end\n    return sort(res)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp94kgbr5a.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp94kgbr5a.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp94kgbr5a.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94kgbr5a.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94kgbr5a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp94kgbr5a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp94kgbr5a.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94kgbr5a.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94kgbr5a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp94kgbr5a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp94kgbr5a.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94kgbr5a.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94kgbr5a.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp94kgbr5a.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp94kgbr5a.jl:15\n"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    a = Vector{Int64}()\n    for e in x\n        if length(digits(e)) == length(unique(digits(e)))\n\
    \            push!(a, e)\n        end\n    end\n    sort(a)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkrrq1b6j.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpkrrq1b6j.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrrq1b6j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrrq1b6j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkrrq1b6j.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152] == Int64[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrrq1b6j.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrrq1b6j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkrrq1b6j.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrrq1b6j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrrq1b6j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkrrq1b6j.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrrq1b6j.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrrq1b6j.jl:25\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"Return a sorted vector of all elements that hasn't any even digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnybtnke.jl:1\nin expression starting at /tmp/tmplnybtnke.jl:1\n"
  stdout: ''
  timestamp: 1659977968
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # assign empty array\n    y = Int64[]\n    for i in x\n        if isodd(i)\n\
    \            push!(y, i)\n        end\n    end\n    return sort(y)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5tbc5rvd.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp5tbc5rvd.jl:28\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tbc5rvd.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tbc5rvd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5tbc5rvd.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tbc5rvd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tbc5rvd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5tbc5rvd.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tbc5rvd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tbc5rvd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977969
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_odd_digits = filter(z -> !(occursin(\"2\", string(z)) || occursin(\"4\"\
    , string(z)) || occursin(\"6\", string(z)) || occursin(\"8\", string(z)) || occursin(\"\
    0\", string(z))), x)\n    unique_sort(x_odd_digits)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpue866lz1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpue866lz1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_sort\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpue866lz1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpue866lz1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpue866lz1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpue866lz1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_sort\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpue866lz1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpue866lz1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpue866lz1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpue866lz1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_sort\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpue866lz1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpue866lz1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpue866lz1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpue866lz1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_sort not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tm"
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(filter(x->all(!isodd.(digits(x))), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpln2c8js1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpln2c8js1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching !(::BitVector)\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpln2c8js1.jl:13\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpln2c8js1.jl:13\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpln2c8js1.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpln2c8js1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpln2c8js1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching !(::BitVector)\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpln2c8js1.jl:13\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpln2c8js1.jl:13\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpln2c8js1.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpln2c8js1.jl:19\ntest "
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    answer = []\n    for i in x\n        if !has_even_digit(i)\n            push!(answer,\
    \ i)\n        end\n    end\n    return sort(answer)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzg_rnrws.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpzg_rnrws.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzg_rnrws.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzg_rnrws.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzg_rnrws.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzg_rnrws.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzg_rnrws.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzg_rnrws.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzg_rnrws.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzg_rnrws.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzg_rnrws.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzg_rnrws.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzg_rnrws.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzg_rnrws.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    matches = []\n    for i in x\n        if !has_even_digit(i)\n           \
    \ push!(matches, i)\n        end\n    end\n    return sort(matches)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpla6f94bi.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpla6f94bi.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpla6f94bi.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla6f94bi.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla6f94bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpla6f94bi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpla6f94bi.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla6f94bi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla6f94bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpla6f94bi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpla6f94bi.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpla6f94bi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpla6f94bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpla6f94bi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #empty vector to store elements\n    unique_elements=Int64[]\n    for item\
    \ in x\n        if ~ has_even_digit(item)\n            push!(unique_elements,\
    \ item)\n        end\n    end\n    sort(unique_elements)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcz8lrqds.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpcz8lrqds.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcz8lrqds.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcz8lrqds.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcz8lrqds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcz8lrqds.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcz8lrqds.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcz8lrqds.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcz8lrqds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcz8lrqds.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcz8lrqds.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcz8lrqds.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcz8lrqds.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcz8lrqds.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_unique = unique(x)\n    x_evens = Array{Int64}(0)\n    for i in x_unique\n\
    \        for j in digits(i)\n            if j % 2 == 0\n                push!(x_evens,\
    \ i)\n                break\n            end\n        end\n    end\n    return\
    \ setdiff(x_unique, x_evens)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp269992i3.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp269992i3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp269992i3.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp269992i3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp269992i3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp269992i3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp269"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = []\n    for i in x\n        contains_even_digit = false\n        while\
    \ i > 0\n            digit = i % 10\n            if digit % 2 == 0\n         \
    \       contains_even_digit = true\n                break\n            end\n \
    \           i = i / 10\n        end\n        if !contains_even_digit\n       \
    \     push!(res, i)\n        end\n    end\n    sort(res)\nend\n        \nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuwkrjly6.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpuwkrjly6.jl:36\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwkrjly6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwkrjly6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuwkrjly6.jl:37\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwkrjly6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwkrjly6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuwkrjly6.jl:38\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0, 0, 0] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwkrjly6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwkrjly6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuwkrjly6.jl:39\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuwkrjly6.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuwkrjly6.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #initializing the vector we are going to return\n    sort_vector = Int64[]\
    \ \n    #going over the input vector\n    for i = 1:length(x)\n        #moving\
    \ over the number and convert it to string in order to check the digits\n    \
    \    for j = 1:length(string(x[i]))\n            #checking if the digit is even,\
    \ if so adding it to the sort_vector\n            if iseven(parse(Int64, string(x[i])[j]))\n\
    \                push!(sort_vector, x[i])\n                break\n           \
    \ end\n        end\n    end\n    #returning sorted vector\n    sort(sort_vector)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy6k49ky6.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpy6k49ky6.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6k49ky6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6k49ky6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy6k49ky6.jl:35\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6k49ky6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6k49ky6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy6k49ky6.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6k49ky6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6k49ky6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy6k49ky6.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [103] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy6k49ky6.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy6k49ky6.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    #empty vector to store output\n    y = Int64[]\n    \n    #loop over\
    \ x and check whether there is an even digit\n    for i in x\n        if !iseven(i)\n\
    \            push!(y, i)\n        end\n    end\n    #sort and return the output\n\
    \    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw1mt7yk2.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpw1mt7yk2.jl:32\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1mt7yk2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1mt7yk2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw1mt7yk2.jl:33\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1mt7yk2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1mt7yk2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw1mt7yk2.jl:34\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1mt7yk2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1mt7yk2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977971
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    result = []\n    for i in x\n        if unique_digit(i) == true\n       \
    \     push!(result, i)\n        end\n    end\n    sort(result)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp15xcdmsy.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp15xcdmsy.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp15xcdmsy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15xcdmsy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15xcdmsy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp15xcdmsy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp15xcdmsy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15xcdmsy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15xcdmsy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp15xcdmsy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp15xcdmsy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15xcdmsy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15xcdmsy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp15xcdmsy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digit not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tm"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x[~issubset(digits.(x), [0, 2, 4, 6, 8])])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfny1dbtj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpfny1dbtj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  ArgumentError: invalid\
    \ index: true of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @\
    \ Base ./indices.jl:293\n    [2] to_index(A::Vector{Int64}, i::Bool)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:330 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1221 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpfny1dbtj.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfny1dbtj.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfny1dbtj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpfny1dbtj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  ArgumentError: invalid\
    \ index: true of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @\
    \ Base ./indices.jl:293\n    [2] to_index(A::Vector{Int64}, i::Bool)\n      @\
    \ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:330 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1221 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpfny1dbtj.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfny1dbtj.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfny1dbtj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpfny1dbtj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  ArgumentError: invalid index:\
    \ true of type Bool\n  Stacktrace:\n    [1] t"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        if iseven(i) == true\n            println(i)\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpy4hl4mus.jl:21

    '
  stdout: "1422\ntest set: Error During Test at /tmp/tmpy4hl4mus.jl:24\n  Test threw\
    \ exception\n  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpy4hl4mus.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4hl4mus.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4hl4mus.jl:23\n152\n1422\n\
    10\ntest set: Error During Test at /tmp/tmpy4hl4mus.jl:25\n  Test threw exception\n\
    \  Expression: candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpy4hl4mus.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4hl4mus.jl:25 "
  timestamp: 1659977973
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_new = []\n    for i in x\n        if all(i % 2 == 1 for i in digits(i))\n\
    \            push!(x_new, i)\n        end\n    end\n    return sort(x_new)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return filter(i -> ~has_even_digit(i), sort(x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp35o7t52c.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp35o7t52c.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp35o7t52c.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp35o7t52c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp35o7t52c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp35o7t52c.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp35o7t52c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp35o7t52c.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp35o7t52c.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    r = []\n    for i = 1:length(x)\n        if x[i] % 2 != 0\n            push!(r,\
    \ x[i])\n        end\n    end\n    return sort(r)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp33f_ff9l.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp33f_ff9l.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33f_ff9l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33f_ff9l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp33f_ff9l.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33f_ff9l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33f_ff9l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp33f_ff9l.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33f_ff9l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33f_ff9l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_odd = Vector{Int64}()\n    for i in x\n        if !contains(i, \"2\"):\
    \ \n            if !contains(i, \"4\"):\n                if !contains(i, \"6\"\
    ):\n                    if !contains(i, \"8\"):\n                        if !contains(i,\
    \ \"0\"):\n                            push!(x_odd, i)\n    end\n    return sort(x_odd)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pg1pqb8.jl:16\nin expression starting at\
    \ /tmp/tmp0pg1pqb8.jl:16\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    output = []\n    for i in x\n        if !any(digits(i) .% 2 .== 0)\n    \
    \        push!(output, i)\n        end\n    end\n    sort(output)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    local a = []\n    for i in x\n        if mod(i, 2) != 0\n            push!(a,\
    \ i)\n        end\n    end\n    sort(a)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxqtu322_.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpxqtu322_.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqtu322_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqtu322_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxqtu322_.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqtu322_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqtu322_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxqtu322_.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxqtu322_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxqtu322_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    @assert length(x) > 0 \"x can't be an empty vector\"\n    @assert all(x .>\
    \ 0) \"x can't have negative values\"\n    @assert all(x .<= 2^32) \"x can't have\
    \ values greater than 2^32\"\n    return x[findall(isodd, split(x, \"\")...) .==\
    \ true] \nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpza0o81sb.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpza0o81sb.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching split(::Vector{Int64}, ::String)\n  Closest candidates are:\n\
    \    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:417\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpza0o81sb.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpza0o81sb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpza0o81sb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpza0o81sb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching split(::Vector{Int64}, ::String)\n  Closest candidates are:\n    split(!Matched::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:417\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpza0o81sb.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpza0o81sb.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpza0o81sb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpza0o81sb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ split(::Vector{Int64}, ::String)\n  Closest candidates are:\n    split(!Matched::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:417\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpza0o81sb.jl:16\n\
    \   [2] macro ex"
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return x[filter(isodd, x)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpugprl8w1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpugprl8w1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [[15, 33, 1]]\n  Stacktrace:\n  \
    \ [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n     @ Base\
    \ ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n\
    \   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n   [4] getindex\n\
    \     @ ./abstractarray.jl:1218 [inlined]\n   [5] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpugprl8w1.jl:13\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpugprl8w1.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpugprl8w1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpugprl8w1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [[323]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpugprl8w1.jl:13\n   [6]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpugprl8w1.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpugprl8w1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpugprl8w1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError: attempt to\
    \ access 4-element Vector{Int64} at index [[12345, "
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = filter(z -> has_even_digit(z) == false, x)\n    return sort(x)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7uuki90m.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp7uuki90m.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(z::Int64)\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7uuki90m.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7uuki90m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7uuki90m.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(z::Int64)\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7uuki90m.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7uuki90m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7uuki90m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(z::Int64)\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp7uuki90m.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp7"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    s = Set{Int64}()\n    for i in x\n        if !has_even_digit(i)\n       \
    \     push!(s, i)\n        end\n    end\n    return sort(collect(s))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5u31kpce.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp5u31kpce.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5u31kpce.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u31kpce.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u31kpce.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5u31kpce.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5u31kpce.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u31kpce.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u31kpce.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5u31kpce.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5u31kpce.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u31kpce.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u31kpce.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5u31kpce.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = filter( x -> !isodd(sum(digits(x))), x)\n    return sort(setdiff(x, y))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3ljmqg8g.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp3ljmqg8g.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ljmqg8g.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ljmqg8g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ljmqg8g.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 1422] == Int64[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ljmqg8g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ljmqg8g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ljmqg8g.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ljmqg8g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ljmqg8g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ljmqg8g.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ljmqg8g.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3ljmqg8g.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \   \n    # converts each element of x to a string\n    x_string = map(string,\
    \ x) \n    \n    # checks if each character in the string is even\n    digits_check\
    \ = [occursin(\"[02468]\", i) for i in x_string] \n    \n    # if an element is\
    \ all odd return an empty vector\n    # if not, create a new vector with only\
    \ even numbers\n    if all(digits_check) == false\n        x_even = [x[i] for\
    \ i in 1:length(x) if digits_check[i] == false]\n        x_even = sort(x_even)\n\
    \        return x_even\n    else\n        return []\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcrr929_1.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpcrr929_1.jl:35\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcrr929_1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcrr929_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcrr929_1.jl:36\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcrr929_1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcrr929_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcrr929_1.jl:37\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcrr929_1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcrr929_1.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcrr929_1.jl:38\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcrr929_1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcrr929_1.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\n    x_new = []\n    for i in x\n        if !iseven(i)\n\
    \            push!(x_new, i)\n        end\n    end\n    return sort(x_new)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdpfiaxgk.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpdpfiaxgk.jl:28\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpfiaxgk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpfiaxgk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdpfiaxgk.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpfiaxgk.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpfiaxgk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdpfiaxgk.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpfiaxgk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpfiaxgk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filter(x) do y\n        filter(digits(y)) do d\n            mod(d, 2) !=\
    \ 0\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp56khq0y1.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp56khq0y1.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  TypeError: non-boolean\
    \ (Vector{Int64}) used in boolean context\n  Stacktrace:\n   [1] filter(f::var\"\
    #1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp56khq0y1.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp56khq0y1.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp56khq0y1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp56khq0y1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  TypeError: non-boolean\
    \ (Vector{Int64}) used in boolean context\n  Stacktrace:\n   [1] filter(f::var\"\
    #1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp56khq0y1.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp56khq0y1.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp56khq0y1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp56khq0y1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  TypeError: non-boolean (Vector{Int64})\
    \ used in boolean context\n  Stacktrace:\n   [1] filter(f::var\"#1#3\", a::Vector{Int64})\n\
    \     @ Base ./array.jl:2484\n   [2] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp56khq0y1.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp56khq0y1.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n  "
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if unique_digits_helper(i)\n            push!(y,\
    \ i)\n        end\n    end\n    return sort(y)\nend\nunique_digits(unique_digits_helper([152,\
    \ 323, 1422, 10]))\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: unique_digits_helper not defined\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51_yn7uc.jl:21\nin expression starting at\
    \ /tmp/tmp51_yn7uc.jl:21\n"
  stdout: ''
  timestamp: 1659977972
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # filter only odd numbers\n    odd_x = filter(i -> !issubtype(i, Even), x)\n\
    \    # filter only unique digits\n    unique_x = odd_x[filter(i -> length(unique(digits(i)))\
    \ == length(digits(i)), odd_x)]\n    # sort\n    sort(unique_x)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8cu8fc57.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp8cu8fc57.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: issubtype\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8cu8fc57.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8cu8fc57.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8cu8fc57.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: issubtype\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8cu8fc57.jl:26 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8cu8fc57.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8cu8fc57.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: issubtype\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(i::Int64)\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8cu8fc57.jl:14\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8cu8fc57.jl:27 ["
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # TODO: implement this function.\n    return [15, 33, 1422, 1]\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyuiuwz7a.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpyuiuwz7a.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuiuwz7a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuiuwz7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyuiuwz7a.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [15, 33, 1422, 1] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuiuwz7a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuiuwz7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyuiuwz7a.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [15, 33, 1422, 1] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuiuwz7a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuiuwz7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyuiuwz7a.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [15, 33, 1422, 1] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuiuwz7a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuiuwz7a.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for number in x\n        if number % 2 == 0\n            append!(y,\
    \ number)\n        end\n    end\n    return y\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptrmrynyf.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmptrmrynyf.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrmrynyf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrmrynyf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptrmrynyf.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrmrynyf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrmrynyf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptrmrynyf.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrmrynyf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrmrynyf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptrmrynyf.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptrmrynyf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptrmrynyf.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # We want to store the results here\n    y = Int64[]\n    for i = 1:length(x)\n\
    \        if !has_even_digit(x[i])\n            # We want to append the current\
    \ element to the array \"y\"\n            push!(y, x[i])\n        end\n    end\n\
    \    return sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpi2l1o5wr.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpi2l1o5wr.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi2l1o5wr.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi2l1o5wr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi2l1o5wr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpi2l1o5wr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi2l1o5wr.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi2l1o5wr.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi2l1o5wr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpi2l1o5wr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpi2l1o5wr.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi2l1o5wr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi2l1o5wr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpi2l1o5wr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    v = Vector{Int64}()\n    for i in x\n        if even_digits(i) == false\n\
    \            push!(v, i)\n        end\n    end\n    sort(v)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpce8oxh29.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpce8oxh29.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpce8oxh29.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpce8oxh29.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpce8oxh29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpce8oxh29.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpce8oxh29.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpce8oxh29.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpce8oxh29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpce8oxh29.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpce8oxh29.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpce8oxh29.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpce8oxh29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpce8oxh29.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: even_digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tm"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code goes here\n    return x\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_gir1s41.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp_gir1s41.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gir1s41.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gir1s41.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gir1s41.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gir1s41.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gir1s41.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gir1s41.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gir1s41.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gir1s41.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gir1s41.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_gir1s41.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_gir1s41.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return filter(isdigit_unique, x)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyklancwm.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpyklancwm.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: isdigit_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyklancwm.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyklancwm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyklancwm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyklancwm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: isdigit_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyklancwm.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyklancwm.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyklancwm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyklancwm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: isdigit_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyklancwm.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyklancwm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyklancwm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyklancwm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: isdigit_unique not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = filter(x -> !has_even_digit(x), x)\n    sort(x)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsxf0y0l3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpsxf0y0l3.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxf0y0l3.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxf0y0l3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsxf0y0l3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxf0y0l3.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxf0y0l3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsxf0y0l3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpsxf0y0l3.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return x[x .% 2 .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpefde0g0e.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpefde0g0e.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefde0g0e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefde0g0e.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpefde0g0e.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefde0g0e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefde0g0e.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpefde0g0e.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefde0g0e.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefde0g0e.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpefde0g0e.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefde0g0e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefde0g0e.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    x_unique = []\n    \n    for x_i in x \n        if x_i == unique_digits_helper(x_i)\
    \ \n            push!(x_unique, x_i)\n        end\n    end\n    \n    return sort(x_unique)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1xsuokr0.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp1xsuokr0.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1xsuokr0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xsuokr0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xsuokr0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1xsuokr0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1xsuokr0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xsuokr0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xsuokr0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1xsuokr0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1xsuokr0.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xsuokr0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xsuokr0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1xsuokr0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(filter(n -> !has_even_digit(n), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpor8et_g0.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpor8et_g0.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpor8et_g0.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpor8et_g0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpor8et_g0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpor8et_g0.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpor8et_g0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpor8et_g0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpor8et_g0.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo"
  timestamp: 1659977976
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Vector{Int64}()\n    for i in x\n        if all(i % 2 != 0 for i in digits(i))\n\
    \            push!(y, i)\n        end\n    end\n    sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    even = [ i % 2 == 0 for i in (0:9) ] # Vector{Bool}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvcfqrgpu.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvcfqrgpu.jl:1\n\
    in expression starting at /tmp/tmpvcfqrgpu.jl:1\n"
  stdout: ''
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    c = []\n    for i = 1:length(x)\n        d = digits(x[i])\n        if d[1]\
    \ != 2 && d[1] != 4 && d[1] != 6 && d[1] != 8 && d[1] != 0\n            push!(c,\
    \ x[i])\n        end\n    end\n    return sort(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqedwl_n_.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpqedwl_n_.jl:28\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqedwl_n_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqedwl_n_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqedwl_n_.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqedwl_n_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqedwl_n_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqedwl_n_.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqedwl_n_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqedwl_n_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        return x\n    end\n    if length(x) == 1\n   \
    \     return [x[1]]\n    end\n    ans = []\n    for i in x\n        if unique_digits_helper(i)\n\
    \            push!(ans, i)\n        end\n    end\n    sort(ans)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpy4f0vums.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpy4f0vums.jl:32\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy4f0vums.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4f0vums.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4f0vums.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpy4f0vums.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy4f0vums.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4f0vums.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4f0vums.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpy4f0vums.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy4f0vums.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4f0vums.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4f0vums.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpy4f0vums.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    output = Int64[]\n    for i in x\n        if iseven(i) == false\n       \
    \     push!(output, i)\n        end\n    end\n    return sort(output)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb10u66w2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpb10u66w2.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb10u66w2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb10u66w2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpb10u66w2.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb10u66w2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb10u66w2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpb10u66w2.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb10u66w2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb10u66w2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Vector{Int64}()\n    for i in x\n        z = digits(i)\n        if !is_odd.(z)\n\
    \            continue\n        end\n        push!(y, i)\n    end\n    return sort(y)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzoai7gm7.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpzoai7gm7.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_odd\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzoai7gm7.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzoai7gm7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzoai7gm7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzoai7gm7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_odd\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzoai7gm7.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzoai7gm7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzoai7gm7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzoai7gm7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_odd not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzoai7gm7.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzoai7gm7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzoai7gm7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzoai7gm7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: is_odd not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzoai7gm7.jl:16\n\
    \   ["
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = []\n    for n in x\n        for i in n:digits()\n            if i %\
    \ 2 == 0\n                break\n            end\n        else\n            push!(res,\
    \ n)\n        end\n    end\n    sort(res)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpn8pydyiy.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8pydyiy.jl:19\n\
    in expression starting at /tmp/tmpn8pydyiy.jl:19\n"
  stdout: ''
  timestamp: 1659977975
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #this will hold all the unique elements\n    new_vec = Vector{Int64}(undef,\
    \ length(x))\n    j = 1 #this will help with indexing new_vec\n    #keep only\
    \ elements that have no even digits\n    for i in 1:length(x)\n        if check_even(x[i])\
    \ == true\n            new_vec[j] = x[i]\n            j += 1\n        end\n  \
    \  end\n    new_vec = unique(new_vec)\n    #sort the new vec\n    for m in 1:length(new_vec)\n\
    \        for n in m+1:length(new_vec)\n            if new_vec[m] > new_vec[n]\n\
    \                temp = new_vec[m]\n                new_vec[m] = new_vec[n]\n\
    \                new_vec[n] = temp\n            end\n        end\n    end\n  \
    \  return new_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpogix96fv.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpogix96fv.jl:41\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: check_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpogix96fv.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogix96fv.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogix96fv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpogix96fv.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: check_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpogix96fv.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogix96fv.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogix96fv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpogix96fv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: check_even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpogix96fv.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogix96fv.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogix96fv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpogix96fv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: check_even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpogi"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # TODO: implement me!\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt4orl7e5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpt4orl7e5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt4orl7e5.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4orl7e5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4orl7e5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpt4orl7e5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt4orl7e5.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4orl7e5.jl:22 [inlined]\n\
    \   [4] "
  timestamp: 1659977978
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Int64[]\n    for i in x\n        if all((i % 2 != 0) for i in digits(i))\n\
    \            push!(y, i)\n        end\n    end\n    return sort(y)\nend\nprintln(unique_digits([15,\
    \ 33, 1422, 1]))\nprintln(unique_digits([152, 323, 1422, 10]))\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: '[1, 15, 33]

    Int64[]

    Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977974
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        if any(odd, digits(i)) #any(x -> x % 2 == 0, digits(i))\n\
    \            return x[i]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnf9gts7i.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpnf9gts7i.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: odd\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnf9gts7i.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnf9gts7i.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf9gts7i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnf9gts7i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: odd not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnf9gts7i.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnf9gts7i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf9gts7i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnf9gts7i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpnf9gts7i.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnf9gts7i.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf9gts7i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnf9gts7i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: odd not defined\n \
    \ Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpnf9gts7i.jl:14\n\
    \   [2] macro exp"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # TODO: Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprps_tpro.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmprps_tpro.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmprps_tpro.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprps_tpro.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprps_tpro.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprps_tpro.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmprps_tpro.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprps_tpro.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Check if any digit from every element of x is even. \n    is_even_flag\
    \ = [is_even_digit(x[i]) for i in 1:length(x)]\n    # Get the indexes of the elements\
    \ that has no even digit \n    unique_digits_indexes = findall(is_even_flag)\n\
    \    # Get the elements that has no even digit \n    unique_digits = [x[unique_digits_indexes[i]]\
    \ for i in 1:length(unique_digits_indexes)]\n    return sort(unique_digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq0h4ru5r.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpq0h4ru5r.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: is_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\"{Vector{Int64}})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"{Vector{Int64}}})\n\
    \     @ Base ./array.jl:724\n   [4] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq0h4ru5r.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpq0h4ru5r.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpq0h4ru5r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpq0h4ru5r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: is_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\"{Vector{Int64}})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"{Vector{Int64}}})\n\
    \     @ Base ./array.jl:724\n   [4] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq0h4ru5r.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpq0h4ru5r.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpq0h4ru5r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpq0h4ru5r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: is_even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\"{Vector{Int64}})(i::Int64)\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"{Vector{Int64}}})"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    evens = [2, 4, 6, 8, 0]\n    even_digits = false\n    result = Int64[]\n\
    \    for i in x\n        for j in evens\n            if haskey(Dict(zip(digits(i),1:endof(digits(i)))),\
    \ j)\n                even_digits = true\n                break\n            end\n\
    \        end\n        if even_digits == false\n            append!(result, i)\n\
    \        end\n        even_digits = false\n    end\n    return sort(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps7fyay8u.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmps7fyay8u.jl:35\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: endof\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps7fyay8u.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7fyay8u.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7fyay8u.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps7fyay8u.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: endof\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps7fyay8u.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7fyay8u.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7fyay8u.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps7fyay8u.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: endof not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps7fyay8u.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps7fyay8u.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps7fyay8u.jl:34\ntest set:\
    \ Error During Test at /tmp/tmps7fyay8u.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: endof not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmps7fyay8u.jl:18\n\
    \   [2] m"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return filter(i -> !contains(digits(i), 2) && !contains(digits(i), 4) &&\
    \ !contains(digits(i), 6) && !contains(digits(i), 8) && !contains(digits(i), 0),\
    \ sort(x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp6x3aoy0.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpp6x3aoy0.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main /tmp/tmpp6x3aoy0.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp6x3aoy0.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpp6x3aoy0.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpp6x3aoy0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp6x3aoy0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main /tmp/tmpp6x3aoy0.jl:13\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpp6x3aoy0.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpp6x3aoy0.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpp6x3aoy0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp6x3aoy0.jl:22\n  Test threw except"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # find all nonzero even digits in each element of x\n    # I got my inspiration\
    \ from Jim H's solution to task #5\n    y = findall(x .& y -> y == 1, map(digits,\
    \ x))\n    # find all elements of x where there was no nonzero even digit\n  \
    \  z = findall(x -> x == 1, y)\n    return sort(x[z])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmp1qtrn_.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpmp1qtrn_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching &(::Int64, ::var\"#1#3\")\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpmp1qtrn_.jl:15\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmp1qtrn_.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmp1qtrn_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmp1qtrn_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching &(::Int64, ::var\"#1#3\")\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 ["
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # TODO: implement this function\n    return [1, 15, 33]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp812zjam_.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp812zjam_.jl:22\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [1, 15, 33] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp812zjam_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp812zjam_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp812zjam_.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [1, 15, 33] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp812zjam_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp812zjam_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp812zjam_.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [1, 15, 33] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp812zjam_.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp812zjam_.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps7ftwil2.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmps7ftwil2.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7ftwil2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7ftwil2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps7ftwil2.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7ftwil2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7ftwil2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps7ftwil2.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7ftwil2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7ftwil2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps7ftwil2.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7ftwil2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7ftwil2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Create a sorted vector of only the integers that contains a unique digit.\n\
    \    # Use `reduce` and a lambda function to check if any digit is even \n   \
    \ # in a given number.\n    return sort(x[reduce(x -> any(mod.(digits(x), 2) .==\
    \ 0), x)])\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpo_yupe5j.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpo_yupe5j.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching (::var\"#1#2\")(::Int64, ::Int64)\n  Closest candidates are:\n\
    \    (::var\"#1#2\")(::Any) at /tmp/tmpo_yupe5j.jl:16\n  Stacktrace:\n    [1]\
    \ _mapreduce\n      @ ./reduce.jl:410 [inlined]\n    [2] _mapreduce_dim\n    \
    \  @ ./reducedim.jl:330 [inlined]\n    [3] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [4] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n    [5]\
    \ #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n    [6] reduce\n      @ ./reducedim.jl:371\
    \ [inlined]\n    [7] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpo_yupe5j.jl:16\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpo_yupe5j.jl:23 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpo_yupe5j.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpo_yupe5j.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Int64, ::Int64)\n  Closest candidates are:\n    (::var\"\
    #1#2\")(::Any) at /tmp/tmpo_yupe5j.jl:16\n  Stacktrace:\n    [1] _mapreduce\n\
    \      @ ./reduce.jl:410 [inlined]\n    [2] _mapreduce_dim\n      @ ./reducedim.jl:330\
    \ [inlined]\n    [3] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n  \
    \  [4] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n    [5] #reduce#733\n\
    \      @ ./reducedim.jl:371 [inlined]\n    [6] reduce\n      @ ./reducedim.jl:371\
    \ [inlined]\n    [7] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpo_yupe5j.jl:16\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpo_yupe5j.jl:24 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n  "
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0me9od43.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0me9od43.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp0me9od43.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0me9od43.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0me9od43.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0me9od43.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp0me9od43.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0me9od43.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\nend\n \n\"\"\"Given a vector of positive integers x. return\
    \ a vector of strings that \n    contains for each entry the n-th digit or the\
    \ character '.' if the \n    n-th digit doesn't exist.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps22u2eh1.jl:16\nin expression starting at\
    \ /tmp/tmps22u2eh1.jl:16\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    u = Int64[]\n    for i in x\n        evens = findall(x -> x % 2 == 0, digits(i))\n\
    \        if length(evens) == 0\n            push!(u, i)\n        end\n    end\n\
    \    return sort(u)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res = []\n    # We iterate over the whole vector and we check if there is\
    \ any even digit in every element,\n    # if there is no even digit we put that\
    \ element in the result.\n    for elem in x\n        flag = true\n        while\
    \ elem != 0\n            if elem % 2 == 0\n                flag = false\n    \
    \            break\n            end\n            elem = elem \xF7 10\n       \
    \ end\n        if flag == true\n            push!(res, elem)\n        end\n  \
    \  end\n    return sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpio12r_xz.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpio12r_xz.jl:36\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [0, 0, 0] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio12r_xz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio12r_xz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpio12r_xz.jl:38\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [0, 0] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio12r_xz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio12r_xz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpio12r_xz.jl:39\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [0, 0] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpio12r_xz.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpio12r_xz.jl:35\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for i in x\n        if all(mod.([div(i,10^j) for j in 0:floor(log10(i))],10)\
    \ .!= 0)\n            push!(y,i)\n        end\n    end\n    sort(y)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp78axsj5y.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp78axsj5y.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78axsj5y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78axsj5y.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78axsj5y.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78axsj5y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78axsj5y.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78axsj5y.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78axsj5y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78axsj5y.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filter(n -> isodd(digits(n)), x)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmph1kq5obj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmph1kq5obj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmph1kq5obj.jl:13\n   [2]\
    \ filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmph1kq5obj.jl:13\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmph1kq5obj.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmph1kq5obj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmph1kq5obj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isodd(::Vector{Int64})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(n::Int64)\n     @ Main /tmp/tmph1kq5obj.jl:13\n   [2]\
    \ filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmph1kq5obj.jl:13\n   [4]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmph1kq5obj.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined"
  timestamp: 1659977980
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #First we create a vector to store all odd digits\n    #Next we iterate through\
    \ the elements of x\n    #We create a vector of the digits and another vector\
    \ of bools \n    #indicating whether the numbers are even or odd\n    #We then\
    \ append elements of the x vector if the elements\n    #of the odd bools vector\
    \ are all true\n    answer=Vector{Int64}()\n    for element in x\n        digit=digits(element)\n\
    \        odd=Vector{Bool}()\n        for i in digit\n            if isodd(i)\n\
    \                push!(odd,true)\n            else\n                push!(odd,false)\n\
    \            end\n        end\n        if all(odd)\n            push!(answer,element)\n\
    \        end\n    end\n    return sort(answer)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    positive_integers = filter(x) do x\n        x > 0\n    end\n    print(positive_integers)\n\
    \    iter = Base.iterate(positive_integers)\n    #initialize the array with the\
    \ first element \n    # to prevent out of bound error\n    # and initialize the\
    \ current_number to zero\n    a = [Base.iterate(iter)]\n    current_number = 0\n\
    \    while true\n        begin\n            a = Base.push!(a, Base.iterate(iter))\n\
    \        catch\n            break\n        end\n    end\n    println(a)\n    return\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"begin\" at /tmp/tmpdjw0d3rb.jl:24 expected\
    \ \"end\", got \"catch\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdjw0d3rb.jl:26\n\
    in expression starting at /tmp/tmpdjw0d3rb.jl:26\n"
  stdout: ''
  timestamp: 1659977977
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    n = length(x)\n    v = Vector{Int64}()\n    for i in 1:n\n        if iseven(i)\
    \ == false\n            push!(v,i)\n        end\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmp516ez4.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpmp516ez4.jl:27\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 3] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmp516ez4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmp516ez4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmp516ez4.jl:28\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [1, 3] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmp516ez4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmp516ez4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmp516ez4.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [1, 3] == [111, 151]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmp516ez4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmp516ez4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmp516ez4.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [1, 3] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmp516ez4.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmp516ez4.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    #y = Vector{Int64}()\n    for k in x\n        if iseven(k) ==\
    \ false\n            push!(y, k)\n        end\n    end\n    return sort(y)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa_t415tj.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpa_t415tj.jl:28\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_t415tj.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_t415tj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa_t415tj.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_t415tj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_t415tj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa_t415tj.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_t415tj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_t415tj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_unique = []\n    for i in x\n        if ~ismatch(r\"\\d{1,}\", i)\n   \
    \         push!(x_unique, i)\n        end\n    end\n    return sort(x_unique)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaeki5pe0.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpaeki5pe0.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaeki5pe0.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaeki5pe0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaeki5pe0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeki5pe0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaeki5pe0.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaeki5pe0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaeki5pe0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeki5pe0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: ismatch not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaeki5pe0.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaeki5pe0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaeki5pe0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeki5pe0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: ismatch not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpaeki5pe0.jl:15\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    p = []\n    for i in x\n        if i % 2 == 0 && i % 3 == 0 && i % 5 == 0\
    \ && i % 6 == 0 && i % 8 == 0 && i % 9 == 0\n            push!(p, i)\n       \
    \ end\n    end\n    return p\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr3j2a6s8.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpr3j2a6s8.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3j2a6s8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3j2a6s8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr3j2a6s8.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3j2a6s8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3j2a6s8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpr3j2a6s8.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr3j2a6s8.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr3j2a6s8.jl:25\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977979
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    new_vec = []\n    for i in x\n        if check_unique(i)\n            push!(new_vec,\
    \ i)\n        end\n    end\n    return sort(new_vec)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphgx3tcrm.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmphgx3tcrm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphgx3tcrm.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgx3tcrm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgx3tcrm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphgx3tcrm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphgx3tcrm.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgx3tcrm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgx3tcrm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphgx3tcrm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: check_unique\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphgx3tcrm.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgx3tcrm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgx3tcrm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphgx3tcrm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: check_unique not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tm"
  timestamp: 1659977980
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Array{Int64}(undef, length(x))\n    idx = 0\n    for x_i in x\n     \
    \   if isempty(digits(x_i)[digits(x_i) .% 2 .== 0])\n            idx += 1\n  \
    \          y[idx] = x_i\n        end\n    end\n    return sort(y[1:idx])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = filter(x) do xi\n        !even_digit(xi)\n    end\n    sort(y)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8tuscasd.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp8tuscasd.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(xi::Int64)\n     @ Main /tmp/tmp8tuscasd.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8tuscasd.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8tuscasd.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8tuscasd.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8tuscasd.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(xi::Int64)\n     @ Main /tmp/tmp8tuscasd.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8tuscasd.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8tuscasd.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8tuscasd.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8tuscasd.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even_digit\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(xi::Int64)\n     @ Main /tmp/tmp8tuscasd.jl:14\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [3] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8tuscasd.jl:13\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8tuscasd.j"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\nend\n \n# Test\n@testset \"unique_digits\" begin\n    @test\
    \ unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    @test unique_digits([152,\
    \ 323, 1422, 10]) == []\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpjezg7zp4.jl:17

    in expression starting at /tmp/tmpjezg7zp4.jl:17

    '
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    sum(digit % 2 != 0 for digit in digits(x)) == length(digits(x)) ? x : Int64[]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzifdqdt5.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpzifdqdt5.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzifdqdt5.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzifdqdt5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzifdqdt5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpzifdqdt5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpzifdqdt5.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzifdqdt5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzifdqdt5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpzifdqdt5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/ba"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    k = Int64[]\n    for i in x\n        if i == 0\n            continue\n  \
    \      end\n        digit = i % 10\n        while digit % 2 == 0 && i != 0\n \
    \           i = div(i, 10)\n            digit = i % 10\n        end\n        if\
    \ i != 0\n            push!(k, i)\n        end\n    end\n    return sort(k)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpws8l3cmj.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpws8l3cmj.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 1, 15, 33] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpws8l3cmj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpws8l3cmj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpws8l3cmj.jl:35\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [1, 1, 15, 323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpws8l3cmj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpws8l3cmj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpws8l3cmj.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpws8l3cmj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpws8l3cmj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpws8l3cmj.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpws8l3cmj.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpws8l3cmj.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # list holding odd digits\n    odds = Vector{Int64}()\n    \n    #\
    \ loop over each item in vector x\n    for i in x\n        \n        # if the\
    \ number is odd, add to odds list\n        if i % 2 != 0 \n            push!(odds,\
    \ i)\n        end\n    end\n    \n    # return odds list\n    return odds\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpziocvv1f.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpziocvv1f.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpziocvv1f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpziocvv1f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpziocvv1f.jl:35\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpziocvv1f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpziocvv1f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpziocvv1f.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpziocvv1f.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpziocvv1f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpziocvv1f.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpziocvv1f.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpziocvv1f.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977980
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Define a new vector\n    y = []\n    # Loop through the vector of integers\
    \ x.\n    for i in x\n        # Define an empty list\n        z = []\n       \
    \ # Convert the element of x to a string\n        a = string(i)\n        # Loop\
    \ through the string's characters.\n        for j in a\n            # Add the\
    \ integer value of the string's character to the empty list\n            push!(z,\
    \ parse(Int64, j))\n        end\n        # Check if the any of the integers in\
    \ the list are even.\n        if any(rem.(z, 2) .== 0) == false\n            #\
    \ If not even, push the element to the new vector y.\n            push!(y, i)\n\
    \        end\n    end\n    # Sort the vector and return the sorted vector\n  \
    \  sort(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Create an empty vector to store the output\n    x_prime = Int64[]\n   \
    \ # Loop through each value in x\n    for i in x\n        # Create an empty array\
    \ to store the digits\n        digits = Int64[]\n        # Turn the integer into\
    \ a string and turn that string into an array\n        # of characters\n     \
    \   string_x = string(i)\n        string_x_array = split(string_x)\n        #\
    \ Loop through each character in the string\n        for s in string_x_array\n\
    \            # Turn the character into an integer\n            # If the integer\
    \ is even, then break\n            # Otherwise, push the integer into digits\n\
    \            k = parse(Int64, s)\n            if k % 2 == 0\n                break\n\
    \            else\n                push!(digits, k)\n            end\n       \
    \ end\n        # If all the digits are odd, push them into x_prime\n        if\
    \ length(digits) == length(string_x_array)\n            push!(x_prime, i)\n  \
    \      end\n    end\n    # Return the sorted vector\n    sort(x_prime)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd2x4sce8.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpd2x4sce8.jl:49\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x4sce8.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x4sce8.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpd2x4sce8.jl:50\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x4sce8.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x4sce8.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpd2x4sce8.jl:51\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x4sce8.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x4sce8.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    ind::Int64 = findfirst(x .> 0)\n    if ind == nothing\n        return []\n\
    \    end\n    x = x[ind:end]\n    even_digits = findall(x -> sum(x .% 2 .== 0)\
    \ != 0, x)\n    x = deleteat!(x, even_digits)\n    return sort(x)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz6ooqgpo.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpz6ooqgpo.jl:28\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6ooqgpo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6ooqgpo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz6ooqgpo.jl:29\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6ooqgpo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6ooqgpo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz6ooqgpo.jl:30\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6ooqgpo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6ooqgpo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977981
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = x[x .% 2 .!= 0]\n    x = x[x .% 5 .!= 0]\n    x = x[x .% 10 .!= 0]\n\
    \    x = x[x .% 50 .!= 0]\n    x = x[x .% 100 .!= 0]\n    x = x[x .% 500 .!= 0]\n\
    \    x = x[x .% 1000 .!= 0]\n    x = x[x .% 5000 .!= 0]\n    x = x[x .% 10000\
    \ .!= 0]\n    x = x[x .% 50000 .!= 0]\n    x = x[x .% 100000 .!= 0]\n    x = x[x\
    \ .% 500000 .!= 0]\n    x = x[x .% 1000000 .!= 0]\n    x = x[x .% 5000000 .!=\
    \ 0]\n    x = x[x .% 10000000 .!= 0]\n    x = x[x .% 50000000 .!= 0]\n    x =\
    \ x[x .% 100000000 .!= 0]\n    x = x[x .% 500000000 .!= 0]\n    x = x[x .% 1000000000\
    \ .!= 0]\n    return sort(x)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmpilrcy4k3.jl:39\n  Expression: candidate([15,
    33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 33] == [1, 15, 33]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpilrcy4k3.jl:39 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpilrcy4k3.jl:38\ntest set: Test Failed
    at /tmp/tmpilrcy4k3.jl:40\n  Expression: candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated:
    [323] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpilrcy4k3.jl:40 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpilrcy4k3.jl:38\ntest set: Test Failed
    at /tmp/tmpilrcy4k3.jl:41\n  Expression: candidate([12345, 2033, 111, 151]) ==
    [111, 151]\n   Evaluated: [111, 151, 2033] == [111, 151]\nStacktrace:\n [1] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpilrcy4k3.jl:41 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpilrcy4k3.jl:38\ntest set: Test Failed
    at /tmp/tmpilrcy4k3.jl:42\n  Expression: candidate([135, 103, 31]) == [31, 135]\n   Evaluated:
    [31, 103] == [31, 135]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpilrcy4k3.jl:42 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpilrcy4k3.jl:38\nTest Summary: |
    Fail  Total\ntest set      |    4      4\n'''
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    l = []\n    for i in x\n        if !(i % 2 == 0)\n            push!(l, i)\n\
    \        end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjdytd5ai.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpjdytd5ai.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdytd5ai.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdytd5ai.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdytd5ai.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdytd5ai.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdytd5ai.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdytd5ai.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdytd5ai.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdytd5ai.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdytd5ai.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdytd5ai.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdytd5ai.jl:25\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = []\n    for i in x\n        x_str = string(i)\n        unique\
    \ = true\n        for j in x_str\n            if j % 2 == 0\n                unique\
    \ = false\n            end\n        end\n        if unique\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return sort(unique_digits)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa4zzz8k7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpa4zzz8k7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Char, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpa4zzz8k7.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4zzz8k7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa4zzz8k7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa4zzz8k7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Char, ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpa4zzz8k7.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4zzz8k7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa4zzz8k7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa4zzz8k7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # create an empty vector to return\n    z = Int64[]\n    # iterate through\
    \ vector x\n    for n in x\n        # convert integer to string\n        x = string(n)\n\
    \        # check for every even digit\n        for i in ['0', '2', '4', '6', '8']\n\
    \            # if any even digit\n            if i in x\n                # break\
    \ out of the inner loop\n                break\n            # if last iteration\
    \ of inner loop\n            if i == '8'\n                # append integer to\
    \ vector z\n                push!(z, n)\n            end\n        end\n    end\n\
    \    # return sorted vector z\n    sort(z)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb8wpning.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb8wpning.jl:1\n\
    in expression starting at /tmp/tmpb8wpning.jl:1\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # your code here\n    return uniquedigits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpb1plljhy.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpb1plljhy.jl:21\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: uniquedigits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb1plljhy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1plljhy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1plljhy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb1plljhy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: uniquedigits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb1plljhy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1plljhy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1plljhy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb1plljhy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: uniquedigits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb1plljhy.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1plljhy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1plljhy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb1plljhy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: uniquedigits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tm"
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(setdiff(x, [n for n in x if even(mod(n, 10))]))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpftc7nlzp.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpftc7nlzp.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(n::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpftc7nlzp.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpftc7nlzp.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpftc7nlzp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpftc7nlzp.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(n::Int64)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [5]\
    \ collect\n      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpftc7nlzp.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpftc7nlzp.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpftc7nlzp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpftc7nlzp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, "
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(filter(i -> is_unique(i), x))\nend\nunique_digits([152, 323,\
    \ 1422, 10])\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: is_unique not defined\nStacktrace:\n [1]\
    \ (::var\"#1#2\")(i::Int64)\n   @ Main /tmp/tmpv8q9g0ok.jl:13\n [2] filter(f::var\"\
    #1#2\", a::Vector{Int64})\n   @ Base ./array.jl:2484\n [3] unique_digits(x::Vector{Int64})\n\
    \   @ Main /tmp/tmpv8q9g0ok.jl:13\n [4] top-level scope\n   @ /tmp/tmpv8q9g0ok.jl:15\n\
    in expression starting at /tmp/tmpv8q9g0ok.jl:15\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return x[findall(x) do a\n                push!(findall(digits(a)), true)\n\
    \                any(findall(a) do b\n                    b % 2 == 0\n       \
    \         end)\n            end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpiio0frd3.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpiio0frd3.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n    [1] iterate\n      @ ./iterators.jl:447\
    \ [inlined]\n    [2] iterate\n      @ ./generator.jl:44 [inlined]\n    [3] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{Base.var\"#108#110\", Base.Pairs{Int64,\
    \ Int64, LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Vector{Int64}}}, Base.var\"\
    #107#109\"})\n      @ Base ./array.jl:797\n    [4] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [5] findall\n      @ ./array.jl:2300 [inlined]\n    [6] (::var\"\
    #1#3\")(a::Int64)\n      @ Main /tmp/tmpiio0frd3.jl:14\n    [7] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [8] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [9] getindex\n      @ ./broadcast.jl:597 [inlined]\n   [10] macro\
    \ expansion\n      @ ./broadcast.jl:961 [inlined]\n   [11] macro expansion\n \
    \     @ ./simdloop.jl:77 [inlined]\n   [12] copyto!\n      @ ./broadcast.jl:960\
    \ [inlined]\n   [13] copyto!\n      @ ./broadcast.jl:971 [inlined]\n   [14] copyto!\n\
    \      @ ./broadcast.jl:913 [inlined]\n   [15] copy\n      @ ./broadcast.jl:885\
    \ [inlined]\n   [16] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#3\", Tuple{Vector{Int64}}})\n      @ Base.Broadcast ./broadcast.jl:860\n\
    \   [17] findall(testf::Function, A::Vector{Int64})\n      @ Base ./array.jl:2257\n\
    \   [18] unique_digits(x::Vector{Int64})\n      @ Main /tmp/tmpiio0frd3.jl:13\n\
    \   [19] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [20] macro expansion\n      @ /tmp/tmpiio0frd3.jl:25 [inlined]\n\
    \   [21] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [22] top-level scope\n      @ /tmp/tmpiio0frd3.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiio0frd3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  "
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvjgbid07.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpvjgbid07.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjgbid07.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjgbid07.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjgbid07.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjgbid07.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjgbid07.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjgbid07.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjgbid07.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjgbid07.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvjgbid07.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvjgbid07.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvjgbid07.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977981
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x1 = []\n    for i in x\n        num = i\n        while num > 0\n       \
    \     if mod(num, 10) % 2 == 0\n                break\n            end\n     \
    \       num = div(num, 10)\n        end\n        if num == 0\n            push!(x1,\
    \ i)\n        end\n    end\n    sort(x1)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x1 = Int[]\n    for i in x\n        if !(contains(i,'2') || contains(i,'4')\
    \ || contains(i,'6') || contains(i,'8') || contains(i,'0'))\n            push!(x1,i)\n\
    \        end\n    end\n    sort(x1)\nend\n@btime unique_digits(1:1000000);\n \n\
    \ @assert unique_digits([152, 323, 1422, 10]) == []\n @assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @btime not defined

    in expression starting at /tmp/tmp7deqfodk.jl:21

    in expression starting at /tmp/tmp7deqfodk.jl:21

    '
  stdout: ''
  timestamp: 1659977980
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    n, u = length(x), Int64[]\n    for i in 1:n\n        if count_even_digits(x[i])\
    \ == 0\n            push!(u, x[i])\n        end\n    end\n    sort(u)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpixkcl2o4.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpixkcl2o4.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: count_even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpixkcl2o4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixkcl2o4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixkcl2o4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpixkcl2o4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: count_even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpixkcl2o4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixkcl2o4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixkcl2o4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpixkcl2o4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: count_even_digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpixkcl2o4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpixkcl2o4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpixkcl2o4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpixkcl2o4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: count_even_digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Define the vector that will contain the non-even digits\n    res = []\n\
    \    # Loop over x and check the digits\n    for i in x\n        # Find the digits\
    \ in i\n        digits = digits(i)\n        # Check if i has no even digit\n \
    \       if all(d % 2 != 0 for d in digits)\n            # If yes, push i to res\n\
    \            push!(res, i)\n        end\n    end\n    # sort the result\n    sort!(res)\n\
    \    # return the result\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv8eymqbh.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpv8eymqbh.jl:35\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8eymqbh.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8eymqbh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8eymqbh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv8eymqbh.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digits\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8eymqbh.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8eymqbh.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8eymqbh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv8eymqbh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digits not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv8eymqbh.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8eymqbh.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8eymqbh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv8eymqbh.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpv8eymqbh.jl:18\n\
    \   ["
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    odd_digits = []\n    for i = 1:length(x)\n        if x[i] < 10\n        \
    \    push!(odd_digits, x[i])\n        else\n            for j = 1:floor(log10(x[i]))\n\
    \                if mod(x[i], 10^j) == 0\n                    break\n        \
    \        elseif j == floor(log10(x[i]))\n                    push!(odd_digits,\
    \ x[i])\n                end\n            end\n        end\n    end\n    return\
    \ sort(odd_digits)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsav1qzrq.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpsav1qzrq.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsav1qzrq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsav1qzrq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsav1qzrq.jl:35\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsav1qzrq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsav1qzrq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsav1qzrq.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsav1qzrq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsav1qzrq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsav1qzrq.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsav1qzrq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsav1qzrq.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    even_digits = [2, 4, 6, 8, 0]\n    odd_digits = [1, 3, 5, 7, 9]\n    for\
    \ d in x \n        for e in even_digits\n            x[d] = x[d] - (x[d] - 10)/(10*e)\n\
    \        end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp29wh4efm.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp29wh4efm.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [15]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmp29wh4efm.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29wh4efm.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29wh4efm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp29wh4efm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [152]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmp29wh4efm.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29wh4efm.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29wh4efm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp29wh4efm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  BoundsError: attempt to\
    \ access 4-element Vector{Int64} at index [12345]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n   \
    \  @ Main /tmp/tmp29wh4efm.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp29wh4efm.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp29wh4efm.jl:26\ntest "
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # get all even digits\n    even_digits = [2, 4, 6, 8, 0]\n    # for each\
    \ element x in x\n    for i in eachindex(x)\n        # if x has even digits\n\
    \        for j in eachindex(x[i])\n            # remove it from x\n          \
    \  if x[i][j] in even_digits\n                deleteat!(x, i)\n              \
    \  break\n            end\n        end\n    end\n    # sort the remaining elements\
    \ of x in increasing order\n    return sort(x)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdg_swfk8.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpdg_swfk8.jl:34\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg_swfk8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg_swfk8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdg_swfk8.jl:35\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg_swfk8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg_swfk8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdg_swfk8.jl:36\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg_swfk8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg_swfk8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdg_swfk8.jl:37\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg_swfk8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg_swfk8.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977982
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    n = length(x)\n    unique = Vector{Int64}()\n    for i in 1:n\n        if\
    \ has_even_digit(x[i])\n            continue\n        else\n            push!(unique,\
    \ x[i])\n        end\n    end\n    sort!(unique)\n    return unique\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpec0domu2.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpec0domu2.jl:30\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpec0domu2.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpec0domu2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpec0domu2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpec0domu2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpec0domu2.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpec0domu2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpec0domu2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpec0domu2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: has_even_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpec0domu2.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpec0domu2.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpec0domu2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpec0domu2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: has_even_digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ "
  timestamp: 1659977983
- exit_code: 0
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = []\n    for n in x\n        if sum(isodd.(digits(n))) == length(digits(n))\n\
    \            push!(y, n)\n        end\n    end\n    sort(y)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x_odd = Int64[]\n    for x in x\n        if !(mod(x, 2) == 0)\n         \
    \   push!(x_odd, x)\n        end\n    end\n    return sort(x_odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppctvooxo.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmppctvooxo.jl:27\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppctvooxo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppctvooxo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppctvooxo.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppctvooxo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppctvooxo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppctvooxo.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppctvooxo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppctvooxo.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    odd_mask = .!(x .% 2 .== 0)\n    x[odd_mask]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa7wz07u8.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpa7wz07u8.jl:21\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7wz07u8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7wz07u8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa7wz07u8.jl:22\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7wz07u8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7wz07u8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa7wz07u8.jl:23\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7wz07u8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7wz07u8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa7wz07u8.jl:24\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa7wz07u8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa7wz07u8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    (x[x.%2 .!= 0])\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx6z4944s.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpx6z4944s.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6z4944s.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6z4944s.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx6z4944s.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6z4944s.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6z4944s.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx6z4944s.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6z4944s.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6z4944s.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx6z4944s.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6z4944s.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6z4944s.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    filtrado = filter(x) do z\n        for i in z\n            if mod(i,2) ==\
    \ 0\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return sort(filtrado)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3nbp4y1l.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp3nbp4y1l.jl:29\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nbp4y1l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nbp4y1l.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3nbp4y1l.jl:30\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nbp4y1l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nbp4y1l.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3nbp4y1l.jl:31\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nbp4y1l.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nbp4y1l.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659977983
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9a9dph5c.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp9a9dph5c.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9a9dph5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9a9dph5c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9a9dph5c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9a9dph5c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp9a9dph5c.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9a9dph5c.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659977965
