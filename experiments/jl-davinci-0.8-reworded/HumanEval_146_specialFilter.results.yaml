name: HumanEval_146_specialFilter
language: jl
results:
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i = 1:length(nums)\n        if (nums[i] > 10) && (nums[i]\
    \ % 2 != 0) && ((div(nums[i], 10) % 2 != 0) || (nums[i] % 10 != 0))\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3di7c91.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3di7c91.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3di7c91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq3di7c91.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3di7c91.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3di7c91.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq3di7c91.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq3di7c91.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3di7c91.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3di7c91.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    count = 0\n    for i in 1:n\n        if nums[i]\
    \ > 10 && (nums[i]%10 == 1 || nums[i]%10 == 3 || nums[i]%10 == 5 || nums[i]%10\
    \ == 7 || nums[i]%10 == 9) && nums[i] >=10\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfxdqv6s2.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxdqv6s2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxdqv6s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfxdqv6s2.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxdqv6s2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxdqv6s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfxdqv6s2.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfxdqv6s2.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxdqv6s2.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxdqv6s2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt = 0\n    for n in nums\n        first, last = divrem(n, 10)\n    \
    \    if n > 10 && first % 2 != 0 && last % 2 != 0\n            cnt += 1\n    \
    \    end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjilvkbr3.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjilvkbr3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjilvkbr3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjilvkbr3.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjilvkbr3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjilvkbr3.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjilvkbr3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    a = filter(x -> x > 10, nums)\n    b = filter(x -> x%2 != 0, a)\n\
    \    c = filter(x -> abs(x)%10%2 != 0, b)\n    \n    return length(c)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpi8q5h9.jl:25\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpi8q5h9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpi8q5h9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpfpi8q5h9.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpi8q5h9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpi8q5h9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpfpi8q5h9.jl:27\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfpi8q5h9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpi8q5h9.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpi8q5h9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total::Int64 = 0\n    for i = 1:length(nums)\n        num = nums[i]\n\
    \        if num > 10 && num%2 == 1 && num%10 == 1 || num%10 == 3 || num%10 ==\
    \ 5 || num%10 == 7 || num%10 == 9\n            total += 1\n        end\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvksoy6_0.jl:25\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvksoy6_0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvksoy6_0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvksoy6_0.jl:27\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvksoy6_0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvksoy6_0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvksoy6_0.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvksoy6_0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvksoy6_0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvksoy6_0.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvksoy6_0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvksoy6_0.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvksoy6_0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for i in nums \n        if i > 10 \n            i2 = convert(Int64,\
    \ string(i)[1])\n            i3 = convert(Int64, string(i)[end])\n           \
    \ if i2 % 2 != 0 \n                if i3 % 2 != 0 \n                    count\
    \ += 1 \n                end \n            end \n        end \n    end \n    return\
    \ count \nend \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"Function that takes a vector of numbers as input and returns \n\
    \    the number of elements in the vector that are greater than 10 and both \n\
    \    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n\
    \    nums_count = 0\n    for num in nums\n        num_count = 0\n        num_count\
    \ += Int64(num > 10)\n        if (num % 10 % 2 != 0) && (num % 10^2 % 2 != 0)\n\
    \            num_count += 1\n        end\n        nums_count += num_count\n  \
    \  end\n    return nums_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr3q96tw2.jl:31\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3q96tw2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3q96tw2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpr3q96tw2.jl:32\n  Expression: candidate([15, -73, 14, -15])\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3q96tw2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3q96tw2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpr3q96tw2.jl:33\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 9 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3q96tw2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3q96tw2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpr3q96tw2.jl:34\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 10 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3q96tw2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3q96tw2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpr3q96tw2.jl:35\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 9 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3q96tw2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpapt4q80x.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpapt4q80x.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapt4q80x.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapt4q80x.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpapt4q80x.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpapt4q80x.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapt4q80x.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapt4q80x.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return filter(x -> x > 10 && isodd(first(digits(x))) && isodd(last(digits(x))),\
    \ nums) |> length\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    first_digit(num::Int64) = (num % 10)\n    last_digit(num::Int64) = (num\
    \ \xF7 10) % 10\n    output = 0\n    for num in nums\n        if (num > 10) &&\
    \ (first_digit(num) % 2 != 0) && (last_digit(num) % 2 != 0)\n            output\
    \ += 1\n        end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrf8vee3.jl:28\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrf8vee3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrf8vee3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplrf8vee3.jl:29\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrf8vee3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrf8vee3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrf8vee3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        first = div(n, div(n, 10))\n   \
    \     last = n - first*div(n, 10)\n        if (first in [1, 3, 5, 7, 9]) && (last\
    \ in [1, 3, 5, 7, 9]) && (n > 10)\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa5b0wfsi.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  DivideError: integer division\
    \ error\n  Stacktrace:\n   [1] div\n     @ ./int.jl:284 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpa5b0wfsi.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa5b0wfsi.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa5b0wfsi.jl:25\ntest set:\
    \ Test Failed at /tmp/tmpa5b0wfsi.jl:27\n  Expression: candidate([15, -73, 14,\
    \ -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5b0wfsi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa5b0wfsi.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpa5b0wfsi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  DivideError: integer division error\n\
    \  Stacktrace:\n   [1] div\n     @ ./int.jl:284 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpa5b0wfsi.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa5b0wfsi.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa5b0wfsi.jl:25\ntest set:\
    \ Test Failed at /tmp/tmpa5b0wfsi.jl:29\n  Expression: candidate([43, -12, 93,\
    \ 125, 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa5b0wfsi.jl:29 [inlined]\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5b0wfsi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        @inbounds firstDigit = n % 10\n\
    \        @inbounds lastDigit = floor(n/10^(ceil(log10(n))))\n        if 10 < n\
    \ < 100\n            lastDigit = firstDigit\n        end\n        if (10 < n)\
    \ && (firstDigit % 2 != 0) && (lastDigit % 2 != 0)\n            count += 1\n \
    \       end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuj7sdt42.jl:29\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  DomainError with -2.0:\n  log10\
    \ will only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpuj7sdt42.jl:14\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpuj7sdt42.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpuj7sdt42.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuj7sdt42.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  DomainError with -73.0:\n  log10 will\
    \ only return a complex result if called with a complex argument. Try log10(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] _log(x::Float64, base::Val{10}, func::Symbol)\n\
    \     @ Base.Math ./special/log.jl:304\n   [3] log10\n     @ ./special/log.jl:270\
    \ [inlined]\n   [4] log10\n     @ ./math.jl:1221 [inlined]\n   [5] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpuj7sdt42.jl:14\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpuj7sdt42.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpuj7sdt42.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuj7sdt42.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuj7sdt42.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    for n in nums\n        if n > 10 && isodd(firstdigit(n))\
    \ && isodd(lastdigit(n))\n            total += 1\n        end\n    end\n    return\
    \ total\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf364e9zw.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstdigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpf364e9zw.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf364e9zw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf364e9zw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf364e9zw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpf364e9zw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf364e9zw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf364e9zw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf364e9zw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstdigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpf364e9zw.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf364e9zw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf364e9zw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf364e9zw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf364e9zw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i>10 && i%2 != 0 && i/10%2 !=\
    \ 0 && i%10 != 0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprb_vey_1.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprb_vey_1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb_vey_1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprb_vey_1.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprb_vey_1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb_vey_1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprb_vey_1.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprb_vey_1.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprb_vey_1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprb_vey_1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i > 10) && (i % 2 != 0) && ((i\
    \ % 10) % 2 != 0)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7eqtz1x0.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7eqtz1x0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7eqtz1x0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7eqtz1x0.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7eqtz1x0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7eqtz1x0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7eqtz1x0.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7eqtz1x0.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7eqtz1x0.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7eqtz1x0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for x in nums\n        if x > 10 && (x % 10 != 0) && (x % 10\
    \ != 2) && (x % 10 != 4) && (x % 10 != 6) && (x % 10 != 8)\n            x = div(x,\
    \ 10)\n            if (x % 10 != 0) && (x % 10 != 2) && (x % 10 != 4) && (x %\
    \ 10 != 6) && (x % 10 != 8)\n                n += 1\n            end\n       \
    \ end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrmczpde.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrmczpde.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrmczpde.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsrmczpde.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrmczpde.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrmczpde.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrmczpde.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    total = 0\n    @show total\n    for i in nums\n        @show i\n     \
    \   @show total\n        if i > 10\n            @show i\n            @show i %\
    \ 10\n            @show i // 10\n            if i % 10 != 0\n                if\
    \ i % 10 % 2 != 0\n                    if i // 10 % 2 != 0\n                 \
    \       total += 1\n                    end\n                end\n           \
    \ end\n        end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "total = 0\ni = 5\ntotal = 0\ni = -2\ntotal = 0\ni = 1\ntotal = 0\ni = -5\n\
    total = 0\ntotal = 0\ni = 15\ntotal = 0\ni = 15\ni % 10 = 5\ni // 10 = 3//2\n\
    i = -73\ntotal = 1\ni = 14\ntotal = 1\ni = 14\ni % 10 = 4\ni // 10 = 7//5\ni =\
    \ -15\ntotal = 1\ntotal = 0\ni = 33\ntotal = 0\ni = 33\ni % 10 = 3\ni // 10 =\
    \ 33//10\ni = -2\ntotal = 1\ni = -3\ntotal = 1\ni = 45\ntotal = 1\ni = 45\ni %\
    \ 10 = 5\ni // 10 = 9//2\ni = 21\ntotal = 2\ni = 21\ni % 10 = 1\ni // 10 = 21//10\n\
    i = 109\ntotal = 3\ni = 109\ni % 10 = 9\ni // 10 = 109//10\ntest set: Test Failed\
    \ at /tmp/tmpqn37brtk.jl:38\n  Expression: candidate([33, -2, -3, 45, 21, 109])\
    \ == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqn37brtk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqn37brtk.jl:35\ntotal = 0\ni =\
    \ 43\ntotal = 0\ni = 43\ni % 10 = 3\ni // 10 = 43//10\ni = -12\ntotal = 1\ni =\
    \ 93\ntotal = 1\ni = 93\ni % 10 = 3\ni // 10 = 93//10\ni = 125\ntotal = 2\ni =\
    \ 125\ni % 10 = 5\ni // 10 = 25//2\ni = 121\ntotal = 3\ni = 121\ni % 10 = 1\n\
    i // 10 = 121//10\ni = 109\ntotal = 4\ni = 109\ni % 10 = 9\ni // 10 = 109//10\n\
    test set: Test Failed at /tmp/tmpqn37brtk.jl:39\n  Expression: candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqn37brtk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqn37brtk.jl:35\ntotal = 0\ni =\
    \ 71\ntotal = 0\ni = 71\ni % 10 = 1\ni // 10 = 71//10\ni = -2\ntotal = 1\ni =\
    \ -33\ntotal = 1\ni = 75\ntotal = 1\ni = 75\ni % 10 = 5\ni // 10 = 15//2\ni =\
    \ 21\ntotal = 2\ni = 21\ni % 10 = 1\ni // 10 = 21//10\ni = 19\ntotal = 3\ni =\
    \ 19\ni % 10 = 9\ni // 10 = 19//10\ntest set: Test Failed at /tmp/tmpqn37brtk.jl:40\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqn37brtk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if (num > 10) && (num % 2 != 0)\
    \ && (num % 10 != 0) && (num % 100 != 0) && (num % 1000 != 0)\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb4zvid3d.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4zvid3d.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4zvid3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb4zvid3d.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4zvid3d.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4zvid3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb4zvid3d.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb4zvid3d.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4zvid3d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4zvid3d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    result = 0\n    for i in 1:n\n        if nums[i]\
    \ > 10\n            if (nums[i]%10 != 0 && nums[i]%10 != 2 && nums[i]%10 != 4\
    \ && nums[i]%10 != 6 && nums[i]%10 != 8) && (div(nums[i],10)%10 != 0 && div(nums[i],10)%10\
    \ != 2 && div(nums[i],10)%10 != 4 && div(nums[i],10)%10 != 6 && div(nums[i],10)%10\
    \ != 8)\n                result += 1\n            end\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfjeyv1ys.jl:29\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjeyv1ys.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjeyv1ys.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfjeyv1ys.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjeyv1ys.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjeyv1ys.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjeyv1ys.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n::Int64 = 0 \n    for i in nums \n        if i >= 10 && (firstDigit(i)\
    \ % 2 != 0) && (lastDigit(i) % 2 != 0)\n            n += 1\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbsgj4k61.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  UndefVarError: firstDigit\
    \ not defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n    \
    \ @ Main /tmp/tmpbsgj4k61.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbsgj4k61.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbsgj4k61.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbsgj4k61.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: firstDigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpbsgj4k61.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbsgj4k61.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbsgj4k61.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbsgj4k61.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  UndefVarError: firstDigit not\
    \ defined\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpbsgj4k61.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbsgj4k61.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbsgj4k61.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbsgj4k61.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  UndefVarError: firstDigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbsgj4k61.jl:21\n"
  exit_code: 1
  status: SyntaxError
