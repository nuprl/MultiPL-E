name: HumanEval_48_is_palindrome
language: jl
results:
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    length = Int(ceil(length(text)/2)) \n\
    \    for i in 1:length \n        if text[i] != text[end-i+1] \n            return\
    \ false \n        end \n    end \n    return true \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph9sw1ifd.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmph9sw1ifd.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9sw1ifd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9sw1ifd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph9sw1ifd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"aba\") == true\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmph9sw1ifd.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9sw1ifd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9sw1ifd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph9sw1ifd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmph9sw1ifd.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9sw1ifd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9sw1ifd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph9sw1ifd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"zbcd\") == false\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] is_palindrome(text::String)\n     @ Main /tmp/tmph9sw1ifd.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9sw1ifd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    n = length(text)\n    for i in 1:n\n\
    \        if text[i] != text[n-i+1]\n            return false\n        end\n  \
    \  end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) < 2\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    N = length(text)\n    for i in 1:N/2\n\
    \        if(text[i] != text[N-i+1])\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp502xcmh_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"aba\") == true\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp502xcmh_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp502xcmh_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp502xcmh_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp502xcmh_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaaa\") == true\n  MethodError: no method matching getindex(::String,\
    \ ::Float64)\n  Closest candidates are:\n    getindex(::AbstractString, !Matched::Colon)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\n    getindex(::String,\
    \ !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\n\
    \    getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\n\
    \    ...\n  Stacktrace:\n   [1] is_palindrome(text::String)\n     @ Main /tmp/tmp502xcmh_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp502xcmh_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp502xcmh_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp502xcmh_.jl:29\n  Test threw excep"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp502xcmh_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    text == reverse(text)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    \"\"\"\n    Checks if given string is\
    \ a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \"\"\"\n    # import chararray\n    # text = chararray.array(text)\n\
    \    #return text == reverse(text)\n    return text == reverse(text)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\"\
    ) == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\")\
    \ == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    len = length(text)\n    for i in 1:len\n\
    \        if text[i] != text[len-i+1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    k = length(text)\n    for i in 1:ceil(k/2)\n\
    \        if text[i] != text[k-i+1]\n            return false\n        end\n  \
    \  end\n    return true\nend\n```\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfp9btroa.jl:21\nin expression starting at\
    \ /tmp/tmpfp9btroa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    length(text) <= 1 || text[1] == text[end]\
    \ && is_palindrome(text[2:end-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    l = length(text)\n    for i in 1:l\n\
    \        if text[i] != text[l-i+1]\n            return false\n        end\n  \
    \  end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0\n        return\
    \ true\n    else\n        i = 1\n        j = length(text)\n        while i < j\n\
    \            if !(text[i] == text[j])\n                return false\n        \
    \    end\n            i = i + 1\n            j = j - 1\n        end\n        return\
    \ true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    n = length(text)\n    for i in 0:floor(Int,n/2)\n\
    \        if text[i+1] != text[n-i]\n            return false\n        end\n  \
    \  end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvf437i9f.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == true\n  BoundsError: attempt to access empty\
    \ String at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_palindrome(text::String)\n\
    \     @ Main /tmp/tmpvf437i9f.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpvf437i9f.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpvf437i9f.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    6      1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvf437i9f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    len = length(text)\n    for i in 1:len\n\
    \        if text[i] != text[len-i+1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    \n    for index in 1:length(text)\n\
    \        if text[index] != text[length(text) - index + 1]\n            return\
    \ false\n        end\n    end\n    \n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) < 2 \n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    for i = 1:div(length(text),2)\n    \
    \    if text[i] != text[end - i + 1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n  if length(text) <= 1\n    return true\n\
    \  elseif text[1] != text[end]\n    return false\n  else\n    is_palindrome(text[2:end-1])\n\
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    text == reverse(text)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\
    \t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t\
    @test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\") == true)\n\t\
    @test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) <= 1\n        return\
    \ true\n    elseif text[1] != text[end]\n        return false\n    else\n    \
    \    return is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\
    \")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    \"\"\"\nfunction\
    \ is_palindrome(text::String)::Bool \n    if length(text) == 0 || length(text)\
    \ == 1 \n        return true\n    elseif text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
