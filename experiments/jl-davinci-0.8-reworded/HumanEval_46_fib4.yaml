name: HumanEval_46_fib4
language: jl
prompt: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) ->\
  \ 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  \    Please write a function to efficiently compute the n-th element of the fib4\
  \ number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n\
  \    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
  \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
  \ == 386)\nend\n"
completions: ["    f1 = 0\n    f2 = 0\n    f3 = 2\n    f4 = 0\n    i = 3\n    while\
    \ i <= n\n        f5 = f1 + f2 + f3 + f4\n        f1 = f2\n        f2 = f3\n \
    \       f3 = f4\n        f4 = f5\n        i += 1\n    end\n    f5\nend", "   \
    \ if n==0\n        0\n    elseif n==1\n        0\n    elseif n==2\n        2\n\
    \    elseif n==3\n        0\n    else\n        a = Array{Int64}(undef,n)\n   \
    \     a[1] = 0\n        a[2] = 0\n        a[3] = 2\n        a[4] = 0\n       \
    \ for i = 5:n\n            a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4]\n        end\n\
    \        a[n]\n    end\nend", "    if n<3\n        return n\n    end\n    n1,\
    \ n2, n3, n4 = 0, 0, 2, 0\n    for i in 4:n\n        n1, n2, n3, n4 = n2, n3,\
    \ n4, n1+n2+n3+n4\n    end\n    return n4\nend", "    if n<=3\n        return\
    \ 0\n    end\n    if n==4\n        return 2\n    end\n    a=0\n    b=0\n    c=0\n\
    \    d=2\n    for i=5:n\n        t=a+b+c+d\n        a=b\n        b=c\n       \
    \ c=d\n        d=t\n    end\n    return d\nend\nfib4(30)\n ", "    if n == 0 return\
    \ 0\n    if n == 1 return 0\n    if n == 2 return 2\n    if n == 3 return 0\n\
    \    f1, f2, f3, f4 = 0, 0, 2, 0\n    i = 4\n    while i <= n\n        f1, f2,\
    \ f3, f4 = f2, f3, f4, f1 + f2 + f3 + f4\n        i += 1\n    end\n    return\
    \ f4\nend", "    a, b, c, d = 0, 0, 2, 0\n    if n == 0\n        return a\n  \
    \  elseif n == 1\n        return b\n    elseif n == 2\n        return c\n    elseif\
    \ n == 3\n        return d\n    else\n        for i in range(n-3)\n          \
    \  a, b, c, d = b, c, d, a+b+c+d\n        end\n        return d\n    end\nend",
  "    fib = [0, 0, 2, 0]\n    if n < 4\n        return fib[n+1]\n    end\n    for\
    \ k = 4:n\n        fib[1] = fib[2]\n        fib[2] = fib[3]\n        fib[3] =\
    \ fib[4]\n        fib[4] = fib[1] + fib[2] + fib[3]\n    end\n    return fib[4]\n\
    end", "  # YOUR CODE HERE\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n\
    \    for i in 1:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    d\n\
    end", "    a = Array{Int64}(undef, n+1)\n    a[1] = 0\n    a[2] = 0\n    a[3]\
    \ = 2\n    a[4] = 0\n    for i in 5:n+1\n        a[i] = a[i-1] + a[i-2] + a[i-3]\
    \ + a[i-4]\n    end\n    return a[n+1]\nend", "    if n == 0 || n == 1\n     \
    \   return 0\n    elseif n == 2\n        return 2\n    elseif n == 3\n       \
    \ return 0\n    else\n        f = [0 for _ in 1:4]\n        for i in 4:n\n   \
    \         f[4] = f[3] + f[2] + f[1] + f[0]\n            f[0:3] = f[1:4]\n    \
    \    end\n        return f[4]\n    end\nend", "    if n < 2\n        return 0\n\
    \    elseif n < 3\n        return 2\n    elseif n < 4\n        return 0\n    else\n\
    \        f1 = 0\n        f2 = 0\n        f3 = 2\n        f4 = 0\n        tmp =\
    \ 0\n        for i = 4:n\n            tmp = f1 + f2 + f3 + f4\n            f1\
    \ = f2\n            f2 = f3\n            f3 = f4\n            f4 = tmp\n     \
    \   end\n        return f4\n    end\nend", "    v1, v2, v3, v4 = 0, 0, 2, 0\n\
    \    for i in 1:n-3\n        v1, v2, v3, v4 = v2, v3, v4, v1 + v2 + v3 + v4\n\
    \    end\n    return v4\nend", "    if n <= 3 \n        return n - 1\n    end\n\
    \    a = 1\n    b = 0\n    c = 0\n    d = 0\n    for i in 4:n\n        t = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = t\n    end\n\
    \    return d\nend", "    if n < 0\n        error(\"undefined for negative numbers\"\
    )\n    end\n    return fib4_helper(n)[4]\nend", "    return fibonacci(n, [0, 0,\
    \ 2, 0])\nend\nfib4(3)", "    if n <= 3\n        return 0\n    end\n    if n ==\
    \ 4\n        return 2\n    end\n    a = 0\n    b = 0\n    c = 0\n    d = 2\n \
    \   while n > 4\n        tmp = a + b + c + d\n        a = b\n        b = c\n \
    \       c = d\n        d = tmp\n        n -= 1\n    end\n    return a + b + c\
    \ + d\nend", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n\
    \    else\n        a = 0;\n        b = 0;\n        c = 2;\n        d = 0;\n  \
    \      for i in 4:n\n            e = a + b + c + d\n            a = b\n      \
    \      b = c\n            c = d\n            d = e\n        end\n        return\
    \ d\n    end\nend", "    a::Int64, b::Int64, c::Int64, d::Int64 = 0, 0, 2, 0\n\
    \    for i::Int64 in 3:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n\
    \    return a + b + c + d\nend", "    if n < 4\n        return n - 1\n    end\n\
    \    a, b, c, d = 0, 0, 2, 0\n    for i in 4:n\n        a, b, c, d = b, c, d,\
    \ (a + b + c + d)\n    end\n    return d\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
