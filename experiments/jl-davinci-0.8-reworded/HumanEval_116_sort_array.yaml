name: HumanEval_116_sort_array
language: jl
prompt: "\"\"\"\n    In this Kata, you have to sort a vector of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    return sort(arr, by = x -> (sum(digits(x, 2)), x))\nend", "   \
    \ return sort(arr)\nend", "    tmp = sort(collect(zip(arr, [sum(parse.(Int, bits(i)))\
    \ for i in arr])), by=x->(x[2], x[1]))\n    return [x[1] for x in tmp]\nend",
  "    temp = [0 for _ in 1:length(arr)]\n    for i in 1:length(arr)\n        arr[i]\
    \ = convert(UInt64, arr[i])\n        temp[i] = zero_one_ratio(arr[i])\n    end\n\
    \    sorted_indices = sortperm(temp)\n    sorted_arr = [arr[i] for i in sorted_indices]\n\
    \    return sorted_arr\nend", "    \"\"\"\n    In this Kata, you have to sort\
    \ a vector of non-negative integers according to\n    number of ones in their\
    \ binary representation in ascending order.\n    For similar number of ones, sort\
    \ based on decimal value.", "  len::Int64 = length(arr)\n  i::Int64 = 1\n  while\
    \ i <= len\n    j::Int64 = 1\n    while j <= len - i\n      if (arr[j] > arr[j\
    \ + 1]) && (bin(arr[j]) == bin(arr[j + 1]))\n        arr[j], arr[j + 1] = arr[j\
    \ + 1], arr[j]\n      end\n      j += 1\n    end\n    i += 1\n  end\n  i = 1\n\
    \  while i <= len\n    j = 1\n    while j <= len - i\n      if length(bin(arr[j]))\
    \ > length(bin(arr[j + 1]))\n        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\
    \      end\n      j += 1\n    end\n    i += 1\n  end\n  return arr\nend", "  \
    \  arr\nend", "    return sort(arr, by=x->(count_ones(x), x))\nend", "    # sort\
    \ by number of ones\n    d = Dict()\n    for x in arr\n        b = Base.bitcount(x)\n\
    \        push!(get!(d, b, []), x)\n    end\n    # sort each subarray\n    for\
    \ k in keys(d)\n        d[k] = sort(d[k])\n    end\n    # concatenate subarrays\n\
    \    res = []\n    for k in sort(collect(keys(d)))\n        append!(res, d[k])\n\
    \    end\n    return res\nend", "    # Note the return type of the function for\
    \ the format constraint\n    # YOUR CODE HERE\nend", "    \"\"\"\n    Sort vector\
    \ according to number of ones in binary representation of elements.\n    \"\"\"\
    \n    X = sortperm(arr)\n    Y = reverse(arr[X])\n    return Y\nend", "    sort(arr,\
    \ by = x -> [count_ones(x), x])\nend", "    return sortperm(arr, by = x -> (sum(bits(x)),\
    \ x))\nend", "    \"\"\"\n    Function to sort a vector of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n    \"\
    \"\"\n    binArr = convert.(Vector{Int64}, binary(arr))\n    newArr = sortperm(binArr,\
    \ rev=true)\n    arr = arr[newArr]\n    return arr\nend", "    arr = sort(arr,\
    \ (x, y) -> (count_digits(x) == count_digits(y) ? x <=> y : count_digits(x) <=>\
    \ count_digits(y)))\n    return arr\nend", "    numones = Dict{Int64,Vector{Int64}}()\n\
    \    for x in arr\n        num = x\n        ones = 0\n        while num > 0\n\
    \            ones += 1\n            num = floor(num/2)\n        end\n        if\
    \ haskey(numones, ones)\n            push!(numones[ones], x)\n        else\n \
    \           numones[ones] = [x]\n        end\n    end\n    sorted_arr = []\n \
    \   for (ones, vec) in numones\n        sort!(vec)\n        push!(sorted_arr,\
    \ vec)\n    end\n    return vcat(sorted_arr...)\nend", "    # your code goes here\n\
    \    return sort(arr, by=x->[(bitstring(x)).count(\"1\"), x])\nend", '    # Your
    code here', "    return sort(arr)\nend", "    sort(arr, by=x->(count_ones(x),\
    \ x))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
