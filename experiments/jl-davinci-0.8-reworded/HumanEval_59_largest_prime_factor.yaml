name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    i = 2\n    while i * i <= n\n        while n % i == 0\n       \
    \     n = n / i\n        end\n        i = i + 1\n    end\n    return n\nend",
  "    while !isprime(n)\n        # Find the smallest prime factor of n\n        #\
    \ We start looking at 2 since we know n is not prime\n        i = 2\n        while\
    \ n % i != 0\n            i += 1\n        end\n        n = n \xF7 i\n    end\n\
    \    return n\nend", "    \"your code here\"\nend", "    factors = []\n    for\
    \ i in 2:n \n        if n % i == 0 \n            push!(factors, i)\n         \
    \   if isprime(i)\n                largest_prime = i\n            end\n      \
    \  end\n    end\n    return largest_prime\nend", "    p = 1\n    i = 2\n    while\
    \ i <= n \n        while n % i == 0 && i > p\n            p = i\n            n\
    \ = n / i\n        end\n        i += 1\n    end\n    return p\nend", "    if isprime(n)\
    \ \n        return n\n    end\n    factor = 2\n    while n % factor != 0 \n  \
    \      factor += 1\n    end\n    if isprime(factor)\n        return factor\n \
    \   else\n        return largest_prime_factor(n / factor)\n    end\nend", "  \
    \  i = 2\n    while n % i != 0\n        i += 1\n    end\n    if n == i\n     \
    \   return n\n    else\n        return largest_prime_factor(n / i)\n    end\n\
    end\n@assert largest_prime_factor(13195) == 29\n@assert largest_prime_factor(2048)\
    \ == 2", "    # fill this in \nend\n```\n* C\n```C\n/**\n * Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n */\nint largest_prime_factor(int\
    \ n) {\n    // fill this in\n}\n```", "    largest_factor = 0\n    factor = 2\n\
    \    while n > 1 \n        while rem(n, factor) == 0 \n            largest_factor\
    \ = factor\n            n /= factor\n        end\n        factor += 1\n    end\n\
    \    return largest_factor\nend\n@time @test largest_prime_factor(600851475143)\
    \ == 6857", "    start = n\n    while n % 2 == 0\n        n = n / 2\n    end\n\
    \    i = 3\n    while i < start\n        while n % i == 0\n            n = n /\
    \ i\n        end\n        i = i + 2\n    end\n    return n\nend", "    i::Int64\
    \ = 2\n    while i*i <= n\n        while n % i == 0\n            n = n / i\n \
    \       end\n        i = i + 1\n    end\n    return n\nend", "    for i in [2:n-1]\n\
    \        if isprime(i)\n            if n % i == 0\n                return i\n\
    \            end\n        end\n    end\nend", "    factor = 2\n    while n % factor\
    \ != 0\n        factor += 1\n    end\n    if n == factor\n        return n\n \
    \   else\n        return largest_prime_factor(n/factor)\n    end\nend", "    #below\
    \ 100,000,000,000\n    list_ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033,\
    \ 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,\
    \ 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187", "    for p in primes(2,n+1)\n\
    \        if n % p == 0\n            return p\n        end\n    end\nend", "  \
    \  if n % 2 == 0 return largest_prime_factor(n / 2)\n    i = 3\n    while i *\
    \ i <= n\n        if n % i == 0 return largest_prime_factor(n / i)\n        i\
    \ += 2\n    end\n    return n\nend", "    return 1\nend\n```\n#### New Approach",
  "    for i = 2:Int64(sqrt(n))\n        if n % i == 0\n            i = largest_prime_factor(i)\n\
    \            j = largest_prime_factor(n / i)\n            return max(i, j)\n \
    \       end\n    end\n    return n\nend", "    if n == 1\n        return 1\n \
    \   end\n    if isprime(n)\n        return n\n    end\n    for p in primes(n)\n\
    \        if n % p == 0\n            return p\n        end\n    end\nend", "  \
    \  factors = divisors(n)\n    for f in reverse(factors)\n        if isprime(f)\n\
    \            return f\n        end\n    end\nend", "    p = 2;\n    while p <=\
    \ sqrt(n)\n        while n % p == 0\n            n = n / p\n        end\n    \
    \    p = p + 1\n    end\n    n\nend", "    factor = 2\n    while (n % factor !=\
    \ 0)\n        factor += 1\n    end\n    if (n == factor)\n        return n\n \
    \   else\n        return largest_prime_factor(n / factor)\n    end\nend", "  \
    \  factor = 2\n    while n > 1\n        while n % factor == 0\n            n /=\
    \ factor\n        end\n        factor += 1\n    end\n    return factor - 1\nend",
  "    i = 2\n    while i <= sqrt(n)\n        while n % i == 0\n            n = n\
    \ / i\n        end\n        i += 1\n    end\n    return n\nend", "    i = 2\n\
    \    while i <= sqrt(n)\n        while rem(n, i) == 0\n            n = div(n,\
    \ i)\n        end\n        i += 1\n    end\n    n\nend", "    for i in 2:n-1\n\
    \        while n % i == 0\n            n = n / i\n        end\n    end\n    return\
    \ n\nend\n \n@test largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048)\
    \ == 2", "    primes = primes_from_2_to(n//2)\n    #while prod(primes) < n\n \
    \   while prod(primes) < n\n        nthprime(length(primes)+1)\n        push!(primes,\
    \ nthprime(length(primes)+1))\n    end\n    n / prod(primes)\nend", "    if n\
    \ < 2 || isprime(n)\n        return n\n    end\n    return largest_prime_factor(largest_factor(n))\n\
    end", "    n_max = n\n    while n % 2 == 0\n        n_max = 2\n        n = n /\
    \ 2\n    end\n    i = 3\n    while i <= n\n        while n % i == 0\n        \
    \    n_max = i\n            n = n / i\n        end\n        i = i + 2\n    end\n\
    \    return n_max\nend", "    for i in 2:n \n        if i != n && n % i == 0 &&\
    \ is_prime(i)\n            return i\n        end\n    end\nend\n ", "    \n  \
    \  factors = factorize(n)\n    largest_factor = maximum(factors)\n    return largest_factor\n\
    end", "    primes = divisors(n)\n    return primes[end]\nend\n# Exercise 2\n\"\
    \"\"Return the sum of all even Fibonacci numbers less than N.\n    >>> even_fib_sum(10)\n\
    \    10\n    >>> even_fib_sum(100)\n    44\n    \"\"\"", "    d = 2 \n    while\
    \ d * d <= n \n        while n % d == 0 \n            n = n / d \n        end\
    \ \n        d = d + 1 \n    end \n    n \nend ", "    if isprime(n)\n        return\
    \ n\n    end\n    factor = get_factor(n)\n    while factor != n\n        n = n/factor\n\
    \        factor = get_factor(n)\n    end\n    return factor\nend", "    # n >\
    \ 1 and n not prime\n    @assert n > 1\n    @assert n % primes(n)[end] != 0\n\
    \    # Initialize loop variables\n    p_max = primes(n)[end]\n    n_sqrt = ceil(sqrt(n))\n\
    \    # Loop over primes greater than n_sqrt\n    for p in primes(n)[1:end]\n \
    \       if p > n_sqrt\n            break\n        end\n        # If p divides\
    \ n, continue\n        if n % p == 0\n            p_max = p\n            break\n\
    \        end\n    end\n    return p_max\nend\n@time largest_prime_factor(600851475143)",
  "    f = 1\n    while n % 2 == 0\n        f = 2\n        n = n / 2\n    end\n  \
    \  if n == 1\n        return f\n    end\n    p = 3\n    while n != 1\n       \
    \ while n % p == 0\n            f = p\n            n = n / p\n        end\n  \
    \      p = p + 2\n    end\n    return f\nend", "    p = 2\n    while n%p != 0\n\
    \        p += 1\n    end\n    if n==p\n        return n\n    else\n        return\
    \ largest_prime_factor(n/p)\n    end\nend", "    factors = factor(n)\n    return\
    \ maximum(factors)\nend", "    # First, get the factors of n\n    factors = get_factors(n)\n\
    \    # Then, check the factors in descending order to see if they are prime.\n\
    \    # If they are, then we return the first one.\n    primes = get_primes(n)\n\
    \    sorted_factors = sort(factors, rev=true)\n    for factor in sorted_factors\n\
    \        if is_prime(factor, primes)\n            return factor\n        end\n\
    \    end\nend", "    factor = 2\n    while n > 1\n        while n % factor ==\
    \ 0\n            n /= factor\n        end\n        factor += 1\n    end\n    return\
    \ factor - 1\nend", "    return find_largest_prime_factor(n, 2)\nend", "    #\
    \ divide out 2 until n is odd\n    while mod(n, 2) == 0\n        n = n / 2\n \
    \   end\n    # now n is odd\n    # take out all odd prime factors, until n is\
    \ prime\n    d = 3\n    while !isprime(n)\n        while mod(n, d) == 0\n    \
    \        n = n / d\n        end\n        d = d + 2\n    end\n    return n\nend",
  "    i = 2\n    while i \u2264 \u221A(n)\n        while n % i == 0\n           \
    \ n = n / i\n        end\n        i += 1\n    end\n    return n\nend", "    #first\
    \ check to see if the number is divisible by 2\n    div=0\n    p=0\n    if n%2==0\n\
    \        div=2\n        n=n/2\n        largest_prime_factor(n)\n    else\n   \
    \     #otherwise look for odd factors\n        for i=3:n\n            if n%i==0\n\
    \                div=i\n                n=n/i\n                largest_prime_factor(n)\n\
    \            end\n        end\n    end\n    #the largest prime factor will be\
    \ the last divisible factor\n    if div!=0\n        p=div\n    end\n    return\
    \ p\nend", "    n::Int64\n    n > 1 && !isprime(n) || error(\"Assumption violated:\
    \ n>1, not prime.\")\n    for i in factor(n):\n        if isprime(i):\n      \
    \      return i\nend;\n \n@test largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048)\
    \ == 2", "    while n % 2 == 0 \n        n = n/2\n    end\n    i = 3\n    while\
    \ i <= sqrt(n)\n        while n % i == 0\n            n = n/i\n        end\n \
    \       i = i + 2\n    end\n    return n\nend", "    max = 0\n    limit = Int64(floor(sqrt(n)))\n\
    \    for i = limit, 2, -1\n        if n % i == 0\n            if is_prime(i)\n\
    \                return i\n            end\n        end\n    end\nend", "    factors\
    \ = []\n    factor = 2\n    while n > 1:\n        if n % factor == 0\n       \
    \     factors.append(factor)\n            n = n / factor\n        else\n     \
    \       factor += 1\n    end\n    return factors[end]\nend", "    # n is the value\
    \ given by the question\n    # make a function that checks if given value is a\
    \ prime or not. If it is, then return prime.\n    # if not, factor that value\
    \ and check if it is prime using the same function.\n    # continue doing this\
    \ until the value is prime.\n    # then continue the same process with the next\
    \ value.\n    # the largest of these values is the answer.\n    # just like the\
    \ mathematical definition of prime factors, break the number into prime factors\
    \ and multiply the primes to get back the original number.\n    # remember to\
    \ only find the number that is the largest prime factor\n    # need to find how\
    \ to find the prime factors.\n    # how?\n    # brute force. can use the divisor\
    \ function that we made in another tutorial.\n    # make a for loop for every\
    \ number from 2 to n-1\n    # if divisor(n,i) == true, then i is a factor of n\n\
    \    # however, we only want the prime factors\n    # so, we need to make sure\
    \ that i is prime before we do the first check\n    # so, make sure that i is\
    \ prime using the isprime function we made in another tutorial\n    # however,\
    \ if we use the isprime function, we need to do another check.\n    # the isprime\
    \ function checks if a given number is prime or not\n    # but, we need to check\
    \ if that prime number is a factor of n\n    # so, we need to use another function,\
    \ the divisor function, to check if the prime number is a factor of n.\n    #\
    \ okay, now we know what to do.\n    # we will check if a number i is prime using\
    \ the isprime function\n    # if it is, then we check if that prime number is\
    \ a factor of n.\n    # then, if it is a factor of n, then we check if that prime\
    \ number is the largest factor found so far.\n    # so, we need to keep track\
    \ of the largest prime factor found so far.\n    # this will be the max_factor\
    \ value.\n    # so, the first thing we do is set the max_factor value to -1, because\
    \ there are no factors yet.\n    # then, we start the for loop\n    # in the for\
    \ loop, we use the isprime function to check", "    p::Int64 = 2\n    while n\
    \ != 1\n        if isprime(p) && n % p == 0\n            n = n // p\n        else\n\
    \            p += 1\n        end\n    end\n    return p\nend", "    @assert n\
    \ > 1\n    @assert ! isprime(n)\n    return 0\nend", "    ############## Define\
    \ our problem ##############\n    #   We want to find the largest prime factor\
    \ of n\n    #   The largest factor of n will be sqrt(n), so we'll only loop up\
    \ to that point.\n    #   We'll first check if n is prime, and if it is, we'll\
    \ return it.\n    #   We'll now loop through all numbers i between 2 and sqrt(n),\
    \ checking if it's a factor of n.\n    #   If it is, we'll divide out n by i and\
    \ then recursively call this function.\n    #   If not, we'll just loop i and\
    \ continue searching for a factor of n.\n    #   If we have already looped through\
    \ all numbers from 2 to sqrt(n) and have not found a factor, then n must be prime.\n\
    \    #   We'll return n in this case.\n    ############## Define our problem ##############\n\
    \    \n    ############## Initialize variables ##############\n    if is_prime(n)\n\
    \        ############## Return if n is prime ##############\n        return n\n\
    \        ############## Return if n is prime ##############\n    else\n      \
    \  ############## Loop through all potential factors ##############\n        for\
    \ i in 2:sqrt(n)\n            if n % i == 0\n                ############## Return\
    \ largest prime factor of n/i ##############\n                return largest_prime_factor(n/i)\n\
    \                ############## Return largest prime factor of n/i ##############\n\
    \            end\n        end\n        ############## Loop through all potential\
    \ factors ##############\n    end\n    ############## Initialize variables ##############\n\
    end\n############## Define our function ##############", "    x = n\n    d = 2\n\
    \    while x != 1 && d <= x\n        if x % d == 0\n            x = x / d\n  \
    \      else\n            d = d + 1\n        end\n    end\n    return d\nend\n\
    #ex2()", '    is_prime(factor) || continue', "    \"\"\"Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in 2:n\
    \ \n        if n % i == 0\n            factor = n / i\n            if isprime(factor)\n\
    \                return factor\n            else\n                return largest_prime_factor(factor)\n\
    \            end\n        end\n    end\nend\nlargest_prime_factor(13195)", " \
    \   p = 2\n    while p <= n\n        if n % p == 0\n            n = n \xF7 p\n\
    \        else\n            p = p + 1\n        end\n    end\n    return p\nend",
  "    # test if n is divisible by 2\n    if n % 2 == 0\n        return largest_prime_factor(n\
    \ \xF7 2)\n    end\n    # test odd numbers from 3 to sqrt(n) + 1\n    for i =\
    \ 3:sqrt(n) + 1:2\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    # n is prime, return n\n    return n\nend",
  "    while n % 2 == 0\n        n = n / 2\n    end\n    prime = 3\n    while n !=\
    \ 1\n        while n % prime == 0\n            n = n / prime\n        end\n  \
    \      prime += 2\n    end\n    return prime - 2\nend;\n@assert largest_prime_factor(13195)\
    \ == 29\n@assert largest_prime_factor(2048) == 2\n \nlargest_prime_factor(600851475143)",
  "    for i = n:-1:2\n        if n % i == 0\n            if is_prime(i)\n       \
    \         return i\n            end\n        end\n    end\nend", "    p = 2\n\
    \    while p*p <= n\n        while n % p == 0\n            n = n/p\n        end\n\
    \        p = p + 1\n    end\n    return n\nend", "    if n <= 1 \n        return\
    \ n\n    end\n    count = 2\n    while n > 1\n        if n % count == 0\n    \
    \        n /= count\n        else\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    p = 2\n    while n > p\n        if n % p == 0\n\
    \            n = n / p\n        else\n            p += 1\n        end\n    end\n\
    \    return p\nend", "    if isprime(n)\n        return n\n    end\n    factor_list\
    \ = list()\n    divisor = 2\n    while divisor <= n/2\n        if isdivisible(n,\
    \ divisor)\n            factor_list = append!(factor_list, largest_prime_factor(divisor))\n\
    \        end\n        divisor += 1\n    end\n    return maximum(factor_list)\n\
    end", "    # Find the smallest prime factor of n\n    # If n is prime, return\
    \ n\n    # If n is not prime, return largest_prime_factor(n/smallest_prime_factor(n))\n\
    \    current_factor = smallest_prime_factor(n)\n    if current_factor == n\n \
    \       return n\n    else\n        return largest_prime_factor(n/current_factor)\n\
    \    end\nend", "    factors = prime_factors(n)\n    return factors[end]\nend\n\
    largest_prime_factor(600851475143)", "    for f = trunc(Int64, sqrt(n)) :- 1 :\
    \ 2\n        if n % f == 0\n            if is_prime(f)\n                return\
    \ f\n            end\n        end\n    end\nend", "    prime_factors = primes(n)\n\
    \    return maximum(prime_factors)\nend\n@benchmark largest_prime_factor(600851475143)",
  "    factors = primes(n)\n    return factors[end]\nend", "    for i = trunc(Int64,\
    \ sqrt(n)) :-1: 2\n        if n % i == 0\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n \xF7 i))\n        end\n    end\n    return n\nend", " \
    \   factor = 2\n    while n%factor != 0\n        factor += 1\n    end\n    return\
    \ factor\nend", "    if isprime(n)\n        return n\n    end\n    for i = 2:sqrt(n)\n\
    \        if rem(n, i) == 0\n            return largest_prime_factor(n / i)\n \
    \       end\n    end\nend", "    if !is_even(n) \n        return largest_prime_factor(n\xF7\
    2)\n    elseif is_prime(n)\n        return n\n    else\n        for i=3:2:floor(Int64,\
    \ sqrt(n)) \n            if is_prime(i) && n%i == 0\n                return largest_prime_factor(n\xF7\
    i)\n            end\n        end\n    end\nend", "    largest = 0\n    i = 2\n\
    \    while i < Int64(sqrt(n)) + 1\n        if (n % i == 0) && is_prime(i)\n  \
    \          largest = i\n        end\n        i += 1\n    end\n    return largest\n\
    end\nprintln(largest_prime_factor(600851475143))", "    # define all primes\n\
    \    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\
    \ 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\
    \ 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\
    \ 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,\
    \ 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,\
    \ 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\
    \ 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\
    \ 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\
    \ 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953,\
    \ 967, 971, 977, 983, 991, 997]\n    # find the largest prime factor\n    for\
    \ i in primes\n        if n % i == 0\n            n /= i\n        end\n    end\n\
    \    return n\nend", "    x = floor(Int64, sqrt(n)) \n    for i in reverse(primes(x))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend;\n@time\
    \ largest_prime_factor(600851475143)", "    primes = sieve_of_eratosthenes(n)\n\
    \    for p in primes[end:-1:1] # largest to smallest prime number\n        if\
    \ (n % p == 0)\n            return p\n        end\n    end\nend\n@time largest_prime_factor(600851475143)",
  "    for i in primes(:stop=>n/2)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i = div(n, 2):-1:2\n        isprime = true\n\
    \        for j = 2:div(i, 2)\n            if div(i, j) == 0\n                isprime\
    \ = false\n                break\n            end\n        end\n        if isprime\
    \ && div(n, i) == 0\n            return i\n        end\n    end\nend", "    prime_factors\
    \ = [1]\n    for i = 2:floor(Int64, sqrt(n))\n        while n % i == 0\n     \
    \       n = n / i\n            push!(prime_factors, i)\n        end\n    end\n\
    \    if n != 1\n        push!(prime_factors, n)\n    end\n    return maximum(prime_factors)\n\
    end", "    factor = 2\n    last_factor = 1\n    while n > 1\n        if mod(n,\
    \ factor) == 0\n            last_factor = factor\n            n = n / factor\n\
    \            while mod(n, factor) == 0\n                n = n / factor\n     \
    \       end\n        end\n        factor = factor + 1\n    end\n    return last_factor\n\
    end", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"\n    factors = prime_factors(n)\n    return factors[end]\n\
    end", "    prime_factor = 1\n    i = 2\n    while n > 1 && i <= n \n        if\
    \ n % i == 0 \n            prime_factor = i\n            while n % i == 0 \n \
    \               n /= i\n            end\n        end\n        i += 1\n    end\n\
    \    return prime_factor\nend", "    factor = 2\n    while factor*factor <= n\n\
    \        while n % factor == 0\n            n /= factor\n        end\n       \
    \ factor += 1\n    end\n    return n\nend", "    i = 2\n    while i <= sqrt(n)\n\
    \        while n % i == 0\n            n = n / i\n        end\n        i += 1\n\
    \    end\n    return n\nend", "    max = 0\n    for i in 2:n\n        if n % i\
    \ == 0\n            if is_prime(i)\n                max = i\n            end\n\
    \        end\n    end\n    return max\nend", "    if isprime(n)\n        return\
    \ n\n    end\n    for i = 2:n-1\n        if n % i == 0 && isprime(i)\n       \
    \     return largest_prime_factor(n / i)\n        end\n    end\nend", "    factors\
    \ = prime_factors(n)\n    return factors[end]\nend", "    i = 2\n    while i <=\
    \ floor(Int64, n/2)\n        while n % i == 0\n            n = n / i\n       \
    \ end\n        i += 1\n    end\n    return n\nend", "    factor = 2\n    while\
    \ true\n        if n % factor == 0\n            n = n / factor\n        else\n\
    \            factor += 1\n        end\n        if isprime(n)\n            return\
    \ n\n        end\n    end\nend", "    for d in 2:n\n        if is_prime(d) &&\
    \ n % d == 0\n            return d\n        end\n    end\nend", "    largest_factor\
    \ = 1\n    factor = 2\n    while factor*factor <= n\n        while n % factor\
    \ == 0\n            largest_factor = factor\n            n /= factor\n       \
    \ end\n        factor += 1\n    end\n    if n > 1\n        largest_factor = n\n\
    \    end\n    return largest_factor\nend", "    p = 2\n    while p <= n\n    \
    \    if n % p == 0\n            n = n / p\n        else\n            p += 1\n\
    \        end\n    end\n    return p\nend\n@benchmark largest_prime_factor(600851475143)\n\
    \ \n \n \n \n ", "    # Here we use the fact that a numbe is prime iff it is odd\
    \ \n    i = 3\n    while n != 1\n        if n % i == 0\n            n = n / i\n\
    \        else\n            i = i + 2\n        end\n    end\n    return i\nend",
  "    factors = []\n    prime_factors = []\n    num = n", "    max_factor = Int64(round(sqrt(n)))\n\
    \    largest_prime = n\n    #print(\"factors: \", 2:max_factor)\n    #print(\"\
    n: \", n)\n    for factor in 2:max_factor\n        if (n % factor == 0) && (is_prime(factor))\n\
    \            largest_prime = factor\n        end\n    end\n    return largest_prime\n\
    end", "    # method: consider the list of prime numbers up to sqrt(n). Then, the\
    \ \n    # largest prime factor of n is the largest prime number in the list that\n\
    \    # divides n. \n    # \n    # performance improvement: it is more efficient\
    \ to check for divisibility\n    # first, rather than primality. The number of\
    \ divisors of n is generally\n    # less than the number of primes that divide\
    \ n, so we can cut down on our\n    # search by a significant amount. \n    #\
    \ \n    # we can further improve performance by first searching for the smallest\n\
    \    # prime factor of n, then checking if n/smallest_prime_factor is prime. If\n\
    \    # not, check it for divisibility. If not, divide the remaining number by\n\
    \    # the smallest prime factor and continue. If it is prime, we stop and \n\
    \    # return it. \n    # \n    # here, we search for the smallest prime factor\
    \ first. \n    # \n    # find the smallest prime factor of n, then divide n by\
    \ that prime number. \n    # if that division yields another prime number, then\
    \ we're done.\n    # if it does not, then we divide that number by the next prime\
    \ number in\n    # the list and continue. \n    # \n    # the next question is:\
    \ how do we get a list of prime numbers? \n    # \n    # when searching for the\
    \ smallest prime factor of n, we need only check up\n    # to sqrt(n). this might\
    \ be a good place to start searching for primes. \n    # \n    # one trick: if\
    \ 2n + 1 is prime, then 2 is not a factor. \n    # \n    # if n is odd, then we\
    \ don't need to check 2. \n    # \n    # the largest prime factor of n can be\
    \ no larger than sqrt(n). \n    # \n    # the smallest prime factor of n can be\
    \ no smaller than the smallest \n    # prime number. \n    # \n    # if we're\
    \ iterating through a list of odd numbers, starting at 3, then \n    # the even\
    \ numbers will no longer be in the list. \n    # \n    # this is promising. \n",
  "    # set our initial divisor and quotient to the square root of n\n    divisor\
    \ = floor(sqrt(n))\n    quotient = divisor\n    # While the quotient is not a\
    \ prime\n    while !isprime(quotient)\n        # if we can divide n by our current\
    \ divisor, then return the quotient\n        if rem(n, divisor) == 0\n       \
    \     return quotient\n        end\n        # else, decrement the divisor and\
    \ update the quotient\n        divisor -= 1\n        quotient = divrem(n, divisor)[1]\n\
    \    end\n    # if quotient is prime then return quotient\n    return quotient\n\
    end", "    for i in 2:Int64(ceil(sqrt(n)))\n        if (n % i == 0) && is_prime(i)\n\
    \            return i\n        end\n    end\nend", "    \"\"\"Given the number\
    \ n, we will check the factors that divide n by using the \n    fact that any\
    \ number greater than the square root of n cannot divide n evenly. \n    We will\
    \ create a for loop that starts at 2 and ends at the square root of n. \n    We\
    \ will increment the for loop by 1 and check if the number is a factor. \n   \
    \ If so, we will divide n by that number and check if the number is prime. \n\
    \    If so, we will return that number. If not, we will continue to divide n by\
    \ \n    the factor until n is smaller than the square root of n. We will also\
    \ check \n    if n is prime and return it if so. If not, we will return the last\
    \ number we \n    checked.\n    \"\"\"\n    for i = 2:sqrt(n)\n        if n %\
    \ i == 0\n            result = i\n            n = n / i\n            if isprime(n)\n\
    \                return n\n            end\n        end\n    end\n    if isprime(n)\n\
    \        return n\n    else\n        return result\n    end\nend", "    if n ==\
    \ 2\n        return 2\n    end\n    i = 2\n    while n % i != 0\n        i +=\
    \ 1\n    end\n    if n % i == 0\n        return max(i, largest_prime_factor(n/i))\n\
    \    end\nend\nlargest_prime_factor(13195)", "    # Base case\n    if isprime(n)\
    \ return n\n    # Iterate over the divisors of n\n    # which are odd and greater\
    \ than sqrt(n)\n    for d = floor(sqrt(n)) : 2 : n\n        if n % d == 0 return\
    \ largest_prime_factor(d)\n    end\nend", "    if n > 1\n        let prime = first_prime_factor(n)\n\
    \        n != prime ? largest_prime_factor(n//prime) : n\n    else\n        error(\"\
    The number n must be greater than 1\")\n    end\nend", "    # Find prime factors\
    \ in the smaller numbers\n    p = 2\n    while n % p != 0\n        p += 1\n  \
    \  end\n    # Recurse on the largest prime factor\n    if n / p == 1\n       \
    \ return p\n    else\n        return largest_prime_factor(n / p)\n    end\nend",
  "    \n    # n must be greater than one and cannot be a prime itself\n    if n <\
    \ 2 || isprime(n)\n        return 0\n    end\n    \n    # compute all prime factors\
    \ for n using the primefactor function\n    # take the maximum value from the\
    \ array and return\n    return maximum(primefactors(n))\nend", "    factor = 2\n\
    \    while n > 1\n        if n % factor == 0\n            n /= factor\n      \
    \  else\n            factor += 1\n        end\n    end\n    return factor\nend",
  "    i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n      \
    \  else\n            i += 1\n        end\n    end\n    i\nend", "    for i in\
    \ reverse(2:n)\n        if n % i == 0 && isprime(i)\n            return i\n  \
    \      end\n    end\nend", "    # Get the smallest of n and n/2.\n    n = n/2\
    \ < n ? n/2 : n\n    i = 3 \n    while i > n\n        if n % i == 0\n        \
    \    return largest_prime_factor(n/i)\n        end\n        i += 2\n    end\n\
    \    n\nend\n ", "    k = 2\n    while k < n/2\n        if n % k == 0\n      \
    \      n = n/k\n        else\n            k += 1\n        end\n    end\n    return\
    \ n\nend", "    factors = factor(n)\n    factors[end]\nend", "    i::Int64 = 2\
    \ \n    while i <= n \n        if n % i == 0 \n            n /= i \n        else\
    \ \n            i += 1 \n        end \n    end \n    return i \nend", "    p::Int64\
    \ = 2\n    while n != 1\n        if n % p == 0\n            n = n / p\n      \
    \  else\n            p = p + 1\n        end\n    end\n    return p\nend", "  \
    \  a = factors(n)\n    for i in reverse(a)\n        if isprime(i) == true\n  \
    \          return i\n        end\n    end\nend;\nlargest_prime_factor(13195)",
  "    i = 2\n    while i <= floor(sqrt(n))\n        if n % i == 0\n            return\
    \ max(largest_prime_factor(i), largest_prime_factor(n/i))\n        end\n     \
    \   i += 1\n    end\n    return n\nend\nend\n@time largest_prime_factor(600851475143)",
  "    for i = Int64(2):Int64(n/2)\n        if is_prime(i) && n % i == 0\n       \
    \     return i\n        end\n    end\nend", "    for i in 2:n-1\n        if isprime(i)\
    \ && n % i == 0\n            return i\n        end\n    end\nend", "    i = 2\n\
    \    while i * i <= n\n        while n % i == 0\n            n = n / i\n     \
    \   end\n        i = i + 1\n    end\n    return n\nend;\n@btime largest_prime_factor(13195)\n\
    @btime largest_prime_factor(2048)", "    i::Int64 = 2\n    while i <= n\n    \
    \    while (n % i) == 0\n            n /= i\n        end\n        i += 1\n   \
    \ end\n    return n\nend", "    # If n is even, the largest prime factor is 2.\n\
    \    if iseven(n)\n        return 2\n    end\n    # If n is odd, the largest prime\
    \ factor is greater than 1 and less than n\n    # and is not equal to n.\n   \
    \ # Start by using the naive method:\n    # - check if n is divisible by 3, 5,\
    \ 7, ..., and if it is, then that\n    #   is the largest prime factor\n    factor\
    \ = 3\n    while n % factor != 0 && factor < n\n        factor += 2\n    end\n\
    \    if n % factor == 0\n        return factor\n    end\n    # The naive method\
    \ fails if there are no prime factors below sqrt(n).\n    # Then, the largest\
    \ prime factor is the last prime factor found.\n    largest_prime_factor = 1\n\
    \    for f in primes(1, ceil(sqrt(n)))\n        if n % f == 0\n            largest_prime_factor\
    \ = f\n        end\n    end\n    return largest_prime_factor\nend", "    # k is\
    \ the largest prime factor of n\n    k = 2\n    while n % k != 0\n        k +=\
    \ 1\n    end\n    return k\nend", "    j = 2\n    while j <= n \n        if (n\
    \ % j == 0)\n            n = n / j\n        else\n            j = j + 1\n    \
    \    end\n    end\n    j\nend", "    factors = factor(n)\n    largest_prime =\
    \ factors[end]\n    return largest_prime\nend", "    if n <= 2\n        return\
    \ 2\n    end\n    # Factorization \n    while n % 2 == 0 \n        n = n / 2\n\
    \    end\n    factor = 3\n    while n != 1 \n        while n % factor == 0 \n\
    \            n = n / factor\n        end\n        factor += 2\n    end\n    return\
    \ factor - 2\nend", "    p = 2\n    while p <= n:\n        if n % p == 0\n   \
    \         n = n / p\n        else\n            p += 1\n        end\n    end\n\
    \    return p\nend\nlargest_prime_factor(13195)", "    i = 2\n    while i <= n/i\n\
    \        while n % i == 0\n            n = n/i\n        end\n        i = i + 1\n\
    \    end\n    return n\nend", "    \"**** YOUR CODE HERE ****\"\nend", "    i\
    \ = 2\n    while i*i <= n\n        while mod(n, i) == 0\n            n = div(n,\
    \ i)\n        end\n        i += 1\n    end\n    return n\nend", "    for i in\
    \ 2:n-1\n        if isprime(i) == true && n % i == 0\n            return i\n \
    \       end\n    end\nend", "    isprime = true\n    #print(isprime(n))\n    if\
    \ isprime(n)\n        return n\n    else\n        for i in 1:n\n            if\
    \ i%2 == 0\n                n = n/i\n                print(n)\n            end\n\
    \        end\n    end\nend", "    for i in 2:n \n        if n % i == 0 && is_prime(i)\n\
    \            return i\n        end\n    end\nend", "    i = 2\n    if n == 2\n\
    \        return 2\n    end\n    while i*i <= n\n        while n % i == 0\n   \
    \         n = n / i\n        end\n        i = i + 1\n    end\n    return n\nend\n\
    println(largest_prime_factor(600851475143))", "    factors = factor(n)\n    return\
    \ factors[end]\nend", "    is_prime = lambda x: all(x % i != 0 for i in range(2,\
    \ x))\n    i = 2\n    while i < n:\n        if is_prime(i) and n % i == 0:\n \
    \           n = n / i\n        else:\n            i += 1\n    return n\nend\n\
    @time largest_prime_factor(13195)", "    # Initialize starting search point to\
    \ ceiling of square root of n\n    # This is because we are looking for prime\
    \ factors of n and\n    # any factor larger than sqrt(n) will have a complementary\
    \ factor\n    # that is smaller than sqrt(n)\n    # Start iterating at 2 because\
    \ 1 divides everything, and we are\n    # looking for a prime factor\n    for\
    \ i in reverse(ceil(sqrt(n))::Int64)::Int64:\n        if is_factor(n, i) && is_prime(i):\n\
    \            return i\n    # all factors of n are prime\n    return n\nend", " \
    \   assert n > 1\n    d = 2\n    while n > 1\n        while n % d == 0\n     \
    \       n /= d\n        end\n        d += 1\n    end\n    return d-1\nend\nprintln(largest_prime_factor(600851475143))",
  "    factor = 2 \n    while n % factor != 0 \n        factor += 1 \n    end \n \
    \   if n == factor \n        return n \n    else \n        return largest_prime_factor(n\
    \ / factor) \n    end \nend ", "    if n == 1\n        return 1\n    end\n   \
    \ p = 2\n    while n%p != 0\n        p += 1\n    end\n    return max(p, largest_prime_factor(n/p))\n\
    end", "    prime = 2 \n    while prime*prime <= n \n        while n % prime ==\
    \ 0 \n            n /= prime \n        end \n        prime += 1 \n    end \n \
    \   return n \nend \n@test largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048)\
    \ == 2\n@test largest_prime_factor(1764) == 29\n \n \n \n \n\"\"\"Largest palindrome\
    \ product\n    A palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.\n    Find\
    \ the largest palindrome made from the product of two 3-digit numbers.\n    \"\
    \"\"\n \n ", "    # Go through each possible factor\n    limit = sqrt(n)\n   \
    \ factor = 0\n    i = 2\n    while i <= limit\n        # Go through each possible\
    \ factor\n        if n % i == 0\n            factor = i\n            n = n/i\n\
    \            while n % i == 0\n                n = n/i\n            end\n    \
    \        limit = sqrt(n)\n        end\n        i += 1\n    end\n    # If there\
    \ is no factor found, then n itself is prime\n    if factor == 0\n        factor\
    \ = n\n    end\n    return factor\nend", "  n0 = n\n  result = 2\n  while n0 >\
    \ 1 && n0 % result == 0 \n    n0 = n0 / result\n  end\n  result = 3\n  while n0\
    \ > 1 && n0 % result == 0 \n    n0 = n0 / result\n  end\n  while n0 > 1 \n   \
    \ result = result + 2\n    while n0 > 1 && n0 % result == 0 \n      n0 = n0 /\
    \ result\n    end\n  end\n  return result\nend", "    largest_possible_factor\
    \ = convert(Int64, floor(sqrt(n)))\n    current_factor = largest_possible_factor\n\
    \    while current_factor > 1\n        if n % current_factor == 0\n          \
    \  if is_prime(current_factor)\n                return current_factor\n      \
    \      end\n        end\n        current_factor -= 1\n    end\nend\n ", "    \"\
    YOUR CODE HERE\"\nend", "    i=2\n    biggest_factor=0\n    while n>1\n      \
    \  if n%i==0\n            n=n/i\n            biggest_factor=i\n        else\n\
    \            i=i+1\n        end\n    end\n    return biggest_factor\nend", " \
    \   \"docstring\"\n    if isprime(n)\n        return n\n    end\n    for j in\
    \ 2:n-1\n        if (n % j == 0) && isprime(j)\n            return j\n       \
    \ end\n    end\nend", "    # TODO: implement\n    return largest_prime_factor_naive(n)\n\
    end", "    while n % 2 == 0 \n        n /= 2\n    end \n    p = 3\n    while n\
    \ != 1 \n        while n % p == 0 \n            n /= p\n        end \n       \
    \ p += 2\n    end \n    return p\nend", "    for i = 2:Int64(floor(sqrt(n))) \n\
    \        while n % i == 0\n            n = n / i\n        end\n    end\n    return\
    \ n\nend", "    p = 2\n    while p < n\n        if is_prime(p) && (n % p == 0)\n\
    \            n = n / p\n        end\n        p += 1\n    end\n    return n\nend\n\
    \ \n@test largest_prime_factor(13195) == 29\n@test largest_prime_factor(2048)\
    \ == 2", "    m = 2\n    while(m <= n):\n        if(n % m == 0):\n           \
    \ n = n / m\n        else:\n            m = m + 1\n    return m\nend", "    if\
    \ n <= 1\n        error(\"n must be greater than 1.\")\n    end\n    if isprime(n)\n\
    \        error(\"n must not be a prime.\")\n    end\n    for x in [Int64(floor(sqrt(n))),\
    \ Int64(floor(sqrt(n))-1):-1:2]\n        if n % x == 0\n            if isprime(x)\n\
    \                return x\n            end\n        end\n    end\nend", "    i\
    \ = 2\n    while i <= sqrt(n)\n        while n % i == 0\n            n = n / i\n\
    \        end\n        i += 1\n    end\n    return n\nend", "    i = 1\n    while\
    \ i <= isqrt(n)\n        if n % i == 0\n            if is_prime(i)\n         \
    \       return i\n            end\n        end\n        i += 1\n    end\nend",
  "    # find the largest prime factor of n\n    p = 2\n    while p < n \n       \
    \ if n % p == 0 \n            n = n // p\n        else \n            p += 1\n\
    \        end\n    end\n    return p\nend\nprintln(largest_prime_factor(600851475143))",
  "    for i in (2:n)\n        if i % 2 == 0 && i > 2\n            continue\n    \
    \    end\n        is_prime = true\n        for j in (2:i-1)\n            if i\
    \ % j == 0\n                is_prime = false\n                break\n        \
    \    end\n        end\n        if is_prime && n % i == 0\n            return i\n\
    \        end\n    end\nend", "    # your code here\nend", "    p = 2\n    while\
    \ p*p <= n\n        while n % p == 0\n            n = n/p\n        end\n     \
    \   p = p + 1\n    end\n    return n\nend\n \nprintln(largest_prime_factor(600851475143))",
  "    x = find_first(sieve(ceil(sqrt(n))), n % _ == 0)\n    while (x != n)\n    \
    \    n = n / x\n        x = find_first(sieve(ceil(sqrt(n))), n % _ == 0)\n   \
    \ end\n    return n\nend", "    if isprime(n)\n        return n\n    end\n   \
    \ for i = 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    while mod(n, 2) == 0\n        n = div(n, 2)\n\
    \    end\n    p = 3\n    while n > 1\n        while mod(n, p) == 0\n         \
    \   n = div(n, p)\n        end\n        p += 2\n    end\n    return p-2\nend",
  "    function lpf(n::Int64)::Int64\n        for i in 2:Int64(floor(sqrt(n)))\n \
    \           if isprime(i) && n % i == 0\n                return lpf(n \xF7 i)\n\
    \            end\n        end\n        return n\n    end\n    return lpf(n)\n\
    end", "    max = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n\
    \            while n % i == 0:\n                n = n / i\n            end\n \
    \           max = i\n        end\n        i += 1\n    end\n    if n > 1:\n   \
    \     max = n\n    end\n    return max\nend", "    for factor in (i for i in 2:n\
    \ if n % i == 0)\n        n /= factor\n        while n % factor == 0\n       \
    \     n /= factor\n        end\n        if isprime(n)\n            return n\n\
    \        end\n    end\nend", "    p = nextprime(2)\n    while p <= n/2\n     \
    \   if n % p == 0\n            n = n/p\n        else\n            p = nextprime(p+1)\n\
    \        end\n    end\n    n\nend", "    \"YOUR CODE HERE\"\nend", "    for i\
    \ = 2:n-1\n        if rem(n,i) == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    factor = 1\n    while(n % 2 ==\
    \ 0)\n        n = n / 2\n        factor = 2\n    end\n    divisor = 3\n    while\
    \ (n != 1)\n        while (n % divisor == 0)\n            n = n / divisor\n  \
    \          factor = divisor\n        end\n        divisor = divisor + 2\n    end\n\
    \    return factor\nend", "    assert n > 1\n    i = 2\n    while i <= sqrt(n)\n\
    \        if rem(n, i) == 0\n            return largest_prime_factor(div(n, i))\n\
    \        end\n        i += 1\n    end\n    return n\nend", "    p = 2\n    while\
    \ p*p <= n\n        while n % p == 0\n            n = n / p\n        end\n   \
    \     p = p + 1\n    end\n    return n\nend", "    p = 2\n    while n % p != 0\n\
    \        p += 1\n    end\n    if n == p\n        return n\n    else\n        return\
    \ largest_prime_factor(n \xF7 p)\n    end\nend", "    factor_limit = floor(Int64,\
    \ sqrt(n)) \n    for i in primes(2:factor_limit)\n        if rem(n, i) == 0\n\
    \            return largest_prime_factor(n \xF7 i)\n        end\n    end\n   \
    \ return n \nend", "    if n == 2\n        return 2\n    end\n    factor::Int64\
    \ = 2\n    while factor < n\n        while n % factor == 0\n            n = n\
    \ / factor\n        end\n        factor += 1\n    end\n    return factor\nend",
  "    # The largest prime factor will always be less than or equal to sqrt(n).\n\
    \    # If n is prime, then it's its own largest prime factor.\n    # Loop until\
    \ we find the largest prime factor.", "    for i in primes(1,floor(Int64,sqrt(n)))\n\
    \        if n % i == 0\n            return largest_prime_factor(div(n,i))\n  \
    \      end\n    end\n    return n\nend", "    factor = 2 \n    while n > 1 \n\
    \        while n % factor == 0 \n            n /= factor \n        end \n    \
    \    factor += 1 \n    end \n    return factor - 1 \nend", "    for i in [2:round(Int64,\
    \ sqrt(n))]\n        while n % i == 0\n            n = n/i\n        end\n    end\n\
    \    return n\nend", "    factor = 1\n    x = Int64(floor(sqrt(n)))\n    for i\
    \ in 2:x\n        if n % i == 0\n            n = n / i\n            factor = i\n\
    \        end\n    end\n    if n > 1\n        factor = n\n    end\n    return factor\n\
    end", "    factor = 2\n    while n % factor != 0\n        factor += 1\n    end\n\
    \    if n == factor\n        return n\n    else\n        return largest_prime_factor(n\
    \ / factor)\n    end\nend", "    i = 2\n    while i * i <= n\n        while n\
    \ % i == 0\n            n = n / i\n        end\n        i = i + 1\n    end\n \
    \   return n\nend\n    ", "    # Your code here\n    factor = 2\n    while factor\
    \ <= n\n        while rem(n, factor) == 0\n            n = div(n, factor)\n  \
    \      end\n        factor += 1\n    end\n    return n\nend", "    if n == 1\n\
    \        1\n    else\n        p = smallest_prime_factor(n)\n        if p == n\n\
    \            p\n        else\n            largest_prime_factor(n/p)\n        end\n\
    \    end\nend", "    p = 2\n    while n % p != 0\n        p += 1\n    end\n  \
    \  while n % p == 0\n        n /= p\n    end\n    if n == 1\n        return p\n\
    \    else\n        return largest_prime_factor(n)\n    end\nend", "    k = factorise(n)\n\
    \    return maximum(k[:keys])\nend", "    # first remove all factors of 2, then\
    \ only check odd numbers\n    while iseven(n)\n        n = n \xF7 2\n    end\n\
    \    for p in odd_primes(sqrt(n))\n        while divides(p, n)\n            n\
    \ = n \xF7 p\n        end\n    end\n    return n\nend;\n \n@show largest_prime_factor(13195)\n\
    @show largest_prime_factor(600851475143);", "    for i in reverse(primes(2:n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend\n    ",
  "    # factor_array = [n for n in factors(n)]\n    max_prime = 0 \n    for n in\
    \ factors(n)\n        if isprime(n) && (n > max_prime)\n            max_prime\
    \ = n\n        end\n    end\n    return max_prime\nend", "    prime_list = prime_list(n)\n\
    \    return prime_list[end]\nend", "    if n == 2 || n == 3\n        return n\n\
    \    end\n    if n % 2 == 0\n        return largest_prime_factor(n / 2)\n    end\n\
    \    if n % 3 == 0\n        return largest_prime_factor(n / 3)\n    end\n    for\
    \ i = 5:ceil(sqrt(n))\n        if n % i == 0\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend", "    max_prime = 1\n    d =\
    \ 2\n    while d * d <= n\n        while rem(n, d) == 0\n            max_prime\
    \ = d\n            n = n / d\n        end\n        d = d + 1\n    end\n    if\
    \ n > 1\n        max_prime = n\n    end\n    return max_prime\nend\n \nprintln(largest_prime_factor(600851475143))",
  "    f = 1\n    while n % 2 == 0\n        f = 2\n        n = n / 2\n    end\n  \
    \  i = 3\n    while i <= round(sqrt(n))\n        while n % i == 0\n          \
    \  f = i\n            n = n / i\n        end\n        i = i + 2\n    end\n   \
    \ return max(f, n)\nend", "    count = 0\n    while n%2 == 0\n        n = n/2\n\
    \        count = 2\n    end\n    for i in 3:2:floor(sqrt(n))\n        while n%i\
    \ == 0\n            n = n/i\n            count = i\n        end\n    end\n   \
    \ if n>2\n        count = n\n    end\n    return count\nend", "    divisor = 2\n\
    \    while n > 1\n        if n % divisor == 0\n            n /= divisor\n    \
    \    else\n            divisor += 1\n        end\n    end\n    return divisor\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            n /= i\n   \
    \     end\n    end\n    return n\nend", "    \"\"\"Returns the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            factors.append(i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return maximum(factors)\n\
    end", "    isprime(n) && return n\n    for i in (2:n-1)\n        if mod(n,i) ==\
    \ 0\n            isprime(i) && return i\n        end\n    end\nend", "    @assert\
    \ n > 1 && !isprime(n) \"n should be a composite number\"\n    for i in primes(2,\
    \ n)\n        n % i == 0 && return i\n    end\nend", "    # Find the largest factor\
    \ that is not 1, which is guaranteed to be prime\n    for i = n:-1:2\n       \
    \ if is_prime(i) && n % i == 0\n            return i\n        end\n    end\nend",
  "    if n % 2 == 0\n        n = n / 2\n    end\n    for i in 3:2:sqrt(n)\n     \
    \   if n % i == 0\n            n = n / i\n        end\n    end\n    return n\n\
    end", "    largest = 0\n    factor = 2\n    while factor <= sqrt(n) \n       \
    \ if n % factor == 0\n            largest = factor\n            n = n / factor\n\
    \        else\n            factor += 1\n        end\n    end\n    return n\nend",
  "    for i in primes(2:n)\n        if i>=n\n            break\n        end\n   \
    \     if n%i==0\n            n=n/i\n        end\n    end\n    return n\nend",
  "    divisor = 2\n    while (n > divisor)\n        if (n % divisor == 0)\n     \
    \       n = n / divisor\n        else\n            divisor += 1\n        end\n\
    \    end\n    return divisor\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
