name: HumanEval_102_choose_num
language: jl
prompt: "\"\"\"This function takes two positive numbers x and y and returns the\n\
  \    biggest even integer number that is in the range [x, y] inclusive. If \n  \
  \  there's no such number, then the function should return -1.\n\n    For example:\n\
  \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\"\
  \"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
  \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
  \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
  \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
  \ 546) == 546)\nend\n"
completions: ["    if x < y && x%2 == 0\n        return x\n    elseif x < y && x%2\
    \ != 0\n        return choose_num(x+1, y)\n    elseif x > y && y%2 == 0\n    \
    \    return y\n    elseif x > y && y%2 != 0\n        return choose_num(x, y-1)\n\
    \    elseif x == y && x%2 == 0\n        return x\n    else\n        return -1\n\
    \    end\nend", "    if x > y\n        return -1\n    end\n    if y % 2 == 0\n\
    \        return y\n    else\n        return choose_num(x, y-1)\n    end\nend",
  "    for number in x:y\n        if number % 2 == 0\n            return number\n\
    \        end\n    end\n    return -1\nend\n \n\"\"\"This function returns the\
    \ number of substrings in the string s.", "    if x > y\n        return -1\n \
    \   end\n    if (y - x) % 2 == 0 \n        return y - 1\n    else\n        return\
    \ y - 2\n    end\nend", "    # Because we want to return -1 if no even number\
    \ is found, we set a\n    # flag_found to False.\n    flag_found = false\n   \
    \ # This is the variable that we will return. We set it to a negative\n    # number\
    \ to make sure we're not returning any garbage when we \n    # return it.\n  \
    \  max_even = -1\n    # We need to run a loop over the interval [x, y]. We can\
    \ just use the\n    # range function to do this for us.\n    for i in range(x,\
    \ y+1)\n        # Here we can check to see if i is even, and if it is, then we\
    \ can\n        # update the variable max_even to have the bigger value\n     \
    \   if iseven(i) == true\n            max_even = max(max_even, i)\n          \
    \  # We also need to update the flag_found variable to True so\n            #\
    \ that we don't return -1\n            flag_found = true\n        end\n    end\n\
    \    # Now, if flag_found is still false, then we never found an even\n    # number\
    \ in the range, so we want to return -1.\n    if flag_found == false\n       \
    \ return -1\n    end\n    # Otherwise, we want to return max_even.\n    return\
    \ max_even\nend", "    if x%2 == 0\n        if y%2 == 0\n            return y\n\
    \        else\n            return x\n        end\n    else\n        if y%2 ==\
    \ 0\n            return y\n        else\n            return -1\n        end\n\
    \    end\nend", "    x::Int64 = 50\n    y::Int64 = 56\n    if x%2==0\n       \
    \ return(x)\n    elseif y%2==0\n        return(y)\n    else\n        return(-1)\n\
    \    end\nend", "    if x>y\n        return -1\n    end\n    \n    i = y\n   \
    \ while i >= x\n        if i % 2 == 0\n            return i\n        end\n   \
    \     i -= 1\n    end\n    \n    return -1\nend", "    for i in range(y, x, -1)\n\
    \        if i % 2 == 0\n            return i\n        end\n    end\n    return\
    \ -1\nend", "    if x > y\n        return -1\n    end\n    for num in x:y\n  \
    \      if num % 2 == 0\n            return num\n        end\n    end\n    return\
    \ -1\nend\nchoose_num(12, 15)", "    return -1\nend", "    for j in x:y\n    \
    \    if iseven(j)\n            return j\n        end\n    end\n    return -1\n\
    end", "    if x<y\n        for i in x:y\n            if i%2==0\n             \
    \   return i\n            end\n        end\n    elseif x>y\n        for i in y:x\n\
    \            if i%2==0\n                return i\n            end\n        end\n\
    \    elseif x==y\n        if x%2==0\n            return x\n        else\n    \
    \        return -1\n        end\n    end\n    return -1\nend", "    if x > y\n\
    \        return -1\n    end\n    # Get the maximum of x and y.\n    max_val =\
    \ max(x, y)\n    # Get the minimum of x and y.\n    min_val = min(x, y)\n    #\
    \ If the maximum is even, return it.\n    if max_val % 2 == 0\n        return\
    \ max_val\n    end\n    # Otherwise, subtract 1 from the maximum to get the previous\
    \ even number.\n    if max_val - 1 % 2 == 0\n        return max_val - 1\n    end\n\
    \    # Get the largest even number between x and y.\n    even_val = min_val -\
    \ min_val % 2\n    # If the largest even number is in the range [x, y], return\
    \ it.\n    if even_val <= max_val\n        return even_val\n    end\n    # Otherwise,\
    \ the largest even number isn't in the range [x, y], so\n    # return -1.\n  \
    \  return -1\nend", "    if x > y return -1\n    elif x%2 != 0 && y%2 != 0 return\
    \ -1\n    elif x%2 == 0 && y%2 == 0\n        for i in x:y \n            if i%2\
    \ == 0 return i\n    elseif x%2 != 0 && y%2 == 0\n        return (y-1)\n    end\n\
    end\n@show choose_num(12, 15)\n@show choose_num(13, 12)", "    if x > y\n    \
    \    return -1\n    end\n    if x % 2 == 0\n        return x\n    else\n     \
    \   return x + 1\n    end\nend", "    if x%2==0\n        return x\n    else\n\
    \        return x+1\n    end\nend", "    if y < x\n        return -1\n    end",
  "    x > y && return -1\n    evens = [i for i in x:y if iseven(i)]\n    if !isempty(evens)\n\
    \        return maximum(evens)\n    else\n        return -1\n    end\nend\n \n\
    #Test Cases\n@test choose_num(12, 15) == 14\n@test choose_num(13, 12) == -1\n\
    @test choose_num(5, 10) == 10\n@test choose_num(0, 4) == 4\n@test choose_num(8,\
    \ 8) == 8", "    if x > y\n        return -1\n    end\n    if x % 2 == 0\n   \
    \     return x\n    else\n        return x + 1\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
