name: HumanEval_104_unique_digits
language: jl
prompt: "\"\"\"Given a vector of positive integers x. return a sorted vector of all\
  \ \n    elements that hasn't any even digit.\n\n    Note: Returned vector should\
  \ be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
  \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
  \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    unique_digits(x::Vector{Int64}) = unique_digits(deepcopy(x))\n\
    end", "    not_unique = Vector{Int64}()\n    for elem in x\n        if any([typeof(x)\
    \ == Int64 for x in digits(elem)])\n            push!(not_unique, elem)\n    \
    \    end\n    end\n    return deleteat!(x, not_unique)\nend", "    \n    y = Int64[]\n\
    \    \n    for i in x\n        digits = digits(i)\n        is_unique = true\n\
    \        for j in digits\n            if j % 2 == 0\n                is_unique\
    \ = false\n                break\n            end\n        end\n        if is_unique\
    \ == true\n            push!(y, i)\n        end\n    end\n    return sort(y)\n\
    end", "    \n    x = [i for i in x if has_even_digit(i) == false]\n    sort!(x)\n\
    \    return x\nend", "    odds = Vector{Int64}() \n    for i in x \n        if\
    \ !(occursin(\"2\", i) || occursin(\"4\", i) || occursin(\"6\", i) || occursin(\"\
    8\", i) || occursin(\"0\", i))\n            push!(odds, i)\n        end\n    end\n\
    \    odds\nend", "    filtered = filter(x) do a\n        return any(digits(a)\
    \ .% 2 .== 0)\n    end\n    return sort(x[filtered])\nend", "    vec = []\n  \
    \  for i in x\n        if iseven(i) == false\n            push!(vec, i)\n    \
    \    end\n    end\n    return sort(vec)\nend", "    y = zeros(Int64,0)\n    for\
    \ i in x\n        if i%2 == 0\n            continue\n        elseif i%5 == 0\n\
    \            continue\n        elseif i%10 == 0\n            continue\n      \
    \  elseif i%20 == 0\n            continue\n        elseif i%25 == 0\n        \
    \    continue\n        elseif i%50 == 0\n            continue\n        elseif\
    \ i%100 == 0\n            continue\n        elseif i%200 == 0\n            continue\n\
    \        elseif i%500 == 0\n            continue\n        elseif i%1000 == 0\n\
    \            continue\n        elseif i%2000 == 0\n            continue\n    \
    \    elseif i%5000 == 0\n            continue\n        elseif i%10000 == 0\n \
    \           continue\n        elseif i%20000 == 0\n            continue\n    \
    \    elseif i%50000 == 0\n            continue\n        else\n            push!(y,i)\n\
    \        end\n    end\n    y = sort(y)\n    return y\nend", "    # return a sorted\
    \ Vector{Int64} containing only elements of x without even digits\n    return\
    \ sort(x[(x .% 2) .!= 0])\nend\n ", "    # your solution here\n    return x\n\
    end\nx = unique_digits([15, 33, 1422, 1])\nprintln(x)\n@testset \"Test unique_digits\"\
    \ begin\n    @test unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    @test\
    \ unique_digits([152, 323, 1422, 10]) == []\nend\n \n \n \n \n \n\"\"\"Given a\
    \ vector of positive integers x. return a sorted vector of all \n    elements\
    \ that hasn't any odd digit.", "    xunique = Int64[]\n    n = 0\n    for elem\
    \ in x\n        if all(elem % 2 != 0 for elem in digits(elem))\n            append!(xunique,\
    \ elem)\n        end\n    end\n    xunique = sort(xunique)\n    return xunique\n\
    end", "    # your code goes here\nend", "    y = []\n    for i in x\n        push!(y,\
    \ i) if !(has_even_digit(i))\n    end\n    sort(y)\nend", "    unique_digits =\
    \ []\n    for i in x\n        flag = 0\n        #transform each number from the\
    \ vector into an array of chars\n        str = string(i)\n        for j in str\n\
    \            if parse(Int64, j) % 2 == 0\n                flag = 1\n         \
    \       break\n            end\n        end\n        if flag == 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    sort(unique_digits)\nend",
  "    is_vowel(char) = char in ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for el\
    \ in x\n        if sum(is_vowel(char) for char in string(el)) == 0\n         \
    \   push!(res, el)\n        end\n    end\n    return sort(res)\nend", "    y =\
    \ []\n    for i in x\n        if any(dig in \"02468\" for dig in string(i))\n\
    \            continue\n        else\n            push!(y, i)\n        end\n  \
    \  end\n    return sort(y)\nend", "    count = 0\n    for i in x\n        if contains(digits(i),\
    \ 0) || contains(digits(i), 2) || contains(digits(i), 4) || contains(digits(i),\
    \ 6) || contains(digits(i), 8)\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    y = Array{Int64}(length(x))\n    p = 0\n    for\
    \ i in 1:length(x)\n        if !is_even(x[i])\n            p += 1\n          \
    \  y[p] = x[i]\n        end\n    end\n    sort(y[1:p])\nend", "    unique_digits\
    \ = Array{Int64}(0)\n    for i = 1:length(x)\n        unique = true\n        for\
    \ j = 1:length(x[i])\n            char = convert(Int64, string(x[i][j]))\n   \
    \         if char % 2 == 0\n                unique = false\n            end\n\
    \        end\n        if unique\n            push!(unique_digits, x[i])\n    \
    \    end\n    end\n    sort(unique_digits)\nend", "    # call function `no_even`\
    \ to filter out all even numbers\n    return sort(x[no_even(x)])\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
