name: HumanEval_72_will_it_fly
language: jl
results:
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return sum(q) <= w && q == reverse(q)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return palindrome(q) && sum(q) <= w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6lr4t8nr.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: palindrome not\
    \ defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n   \
    \  @ Main /tmp/tmp6lr4t8nr.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6lr4t8nr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lr4t8nr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lr4t8nr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: palindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6lr4t8nr.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6lr4t8nr.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lr4t8nr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lr4t8nr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: palindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6lr4t8nr.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6lr4t8nr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6lr4t8nr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lr4t8nr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6lr4t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6lr4t8nr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return 2w >= sum(q) && is_palindrome(q)\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqj8npxdv.jl:31\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpqj8npxdv.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqj8npxdv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqj8npxdv.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqj8npxdv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpqj8npxdv.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqj8npxdv.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqj8npxdv.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqj8npxdv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpqj8npxdv.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqj8npxdv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqj8npxdv.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqj8npxdv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj8npxdv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    \n    will_it_fly = true\n    \n    sum_q = sum(q)\n \
    \   \n    if (sum_q <= w) & (q == reverse(q))\n        will_it_fly = true\n  \
    \  else\n        will_it_fly = false\n    end\n    \n    return will_it_fly\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return is_palindrome(q) && sum(q) <= w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy0xzjra8.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpy0xzjra8.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0xzjra8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0xzjra8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy0xzjra8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpy0xzjra8.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0xzjra8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0xzjra8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy0xzjra8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpy0xzjra8.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0xzjra8.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0xzjra8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy0xzjra8.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0xzjra8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    v = 0\n    if q[1] == q[end] && w >= length(q)\n     \
    \   for i in 1:length(q)\n            v += q[i]\n        end\n        if v <=\
    \ w\n            return true\n        else\n            return false\n       \
    \ end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    sum(q) <= w && isbalanced(q)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl4g9hs_c.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: isbalanced not\
    \ defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n   \
    \  @ Main /tmp/tmpl4g9hs_c.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl4g9hs_c.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl4g9hs_c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl4g9hs_c.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: isbalanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpl4g9hs_c.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl4g9hs_c.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl4g9hs_c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl4g9hs_c.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: isbalanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpl4g9hs_c.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl4g9hs_c.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl4g9hs_c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl4g9hs_c.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: isbalanced not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpl4g9h"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4g9hs_c.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return w >= sum(q) && is_palindrome(q)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6jlibgf9.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp6jlibgf9.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6jlibgf9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6jlibgf9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jlibgf9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6jlibgf9.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6jlibgf9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6jlibgf9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jlibgf9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6jlibgf9.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6jlibgf9.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6jlibgf9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6jlibgf9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6jlibgf9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    q_sum = 0\n    q_len = length(q)\n    q_mid = Int(q_len/2)\n\
    \    for i in q[1:q_mid]\n        q_sum += i\n    end\n    for i in q[end:-1:q_mid]\n\
    \        q_sum += i\n    end\n    q_sum <= w\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi867pr4o.jl:39\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  InexactError: Int64(1.5)\n \
    \ Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\n     @ Main /tmp/tmpi867pr4o.jl:25\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpi867pr4o.jl:39 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi867pr4o.jl:38\ntest set:\
    \ Test Failed at /tmp/tmpi867pr4o.jl:40\n  Expression: candidate([1, 2], 5) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi867pr4o.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi867pr4o.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpi867pr4o.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  InexactError: Int64(0.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:812 [inlined]\n   [2] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\n     @ Main /tmp/tmpi867pr4o.jl:25\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpi867pr4o.jl:41 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi867pr4o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpi867pr4o.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\n     @ Main /tmp/tmpi867pr4o.jl:25\n   [3] macro expansion\n    \
    \ @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi867pr4o.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    balanced_q = is_balanced(q)\n    sum_q = sum(q)\n    return\
    \ balanced_q && sum_q <= w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpcx_4l70p.jl:32\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_balanced not\
    \ defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n   \
    \  @ Main /tmp/tmpcx_4l70p.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcx_4l70p.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcx_4l70p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcx_4l70p.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpcx_4l70p.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcx_4l70p.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcx_4l70p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcx_4l70p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpcx_4l70p.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcx_4l70p.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcx_4l70p.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcx_4l70p.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: is_balanced not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx_4l70p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    q_len = length(q)\n    return (isequal(q, reverse(q)))\
    \ && sum(q) <= w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return sum(q) <= w && q == reverse(q)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    sum([q[i] for i in 1:length(q)]) <= w && q == reverse(q)\
    \ ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return (q == reverse(q)) && (sum(q) <= w)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    q_len = length(q)\n    q_is_balanced = false\n    for\
    \ i in 1:floor(Int64, q_len/2)\n        if q[i] == q[q_len - i + 1]\n        \
    \    q_is_balanced = true\n        else\n            q_is_balanced = false\n \
    \           break\n        end\n    end\n    if q_is_balanced == true && sum(q)\
    \ <= w\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvd19fahc.jl:46\n  Expression: candidate([3],\
    \ 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvd19fahc.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvd19fahc.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpvd19fahc.jl:49\n  Expression: candidate([5], 5) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvd19fahc.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvd19fahc.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvd19fahc.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    return is_balanced(q) && sum(q) <= w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsgqsaml6.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_balanced not\
    \ defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n   \
    \  @ Main /tmp/tmpsgqsaml6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgqsaml6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgqsaml6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsgqsaml6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpsgqsaml6.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgqsaml6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgqsaml6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsgqsaml6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpsgqsaml6.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsgqsaml6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsgqsaml6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsgqsaml6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: is_balanced not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmps"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgqsaml6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    will_it_fly(q, w) = is_balanced(q) && sum(q) \u2264 w\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo00as18s.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  MethodError: Cannot `convert`\
    \ an object of type var\"#will_it_fly#1\" to an object of type Bool\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n    \
    \ @ Main /tmp/tmpo00as18s.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo00as18s.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo00as18s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo00as18s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#will_it_fly#1\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n    \
    \ @ Main /tmp/tmpo00as18s.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo00as18s.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo00as18s.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    balanced = ispalindrome(q)\n    weight = sum(q)\n    return\
    \ balanced && weight <= w\nend\n\"\"\"\n    Write a function that returns true\
    \ if the number n is a prime, and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpguo4rm1z.jl:27\nin expression starting at\
    \ /tmp/tmpguo4rm1z.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    if ispalindrome(q) && sum(q) <= w\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4qagbucm.jl:34\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp4qagbucm.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qagbucm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qagbucm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4qagbucm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp4qagbucm.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qagbucm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qagbucm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4qagbucm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp4qagbucm.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qagbucm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qagbucm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4qagbucm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qagbucm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns true if the object q will fly,\
    \ and false otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ vector) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    >>> will_it_fly([1, 2], 5)\n    false\n    #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    >>>\
    \ will_it_fly([3, 2, 3], 1)\n    false\n    # it's balanced, but 3+2+3 is more\
    \ than the maximum possible weight.\n\n    >>> will_it_fly([3, 2, 3], 9)\n   \
    \ true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    \n    >>> will_it_fly([3], 5)\n    true\n    # 3 is less than the maximum possible\
    \ weight, and it's balanced.\n    \"\"\"\nfunction will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n    sum(q) \u2264 w && is_palindrome(q)\nend\n\"\"\"\n   \
    \ Write a function that returns the unique string that's used the most times in\
    \ l. If there are multiple strings that are used the most times, return the one\
    \ that comes first.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hgsgthx.jl:25\nin expression starting at\
    \ /tmp/tmp3hgsgthx.jl:25\n"
  exit_code: 1
  status: SyntaxError
