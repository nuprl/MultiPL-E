language: jl
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_elements\
    \ = split(music_string)\n    length_of_notes = []\n    for i in 1:length(music_elements)\n\
    \        if music_elements[i] == \"o\"\n            length_of_notes = push!(length_of_notes,\
    \ 4)\n        elseif music_elements[i] == \"o|\"\n            length_of_notes\
    \ = push!(length_of_notes, 2)\n        elseif music_elements[i] == \".|\"\n  \
    \          length_of_notes = push!(length_of_notes, 1)\n        end\n    end\n\
    \    return length_of_notes\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    \"\
    \"\"\n    Your code here\n    \"\"\"\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjegh9kb7.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpjegh9kb7.jl:26\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjegh9kb7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjegh9kb7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjegh9kb7.jl:27\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjegh9kb7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjegh9kb7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjegh9kb7.jl:28\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjegh9kb7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjegh9kb7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjegh9kb7.jl:29\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjegh9kb7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjegh9kb7.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      "
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    if music_string\
    \ == \"\" \n        return Int64[]\n    end\n    s = 0\n    split = split(music_string,\
    \ r\" \")\n    for i in split\n        if i == \"o\"\n            s = s + 4\n\
    \        elseif i == \"o|\"\n            s = s + 2\n        elseif i == \".|\"\
    \n            s = s + 1\n        end\n    end\n    beats = fill(0,s)\n    n =\
    \ 0\n    cnt = 0\n    while n <= s\n        cnt = cnt + 1\n        if split[cnt]\
    \ == \"o\"\n            beats[n+1] = 4\n            n = n + 4\n        elseif\
    \ split[cnt] == \"o|\"\n            beats[n+1] = 2\n            n = n + 2\n  \
    \      elseif split[cnt] == \".|\"\n            beats[n+1] = 1\n            n\
    \ = n + 1\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3kcyp7wl.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmp3kcyp7wl.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @\
    \ Main /tmp/tmp3kcyp7wl.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kcyp7wl.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kcyp7wl.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp3kcyp7wl.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: split not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmp3kcyp7wl.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kcyp7wl.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kcyp7wl.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp3kcyp7wl.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmp3kcyp7wl.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kcyp7wl.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kcyp7wl.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp3kcyp7wl.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] parse_music(music_stri"
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string)\n    output = zeros(Int64,length(music_string))\n    for\
    \ (i,w) in enumerate(music_string)\n        if w == \"o\"\n            output[i]\
    \ = 4\n        elseif w == \"o|\"\n            output[i] = 2\n        elseif w\
    \ == \".|\"\n            output[i] = 1\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat_values\
    \ = Dict{Char, Int64}()\n    beat_values['o'] = 4\n    beat_values['|'] = 1\n\
    \    beat_values['.'] = 0\n    beat_vector = Vector{Int64}()\n    for (i, key)\
    \ in enumerate(music_string)\n        if key == ' '\n            continue\n  \
    \      end\n        if i >= length(music_string) - 1 || key != music_string[i+1]\
    \ \n            push!(beat_vector, beat_values[key])\n        else\n         \
    \   push!(beat_vector, beat_values[key] + beat_values[music_string[i+1]])\n  \
    \      end\n    end\n    return beat_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn7mzt0op.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpn7mzt0op.jl:38\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [0, 1, 0, 1, 0, 1, 0, 1] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn7mzt0op.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn7mzt0op.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn7mzt0op.jl:39\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 1, 4, 1, 0, 1, 0, 1, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn7mzt0op.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn7mzt0op.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn7mzt0op.jl:40\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 0, 1, 4, 1, 0, 1,\
    \ 4, 4, 1, 4, 4, 1] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn7mzt0op.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn7mzt0op.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats_per_note\
    \ = Dict(('o' => 4, 'o|' => 2, '.|' => 1))\n    music_notes = split(music_string,\
    \ \" \")\n    beats = [beats_per_note[note] for note in music_notes]\n    return\
    \ beats\nend\n# parse_music(\"o o| .| o| o| .| .| .| .| o o\")\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpow_d3olp.jl:14\nin expression\
    \ starting at /tmp/tmpow_d3olp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    vector =\
    \ Int64[]\n    for note in music_string\n        if (note == 'o')\n          \
    \  push!(vector, 4)\n        elseif (note == 'o|')\n            push!(vector,\
    \ 2)\n        elseif (note == '.|')\n            push!(vector, 1)\n        end\n\
    \    end\n    return vector\nend\n \n@testset \"testing\" begin\n    @test parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\n \n\
    # How fast can we play?\n\"\"\"\n   You are given a vector of beats.\n   Each\
    \ element in this vector is a number, i.e. how many beats is it per minute.\n\
    \   In other words, each number is a frequency.\n   For example, 60 means 60 beats\
    \ per minute, 120 means 120 beats per minute, etc.\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4x5dpdnn.jl:18\nin expression\
    \ starting at /tmp/tmp4x5dpdnn.jl:18\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # parse\
    \ the string to a vector of strings, where each element is either o, o|, .|\n\
    \    music_vector = split(music_string, \" \")\n    # initialize a vector to return\
    \ the correct values\n    beat_vector = []\n    # loop through the music_vector,\
    \ and add a 4, 2, or 1 depending on the type of note\n    for note in music_vector\n\
    \        if note == \"o\"\n            push!(beat_vector, 4)\n        elseif note\
    \ == \"o|\"\n            push!(beat_vector, 2)\n        elseif note == \".|\"\n\
    \            push!(beat_vector, 1)\n        end\n    end\n    return beat_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return map(x\
    \ -> (x == 'o' ? 4 : (x == 'o|' ? 2 : 1)),\n        split(music_string, \" \"\
    ))\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpagyx9eoz.jl:14\nin expression\
    \ starting at /tmp/tmpagyx9eoz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Vector{Int64}()\n    tmp = (music_string, \"\")\n    while !isempty(tmp[1])\n\
    \        if tmp[1][1] == 'o'\n            push!(beats, 4)\n            tmp = split(tmp[1],\
    \ \" \", 2)\n        elseif tmp[1][1] == '.'\n            push!(beats, 1)\n  \
    \          tmp = split(tmp[1], \"|\", 2)\n        elseif tmp[1][1] == ' '\n  \
    \          tmp = split(tmp[1], \" \", 2)\n        elseif tmp[1][1] == '|'\n  \
    \          tmp = split(tmp[1], \"|\", 2)\n        else\n            println(\"\
    Wrong input: \", tmp[1][1])\n            break\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsso78cqm.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpsso78cqm.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method\
    \ matching split(::String, ::String, ::Int64)\n  Closest candidates are:\n   \
    \ split(::T, ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n\
    \    split(::AbstractString; limit, keepempty) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:459\n\
    \    split(::T, !Matched::Union{Tuple{Vararg{AbstractChar}}, Set{<:AbstractChar},\
    \ AbstractVector{<:AbstractChar}}; limit, keepempty) where T<:AbstractString at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:421\n    ...\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpsso78cqm.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsso78cqm.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsso78cqm.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpsso78cqm.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching\
    \ split(::String, ::String, ::Int64)\n  Closest candidates are:\n    split(::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n\
    \    split(::AbstractString; limit, keepempty) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:459\n\
    \    split(::T, !Matched::Union{Tuple{Vararg{AbstractChar}}, Set{<:AbstractChar},\
    \ AbstractVector{<:AbstractChar}}; limit, keepempty) where T<:AbstractString at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:421\n    ...\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpsso78cqm.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat = Vector{Int64}()\n\
    \    length = length(music_string)\n    c = 1\n    while c <= length\n       \
    \ if music_string[c] == 'o'\n            push!(beat, 4)\n            c += 1\n\
    \        elseif music_string[c] == '.'\n            push!(beat, 1)\n         \
    \   c += 2\n        elseif music_string[c] == 'o' && music_string[c+1] == '|'\n\
    \            push!(beat, 2)\n            c += 2\n        end\n    end\n    return\
    \ beat\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpmwbnvy5i.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpmwbnvy5i.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpmwbnvy5i.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwbnvy5i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwbnvy5i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmwbnvy5i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpmwbnvy5i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwbnvy5i.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwbnvy5i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmwbnvy5i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpmwbnvy5i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmwbnvy5i.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmwbnvy5i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmwbnvy5i.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main "
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    #Your code\
    \ here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgsm268ez.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgsm268ez.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpgsm268ez.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsm268ez.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsm268ez.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgsm268ez.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpgsm268ez.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsm268ez"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return [element[1]\
    \ for element in music_string]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprvsu848s.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmprvsu848s.jl:22\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [111, 32, 111, 32, 111, 32, 111] ==\
    \ [4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsu848s.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvsu848s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprvsu848s.jl:23\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [46, 124, 32, 46, 124, 32, 46, 124, 32, 46, 124]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsu848s.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvsu848s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprvsu848s.jl:24\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [111, 124, 32, 111, 124, 32,\
    \ 46, 124, 32, 46, 124, 32, 111, 32, 111, 32, 111, 32, 111] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsu848s.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprvsu848s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprvsu848s.jl:25\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [111, 124, 32, 46, 124, 32,\
    \ 111, 124, 32, 46  \u2026  32, 111, 32, 111, 124, 32, 111, 32, 111, 124] == [2,\
    \ 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprvsu848s.jl:25 [in"
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_array\
    \ = split(music_string, \" \")\n    music_vector = Vector{Int64}()\n    for note\
    \ in music_array\n        if note == \"o\"\n            push!(music_vector, 4)\n\
    \        elseif note == \"o|\"\n            push!(music_vector, 2)\n        elseif\
    \ note == \".|\"\n            push!(music_vector, 1)\n        end\n    end\n \
    \   return music_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for notes in split(music_string, \" \")\n        beat = 0\n        for\
    \ note in notes\n            if note == 'o'\n                beat += 4\n     \
    \       elseif note == 'o'\n                beat += 2\n            elseif note\
    \ == '.'\n                beat += 1\n            end\n        end\n        push!(beats,\
    \ beat)\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsiwxfmkb.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpsiwxfmkb.jl:35\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiwxfmkb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiwxfmkb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsiwxfmkb.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1, 4, 4, 4, 4] ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiwxfmkb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiwxfmkb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsiwxfmkb.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4]\
    \ == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiwxfmkb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiwxfmkb.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # \n   \
    \ # You are free to add more code here.\n    # Hint: Think about cases, define\
    \ types\n    #\n    \n    # TO DO: Implement this function as required\n    #\
    \ Please don't change the signature of the function, but you are free to\n   \
    \ # add more functions, variables, etc.\n    # PLEASE DO NOT CHANGE THE FUNCTION\
    \ SIGNATURE.\n    \n    beats = 1\n    notes = []\n    for i in 1:length(music_string)\n\
    \        if music_string[i] == 'o'\n            if music_string[i+1] == ' '\n\
    \                push!(notes,beats)\n            elseif music_string[i+1] == '|'\n\
    \                if music_string[i+2] == '.'\n                    push!(notes,beats)\n\
    \                else\n                    push!(notes,beats*2)\n            \
    \    end\n            elseif music_string[i+1] == 'o'\n                push!(notes,beats*4)\n\
    \            end\n        elseif music_string[i] == '.'\n            if music_string[i+1]\
    \ == '|'\n                push!(notes,beats)\n            end\n        end\n \
    \   end\n    \n    return notes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp46u4haci.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmp46u4haci.jl:54\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  BoundsError: attempt\
    \ to access 7-codeunit String at index [8]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmp46u4haci.jl:28\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp46u4haci.jl:54 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp46u4haci.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp46u4haci.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 19-codeunit String at index [20]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmp46u4haci.jl:28\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp46u4haci.jl:56 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp46u4haci.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp46u4haci.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  BoundsError:\
    \ attempt to access 21-codeunit String at index [22]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music("
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp77q54giz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp77q54giz.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77q54giz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp77q54giz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ Int64[]\n    for (i,ch) in enumerate(music_string)\n        if ch == 'o'\n \
    \           # process whole note\n            push!(result, 4)\n        elseif\
    \ ch == '|'\n            # note duration is given by previous character\n    \
    \        if music_string[i-1] == 'o'\n                push!(result, 2)\n     \
    \       elseif music_string[i-1] == '.'\n                push!(result, 1)\n  \
    \          end\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpejy8x0zh.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpejy8x0zh.jl:38\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2,\
    \ 1, 1, 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejy8x0zh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejy8x0zh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpejy8x0zh.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 4, 2, 1, 4, 4,\
    \ 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejy8x0zh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejy8x0zh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # The array\
    \ that will be returned\n    output_array = []\n    # Here we will store the current\
    \ character in string\n    note = []\n    # This loop iterates through all characters\
    \ in the string\n    for x in music_string\n        # If the character is a letter\
    \ - add it to the array\n        if(isalpha(x))\n            push!(note, x)\n\
    \        # If the character is a dot - add it to the array\n        elseif(x ==\
    \ '.')\n            push!(note, x)\n        # If the character is a bar - then\
    \ we finish the note and add it to the output array.\n        elseif(x == '|')\n\
    \            # Joining all characters in the array to a string\n            note_string\
    \ = join(note)\n            # Here we have a dictionary of all possible notes\
    \ with their beats.\n            # For example \"o\" -> 4, \".|\" -> 1\n     \
    \       note_beats = Dict(\"o\" => 4, \"o|\" => 2, \".|\" => 1)\n            #\
    \ We lookup the number of beats in the dictionary\n            beats = note_beats[note_string]\n\
    \            # We push the number of beats to the output array\n            push!(output_array,\
    \ beats)\n            # Clear the array for the next note\n            note =\
    \ []\n        end\n    end\n    # Here we have to do the same thing for the last\
    \ note - as there is no bar after it\n    note_string = join(note)\n    note_beats\
    \ = Dict(\"o\" => 4, \"o|\" => 2, \".|\" => 1)\n    beats = note_beats[note_string]\n\
    \    push!(output_array, beats)\n    # Here we return the output array\n    return\
    \ output_array\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmps1gn5o0q.jl:51

    '
  stdout: "test set: Error During Test at /tmp/tmps1gn5o0q.jl:54\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  KeyError: key \"\" not\
    \ found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmps1gn5o0q.jl:44\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps1gn5o0q.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps1gn5o0q.jl:53\ntest set:\
    \ Error During Test at /tmp/tmps1gn5o0q.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmps1gn5o0q.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1gn5o0q.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1gn5o0q.jl:53\ntest set:\
    \ Error During Test at /tmp/tmps1gn5o0q.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmps1gn5o0q.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1gn5o0q.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1gn5o0q.jl:53\ntest set:\
    \ Error During Test at /tmp/tmps1gn5o0q.jl:57\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] par"
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Split\
    \ the music string\n    notes = split(music_string)\n    # Initialize the vector\
    \ of values\n    beats = zeros(Int64, length(notes))\n    # Loop over the notes\n\
    \    for i in 1:length(notes)\n        # If the note is a whole note\n       \
    \ if notes[i] == \"o\"\n            # Assign the correct value\n            beats[i]\
    \ = 4\n        # Else, if the note is a half note\n        elseif notes[i] ==\
    \ \"o|\"\n            # Assign the correct value\n            beats[i] = 2\n \
    \       # Else, if the note is a quater note\n        elseif notes[i] == \".|\"\
    \n            # Assign the correct value\n            beats[i] = 1\n        end\n\
    \    end\n    # Return the vector of values\n    return beats\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    pass\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpraglpkjv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpraglpkjv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpraglpkjv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpraglpkjv.jl:14\n   [2] macro ex"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    music_string\
    \ = replace(music_string, \" \" => \"\")\n    beats = []\n    regex1 = r\"(o)(o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o5m7b0c.jl:23\nin expression starting at\
    \ /tmp/tmp1o5m7b0c.jl:23\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    x = split(music_string)\n\
    \    output = []\n    for note in x\n        if contains(note, \"o\")\n      \
    \      if contains(note, \"|\")\n                push!(output, 2)\n          \
    \  else\n                push!(output, 4)\n            end\n        else\n   \
    \         push!(output, 1)\n        end\n    end\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    p = split(music_string,\
    \ \" \")\n    v = []\n    for i in p\n        if i == \"o\"\n            push!(v,\
    \ 4)\n        elseif i == \"o|\"\n            push!(v, 2)\n        elseif i ==\
    \ \".|\"\n            push!(v, 1)\n        end\n    end\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # type definitions\n\
    \    # constants\n    const WHOLE = 4\n    const HALF = 2\n    const QUARTER =\
    \ 1\n    # end of type definitions\n    \n    # body of the function \n    notes\
    \ = collect(music_string)\n    beats = []\n    # remove all spaces\n    while\
    \ \" \" in notes\n        pop!(notes, findfirst(notes, \" \"))\n    end\n    while\
    \ length(notes) != 0\n        if notes[1] == 'o'\n            push!(beats, WHOLE)\n\
    \            popfirst!(notes)\n        elseif notes[1] == '.'\n            push!(beats,\
    \ QUARTER)\n            popfirst!(notes)\n        else\n            push!(beats,\
    \ HALF)\n            popfirst!(notes)\n        end\n        popfirst!(notes)\n\
    \    end\n    # end of the body of the function\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmp8kzwzsh_.jl:16\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8kzwzsh_.jl:1\n\
    in expression starting at /tmp/tmp8kzwzsh_.jl:1\n"
  stdout: ''
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_number\
    \ = length(music_string) - count(x -> x == ' ', music_string)\n    notes = zeros(Int64,\
    \ notes_number)\n    notes_index = 1\n    for i in 1:length(music_string)\n  \
    \      if music_string[i] == 'o'\n            if i < length(music_string) && music_string[i+1]\
    \ == '|'\n                notes[notes_index] = 2\n                i += 1\n   \
    \         else\n                notes[notes_index] = 4\n            end\n    \
    \    elseif music_string[i] == '.'\n            notes[notes_index] = 1\n     \
    \   end\n        notes_index += 1\n    end\n    return notes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_x76k9l4.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp_x76k9l4.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] parse_music(music_string::String)\n \
    \    @ Main /tmp/tmp_x76k9l4.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_x76k9l4.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_x76k9l4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_x76k9l4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  BoundsError: attempt to access\
    \ 8-element Vector{Int64} at index [10]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] parse_music(music_string::String)\n    \
    \ @ Main /tmp/tmp_x76k9l4.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_x76k9l4.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_x76k9l4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_x76k9l4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 12-element Vector{Int64} at index [13]\n  Stacktrace:\n  \
    \ [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmp_x76k9l4.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_x76k9l4.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_x76k9l4.jl:36\ntest se"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # TODO:\
    \ Make this function pass its tests.\n    # HINT: String is an iterable object\
    \ (sequence), like vector.\n    #       Use it to iterate over characters and\
    \ build a vector of notes.\n    #       Use [] and push! to construct vectors.\n\
    \    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzz50uees.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpzz50uees.jl:25\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzz50uees.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzz50uees.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzz50uees.jl:26\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzz50uees.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzz50uees.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzz50uees.jl:27\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzz50uees.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzz50uees.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzz50uees.jl:28\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzz50uees.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzz50uees.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpzz50uees.jl:29"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # compute\
    \ the number of beats for each note and return as a vector of integers\n    beats\
    \ = zeros(Int64, length(music_string))\n    j = 1\n    for i in 1:length(music_string)\n\
    \        if music_string[i] == 'o'\n            beats[j] = 4\n            j +=\
    \ 1\n        elseif music_string[i] == '|'\n            if music_string[i - 1]\
    \ == 'o'\n                beats[j - 1] = 2\n            elseif music_string[i\
    \ - 1] == '.'\n                beats[j - 1] = 1\n            end\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn415hslq.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpn415hslq.jl:37\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 4, 4, 4, 0, 0, 0] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn415hslq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn415hslq.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpn415hslq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  BoundsError: attempt to access\
    \ 11-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] parse_music(music_string::String)\n    \
    \ @ Main /tmp/tmpn415hslq.jl:25\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn415hslq.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn415hslq.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpn415hslq.jl:39\n  Expression: candidate(\"o| o| .| .|\
    \ o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [2, 1, 4, 4, 4, 4, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn415hslq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn415hslq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn415hslq.jl:40\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [1, 1, 4, 2, 4, 2, 0, 0,\
    \ 0, 0  \u2026  0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  timestamp: 1660008796
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    beats = [4, 2, 1]\n    i = 1\n    n = length(music_string)\n    parsed\
    \ = []\n    while i < n\n        if music_string[i] == 'o'\n            if music_string[i+1]\
    \ == ' '\n                push!(parsed, beats[1])\n                i += 2\n  \
    \          elseif music_string[i+1] == '|'\n                push!(parsed, beats[2])\n\
    \                i += 3\n            end\n        elseif music_string[i] == '.'\n\
    \            push!(parsed, beats[3])\n            i += 3\n        end\n    end\n\
    \    return parsed\nend\nparse_music(\"o o| .| o| o| .| .| .| .| o o\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp28xizvgg.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp28xizvgg.jl:42\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xizvgg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xizvgg.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp28xizvgg.jl:44\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [2, 2, 1, 1, 4, 4, 4] == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28xizvgg.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28xizvgg.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008794
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Vector{Int64}(undef, 0)\n    num_beats = 0\n    for i in 1:length(music_string)\n\
    \        if(music_string[i] == 'o')\n            if(i != length(music_string)\
    \ && music_string[i+1] == '|')\n                push!(beats, 2)\n            \
    \    num_beats += 2\n            else\n                push!(beats, 4)\n     \
    \           num_beats += 4\n            end\n        elseif(music_string[i] ==\
    \ '.')\n            if(i != length(music_string) && music_string[i+1] == '|')\n\
    \                push!(beats, 1)\n                num_beats += 1\n           \
    \ end\n        end\n    end\n    beats\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008792
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return map(x\
    \ -> x == 'o' ? 4 : x == 'o|' ? 2 : 1,\n               collect(split(music_string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpv1u93d69.jl:14\nin expression\
    \ starting at /tmp/tmpv1u93d69.jl:14\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2ylft78q.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp2ylft78q.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp2ylft78q.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ylft78q.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ylft78q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2ylft78q.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp2ylft78q.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ylft78q.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/"
  timestamp: 1660008796
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    res = Vector{Int64}()\n\
    \    for c in music_string\n        if c == 'o'\n            push!(res, 4)\n \
    \       elseif c == '|'\n            push!(res, 2)\n        elseif c == '.'\n\
    \            push!(res, 1)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmporsfkbrx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmporsfkbrx.jl:33\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 2, 1, 2, 1, 2] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmporsfkbrx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmporsfkbrx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmporsfkbrx.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 1, 2, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmporsfkbrx.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmporsfkbrx.jl:30\ntest set: Test Failed at /tmp/tmporsfkbrx.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmporsfkbrx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmporsfkbrx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat_string\
    \ = split(music_string, ' ')\n    beat_length = zeros(Int64, length(beat_string))\n\
    \    for (i, beat) in enumerate(beat_string)\n        if beat == \"o\"\n     \
    \       beat_length[i] = 4\n        elseif beat == \"o|\"\n            beat_length[i]\
    \ = 2\n        elseif beat == \".|\"\n            beat_length[i] = 1\n       \
    \ end\n    end\n    return beat_length\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk1u_my_e.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpk1u_my_e.jl:32\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk1u_my_e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk1u_my_e.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008794
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parsed_music\
    \ = collect(split(music_string, r\"[\\s]+\"))\n    music_durations = []\n    for\
    \ item in parsed_music\n        if item == \"o\"\n            push!(music_durations,\
    \ 4)\n        elseif item == \"o|\"\n            push!(music_durations, 2)\n \
    \       elseif item == \".|\"\n            push!(music_durations, 1)\n       \
    \ end\n    end\n    return music_durations\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, r\"[ ]+\")\n    beats = Vector{Int64}(undef, length(notes))\n\
    \    for i in 1:length(notes)\n        if notes[i] == \"o\"\n            beats[i]\
    \ = 4\n        elseif notes[i] == \"o|\"\n            beats[i] = 2\n        elseif\
    \ notes[i] == \".|\"\n            beats[i] = 1\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw3ayl7j6.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpw3ayl7j6.jl:32\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3ayl7j6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3ayl7j6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return map(el\
    \ ->\n        if el == 'o'\n            4\n        elseif el == 'o|'\n       \
    \     2\n        elseif el == '.|'\n            1\n        else\n            0\n\
    \        end, split(music_string, [' ']))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3e94hvg.jl:17\nin expression\
    \ starting at /tmp/tmpt3e94hvg.jl:17\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ []\n    for i in music_string \n        if i == 'o' \n            push!(notes,\
    \ 4)\n        elseif i == 'o|'\n            push!(notes, 2)\n        else\n  \
    \          push!(notes, 1)\n        end\n    end\n    return notes\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4my3b6a.jl:18\nin expression\
    \ starting at /tmp/tmpm4my3b6a.jl:18\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    beats = zeros(Int64, size(notes)[1])\n    for i in\
    \ 1:size(notes)[1]\n        if notes[i] == \"o\"\n            beats[i] = 4\n \
    \       elseif notes[i] == \"o|\"\n            beats[i] = 2\n        elseif notes[i]\
    \ == \".|\"\n            beats[i] = 1\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    values = zeros(Int64, length(notes))\n    for\
    \ i = 1:length(notes)\n        if notes[i] == \"o\"\n            values[i] = 4\n\
    \        elseif notes[i] == \"o|\"\n            values[i] = 2\n        else\n\
    \            values[i] = 1\n        end\n    end\n    return values\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjx7s4i5y.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpjx7s4i5y.jl:32\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjx7s4i5y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjx7s4i5y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # first\
    \ create a vector of symbols (i.e. characters) \n    # that we will parse\n  \
    \  music_symbols = collect(music_string)\n    # declare the vector of integers\
    \ \n    # to which we are going to store the beats\n    beats = Int64[]\n    #\
    \ we will go through the characters one by one\n    # we will use the while loop\
    \ that stops after\n    # all characters were parsed\n    i = 1\n    while i <=\
    \ length(music_symbols)\n        # we will use a temporary variable for easy\n\
    \        # parsing of characters\n        char = music_symbols[i]\n        # switch\
    \ statement for easy handling\n        # of different cases\n        if char ==\
    \ 'o'\n            push!(beats, 4)\n        elseif char == '.'\n            push!(beats,\
    \ 1)\n        elseif char == '|'\n            push!(beats, 2)\n        else\n\
    \            # this is an error because we have an unrecognized\n            #\
    \ character in the input\n            error(\"Unrecognized input!\")\n       \
    \ end\n        # increment the loop counter\n        i += 1\n    end\n    # return\
    \ the beats vector\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt8ctqtzf.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmpt8ctqtzf.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  Unrecognized input!\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpt8ctqtzf.jl:39\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8ctqtzf.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8ctqtzf.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpt8ctqtzf.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  Unrecognized input!\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpt8ctqtzf.jl:39\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8ctqtzf.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8ctqtzf.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpt8ctqtzf.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  Unrecognized\
    \ input!\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] parse_music(music_string::String)\n     @ Main /tmp/tmpt8ctqtzf.jl:39\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8ctqtzf.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8ctqtzf.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpt8ctqtzf.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, "
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    whole_note\
    \ = music_string[1]\n    half_note = music_string[4]\n    quarter_note = music_string[7]\n\
    \    #@show(whole_note)\n    #@show(half_note)\n    #@show(quarter_note)\n   \
    \ notes = strsplit(music_string, \"|\")\n    beats = length(notes)\n    #@show(notes)\n\
    \    #@show(beats)\n    beat_length = zeros(beats)\n    for i = 1:beats\n    \
    \    if notes[i] == whole_note\n            beat_length[i] = 4\n        elseif\
    \ notes[i] == half_note\n            beat_length[i] = 2\n        elseif notes[i]\
    \ == quarter_note\n            beat_length[i] = 1\n        end\n    end\n    return\
    \ beat_length\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpun5gnn7n.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpun5gnn7n.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access empty String at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmpun5gnn7n.jl:14\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpun5gnn7n.jl:41 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpun5gnn7n.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpun5gnn7n.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: strsplit not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpun5gnn7n.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpun5gnn7n.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpun5gnn7n.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpun5gnn7n.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: strsplit not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpun5gnn7n.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpun5gnn7n.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpun5gnn7n.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpun5gnn7n.jl:44\n  Test threw exception\n  Expres"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpub7rtger.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpub7rtger.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub7rtger.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub7rtger.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpub7rtger.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub7rtger.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub7rtger.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpub7rtger.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub7rtger.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub7rtger.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpub7rtger.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub7rtger.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub7rtger.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpub7rtger.jl:26"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return Vector{Int64}([4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbvmr2j7g.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpbvmr2j7g.jl:21\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvmr2j7g.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvmr2j7g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbvmr2j7g.jl:22\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvmr2j7g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvmr2j7g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbvmr2j7g.jl:23\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvmr2j7g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvmr2j7g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbvmr2j7g.jl:24\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvmr2j7g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvmr2j7g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbvmr2j7g.jl:25"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music =\
    \ split(music_string, \" \")\n    beats = zeros(Int64,length(music))\n    i =\
    \ 1\n    for item in music\n        #your code here\n        beats[i] = if(item==\"\
    o\",\"4\",\"if(item==o|,2,1)\")\n        i += 1\n    end\n    return beats\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmhh3l26r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmhh3l26r.jl:1\n\
    in expression starting at /tmp/tmpmhh3l26r.jl:1\n"
  stdout: ''
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    n = length(music_string)\n\
    \    acc = 0\n    output = Int64[]\n    for i in 1:n\n        c = music_string[i]\n\
    \        if c == 'o'\n            acc += 4\n        elseif c == '|'\n        \
    \    push!(output, acc)\n            acc = 0\n        elseif c == '.'\n      \
    \      acc += 1\n        end\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpln39mw0w.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpln39mw0w.jl:36\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln39mw0w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln39mw0w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpln39mw0w.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1] == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln39mw0w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln39mw0w.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpln39mw0w.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 4, 1, 8, 8] == [2,\
    \ 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln39mw0w.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln39mw0w.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008795
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    notes = split(music_string, \" \")\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ parse.(Symbol, split(music_string, ' '))\n    beats = Vector{Int64}(undef, length(notes))\n\
    \    for i = 1:length(notes)\n        if notes[i] == :o\n            beats[i]\
    \ = 4\n        elseif notes[i] == :\"o|\"\n            beats[i] = 2\n        elseif\
    \ notes[i] == :\".|\"\n            beats[i] = 1\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphk755ic6.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmphk755ic6.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching parse(::Type{Symbol}, ::SubString{String})\n  Closest candidates are:\n\
    \    parse(!Matched::Type{Sockets.IPAddr}, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, ::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:653 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] parse_music(music_string::String)\n      @ Main /tmp/tmphk755ic6.jl:14\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphk755ic6.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphk755ic6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphk755ic6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching parse(::Type{Symbol},\
    \ ::SubString{String})\n  Closest candidates are:\n    parse(!Matched::Type{Sockets.IPAddr},\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Sockets/src/IPAddr.jl:246\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at ~/.conda/envs/polyglot/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, ::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [in"
  timestamp: 1660008797
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_list\
    \ = split(music_string, \" \")\n    output = []\n    for i = 1:length(notes_list)\n\
    \        note = notes_list[i]\n        if note == \"o\"\n            append!(output,\
    \ 4)\n        elseif note == \"o|\"\n            append!(output, 2)\n        elseif\
    \ note == \".|\"\n            append!(output, 1)\n        end\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008794
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # compute\
    \ total number of notes\n    total_notes = count(x -> x != ' ' && x != '|', music_string)\n\
    \    # initialize result vector of zeros\n    result = zeros(Int64, total_notes)\n\
    \    # your code goes here\n    return result\nend\nresult = parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# this is a way to test your code, please do not\
    \ modify\nassert parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4]\nassert parse_music(\"o|o.o|..o|.o|.o|o.o|\") == [2, 2,\
    \ 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\nprintln(\"Your code is correct\")\nprintln(\"\
    Passed tests\")\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"parse_music\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpev9jzgji.jl:23\nin expression\
    \ starting at /tmp/tmpev9jzgji.jl:23\n"
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_array\
    \ = split(music_string, \" \")\n    music_vector = []\n    for i = 1:length(music_array)\n\
    \        music_vector = push!(music_vector, parse_note(music_array[i]))\n    end\n\
    \    return music_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp242pdigi.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp242pdigi.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: parse_note\
    \ not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @\
    \ Main /tmp/tmp242pdigi.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp242pdigi.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp242pdigi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp242pdigi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: parse_note not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmp242pdigi.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp242pdigi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp242pdigi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp242pdigi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: parse_note not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp242pdigi.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp242pdigi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp242pdigi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp242pdigi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ parse_note not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmp242pdi"
  timestamp: 1660008797
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(beats,\
    \ 4)\n        elseif note == '.'\n            push!(beats, 1)\n        elseif\
    \ note == '|'\n            beats[end] = beats[end]/2\n        end\n    end\n \
    \   return beats\nend\n \n \n \n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdsub_xbs.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpdsub_xbs.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  InexactError: Int64(0.5)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n\
    \      @ ./number.jl:7 [inlined]\n    [3] setindex!(A::Vector{Int64}, x::Float64,\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [4] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [5] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [8] copyto!\n      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n   [10] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n   [11] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [12] parse_music(music_string::String)\n      @ Main /tmp/tmpdsub_xbs.jl:24\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpdsub_xbs.jl:37 [inlined]\n\
    \   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpdsub_xbs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdsub_xbs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  InexactError:\
    \ Int64(0.5)\n  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n\
    \    [2] convert\n      @ ./number.jl:7 [inlined]\n    [3] setindex!(A::Vector{Int64},\
    \ x::Float64, i1::Int64)\n      @ Base ./array.jl:903\n    [4] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [5] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [8] copyto!\n      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n\
    \      @ ./abstract"
  timestamp: 1660008797
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # TODO:\
    \ implement this function\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1qaulcgp.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1qaulcgp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp1qaulcgp.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qaulcgp.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qaulcgp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1qaulcgp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp1qaulcgp.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qaulcgp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parse_music(split(music_string))\n\
    end\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqo37r92d.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpqo37r92d.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching parse_music(::Vector{SubString{String}})\n  Closest candidates are:\n\
    \    parse_music(!Matched::String) at /tmp/tmpqo37r92d.jl:13\n  Stacktrace:\n\
    \   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpqo37r92d.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo37r92d.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo37r92d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqo37r92d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching parse_music(::Vector{SubString{String}})\n\
    \  Closest candidates are:\n    parse_music(!Matched::String) at /tmp/tmpqo37r92d.jl:13\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpqo37r92d.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo37r92d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo37r92d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqo37r92d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching\
    \ parse_music(::Vector{SubString{String}})\n  Closest candidates are:\n    parse_music(!Matched::String)\
    \ at /tmp/tmpqo37r92d.jl:13\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpqo37r92d.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo37r92d.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/"
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    notes = split(music_string)\n    for note in notes\n        if note\
    \ == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n     \
    \       push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\n \n@testset \"Should return\
    \ vector of integers for whole note (4), half note (2) and quater note (1)\" begin\n\
    \    @test parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1,\
    \ 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpveali2fb.jl:28

    in expression starting at /tmp/tmpveali2fb.jl:28

    '
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n  # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmph_td30jx.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmph_td30jx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmph_td30jx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_td30jx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph_td30jx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmph_td30jx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmph_td30jx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph_td30jx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008799
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parsed_music\
    \ = []\n    music_array = split(music_string, ' ')\n    for note in music_array\n\
    \        length = length(note)\n        if note == \"o\"\n            push!(parsed_music,\
    \ 4)\n        elseif note == \"o|\"\n            push!(parsed_music, 2)\n    \
    \    elseif note == \".|\"\n            push!(parsed_music, 1)\n        end\n\
    \    end\n    return parsed_music\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1beg63m5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp1beg63m5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp1beg63m5.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1beg63m5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1beg63m5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1beg63m5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmp1beg63m5.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1beg63m5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1beg63m5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1beg63m5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmp1beg63m5.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1beg63m5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1beg63m5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1beg63m5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmp1beg63m5.jl:17\n   [2] "
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    #\
    \ parse music_string here\n    parsed_music = Vector{Int64}()\n    for c in music_string\n\
    \        if c == 'o'\n            push!(parsed_music, 4)\n        elseif c ==\
    \ 'o' && c == '|'\n            push!(parsed_music, 2)\n        elseif c == '.'\
    \ && c == '|'\n            push!(parsed_music, 1)\n        end\n    end\n    return\
    \ parsed_music\nend\n \ntest_case = parse_music(\"o o| .| o| o| .| .| .| .| o\
    \ o\") # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdfz61m86.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpdfz61m86.jl:37\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfz61m86.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfz61m86.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfz61m86.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 4, 4, 4, 4] == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfz61m86.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfz61m86.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfz61m86.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 4, 4, 4, 4, 4] == [2,\
    \ 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfz61m86.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfz61m86.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008797
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_string\
    \ = split(music_string, \" \")\n    notes_beat = []\n    for note in notes_string\n\
    \        if note == \"o\"\n            push!(notes_beat, 4)\n        elseif note\
    \ == \"o|\"\n            push!(notes_beat, 2)\n        elseif note == \".|\"\n\
    \            push!(notes_beat, 1)\n        end\n    end\n    return notes_beat\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    if length(music_string)\
    \ == 0\n        return []\n    end\n    note = music_string[1]\n    if note ==\
    \ 'o'\n        return [4] .+ parse_music(music_string[2:end])\n    elseif note\
    \ == '.'\n        return [1] .+ parse_music(music_string[2:end])\n    elseif note\
    \ == '|'\n        return [0] .+ parse_music(music_string[2:end])\n    else\n \
    \       throw(DomainError(\"Unexpected note in the music string, only 'o' '.'\
    \ and '|' are allowed, other characters are ignored\"))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkqjbyo7g.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpkqjbyo7g.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  DomainError with Unexpected\
    \ note in the music string, only 'o' '.' and '|' are allowed, other characters\
    \ are ignored:\n  \n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpkqjbyo7g.jl:25\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpkqjbyo7g.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkqjbyo7g.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkqjbyo7g.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkqjbyo7g.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  DomainError with Unexpected note\
    \ in the music string, only 'o' '.' and '|' are allowed, other characters are\
    \ ignored:\n  \n  Stacktrace:\n   [1] parse_music(music_string::String)\n    \
    \ @ Main /tmp/tmpkqjbyo7g.jl:25\n   [2] parse_music(music_string::String)\n  \
    \   @ Main /tmp/tmpkqjbyo7g.jl:23\n   [3] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpkqjbyo7g.jl:21\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkqjbyo7g.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkqjbyo7g.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkqjbyo7g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  DomainError\
    \ with Unexpected note in the music string, only 'o' '.' and '|' are allowed,\
    \ other characters are ignored:\n  \n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpkqjbyo7g.jl:25\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpkqjbyo7g.jl:23\n   [3] parse_music(music_st"
  timestamp: 1660008798
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    #\
    \ String values for each note\n    whole = \"o\"\n    half = \"o|\"\n    quarter\
    \ = \".|\"\n    \n    # define length values for each note\n    whole_length =\
    \ 4\n    half_length = 2\n    quarter_length = 1\n    \n    # split music string\
    \ by whitespace\n    note_string = split(music_string)\n    \n    # initialize\
    \ list to store note lengths in\n    note_lengths = Int64[]\n    \n    # append\
    \ each note's length to list\n    for note in note_string\n        if note ==\
    \ whole\n            push!(note_lengths, whole_length)\n        elseif note ==\
    \ half\n            push!(note_lengths, half_length)\n        elseif note == quarter\n\
    \            push!(note_lengths, quarter_length)\n        end\n    end\n    \n\
    \    return note_lengths\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    beats\
    \ = zeros(Int64, length(music_string))\n    i = 1\n    for note in music_string\n\
    \        if note == 'o'\n            beats[i] = 4\n        elseif note == 'o'\n\
    \            beats[i] = 2\n        elseif note == '.'\n            beats[i] =\
    \ 1\n        end\n        i += 1\n    end\n    \n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1yuo99bs.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp1yuo99bs.jl:36\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 0, 4, 0, 4, 0, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yuo99bs.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yuo99bs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1yuo99bs.jl:37\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yuo99bs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yuo99bs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1yuo99bs.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 0, 0, 4, 0, 0, 1, 0, 0,\
    \ 1, 0, 0, 4, 0, 4, 0, 4, 0, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yuo99bs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1yuo99bs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1yuo99bs.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 0, 0, 1, 0, 0, 4, 0,\
    \ 0, 1  \u2026  0, 4, 0, 4, 0, 0, 4, 0, 4, 0] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1yuo99bs.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-"
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    beat\
    \ = []\n    for i = 1:length(music_string)\n        if music_string[i] == 'o'\n\
    \            append!(beat, 4)\n        elseif music_string[i] == '|'\n       \
    \     if music_string[i-1] == 'o'\n                append!(beat, 2)\n        \
    \    elseif music_string[i-1] == '.'\n                append!(beat, 1)\n     \
    \       end\n        end\n    end\n    return beat\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphp7_o8y5.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmphp7_o8y5.jl:37\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2,\
    \ 1, 1, 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphp7_o8y5.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphp7_o8y5.jl:33\ntest set: Test Failed at /tmp/tmphp7_o8y5.jl:38\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 4, 2, 1, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp7_o8y5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp7_o8y5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008798
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your solution\
    \ goes here.\n    music_string_split = split(music_string)\n    beats_per_note\
    \ = []\n    for i in 1:length(music_string_split)\n        if music_string_split[i]\
    \ == \"o\"\n            push!(beats_per_note, 4)\n        elseif music_string_split[i]\
    \ == \"o|\"\n            push!(beats_per_note, 2)\n        elseif music_string_split[i]\
    \ == \".|\"\n            push!(beats_per_note, 1)\n        end\n    end\n    return\
    \ beats_per_note\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    return Vector{Int64}()\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4nuq_7mo.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4nuq_7mo.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nuq_7mo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nuq_7mo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4nuq_7mo.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nuq_7mo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nuq_7mo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4nuq_7mo.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nuq_7mo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nuq_7mo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4nuq_7mo.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4nuq_7mo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4nuq_7mo.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    b=0\n    beats = [4,2,1]\n    v=[]\n    for x in music_string\n  \
    \      if x=='o'\n            if b==0\n                b=4\n            elseif\
    \ b==1\n                push!(v,b)\n                b=4\n            elseif b==2\n\
    \                push!(v,b)\n                b=4\n            elseif b==4\n  \
    \              push!(v,b)\n                b=4\n            end\n        elseif\
    \ x=='o'&&music_string[i+1]=='|'\n            if b==0\n                b=2\n \
    \           elseif b==1\n                push!(v,b)\n                b=2\n   \
    \         elseif b==2\n                push!(v,b)\n                b=2\n     \
    \       elseif b==4\n                push!(v,b)\n                b=2\n       \
    \     end\n        elseif x=='.'&&music_string[i+1]=='|'\n            if b==0\n\
    \                b=1\n            elseif b==1\n                push!(v,b)\n  \
    \              b=1\n            elseif b==2\n                push!(v,b)\n    \
    \            b=1\n            elseif b==4\n                push!(v,b)\n      \
    \          b=1\n            end\n        elseif x==' '\n            if b==0\n\
    \                continue\n            elseif b==1\n                push!(v,b)\n\
    \                b=0\n            elseif b==2\n                push!(v,b)\n  \
    \              b=0\n            elseif b==4\n                push!(v,b)\n    \
    \            b=0\n            end\n        end\n    end\n    push!(v,b)\n    return\
    \ v\n    # YOUR CODE ENDS HERE\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpse7_lb4g.jl:79

    '
  stdout: "test set: Test Failed at /tmp/tmpse7_lb4g.jl:82\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpse7_lb4g.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpse7_lb4g.jl:81\ntest set: Error\
    \ During Test at /tmp/tmpse7_lb4g.jl:84\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: i not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpse7_lb4g.jl:45\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpse7_lb4g.jl:84 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpse7_lb4g.jl:81\ntest set:\
    \ Error During Test at /tmp/tmpse7_lb4g.jl:85\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ i not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n   \
    \  @ Main /tmp/tmpse7_lb4g.jl:45\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpse7_lb4g.jl:85 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpse7_lb4g.jl:81\ntest set:\
    \ Error During Test at /tmp/tmpse7_lb4g.jl:86\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  UndefVarError:\
    \ i not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n   \
    \  @ Main /tmp/tmpse7_lb4g.jl:45\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expan"
  timestamp: 1660008800
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp7a69t9xt.jl:18\nin expression\
    \ starting at /tmp/tmp7a69t9xt.jl:18\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n  \n  # Initialize\
    \ an empty vector to return\n  return_vec = []\n  \n  # Loop through the characters\
    \ in the music string\n  for i = 1:length(music_string)\n    \n    # If the character\
    \ equals \"o\" append 4 to the vector\n    if music_string[i] == 'o'\n      push!(return_vec,\
    \ 4)\n      \n    # Else if the character equals \"o|\" append 2 to the vector\n\
    \    elseif music_string[i] == 'o|'\n      push!(return_vec, 2)\n      \n    #\
    \ Else if the character equals \".|\" append 1 to the vector\n    elseif music_string[i]\
    \ == '.|'\n      push!(return_vec, 1)\n    end\n  end\n  \n  # Return the vector\n\
    \  return return_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprfk2m_24.jl:26\nin expression\
    \ starting at /tmp/tmprfk2m_24.jl:26\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Vector{Int64}()\n    push!(beats, 4)\n    push!(beats, 2)\n    push!(beats,\
    \ 1)\n    push!(beats, 2)\n    push!(beats, 2)\n    push!(beats, 1)\n    push!(beats,\
    \ 1)\n    push!(beats, 1)\n    push!(beats, 1)\n    push!(beats, 4)\n    push!(beats,\
    \ 4)\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbfc59utf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpbfc59utf.jl:33\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfc59utf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfc59utf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfc59utf.jl:34\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfc59utf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfc59utf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfc59utf.jl:35\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfc59utf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfc59utf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfc59utf.jl:36\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfc59utf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfc59utf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfc59utf.jl:37"
  timestamp: 1660008798
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    note_lens\
    \ = Vector{Int64}()\n    split_music = split(music_string, \" \")\n    for (i,s)\
    \ in enumerate(split_music)\n        if (s == \"o\")\n            push!(note_lens,\
    \ 4)\n        elseif (s == \"o|\")\n            push!(note_lens, 2)\n        elseif\
    \ (s == \".|\")\n            push!(note_lens, 1)\n        end\n    end\n    return\
    \ note_lens\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008796
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    beats = Vector{Int64}(undef, length(notes))\n    for\
    \ i = 1:length(notes)\n        if notes[i] == \"o\"\n            beats[i] = 4\n\
    \        elseif notes[i] == \"o|\"\n            beats[i] = 2\n        elseif notes[i]\
    \ == \".|\"\n            beats[i] = 1\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Write\
    \ your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppn8sy5jx.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppn8sy5jx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmppn8sy5jx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppn8sy5jx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppn8sy5jx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppn8sy5jx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmppn8sy5jx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppn8sy5jx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008800
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    durations = []\n    for note in notes\n    \
    \    if note == \"o\"\n            push!(durations, 4)\n        elseif note ==\
    \ \"o|\"\n            push!(durations, 2)\n        elseif note == \".|\"\n   \
    \         push!(durations, 1)\n        end\n    end\n    return durations\nend\n\
    \    \n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ map(x -> x == 'o' ? 4 : 2, split(music_string, ' '))\n    return [notes[i] for\
    \ i = 1:length(notes)]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4bgbu3p7.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp4bgbu3p7.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [2] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bgbu3p7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bgbu3p7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4bgbu3p7.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [2, 2, 2, 2] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bgbu3p7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bgbu3p7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4bgbu3p7.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [2, 2, 2, 2] == [1, 1, 1, 1]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bgbu3p7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bgbu3p7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4bgbu3p7.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [2, 2, 2, 2, 2, 2, 2, 2] ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bgbu3p7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bgbu3p7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4bgbu3p7.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   "
  timestamp: 1660008799
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parse_pattern(music_string,\
    \ 'o|' => 2, '.|' => 1, 'o' => 4)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkn_l7fxp.jl:14\nin expression\
    \ starting at /tmp/tmpkn_l7fxp.jl:14\n"
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    parse\
    \ = [0 0]\n    parse = split(music_string)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp66jfxih7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp66jfxih7.jl:1\n\
    in expression starting at /tmp/tmp66jfxih7.jl:1\n"
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \"\"\" REPLACE\
    \ THIS WITH YOUR IMPLEMENTATION\"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp1zhcnk1e.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1zhcnk1e.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp1zhcnk1e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1zhcnk1e.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1zhcnk1e.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1zhcnk1e.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp1zhcnk1e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1zhcnk1e.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    #\
    \ Your code goes here\n    arr = explode(music_string)\n    result = []\n    o\
    \ = 4\n    o| = 2\n    .| = 1\n    for a in arr\n        if a == \"o\"\n     \
    \       push!(result, o)\n        elseif a == \"o|\"\n            push!(result,\
    \ o|)\n        elseif a == \".|\"\n            push!(result, .|)\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5c2auodo.jl:19\nin expression starting at /tmp/tmp5c2auodo.jl:19\n"
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_notes\
    \ = split(music_string, \" \")\n    music_length = length(music_notes)\n    beats\
    \ = Array{Int64}(music_length)\n    for i in 1:music_length\n        if music_notes[i]\
    \ == \"o\"\n            beats[i] = 4\n        elseif music_notes[i] == \"o|\"\n\
    \            beats[i] = 2\n        else\n            beats[i] = 1\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmparusvv82.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmparusvv82.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmparusvv82.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmparusvv82.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmparusvv82.jl:32\ntest set:\
    \ Error During Test at /tmp/tmparusvv82.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmparusvv82.jl:16\n   [2] ma"
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n   if length(music_string)\
    \ == 0\n        return zeros(Int64, 0)\n    end\n    notes = [0]\n    beats =\
    \ 0\n    for note in music_string\n        if note == 'o'\n            beats +=\
    \ 4\n        elseif note == '|'\n            push!(notes, beats)\n           \
    \ beats = 0\n        elseif note == '.'\n            beats += 1\n        end\n\
    \    end\n    push!(notes, beats)\n    return notes[2:end]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdbtcibxc.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpdbtcibxc.jl:38\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [16] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbtcibxc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbtcibxc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdbtcibxc.jl:39\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 1, 1, 1, 0] == [1, 1, 1, 1]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbtcibxc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbtcibxc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdbtcibxc.jl:40\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1, 16] == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbtcibxc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbtcibxc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdbtcibxc.jl:41\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 4, 1, 8, 8, 0] ==\
    \ [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbtcibxc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbtcibxc.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008800
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat_counts\
    \ = []\n    for key in split(music_string, \" \")\n        if key == \"o\"\n \
    \           push!(beat_counts, 4)\n        elseif key == \"o|\"\n            push!(beat_counts,\
    \ 2)\n        elseif key == \".|\"\n            push!(beat_counts, 1)\n      \
    \  end\n    end\n    return beat_counts\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    L = String(split(music_string))\n\
    \    music = Vector{Int64}(length(L))\n    i = 1\n    while i <= length(L)\n \
    \       if L[i] == \"o\"\n            music[i] = 4\n        elseif L[i] == \"\
    o|\"\n            music[i] = 2\n        elseif L[i] == \".|\"\n            music[i]\
    \ = 1\n        end\n        i += 1\n    end\n    return music\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpucyhbh5g.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpucyhbh5g.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching String(::Vector{SubString{String}})\n  Closest candidates are:\n  \
    \  String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpucyhbh5g.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpucyhbh5g.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpucyhbh5g.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpucyhbh5g.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching String(::Vector{SubString{String}})\n\
    \  Closest candidates are:\n    String(!Matched::String) at ~/.conda/envs/polyglot/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at ~/.conda/envs/polyglot/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpucyhbh5g.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpucyhbh5g.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpucyhbh5g.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpucyhbh5g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching\
    \ String(::Vector{SubS"
  timestamp: 1660008802
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    m = split(music_string,\
    \ \" \")\n    v = []\n    for s in m\n        if s == \"o\"\n            push!(v,\
    \ 4)\n        elseif s == \"o|\"\n            push!(v, 2)\n        elseif s ==\
    \ \".|\"\n            push!(v, 1)\n        end\n    end\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    v = []\n\
    \    for i in music_string\n        if i == 'o'\n            push!(v, 4)\n   \
    \     elseif i == 'o'\n            push!(v, 2)\n        elseif i == '.'\n    \
    \        push!(v, 1)\n        end\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9jarlf3r.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp9jarlf3r.jl:34\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9jarlf3r.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9jarlf3r.jl:30\ntest set: Test Failed at /tmp/tmp9jarlf3r.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9jarlf3r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jarlf3r.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008800
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # parse\
    \ the input string\n    # make an array of beats\n    # return the array\n   \
    \ beats = []\n    tokens = split(music_string)\n    for token in tokens\n    \
    \    if token == \"o\"\n            push!(beats, 4)\n        elseif token == \"\
    o|\"\n            push!(beats, 2)\n        elseif token == \".|\"\n          \
    \  push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008798
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    V_music\
    \ = []\n    music_substrings = split(music_string, \" \")\n    for substring in\
    \ music_substrings\n        if substring == \"o\"\n            push!(V_music,\
    \ 4)\n        elseif substring == \"o|\"\n            push!(V_music, 2)\n    \
    \    elseif substring == \".|\"\n            push!(V_music, 1)\n        end\n\
    \    end\n    return V_music\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008798
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    pass\nend\n\
    \ \nassert parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1,\
    \ 1, 1, 1, 4, 4]\nassert parse_music(\"o o| o| o| o| o| o| o| o| o| o\") == [4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4]\n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"parse_music\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zoverxu.jl:17\nin expression\
    \ starting at /tmp/tmp7zoverxu.jl:17\n"
  stdout: ''
  timestamp: 1660008800
- exit_code: -1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \".|\")\n    music_string = replace(music_string,\
    \ \"o\", \".|.|.|.\")\n    return map(c -> 1, collect(split(music_string, \".\"\
    )))\nend\nmusic_notes = parse_music(\"o o| .| o| o| .| .| .| .| o o\")\nprintln(music_notes)\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching replace(::String, ::String,
    ::String)'
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \"\"\"\n\
    \    Returns all quarter notes in the music.\n    \"\"\"\n    # TODO: implement\
    \ this\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpiy34z46u.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpiy34z46u.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpiy34z46u.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiy34z46u.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiy34z46u.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpiy34z46u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpiy34z46u.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiy34z46u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1660008803
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ split(music_string, ' ')\n    results = []\n    for beat in beats\n        if\
    \ beat == \"o\"\n            push!(results, 4)\n        elseif beat == \"o|\"\n\
    \            push!(results, 2)\n        elseif beat == \".|\"\n            push!(results,\
    \ 1)\n        end\n    end\n    return results\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008799
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_notes\
    \ = split(music_string, ' ')\n    beats = []\n    for note in music_notes\n  \
    \      if note == \"o\"\n            push!(beats, 4)\n        elseif note == \"\
    o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n           \
    \ push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008799
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ split(music_string, r\"[ ]+\")\n    len = length(beats)\n    result = zeros(Int64,\
    \ len)\n    for i in 1:len\n        if beats[i] == \"o\"\n            result[i]\
    \ = 4\n        elseif beats[i] == \"o|\"\n            result[i] = 2\n        elseif\
    \ beats[i] == \".|\"\n            result[i] = 1\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3wucopy1.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp3wucopy1.jl:33\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wucopy1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wucopy1.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    vector =\
    \ []\n    for x in music_string\n        if x == 'o'\n            push!(vector,\
    \ 4)\n        elseif x == '|'\n            push!(vector, 1)\n        elseif x\
    \ == '.'\n            push!(vector, 2)\n        end\n    end\n    return vector\n\
    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_9ebayqf.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp_9ebayqf.jl:53\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [2, 1, 2, 1, 2, 1, 2, 1] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_9ebayqf.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_9ebayqf.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp_9ebayqf.jl:54\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 1, 4, 1, 2, 1, 2, 1, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_9ebayqf.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_9ebayqf.jl:50\ntest set: Test Failed at /tmp/tmp_9ebayqf.jl:55\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 2, 1, 4, 1, 2, 1, 4, 4, 1, 4, 4, 1] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_9ebayqf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_9ebayqf.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music =\
    \ split(music_string)\n    tempo = []\n    for music_item in music\n        if\
    \ music_item == \"o\"\n            push!(tempo, 4)\n        elseif music_item\
    \ == \"o|\"\n            push!(tempo, 2)\n        elseif music_item == \".|\"\n\
    \            push!(tempo, 1)\n        end\n    end\n    return tempo\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008799
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # You write\
    \ it!\nend\n \n# This function is already implemented for you.\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp00rsonnk.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp00rsonnk.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp00rsonnk.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp00rsonnk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp00rsonnk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp00rsonnk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp00rsonnk.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp00rsonnk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    vec=Array{Int64}(length(music_string))\n\
    \    index=1\n    for i=1:length(music_string)\n        if music_string[i]=='o'\n\
    \            if i<length(music_string)\n                if music_string[i+1]=='\
    \ ' || music_string[i+1]=='|'\n                    vec[index]=4\n            \
    \        index+=1\n                end\n            else\n                vec[index]=4\n\
    \                index+=1\n            end\n        elseif music_string[i]=='.'\n\
    \            vec[index]=1\n            index+=1\n        end\n    end\n    return\
    \ vec[1:index-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp9imz9uh5.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp9imz9uh5.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp9imz9uh5.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9imz9uh5.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9imz9uh5.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp9imz9uh5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp9imz9uh5.jl:14\n   [2] ma"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # TODO:\
    \ implement me!\n    note = zeros(Int64,length(music_string))\n    j = 1\n   \
    \ for i = 1:length(music_string)\n        if music_string[i] == 'o'\n        \
    \    note[j] = 4\n            j += 1\n        elseif music_string[i] == '|'\n\
    \            note[j] += 1\n        elseif music_string[i] == '.'\n           \
    \ note[j] += 1\n        end\n    end\n    return note\nend\nparse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprczn7_e0.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmprczn7_e0.jl:36\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 4, 4, 4, 0, 0, 0] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprczn7_e0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprczn7_e0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprczn7_e0.jl:37\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprczn7_e0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprczn7_e0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprczn7_e0.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 4, 4, 4, 4, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprczn7_e0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprczn7_e0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmprczn7_e0.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 4, 4, 4, 4, 4, 1, 0,\
    \ 0, 0  \u2026  0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprczn7_e0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-"
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    count_beat=Vector{Int64}(undef,0)\n\
    \    for note in music_string\n        if note=='o'\n            append!(count_beat,4)\n\
    \        elseif note=='.'\n            append!(count_beat,1)\n        elseif note=='|'\n\
    \            append!(count_beat,2)\n        end\n    end\n    return count_beat\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzqb0kfd4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpzqb0kfd4.jl:33\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 2, 1, 2, 1, 2] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqb0kfd4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqb0kfd4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpzqb0kfd4.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 1, 2, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzqb0kfd4.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzqb0kfd4.jl:30\ntest set: Test Failed at /tmp/tmpzqb0kfd4.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqb0kfd4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqb0kfd4.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_to_beat_mapping\
    \ = Dict(\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    )\n \
    \   return map(notes_to_beat_mapping, split(music_string, r\"\\s+\"))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptfhtm45d.jl:16\nin expression\
    \ starting at /tmp/tmptfhtm45d.jl:16\n"
  stdout: ''
  timestamp: 1660008800
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ []\n    for note in collect(eachmatch(r\"o|\\.\\|\", music_string))\n      \
    \  if contains(note.match, \"o\")\n            push!(notes, 4)\n        elseif\
    \ contains(note.match, \"o|\")\n            push!(notes, 2)\n        elseif contains(note.match,\
    \ \".|\")\n            push!(notes, 1)\n        end\n    end\n    return notes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiescb1ot.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpiescb1ot.jl:34\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiescb1ot.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiescb1ot.jl:30\ntest set: Test Failed at /tmp/tmpiescb1ot.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiescb1ot.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiescb1ot.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Here goes\
    \ your implementation\n    t=split(music_string, \" \")\n    q=[]\n    for i in\
    \ t\n        if i == \"o\"\n            push!(q,4)\n        elseif i == \"o|\"\
    \n            push!(q,2)\n        elseif i == \".|\"\n            push!(q,1)\n\
    \        end\n    end\n    return q\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008799
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ Vector{Int64}()\n    beats = Dict(\"o\" => 4, \"o|\" => 2, \".|\" => 1)\n  \
    \  for note in split(music_string, \" \")\n        push!(result, beats[note])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0jxofp97.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp0jxofp97.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  KeyError: key \"\" not\
    \ found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmp0jxofp97.jl:17\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0jxofp97.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0jxofp97.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  timestamp: 1660008802
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Split\
    \ string by spaces\n    notes = split(music_string, ' ')\n    # Initialize a vector\
    \ of integers\n    beats = Int64[]\n    # Loop over notes\n    for note in notes\n\
    \        # Check the first character\n        # If it is 'o'\n        if note[1]\
    \ == 'o'\n            # Check the second character\n            # If it is '|'\n\
    \            if note[2] == '|'\n                # Add 2 to the beats vector\n\
    \                push!(beats, 2)\n            # If it is not '|'\n           \
    \ else\n                # Add 4 to the beats vector\n                push!(beats,\
    \ 4)\n            end\n        # If it is '.'\n        elseif note[1] == '.'\n\
    \            # Add 1 to the beats vector\n            push!(beats, 1)\n      \
    \  end\n    end\n    # Return the beats vector\n    return beats\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaxi_3m79.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpaxi_3m79.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access empty SubString{String} at index [1]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\n     @ Base ./strings/substring.jl:83\n   [3] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpaxi_3m79.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaxi_3m79.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpaxi_3m79.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpaxi_3m79.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  BoundsError: attempt to access 1-codeunit\
    \ SubString{String} at index [2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex(s::SubString{String}, i::Int64)\n     @ Base ./strings/substring.jl:83\n\
    \   [3] parse_music(music_string::String)\n     @ Main /tmp/tmpaxi_3m79.jl:25\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaxi_3m79.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpaxi_3m79.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpaxi_3m79.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 1-codeunit SubString{String} at index [2]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\n     @ Base ./strings/substring.jl:83\n   [3] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpaxi_3m79.jl:25\n   [4] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    vector =\
    \ zeros(length(music_string), Int64)\n    i = 1\n    for x in music_string\n \
    \       if x == 'o'\n            vector[i] = 4\n        elseif x == 'o' && i +\
    \ 1 == '|'\n            vector[i] = 2\n        elseif x == '.' && i + 1 == '|'\n\
    \            vector[i] = 1\n        end\n        i += 1\n    end\n    return vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppxfaqq08.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmppxfaqq08.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching zeros(::Int64, ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmppxfaqq08.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppxfaqq08.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppxfaqq08.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppxfaqq08.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching zeros(::Int64,\
    \ ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmppxfaqq08.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppxfaqq08.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppxfaqq08.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppxfaqq08.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching\
    \ zeros(::Int64, ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmppxfaqq08.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n   return [if\
    \ c == 'o' \n        4\n    elseif c == 'o|'\n        2\n    elseif c == '.|'\n\
    \        1\n    else\n        0\n    end\n            for c in split(music_string)\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpb_ef97pl.jl:16\nin expression\
    \ starting at /tmp/tmpb_ef97pl.jl:16\n"
  stdout: ''
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_vector\
    \ = split(music_string, \" \")\n    length_vector = []\n    for note in notes_vector\n\
    \        if note == \"o\"\n            push!(length_vector, 4)\n        elseif\
    \ note == \"o|\"\n            push!(length_vector, 2)\n        elseif note ==\
    \ \".|\"\n            push!(length_vector, 1)\n        end\n    end\n    return\
    \ length_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008800
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat_array\
    \ = []\n    beat_value = 0\n    music_string = replace(music_string, \" \" =>\
    \ \"\")\n    for beat in music_string\n        if beat == 'o'\n            beat_value\
    \ = 4\n        elseif beat == '.'\n            beat_value = 1\n        elseif\
    \ beat == '|'\n            push!(beat_array, beat_value)\n        end\n    end\n\
    \    return beat_array\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4xt_3bza.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp4xt_3bza.jl:34\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xt_3bza.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xt_3bza.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4xt_3bza.jl:36\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1] == [2, 2, 1,\
    \ 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xt_3bza.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xt_3bza.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4xt_3bza.jl:37\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 4, 1, 4, 4] == [2,\
    \ 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xt_3bza.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xt_3bza.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    parsed_string\
    \ = string(music_string)\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4fjg_qk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4fjg_qk.jl:1\n\
    in expression starting at /tmp/tmpm4fjg_qk.jl:1\n"
  stdout: ''
  timestamp: 1660008801
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for nota in music_string\n        if nota == 'o'\n            push!(beats,\
    \ 4)\n        elseif nota == '.'\n            push!(beats, 1)\n        elseif\
    \ nota == '|'\n            beats[end] = 2\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2yxt7hck.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2yxt7hck.jl:33\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [2, 2, 2, 2] == [1, 1, 1, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yxt7hck.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yxt7hck.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2yxt7hck.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [2, 2, 2, 2, 4, 4, 4, 4] ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yxt7hck.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yxt7hck.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2yxt7hck.jl:35\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [2, 2, 2, 2, 4, 2, 4, 2]\
    \ == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2yxt7hck.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2yxt7hck.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    num = []\n\
    \    for i = 1:length(music_string)\n        if music_string[i] == 'o'\n     \
    \       num = push!(num, 4)\n        elseif music_string[i] == '|'\n         \
    \   num = push!(num, 2)\n        elseif music_string[i] == '.'\n            num\
    \ = push!(num, 1)\n        end\n    end\n    return num\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph_nq6tuv.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmph_nq6tuv.jl:33\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 2, 1, 2, 1, 2] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_nq6tuv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_nq6tuv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmph_nq6tuv.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 1, 2, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph_nq6tuv.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph_nq6tuv.jl:30\ntest set: Test Failed at /tmp/tmph_nq6tuv.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph_nq6tuv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph_nq6tuv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \"\"\"\n\
    \    Your code here\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0jqnj6tz.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp0jqnj6tz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp0jqnj6tz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0jqnj6tz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0jqnj6tz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0jqnj6tz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp0jqnj6tz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0jqnj6tz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    x = []\n\
    \    for (i, char) in enumerate(music_string)\n        if char == 'o'\n      \
    \      if i + 2 <= length(music_string)\n                if music_string[i+1]\
    \ == ' ' && music_string[i+2] == 'o'\n                    push!(x, 4)\n      \
    \          elseif music_string[i+1] == '|'\n                    push!(x, 2)\n\
    \                else\n                    push!(x, 4)\n                end\n\
    \            else\n                push!(x, 4)\n            end\n        elseif\
    \ char == '.'\n            push!(x, 1)\n        end\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptvk19005.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmptvk19005.jl:43\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [2, 1, 2,\
    \ 1, 4, 2, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptvk19005.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptvk19005.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008803
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # split\
    \ the string into notes\n    notes = split(music_string)\n    # create a vector\
    \ of zeros\n    beats = zeros(Int64, length(notes))\n    # iterate over notes\
    \ and change beats vector\n    # every time you see an o, add 4 to the corresponding\
    \ index\n    # every time you see o|, add 2\n    # every time you see .|, add\
    \ 1\n    for (i,note) in enumerate(notes)\n        beats[i] = 4 * (note == \"\
    o\") + 2 * (note == \"o|\") + 1 * (note == \".|\")\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, ' ')\n        if note == \"o\"\n   \
    \         push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008801
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_vector\
    \ = Vector{Int64}()\n    for music_note in string.(split(music_string))\n    \
    \    if music_note == \"o\"\n            push!(music_vector, 4)\n        elseif\
    \ music_note == \"o|\"\n            push!(music_vector, 2)\n        elseif music_note\
    \ == \".|\"\n            push!(music_vector, 1)\n        end\n    end\n    return\
    \ music_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    pass\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpraglpkjv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpraglpkjv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpraglpkjv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpraglpkjv.jl:14\n   [2] macro ex"
  timestamp: 1660008795
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    out = []\n\
    \    music_arr = split(music_string, \" \")\n    for i in music_arr\n        if\
    \ i == \"o\"\n            push!(out, 4)\n        elseif i == \"o|\"\n        \
    \    push!(out, 2)\n        elseif i == \".|\"\n            push!(out, 1)\n  \
    \      end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(notes, 4)\n        elseif note == \"o|\"\n            push!(notes,\
    \ 2)\n        elseif note == \".|\"\n            push!(notes, 1)\n        end\n\
    \    end\n    return notes\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp77q54giz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp77q54giz.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77q54giz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp77q54giz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz"
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    res = []\n    for note in notes\n        if note ==\
    \ \"o\"\n            push!(res, 4)\n        elseif note == \"o|\"\n          \
    \  push!(res, 2)\n        elseif note == \".|\"\n            push!(res, 1)\n \
    \       end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return [l\
    \ for l in music_string] \nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphv29v_lu.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmphv29v_lu.jl:22\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [111, 32, 111, 32, 111, 32, 111] ==\
    \ [4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphv29v_lu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphv29v_lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv29v_lu.jl:23\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [46, 124, 32, 46, 124, 32, 46, 124, 32, 46, 124]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphv29v_lu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphv29v_lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv29v_lu.jl:24\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [111, 124, 32, 111, 124, 32,\
    \ 46, 124, 32, 46, 124, 32, 111, 32, 111, 32, 111, 32, 111] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphv29v_lu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphv29v_lu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv29v_lu.jl:25\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [111, 124, 32, 46, 124, 32,\
    \ 111, 124, 32, 46  \u2026  32, 111, 32, 111, 124, 32, 111, 32, 111, 124] == [2,\
    \ 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphv29v_lu.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/"
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(replace(music_string, ' ' => \"\"))\n    music_array = zeros(Int64,\
    \ length(music_string))\n    for i = 1:length(music_string)\n        if music_string[i]\
    \ == \"o\"\n            music_array[i] = 4\n        elseif music_string[i] ==\
    \ \"o|\"\n            music_array[i] = 2\n        else\n            music_array[i]\
    \ = 1\n        end\n    end\n    return music_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwhwpdr3f.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpwhwpdr3f.jl:33\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [1] == [4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhwpdr3f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhwpdr3f.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwhwpdr3f.jl:34\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1] == [1, 1, 1, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwhwpdr3f.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwhwpdr3f.jl:31\ntest set: Test Failed at /tmp/tmpwhwpdr3f.jl:35\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [1] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwhwpdr3f.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwhwpdr3f.jl:31\ntest set: Test Failed at /tmp/tmpwhwpdr3f.jl:36\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [1] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwhwpdr3f.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwhwpdr3f.jl:31\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ collect(music_string)\n    duration = Array{Int64}(length(notes))\n    for i\
    \ in 1:length(notes)\n        if notes[i] == 'o'\n            duration[i] = 4\n\
    \        elseif notes[i] == '.'\n            duration[i] = 1\n        elseif notes[i]\
    \ == '|'\n            duration[i] = 2\n        end\n    end\n    return duration\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpsyp_0ob6.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpsyp_0ob6.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpsyp_0ob6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsyp_0ob6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsyp_0ob6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsyp_0ob6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpsyp_0ob6.jl:15\n   [2] ma"
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    notes_dict\
    \ = Dict('o' => 4, 'o|' => 2, '.|' => 1)\n    notes_vec = []\n    \n    for i\
    \ = 1:length(music_string)\n        \n        if music_string[i] == 'o' || music_string[i]\
    \ == 'o|' || music_string[i] == '.|'\n            \n            if i == length(music_string)\n\
    \                push!(notes_vec, notes_dict[music_string[i]])\n            elseif\
    \ music_string[i] == 'o' && music_string[i+1] == ' '\n                push!(notes_vec,\
    \ notes_dict[music_string[i]])\n            elseif music_string[i] == 'o|' &&\
    \ music_string[i+1] == ' '\n                push!(notes_vec, notes_dict[music_string[i]])\n\
    \            elseif music_string[i] == '.|' && music_string[i+1] == ' '\n    \
    \            push!(notes_vec, notes_dict[music_string[i]])\n            elseif\
    \ music_string[i] == 'o' && music_string[i+1] == '|'\n                push!(notes_vec,\
    \ notes_dict[music_string[i:i+1]])\n            elseif music_string[i] == 'o'\
    \ && music_string[i+1] == ' ' && music_string[i+2] == 'o'\n                push!(notes_vec,\
    \ notes_dict[music_string[i]])\n            elseif music_string[i] == 'o' && music_string[i+1]\
    \ == ' ' && music_string[i+2] == 'o|'\n                push!(notes_vec, notes_dict[music_string[i]])\n\
    \            elseif music_string[i] == 'o' && music_string[i+1] == ' ' && music_string[i+2]\
    \ == '.|'\n                push!(notes_vec, notes_dict[music_string[i]])\n   \
    \         elseif music_string[i] == 'o|' && music_string[i+\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b1spmol.jl:15\nin expression\
    \ starting at /tmp/tmp8b1spmol.jl:15\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    res = Int64[]\n\
    \    for word in split(music_string)\n        if word == \"o\"\n            push!(res,\
    \ 4)\n        elseif word == \"o|\"\n            push!(res, 2)\n        elseif\
    \ word == \".|\"\n            push!(res, 1)\n        end\n    end\n    return\
    \ res\nend\n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beat_lengths\
    \ = []\n    for beat in split(music_string)\n        if beat == \"o\"\n      \
    \      push!(beat_lengths, 4)\n        elseif beat == \"o|\"\n            push!(beat_lengths,\
    \ 2)\n        elseif beat == \".|\"\n            push!(beat_lengths, 1)\n    \
    \    end\n    end\n    return beat_lengths\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008802
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Write\
    \ your code here. You may delete this line and all other lines that start with\
    \ #.\n    \n    # Input: music_string (type: string)\n    # Output: Vector{Int64}\n\
    \    \n    # Pre-defined notes\n    notes = Dict(\"o\" => 4, \"o|\" => 2, \".|\"\
    \ => 1)\n    \n    # Split string into list of notes and then convert to vector\n\
    \    list_notes = split(music_string, ' ')\n    vec_notes = convert(Vector{String},\
    \ list_notes)\n    \n    # Initialize vector for beats and then loop through notes\n\
    \    beats = Int64[]\n    for note in vec_notes\n        push!(beats, notes[note])\n\
    \    end\n    \n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp9eebppy8.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp9eebppy8.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  KeyError: key \"\" not\
    \ found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmp9eebppy8.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9eebppy8.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9eebppy8.jl:38\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    out = []\n\
    \    music_string = replace(music_string, 'o o o o', 'o| o| o| o|')\n    music_string\
    \ = replace(music_string, 'o o o ', 'o| o| o| ')\n    music_string = replace(music_string,\
    \ 'o o ', 'o| o| ')\n    music_string = replace(music_string, 'o o| o|', 'o| o|\
    \ o| o|')\n    music_string = replace(music_string, 'o o| o ', 'o| o| o| ')\n\
    \    music_string = replace(music_string, 'o o| .| .| .| .|', 'o| o| .| .| .|\
    \ .| .| .|')\n    music_string = replace(music_string, 'o o| .| .| .|', 'o| o|\
    \ .| .| .| .| .|')\n    music_string = replace(music_string, 'o o| .| .|', 'o|\
    \ o| .| .| .| .|')\n    music_string = replace(music_string, 'o o| .|', 'o| o|\
    \ .| .| .|')\n    music_string = replace(music_string, 'o o| o| o| o| o| o| o|\
    \ o|', 'o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|')\n    music_string =\
    \ replace(music_string, 'o o| o| o| o| o| o| o|', 'o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o|')\n    music_string = replace(music_string, 'o o| o| o| o|\
    \ o| o|', 'o| o| o| o| o| o| o| o| o| o| o| o| o| o|')\n    music_string = replace(music_string,\
    \ 'o o| o| o| o| o|', 'o| o| o| o| o| o| o| o| o\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzbggtgzq.jl:15\nin expression\
    \ starting at /tmp/tmpzbggtgzq.jl:15\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Write\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpl85fzcvf.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpl85fzcvf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpl85fzcvf.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl85fzcvf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl85fzcvf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl85fzcvf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpl85fzcvf.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl85fzcvf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parse_music_array\
    \ = []\n    for i in music_string\n        if i == 'o'\n            push!(parse_music_array,\
    \ 4)\n        elseif i == 'o|'\n            push!(parse_music_array, 2)\n    \
    \    elseif i == '.|'\n            push!(parse_music_array, 1)\n        end\n\
    \    end\n    return parse_music_array\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmph6u9tz5o.jl:18\nin expression\
    \ starting at /tmp/tmph6u9tz5o.jl:18\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n  \n  notes\
    \ = []\n  for note in music_string\n    if note == 'o'\n      push!(notes, 4)\n\
    \    elseif note == 'o'\n      push!(notes, 2)\n    else\n      push!(notes, 1)\n\
    \    end\n  end\n  return notes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpza32c6m9.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpza32c6m9.jl:33\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 1, 4, 1, 4, 1, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpza32c6m9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpza32c6m9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpza32c6m9.jl:34\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpza32c6m9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpza32c6m9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpza32c6m9.jl:35\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 1, 1, 4, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 4, 1, 4, 1, 4, 1, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpza32c6m9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpza32c6m9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpza32c6m9.jl:36\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 1, 1, 1, 1, 4, 1,\
    \ 1, 1  \u2026  1, 4, 1, 4, 1, 1, 4, 1, 4, 1] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpza32c6m9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-"
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # TODO\n\
    \    return Vector{Int64}()\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuoc8a9e6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpuoc8a9e6.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoc8a9e6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoc8a9e6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuoc8a9e6.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoc8a9e6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoc8a9e6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuoc8a9e6.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoc8a9e6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoc8a9e6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuoc8a9e6.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuoc8a9e6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuoc8a9e6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = [4, 2, 1]\n    beats_per_note = []\n\
    \    for i in 1:length(notes)\n        note = notes[i]\n        push!(beats_per_note,\
    \ beats[search(note, \"|\")])\n    end\n    return beats_per_note\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplh36hx8z.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmplh36hx8z.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmplh36hx8z.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplh36hx8z.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplh36hx8z.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplh36hx8z.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmplh36hx8z.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplh36hx8z.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplh36hx8z.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplh36hx8z.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmplh36hx8z.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplh36hx8z.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplh36hx8z.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplh36hx8z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmplh36hx8z.jl:19\n   [2] "
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for n in music_string\n        if n == 'o'\n            push!(beats,\
    \ 4)\n        elseif n == 'o|'\n            push!(beats, 2)\n        elseif n\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wror9vb.jl:18\nin expression\
    \ starting at /tmp/tmp9wror9vb.jl:18\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    return music_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2pol1n06.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp2pol1n06.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp2pol1n06.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2pol1n06.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2pol1n06.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2pol1n06.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp2pol1n06.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2pol1n06.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    count_note_duration\
    \ = []\n    i = 1\n    while i <= length(music_string)\n        if music_string[i]\
    \ == 'o'\n            count_note_duration = push!(count_note_duration, 4)\n  \
    \          i += 1\n        elseif music_string[i] == '.'\n            count_note_duration\
    \ = push!(count_note_duration, 1)\n            i += 2\n        else\n        \
    \    count_note_duration = push!(count_note_duration, 2)\n            i += 2\n\
    \        end\n    end\n    return count_note_duration\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph5k54c4h.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmph5k54c4h.jl:36\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 2, 2] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5k54c4h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5k54c4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmph5k54c4h.jl:37\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 2, 2, 1, 2, 2] == [1, 1, 1, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5k54c4h.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5k54c4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmph5k54c4h.jl:38\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 2, 4, 2,\
    \ 2, 2] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5k54c4h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5k54c4h.jl:34\ntest set: Test\
    \ Failed at /tmp/tmph5k54c4h.jl:39\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 2, 2,\
    \ 2, 4, 2, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph5k54c4h.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmph5k54c4h.jl:34\nTest Summary: | Pass  Fail\
    \  Total\nt"
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp77q54giz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp77q54giz.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77q54giz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp77q54giz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp77q54giz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77q54giz"
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    pass\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpraglpkjv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpraglpkjv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpraglpkjv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpraglpkjv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpraglpkjv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpraglpkjv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpraglpkjv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpraglpkjv.jl:14\n   [2] macro ex"
  timestamp: 1660008795
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    output =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(output,\
    \ 4)\n        elseif i == 'o|'\n            push!(output, 2)\n        elseif i\
    \ == '.|'\n            push!(output, 1)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpgftz5sab.jl:18\nin expression\
    \ starting at /tmp/tmpgftz5sab.jl:18\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # note_strings\
    \ = split(music_string, \" \")\n    # note_beats = Vector{Int64}(undef, length(note_strings))\n\
    \    note_strings = split(music_string, \" \")\n    # note_beats = Vector{Int64}(undef,\
    \ length(note_strings))\n    note_beats = [0]\n    for i in 1:length(note_strings)\n\
    \        note_string = note_strings[i]\n        if note_string == \"o\"\n    \
    \        push!(note_beats, 4)\n        elseif note_string == \"o|\"\n        \
    \    push!(note_beats, 2)\n        elseif note_string == \".|\"\n            push!(note_beats,\
    \ 1)\n        end\n    end\n    return note_beats\nend\n# for i in 1:length(note_strings)\n\
    #     note_string = note_strings[i]\n#     if note_string == \"o\"\n#        \
    \ note_beats[i] = 4\n#     elseif note_string == \"o|\"\n#         note_beats[i]\
    \ = 2\n#     elseif note_string == \".|\"\n#         note_beats[i] = 1\n#    \
    \ end\n# end\n# return note_beats\n# end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp173jn2f2.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmp173jn2f2.jl:48\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp173jn2f2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp173jn2f2.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp173jn2f2.jl:49\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 4, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp173jn2f2.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp173jn2f2.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp173jn2f2.jl:50\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [0, 1, 1, 1, 1] == [1, 1, 1, 1]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp173jn2f2.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp173jn2f2.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp173jn2f2.jl:51\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [0, 2, 2, 1, 1, 4, 4, 4, 4]\
    \ == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp173jn2f2.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp173jn2f2.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp173jn2f2.jl:52\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, "
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music =\
    \ split(music_string, ' ')\n    return [symbol_to_beats(sym) for sym in music]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkq2jr6x3.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpkq2jr6x3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: symbol_to_beats\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(sym::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:724\n   [4] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpkq2jr6x3.jl:15\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpkq2jr6x3.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpkq2jr6x3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkq2jr6x3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: symbol_to_beats not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(sym::SubString{String})\n   \
    \  @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n     @\
    \ Base ./array.jl:724\n   [4] parse_music(music_string::String)\n     @ Main /tmp/tmpkq2jr6x3.jl:15\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpkq2jr6x3.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpkq2jr6x3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkq2jr6x3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: symbol_to_beats\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(sym::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:724\n   [4] parse_mus"
  timestamp: 1660008806
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Vector{Int64}()\n    for note in split(music_string)\n        if note == \"\
    o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    s = split(music_string)\n\
    \    n = length(s)\n    beats = zeros(Int64, n)\n    for i in 1:n\n        if\
    \ s[i] == \"o\"\n            beats[i] = 4\n        elseif s[i] == \"o|\"\n   \
    \         beats[i] = 2\n        elseif s[i] == \".|\"\n            beats[i] =\
    \ 1\n        end\n    end\n    return beats\nend\n    \nmusic_string = \"o o|\
    \ .| o| o| .| .| .| .| o o\"\nbeats = parse_music(music_string)\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # the idea is to create an array of beats\n    # that corresponds\
    \ to the number of beats from each note\n    # and then convert the array to a\
    \ vector\n    beats = [0]\n    for i = 1:length(music_string)\n        if music_string[i]\
    \ == 'o'\n            beats[end] = 4\n        elseif music_string[i] == '.'\n\
    \            beats[end] = 1\n        elseif music_string[i] == '|'\n         \
    \   push!(beats, 0)\n        end\n    end\n    deleteat!(beats, end)\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbmue9_9i.jl:28\nin expression starting at /tmp/tmpbmue9_9i.jl:28\n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n  notes = Array{Int64}(undef,\
    \ 0)\n  for note in music_string\n      if note == 'o'\n          append!(notes,\
    \ 4)\n      elseif note == 'o'\n          append!(notes, 2)\n      elseif note\
    \ == '.'\n          append!(notes, 1)\n      end\n  end\n  return notes\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm_l_1i0u.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpm_l_1i0u.jl:34\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm_l_1i0u.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm_l_1i0u.jl:30\ntest set: Test Failed at /tmp/tmpm_l_1i0u.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_l_1i0u.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_l_1i0u.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_array\
    \ = collect(music_string)\n    music_array = filter(x -> x != ' ', music_array)\n\
    \    #println(music_array)\n    notes = []\n    for i in 1:length(music_array)\n\
    \        if music_array[i] == 'o'\n            push!(notes, 4)\n        elseif\
    \ music_array[i] == '.'\n            push!(notes, 1)\n        else\n         \
    \   push!(notes, 2)\n        end\n    end\n    return notes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2dfo69qk.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp2dfo69qk.jl:36\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 2, 1, 2, 1, 2] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dfo69qk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dfo69qk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp2dfo69qk.jl:37\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 1, 2, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2dfo69qk.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2dfo69qk.jl:33\ntest set: Test Failed at /tmp/tmp2dfo69qk.jl:38\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dfo69qk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dfo69qk.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008806
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    music_beats = Int64[]\n    for note in notes\n\
    \        if length(note) == 1\n            push!(music_beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(music_beats, 2)\n        elseif note == \"\
    .|\"\n            push!(music_beats, 1)\n        end\n    end\n    return music_beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_array\
    \ = split(music_string, \" \")\n    beat_vector = Int64[]\n    for i in music_array\n\
    \        if i == \"o\"\n            push!(beat_vector, 4)\n        elseif i ==\
    \ \"o|\"\n            push!(beat_vector, 2)\n        elseif i == \".|\"\n    \
    \        push!(beat_vector, 1)\n        end\n    end\n    return beat_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008804
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    i=1\n  \
    \  length=length(music_string)\n    index=1\n    answer=Int64[]\n    while i<=length\n\
    \        if music_string[i]=='o'\n            if i==length\n                push!(answer,4)\n\
    \            elseif music_string[i+1]=='|'\n                push!(answer,2)\n\
    \                i+=1\n            else\n                push!(answer,4)\n   \
    \         end\n        elseif music_string[i]=='.'\n            push!(answer,1)\n\
    \            i+=1\n        end\n        i+=1\n    end\n    return answer\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplgz_g3be.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmplgz_g3be.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmplgz_g3be.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgz_g3be.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgz_g3be.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplgz_g3be.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmplgz_g3be.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgz_g3be.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgz_g3be.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplgz_g3be.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmplgz_g3be.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgz_g3be.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgz_g3be.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplgz_g3be.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmplgz_g3be.jl:15\n   [2] "
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    list_time\
    \ = []\n    for i in 1:length(music_string)\n        if music_string[i] == 'o'\
    \ && music_string[i + 1] == ' '\n            push!(list_time, 4)\n        elseif\
    \ music_string[i] == 'o' && music_string[i + 1] == '|'\n            push!(list_time,\
    \ 2)\n        elseif music_string[i] == '.' && music_string[i + 1] == '|'\n  \
    \          push!(list_time, 1)\n        end\n    end\n    return list_time\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpjlurtn59.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpjlurtn59.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  BoundsError: attempt\
    \ to access 7-codeunit String at index [8]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmpjlurtn59.jl:16\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjlurtn59.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjlurtn59.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjlurtn59.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 19-codeunit String at index [20]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmpjlurtn59.jl:16\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjlurtn59.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjlurtn59.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(result,\
    \ 4)\n        elseif i == '|'\n            pop!(result)\n            push!(result,\
    \ result[end]/2)\n        elseif i == '.'\n            pop!(result)\n        \
    \    push!(result, result[end]/2)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyjqh7tsr.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpyjqh7tsr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  ArgumentError: array\
    \ must be non-empty\n  Stacktrace:\n   [1] pop!\n     @ ./array.jl:1251 [inlined]\n\
    \   [2] parse_music(music_string::String)\n     @ Main /tmp/tmpyjqh7tsr.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjqh7tsr.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyjqh7tsr.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyjqh7tsr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpyjqh7tsr.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjqh7tsr.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyjqh7tsr.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpyjqh7tsr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpyjqh7tsr.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyjqh7tsr.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyjqh7tsr.jl:32\nTest Summary:\
    \ | Pass  E"
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\n@testset \"Test 1\" begin\n    @test parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\n \n@testset \"\
    Test 2\" begin\n    @test parse_music(\"o o o o o o o o o o o o\") == [4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp10u7jf8f.jl:16

    in expression starting at /tmp/tmp10u7jf8f.jl:16

    '
  stdout: ''
  timestamp: 1660008805
- exit_code: -1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    v = zeros(Int64,\
    \ length(music_string))\n    i = 1\n    while i <= length(music_string)\n    \
    \    if music_string[i] == 'o'\n            v[i] = 4\n            i += 1\n   \
    \     elseif music_string[i] == '.'\n            v[i] = 1\n            i += 2\n\
    \        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    output\
    \ = []\n    words = split(music_string, \" \")\n    for word in words\n      \
    \  if word == \"o\"\n            push!(output, 4)\n        elseif word == \"o|\"\
    \n            push!(output, 2)\n        elseif word == \".|\"\n            push!(output,\
    \ 1)\n        end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008805
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = split(music_string, \" \")\n    beat_list = []\n    for string in music_list\n\
    \        if string == \"o\"\n            push!(beat_list, 4)\n        elseif string\
    \ == \"o|\"\n            push!(beat_list, 2)\n        elseif string == \".|\"\n\
    \            push!(beat_list, 1)\n        end\n    end\n    return beat_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in 1:length(music_string)\n        if music_string[i] == 'o'\n\
    \            if music_string[i + 1] == '|'\n                push!(beats, 2)\n\
    \            elseif music_string[i + 1] == ' '\n                push!(beats, 4)\n\
    \            end\n        elseif music_string[i] == '.'\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptf5ql_mg.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmptf5ql_mg.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  BoundsError: attempt\
    \ to access 7-codeunit String at index [8]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmptf5ql_mg.jl:17\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptf5ql_mg.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptf5ql_mg.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptf5ql_mg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  BoundsError:\
    \ attempt to access 19-codeunit String at index [20]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmptf5ql_mg.jl:17\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptf5ql_mg.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptf5ql_mg.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ [4, 2, 1]\n    return [beats[findfirst(v -> v == t, beats)] for t in music_string]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgusggoq0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgusggoq0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n  ArgumentError: invalid\
    \ index: nothing of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Nothing)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] (::var\"#1#3\"{Vector{Int64}})(t::Char)\n\
    \      @ Main ./none:0\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [8] collect(itr::Base.Generator{String, var\"#1#3\"{Vector{Int64}}})\n  \
    \    @ Base ./array.jl:724\n    [9] parse_music(music_string::String)\n      @\
    \ Main /tmp/tmpgusggoq0.jl:15\n   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpgusggoq0.jl:23 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpgusggoq0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgusggoq0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  ArgumentError: invalid index:\
    \ nothing of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n     \
    \ @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Nothing)\n  \
    \    @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] (::var\"#1#3\"{Vector{Int64}})(t::Char)\n\
    \      @ Main ./none:0\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [8] collect(itr::Base.Generator{String, var\"#1#3\"{Vector{Int64}}})\n  \
    \    @ Base ./array.jl:724\n    [9] parse_music(music_string::String)\n      @\
    \ Main /tmp/tmpgusggoq0.jl:15\n   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n \nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpucnlls7n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpucnlls7n.jl:1\n\
    in expression starting at /tmp/tmpucnlls7n.jl:1\n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ [\"o\", \"o|\", \".|\"]\n    # for n in notes\n    #     if n in music_string\n\
    \    #         println(n)\n    #     end\n    # end\n    beat_dict = Dict(\"o\"\
    \ => 4, \"o|\" => 2, \".|\" => 1)\n    music_vect = split(music_string, \" \"\
    )\n    music_num = []\n    for m in music_vect\n        push!(music_num, beat_dict[m])\n\
    \    end\n    return music_num\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpd2vsqo63.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpd2vsqo63.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  KeyError: key \"\" not\
    \ found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmpd2vsqo63.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd2vsqo63.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd2vsqo63.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats_per_note\
    \ = Dict('o' => 4, 'o|' => 2, '.|' => 1)\n    for note in music_string\n     \
    \   try\n            get(beats_per_note, note, \"Unknown note: \" * note)\n  \
    \      catch e\n            # TODO(omarchh): provide something better than catch-all\
    \ catch\n            return \"Error: \" * e\n        end\n    end\n    return\
    \ map(note -> get(beats_per_note, note), music_string)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppmmz5mnv.jl:14\nin expression\
    \ starting at /tmp/tmppmmz5mnv.jl:14\n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(notes,\
    \ 4)\n        elseif note == '.'\n            push!(notes, 1)\n        elseif\
    \ note == '|'\n            notes[end] = notes[end] / 2\n        end\n    end\n\
    \    return notes\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjhgmk1vk.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpjhgmk1vk.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  InexactError: Int64(0.5)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n\
    \      @ ./number.jl:7 [inlined]\n    [3] setindex!(A::Vector{Int64}, x::Float64,\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [4] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [5] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [8] copyto!\n      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n   [10] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n   [11] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [12] parse_music(music_string::String)\n      @ Main /tmp/tmpjhgmk1vk.jl:24\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpjhgmk1vk.jl:33 [inlined]\n\
    \   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpjhgmk1vk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpjhgmk1vk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  InexactError:\
    \ Int64(0.5)\n  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n\
    \    [2] convert\n      @ ./number.jl:7 [inlined]\n    [3] setindex!(A::Vector{Int64},\
    \ x::Float64, i1::Int64)\n      @ Base ./array.jl:903\n    [4] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [5] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [6] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [7] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [8] copyto!\n      @ ./array.jl:343 [inlined]\n    [9] copyto_axcheck!\n\
    \      @ ./abstract"
  timestamp: 1660008808
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    notes = split(music_string)\n    for note in notes\n        if note\
    \ == \"o\"\n            push!(result, 4)\n        elseif note == \"o|\"\n    \
    \        push!(result, 2)\n        elseif note == \".|\"\n            push!(result,\
    \ 1)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008806
- exit_code: -1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    cur_beat = []\n    for i in music_string\n        if i == 'o'\n    \
    \        push!(cur_beat, 4)\n        elseif i == '|'\n            if cur_beat\
    \ == []\n                push!(cur_beat, 1)\n            elseif cur_beat[end]\
    \ == 4\n                push!(cur_beat, 2)\n            else\n               \
    \ push!(cur_beat, 1)\n            end\n        elseif i == '.'\n            push!(cur_beat,\
    \ 1)\n        elseif i == ' '\n            push!(result, sum(cur_beat))\n    \
    \        cur_beat = []\n        end\n    end\n    push!(result, sum(cur_beat))\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmpkla9qxgw.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching zero(::Type{Any})\n  Closest candidates are:\n    zero(::Type{Union{Missing,\
    \ T}}) where T at ~/.conda/envs/polyglot/share/julia/base/missing.jl:105\n   \
    \ zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\n\
    \    ...\n  Stacktrace:\n    [1] zero(#unused#::Type{Any})\n      @ Base ./missing.jl:106\n\
    \    [2] reduce_empty(#unused#::typeof(+), #unused#::Type{Any})\n      @ Base\
    \ ./reduce.jl:313\n    [3] reduce_empty(#unused#::typeof(Base.add_sum), #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:322\n    [4] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [5] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(Base.add_sum)}, #unused#::Type{Any})\n      @ Base ./reduce.jl:331\n\
    \    [6] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [7] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Any}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [8] _mapreduce(f::typeof(identity), op::typeof(Base.add_sum), #unused#::IndexLinear,\
    \ A::Vector{Any})\n      @ Base ./reduce.jl:402\n    [9] _mapreduce_dim\n    \
    \  @ ./reducedim.jl:330 [inlined]\n   [10] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [11] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [12]\
    \ #_sum#741\n      @ ./reducedim.jl:894 [inlined]\n   [13] _sum\n      @ ./reducedim.jl:894\
    \ [inlined]\n   [14] #_sum#740\n      @ ./reducedim.jl:893 [inlined]\n   [15]\
    \ _sum\n      @ ./reducedim.jl:893 [inlined]\n   [16] #sum#738\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] sum\n      @ ./reducedim.jl:889 [inlined]\n   [18] parse_music(music_string::String)\n\
    \      @ Main /tmp/tmpkla9qxgw.jl:34\n   [19] macro expansion\n      @ ~/.conda/envs/polygl"
  timestamp: 1660008810
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    str_split\
    \ = split(music_string)\n    beat_vec = []\n    for i in str_split\n        if\
    \ i == \"o\"\n            push!(beat_vec, 4)\n        elseif i == \"o|\"\n   \
    \         push!(beat_vec, 2)\n        elseif i == \".|\"\n            push!(beat_vec,\
    \ 1)\n        end\n    end\n    return beat_vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return map(c\
    \ -> {\n        if c == 'o' return 4\n        elseif c == 'o|' return 2\n    \
    \    elseif c == '|' return 1\n        else throw(DomainError())\n    }, music_string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpndm19ryr.jl:16\nin expression\
    \ starting at /tmp/tmpndm19ryr.jl:16\n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    output =\
    \ []\n    for (i,c) in enumerate(music_string)\n        if c == 'o'\n        \
    \    push!(output, 4)\n        elseif c == 'o' && music_string[i+1] == '|'\n \
    \           push!(output, 2)\n        elseif c == '.' && music_string[i+1] ==\
    \ '|'\n            push!(output, 1)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps2usy1s8.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmps2usy1s8.jl:34\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps2usy1s8.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmps2usy1s8.jl:30\ntest set: Test Failed at /tmp/tmps2usy1s8.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2usy1s8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2usy1s8.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nparse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\")\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe_tx82d6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe_tx82d6.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_tx82d6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_tx82d6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_tx82d6.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_tx82d6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_tx82d6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_tx82d6.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_tx82d6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_tx82d6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_tx82d6.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_tx82d6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_tx82d6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_tx82d6.jl:26"
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0ghfoklc.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp0ghfoklc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp0ghfoklc.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ghfoklc.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ghfoklc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0ghfoklc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp0ghfoklc.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ghfoklc.jl:22 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats_array\
    \ = zeros(Int64, length(music_string))\n    for i = 1:length(music_string)\n \
    \       if music_string[i] == 'o'\n            beats_array[i] = 4\n        elseif\
    \ music_string[i] == '.'\n            beats_array[i] = 1\n        elseif music_string[i]\
    \ == '|'\n            beats_array[i] = 2\n        end\n    end\n    beats_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp82hup_bv.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp82hup_bv.jl:32\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 0, 4, 0, 4, 0, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82hup_bv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82hup_bv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp82hup_bv.jl:33\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82hup_bv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82hup_bv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp82hup_bv.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 0, 4, 2, 0, 1, 2, 0,\
    \ 1, 2, 0, 4, 0, 4, 0, 4, 0, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82hup_bv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82hup_bv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp82hup_bv.jl:35\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 0, 1, 2, 0, 4, 2,\
    \ 0, 1  \u2026  0, 4, 0, 4, 2, 0, 4, 0, 4, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82hup_bv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-"
  timestamp: 1660008809
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parse_music\
    \ = []\n    music_string=split(music_string)\n    for i in 1:length(music_string)\n\
    \        if music_string[i] == \"o\"\n            push!(parse_music,4)\n     \
    \   elseif music_string[i] == \"o|\"\n            push!(parse_music,2)\n     \
    \   elseif music_string[i] == \".|\"\n            push!(parse_music,1)\n     \
    \   end\n    end\n    return parse_music\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Convert\
    \ the string to a vector of characters\n    notes = collect(music_string)\n  \
    \  beats = Vector{Int64}()\n    i = 1\n    while i <= length(notes)\n        if\
    \ notes[i] == 'o'\n            push!(beats, 4)\n            i += 1\n        elseif\
    \ notes[i] == '.'\n            push!(beats, 1)\n            i += 2\n        else\n\
    \            push!(beats, 2)\n            i += 2\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf833x4jt.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpf833x4jt.jl:38\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 2, 2] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833x4jt.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833x4jt.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpf833x4jt.jl:39\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 2, 2, 1, 2, 2] == [1, 1, 1, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833x4jt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833x4jt.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpf833x4jt.jl:40\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 2, 4, 2,\
    \ 2, 2] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf833x4jt.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf833x4jt.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpf833x4jt.jl:41\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 2, 2,\
    \ 2, 4, 2, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf833x4jt.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf833x4jt.jl:36\nTest Summary: | Pass  Fail\
    \  Total\nt"
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    split_string\
    \ = split(music_string, \" \") #split the input string by spaces\n    length_input\
    \ = length(split_string)\n    result = zeros(Int64, length_input)\n    #o = 4\n\
    \    #o| = 2\n    #.| = 1\n    for i in 1:length_input\n        if split_string[i]\
    \ == \"o\"\n            result[i] = 4\n        elseif split_string[i] == \"o|\"\
    \n            result[i] = 2\n        elseif split_string[i] == \".|\"\n      \
    \      result[i] = 1\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp5xdbjb4.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpp5xdbjb4.jl:36\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5xdbjb4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5xdbjb4.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    return map(music_string)\
    \ do s\n        if s == 'o'\n            4\n        elseif s == 'o|'\n       \
    \     2\n        elseif s == '.|'\n            1\n        else\n            0\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk535ac79.jl:17\nin expression\
    \ starting at /tmp/tmpk535ac79.jl:17\n"
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Vector{Int64}()\n    for c in music_string\n        if c == 'o'\n          \
    \  push!(beats, 4)\n        elseif c == '|'\n            push!(beats, 2)\n   \
    \     elseif c == '.'\n            push!(beats, 1)\n        end\n    end\n   \
    \ return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgaljztpl.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpgaljztpl.jl:33\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 2, 1, 2, 1, 2] == [1,\
    \ 1, 1, 1]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaljztpl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaljztpl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpgaljztpl.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 4, 2, 1, 2, 1, 2, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgaljztpl.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgaljztpl.jl:30\ntest set: Test Failed at /tmp/tmpgaljztpl.jl:35\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 4, 2, 1, 2, 4, 4, 2, 4, 4, 2] == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaljztpl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaljztpl.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_notes\
    \ = split(music_string)\n    notes_value = []\n    for note in music_notes\n \
    \       push!(notes_value, length(note))\n    end\n    return notes_value\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1l6a653l.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1l6a653l.jl:27\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [1, 1, 1, 1] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1l6a653l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1l6a653l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1l6a653l.jl:28\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [2, 2, 2, 2] == [1, 1, 1, 1]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1l6a653l.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1l6a653l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1l6a653l.jl:29\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [2, 2, 2, 2, 1, 1, 1, 1] ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1l6a653l.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1l6a653l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1l6a653l.jl:30\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [2, 2, 2, 2, 1, 2, 1, 2]\
    \ == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1l6a653l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1l6a653l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4  "
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Array{Int64}()\n    for note in eachmatch(r\"(o(?!\\|)|o\\||\\.\\|)\", music_string)\n\
    \        if note == \"o\"\n            push!(beats, 4)\n        elseif note ==\
    \ \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n       \
    \     push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmptxgn49cm.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmptxgn49cm.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})()\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmptxgn49cm.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptxgn49cm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptxgn49cm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptxgn49cm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching (Array{Int64})()\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmptxgn49cm.jl:14\n   [2] macro expansion\n"
  timestamp: 1660008811
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_vector\
    \ = collect(music_string)\n    result = Vector{Int64}()\n    count = 0\n    for\
    \ i in 1:length(music_vector)\n        if music_vector[i] == 'o' && (length(music_vector)\
    \ == i || music_vector[i+1] != '|')\n            push!(result, 4)\n        elseif\
    \ music_vector[i] == 'o' && music_vector[i+1] == '|'\n            push!(result,\
    \ 2)\n        elseif music_vector[i] == '.' && music_vector[i+1] == '|'\n    \
    \        push!(result, 1)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # TODO:\
    \ implement this function\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppf5nbl0i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmppf5nbl0i.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf5nbl0i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf5nbl0i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppf5nbl0i.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf5nbl0i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf5nbl0i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppf5nbl0i.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf5nbl0i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf5nbl0i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppf5nbl0i.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf5nbl0i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf5nbl0i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_chars\
    \ = collect(music_string)\n    parsed_music = Vector{Int64}()\n    for (i, c)\
    \ in enumerate(music_chars)\n        if c == 'o'\n            push!(parsed_music,\
    \ 4)\n        elseif c == '.'\n            push!(parsed_music, 1)\n        elseif\
    \ c == '|'\n            parsed_music[end] /= 2\n        end\n    end\n    return\
    \ parsed_music\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyglyqo28.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpyglyqo28.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  InexactError: Int64(0.5)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [4] parse_music(music_string::String)\n     @ Main /tmp/tmpyglyqo28.jl:22\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyglyqo28.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyglyqo28.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyglyqo28.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  InexactError:\
    \ Int64(0.5)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n \
    \  [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [4] parse_music(music_string::String)\n     @ Main /tmp/tmpyglyqo28.jl:22\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyglyqo28.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyglyqo28.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyglyqo28.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  InexactError:\
    \ Int64(0.5)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n \
    \  [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [4] parse_music(music_string::String)\n     @ Main /tmp/tmpyglyqo28.jl:22\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyglyqo28.jl:36 [inlined]\n\
    \  "
  timestamp: 1660008810
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for word in split(music_string, \" \")\n        if word == \"o\"\n \
    \           push!(beats, 4)\n        elseif word == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif word == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008808
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \n    #\
    \ note duration\n    whole_note = 4\n    half_note = 2\n    quater_note = 1\n\
    \    \n    note_duration = [whole_note, half_note, quater_note]\n    \n    # note\
    \ type\n    whole_note_type = 'o'\n    half_note_type = 'o|'\n    quater_note_type\
    \ = '.|'\n    \n    #note_type = [whole_note_type, half_note_type, quater_note_type]\n\
    \    \n    parsed_music = split(music_string)\n    \n    # mapping note_type to\
    \ note_duration \n    note_type_to_note_duration = Dict(whole_note_type => whole_note,\
    \ half_note_type => half_note, quater_note_type => quater_note)\n    \n    # mapping\
    \ elements of parsed_music to note_duration\n    for i in 1:length(parsed_music)\n\
    \        parsed_music[i] = note_type_to_note_duration[parsed_music[i]]\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkx0oxze.jl:24\nin expression\
    \ starting at /tmp/tmpwkx0oxze.jl:24\n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_dict\
    \ = Dict('o' => 4, 'o|' => 2, '.|' => 1)\n    return [notes_dict[x] for x in split(music_string,\
    \ \" \")]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vso6lob.jl:14\nin expression\
    \ starting at /tmp/tmp0vso6lob.jl:14\n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ Array{Int64}(undef, length(music_string))\n    for (i,character) in enumerate(music_string)\n\
    \        if character == 'o'\n            beats[i] = 4\n        elseif character\
    \ == 'o' || character == '|'\n            beats[i] = 2\n        else\n       \
    \     beats[i] = 1\n        end\n    end\n    return beats\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjzxlu048.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpjzxlu048.jl:32\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 1, 4, 1, 4, 1, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzxlu048.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzxlu048.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjzxlu048.jl:33\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzxlu048.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzxlu048.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjzxlu048.jl:34\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 4, 2, 1, 1, 2, 1,\
    \ 1, 2, 1, 4, 1, 4, 1, 4, 1, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzxlu048.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzxlu048.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjzxlu048.jl:35\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 1, 2, 1, 4, 2,\
    \ 1, 1  \u2026  1, 4, 1, 4, 2, 1, 4, 1, 4, 2] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzxlu048.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-"
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = [0]\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    beats\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx4w72_ou.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpx4w72_ou.jl:32\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4w72_ou.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4w72_ou.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx4w72_ou.jl:33\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 4, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4w72_ou.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4w72_ou.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx4w72_ou.jl:34\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [0, 1, 1, 1, 1] == [1, 1, 1, 1]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4w72_ou.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4w72_ou.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx4w72_ou.jl:35\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [0, 2, 2, 1, 1, 4, 4, 4, 4]\
    \ == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx4w72_ou.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx4w72_ou.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx4w72_ou.jl:36\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, "
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n  music_string\
    \ = replace(music_string, \"o|\", \"a\")\n  music_string = replace(music_string,\
    \ \".|\", \"b\")\n  music_string = replace(music_string, \"o\", \"d\")\n  music_string\
    \ = replace(music_string, \"a\", \"2\")\n  music_string = replace(music_string,\
    \ \"b\", \"1\")\n  music_string = replace(music_string, \"d\", \"4\")\n  Vector{Int64}(map(parse,\
    \ split(music_string)))\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpk25z_1jr.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpk25z_1jr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpk25z_1jr.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk25z_1jr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk25z_1jr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk25z_1jr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpk25z_1jr.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk25z_1jr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk25z_1jr.jl:26\ntest set:\
    \ Error During Test at /tm"
  timestamp: 1660008812
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, r\"[ ]+\")\n    beat_lengths = []\n    for note in notes\n\
    \        if note == \"o\"\n            push!(beat_lengths, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beat_lengths, 2)\n        elseif note == \"\
    .|\"\n            push!(beat_lengths, 1)\n        end\n    end\n    return beat_lengths\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    pattern\
    \ = r\"[o|.]+\"\n    matches = matchall(pattern, music_string)\n    return [get_duration(x.match)\
    \ for x in matches]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqjn8qsmf.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqjn8qsmf.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  UndefVarError: matchall\
    \ not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @\
    \ Main /tmp/tmpqjn8qsmf.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjn8qsmf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjn8qsmf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqjn8qsmf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpqjn8qsmf.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjn8qsmf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjn8qsmf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqjn8qsmf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main /tmp/tmpqjn8qsmf.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqjn8qsmf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqjn8qsmf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqjn8qsmf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  UndefVarError:\
    \ matchall not defined\n  Stacktrace:\n   [1] parse_music(music_string::String)\n\
    \     @ Main /tmp/tmpqjn8qsmf.jl:15"
  timestamp: 1660008811
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes_beats\
    \ = Dict(\"o\" => 4, \"o|\" => 2, \".|\" => 1)\n    split_notes = split(music_string,\
    \ ' ')\n    res = Vector{Int64}()\n    for note in split_notes\n        push!(res,\
    \ notes_beats[note])\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpaugs0nho.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpaugs0nho.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  KeyError: key \"\" not\
    \ found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2]\
    \ parse_music(music_string::String)\n     @ Main /tmp/tmpaugs0nho.jl:18\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaugs0nho.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaugs0nho.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  timestamp: 1660008811
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_array\
    \ = split(music_string, \" \")\n    music_length = length(music_array)\n    result\
    \ = Int64[]\n    for i = 1:music_length\n        if music_array[i] == \"o\"\n\
    \            push!(result, 4)\n        elseif music_array[i] == \"o|\"\n     \
    \       push!(result, 2)\n        elseif music_array[i] == \".|\"\n          \
    \  push!(result, 1)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008809
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    beats = []\n    for n in notes\n        if n == \"\
    o\"\n            push!(beats, 4)\n        elseif n == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif n == \".|\"\n            push!(beats, 1)\n        end\n \
    \   end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ Int64[]\n    for char in music_string\n        if char == 'o'\n            push!(result,\
    \ 4)\n        elseif char == '.'\n            push!(result, 1)\n        elseif\
    \ char == '|'\n            push!(result, 2)\n        end\n    end\n    return\
    \ result\nend\n# This is an assert statement. Note that the code is executed only\
    \ if this assert fails. \n# To test your code run the program and see if any errors\
    \ are raised.\nassert parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4]\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"parse_music\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpztggxt9c.jl:28\nin expression\
    \ starting at /tmp/tmpztggxt9c.jl:28\n"
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw7kamtrk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpw7kamtrk.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7kamtrk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7kamtrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw7kamtrk.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7kamtrk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7kamtrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw7kamtrk.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7kamtrk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7kamtrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw7kamtrk.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7kamtrk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7kamtrk.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1660008811
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string=split(music_string,\"\
    \ \")\n    output=zeros(Int64, length(music_string))\n    for i in 1:length(music_string)\n\
    \        if music_string[i]==\"o\"\n            output[i]=4\n        elseif music_string[i]==\"\
    o|\"\n            output[i]=2\n        elseif music_string[i]==\".|\"\n      \
    \      output[i]=1\n        end\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0q0m3e58.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp0q0m3e58.jl:32\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0q0m3e58.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0q0m3e58.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  timestamp: 1660008811
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here.\n    nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvclq_n06.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpvclq_n06.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpvclq_n06.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvclq_n06.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvclq_n06.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvclq_n06.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpvclq_n06.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvclq_n06.jl:23 [inlined]\n\
    \   [4] macro expansion\n     "
  timestamp: 1660008812
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    m=split(music_string,\
    \ \" \")\n    v=Array{Int64}(length(m))\n    for i in 1:length(m)\n        if\
    \ m[i]==\"o\"\n            v[i]=4\n        elseif m[i]==\"o|\"\n            v[i]=2\n\
    \        elseif m[i]==\".|\"\n            v[i]=1\n        end\n    end\n    return\
    \ v\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwfdmnzy0.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpwfdmnzy0.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpwfdmnzy0.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwfdmnzy0.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwfdmnzy0.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwfdmnzy0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpwfdmnzy0.jl:15\n   [2] ma"
  timestamp: 1660008812
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    \"\"\"This\
    \ function receives a string with music notation (output of the other function)\
    \ and returns\n    a vector of integers. Each integer represents number of beats\
    \ each note lasts. \n    \"\"\"\n    beats = []\n    for symbol in split(music_string)\n\
    \        if symbol == \"o\"\n            push!(beats, 4)\n        elseif symbol\
    \ == \"o|\"\n            push!(beats, 2)\n        elseif symbol == \".|\"\n  \
    \          push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008810
- exit_code: 0
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    durations = []\n    for i in notes\n        if i ==\
    \ \"o\"\n            push!(durations, 4)\n        elseif i == \"o|\"\n       \
    \     push!(durations, 2)\n        elseif i == \".|\"\n            push!(durations,\
    \ 1)\n        end\n    end\n    return durations\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    parse_music(music_string)\
    \ = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_byl20ze.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_byl20ze.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type var\"#parse_music#1\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp_byl20ze.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_byl20ze.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_byl20ze.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_byl20ze.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type var\"#parse_music#1\" to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp_byl20ze.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_byl20ze.jl:22 [inlined]\n\
    \   ["
  timestamp: 1660008813
