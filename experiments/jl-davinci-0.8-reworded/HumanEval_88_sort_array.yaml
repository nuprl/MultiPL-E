name: HumanEval_88_sort_array
language: jl
prompt: "\"\"\"\n    Given a vector of non-negative integers, return a cojl of the\
  \ given vector after sorting,\n    you will sort the given vector in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n\n    Note:\n\
  \    * don't change the given vector.\n\n    Examples:\n    >>> sort_array([])\n\
  \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1, 5])\n\
  \    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n    [6, 5, 4,\
  \ 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6])\
  \ == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
  \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23,\
  \ 11]) == [23, 21, 14, 11])\nend\n"
completions: ["    if mod(length(array), 2) == 0\n        @inbounds for i = 1:(length(array)\
    \ - 1)\n            for j = (i + 1):length(array)\n                if array[i]\
    \ > array[j]\n                    array[i], array[j] = array[j], array[i]\n  \
    \              end\n            end\n        end\n    else\n        @inbounds\
    \ for i = 1:(length(array) - 1)\n            for j = (i + 1):length(array)\n \
    \               if array[i] < array[j]\n                    array[i], array[j]\
    \ = array[j], array[i]\n                end\n            end\n        end\n  \
    \  end\n    return array\nend", "    if length(array) == 0\n        return array\n\
    \    end\n    if (array[1] + array[end]) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    len = length(array)\n\
    \    if len == 0 \n        return array\n    elseif len == 1\n        return array\n\
    \    elseif len % 2 == 0\n        tmp = Int64[]\n        for i in 2:2:len\n  \
    \          push!(tmp, array[i])\n        end\n        for i in (1:2:len - 1)\n\
    \            push!(tmp, array[i])\n        end\n        sort!(tmp, rev=true)\n\
    \        return tmp\n    else\n        tmp = Int64[]\n        for i in 2:2:len\n\
    \            push!(tmp, array[i])\n        end\n        for i in (1:2:len - 1)\n\
    \            push!(tmp, array[i])\n        end\n        sort!(tmp)\n        return\
    \ tmp\n    end\nend", "    if length(array) <= 1\n        return array\n    end\n\
    \    if mod(array[1] + array[end], 2) == 0\n        return reverse(sort(array))\n\
    \    else\n        return sort(array)\n    end\nend", "    if isempty(array)\n\
    \        return array\n    end\n    if length(array) == 1\n        return array\n\
    \    end\n    array_sum = array[1] + array[end]\n    if array_sum % 2 == 0\n \
    \       return sort(array, rev=true)\n    else\n        return sort(array)\n \
    \   end\nend", "    if length(array) == 0\n        return array\n    end\n   \
    \ if length(array) == 1\n        return array\n    end\n    if (array[1] + array[end])\
    \ % 2 == 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    if length(array) == 0\n        return array\n    end\n  \
    \  if length(array) == 1\n        return array\n    end\n    if (array[1] + array[end])\
    \ % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n   \
    \ end\nend", "    if length(array) == 0\n        return []\n    end\n    if sum(array[1],\
    \ array[end]) % 2 == 0\n        sorted = sort(array, rev=true)\n    else\n   \
    \     sorted = sort(array)\n    end\n    return sorted\nend", "    if isempty(array)\
    \ || length(array) == 1\n        return array\n    end\n    first_index = array[1]\n\
    \    last_index = array[end]\n    if mod(first_index + last_index, 2) == 0 \n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    if isempty(array) || length(array) == 1\n        return array\n\
    \    end\n    if array[1] + array[end] % 2 == 0\n        array = sort(array, rev=true)\n\
    \    else\n        array = sort(array)\n    end\n    return array\nend", "   \
    \ n = length(array)\n    if (n == 0) return array\n    if (n == 1) return array\n\
    \    sort(array, rev = (sum(array[1], array[end]) % 2 == 0))\nend", "    if length(array)\
    \ == 0 || length(array) == 1\n        return array\n    end\n    if (array[1]\
    \ + array[end]) % 2 == 0\n        return sort(array, rev=true)\n    else\n   \
    \     return sort(array)\n    end\nend", "    n = length(array)\n    if n == 0\n\
    \        return array\n    end\n    if n == 1\n        return array\n    end\n\
    \    if array[1] + array[n] % 2 == 0\n        return sort(array, rev=true)\n \
    \   else\n        return sort(array)\n    end\nend", "    if length(array) ==\
    \ 0\n        return array\n    end\n    if length(array) == 1\n        return\
    \ array\n    end\n    if (array[1] + array[end]) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    if length(array)\
    \ == 0 || length(array) == 1\n        return array\n    end\n    if isodd(array[1]\
    \ + array[end])\n        array[:] = sort(array)\n    else\n        array[:] =\
    \ sort(array, rev=true)\n    end\n    return array\nend\n@testset \"Example Tests\"\
    \ begin\n    @test sort_array([]) == []\n    @test sort_array([5]) == [5]\n  \
    \  @test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    @test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\nend", "    if isempty(array)\n\
    \        return array\n    end\n    if array[1] + array[end] % 2 == 0\n      \
    \  return sort(array, rev=true)\n    else\n        return sort(array)\n    end\n\
    end", "    if size(array, 1) > 0 && sum(array[1], array[end]) % 2 == 0\n     \
    \   reverse!(sort(array))\n    else\n        sort(array)\n    end\nend", "   \
    \ if length(array) > 0\n        odd_sum = (array[1] + array[end]) % 2 != 0\n \
    \       if odd_sum\n            sort(array)\n        else\n            sort(array,\
    \ rev=true)\n        end\n    else\n        array\n    end\nend", "    if length(array)\
    \ <= 1 || iseven(sum(array[1], array[end]))\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend\nsort_array([1, 2, 3, 4, 5,\
    \ 6])", "    if isempty(array)\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if isodd(array[1] + array[end])\n \
    \       return sort(array)\n    else\n        return sort(array, rev=true)\n \
    \   end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
