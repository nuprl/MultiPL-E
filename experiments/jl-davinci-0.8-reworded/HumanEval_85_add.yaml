name: HumanEval_85_add
language: jl
prompt: "\"\"\"Given a non-empty vector of integers lst. add the even elements that\
  \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n  \
  \  \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
  \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
  \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
completions: ["    sum = 0\n    for i in eachindex(lst)\n        if (i % 2 == 1) &\
    \ (lst[i] % 2 == 0)\n            sum += lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i = 1:length(lst)\n        if (i % 2 == 1)\
    \ & (lst[i] % 2 == 0)\n            sum += lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    odd_indices = findall(x -> x % 2 != 0, 1:length(lst))\n    odd_indices\
    \ = odd_indices[1:end-1]\n    odd_elements = lst[odd_indices]\n    return sum(odd_elements[odd_elements\
    \ .% 2 .== 0])\nend", "    sum = 0\n    for i = 1:length(lst)\n        if mod(i,2)\
    \ == 1\n            if mod(lst[i],2) == 0\n                sum = sum + lst[i]\n\
    \            end\n        end\n    end\n    return sum\nend", "    total = 0\n\
    \    for i in 1:length(lst)\n        if i % 2 != 0 && lst[i] % 2 == 0\n      \
    \      total += lst[i]\n        end\n    end\n    return total\nend", "  sum =\
    \ 0\n  for i in eachindex(lst)\n    if i % 2 == 1 && lst[i] % 2 == 0\n      sum\
    \ += lst[i]\n    end\n  end\n  return sum\nend", "    sum = 0\n    for i in 1:length(lst)\n\
    \        if i % 2 != 0 && lst[i] % 2 == 0\n            sum += lst[i]\n       \
    \ end\n    end\n    return sum\nend\n ", "  tot = 0 \n  for i = 1:2:length(lst)\n\
    \    tot += lst[i]\n  end\n  return tot\nend", "    res = 0\n    for i in 1:length(lst)\n\
    \        if (i % 2 != 0) && (lst[i] % 2 == 0)\n            res += lst[i]\n   \
    \     end\n    end\n    return res\nend", "  return sum(lst[1:2:end])\nend", " \
    \   # add code here\n    sum = 0\n    for i in 1:length(lst)\n        if(lst[i]\
    \ % 2 == 0 && i % 2 != 0)\n            sum += lst[i]\n        end\n    end\n \
    \   return sum\nend", "    return sum(lst[odd.(1:length(lst))])\nend", "    return\
    \ sum(lst[2:2:end])\nend", "    return sum(lst[1:2:end])\nend", "    evens = lst[2:2:end]\n\
    \    return sum(evens)\nend", "    total = 0\n    for i in 1:length(lst)\n   \
    \     if (lst[i] % 2 == 0) && (i % 2 != 0)\n            total += lst[i]\n    \
    \    end\n    end\n    return total\nend", "    j = 0\n    for i in 1:length(lst)\n\
    \        if i % 2 != 0 && lst[i] % 2 == 0\n            j += lst[i]\n        end\n\
    \    end\n    return j\nend", "    # your code here\n    pass\nend", "    return\
    \ sum(lst[i] for i in 1:length(lst) if i % 2 == 1 && lst[i] % 2 == 0)\nend", " \
    \   evenoddsum=0\n    for i in 1:2:length(lst)\n        if lst[i]%2==0\n     \
    \       evenoddsum+=lst[i]\n        end\n    end\n    return evenoddsum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
