name: HumanEval_152_compare
language: jl
prompt: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
  \    event is finally known. The feelings and thoughts you have at that moment are\n\
  \    definitely worth noting down and comparing.\n    Your task is to determine\
  \ if a person correctly guessed the results of a number of matches.\n    You are\
  \ given two vectors of scores and guesses of equal length, where each index shows\
  \ a match. \n    Return a vector of the same length denoting how far off each guess\
  \ was. If they have guessed correctly,\n    the value is 0, and if not, the value\
  \ is the absolute difference between the guess and the score.\n    \n    \n    example:\n\
  \n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n    [0, 0, 0, 0, 3,\
  \ 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n    [4, 4, 1, 0,\
  \ 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
  \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
  \ 4]) == [2, 0, 0, 1])\nend\n"
completions: ["    if size(game)[1] != size(guess)[1]\n        error(\"Length of Vectors\
    \ must be equal\")\n    end\n    return abs.(guess .- game)\nend", "    len =\
    \ length(game)\n    ans = zeros(len)\n    for i in 1:len\n        ans[i] = abs(game[i]\
    \ - guess[i])\n    end\n    return ans\nend", "  diff = 0\n  j = 0\n  res = Vector{Int64}(length(game))\n\
    \  while j < length(game)\n        if game[j] == guess[j]\n            diff =\
    \ 0\n        else\n            diff = abs(game[j] - guess[j])\n        end\n \
    \       res[j] = diff\n        j += 1\n  end\n  return res\nend", "    @assert\
    \ length(game) == length(guess)\n    return abs.(guess - game)\nend", "    return\
    \ abs.(game .- guess)\nend", "    m = length(game)\n    d = zeros(m)\n    for\
    \ i = 1:m\n        d[i] = abs(game[i] - guess[i])\n    end\n    return d\nend",
  "    abs.(game .- guess)\nend\n ", "    return abs.(game .- guess)\nend\n ", " \
    \   matches = game - guess\n    matches = abs.(matches)\nend", "    if length(game)\
    \ != length(guess)\n        println(\"vector length mismatch\")\n        return\
    \ -1\n    end\n    vec_diff::Vector{Int64} = Vector(undef, length(game))\n   \
    \ for i in 1:length(game)\n        if game[i] == guess[i]\n            vec_diff[i]\
    \ = 0\n        else\n            vec_diff[i] = abs(game[i] - guess[i])\n     \
    \   end\n    end\n    return vec_diff\nend", "    return abs.(game .- guess)\n\
    end", "    \n    r = zeros(Int64, length(game))\n    \n    for i in 1:length(game)\n\
    \        if game[i] == guess[i]\n            r[i] = 0\n        else\n        \
    \    r[i] = abs(game[i] - guess[i])\n        end\n    end\n    return r\nend",
  "    results = copy(game)\n    for index in 1:length(game)\n        results[index]\
    \ = abs(game[index] - guess[index])\n    end\n    return results\nend", "    return\
    \ abs.(game .- guess)\nend", "    \n    diff_vector = []\n    \n    for i in 1:length(game)\n\
    \        if guess[i] == game[i]\n            push!(diff_vector, 0)\n        else\n\
    \            push!(diff_vector, abs(guess[i] - game[i]))\n        end\n    end\n\
    \    \n    return diff_vector", "    abs.(game - guess)\nend\ncompare([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2])\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0,\
    \ -2])", "    \n    result = Int64[]\n    \n    for i in 1:length(game)\n    \
    \    if game[i] == guess[i]\n            push!(result, 0)\n        else\n    \
    \        push!(result, abs(game[i] - guess[i]))\n        end\n    end\n    return\
    \ result\nend", "    difs = []\n    for i in 1:length(game)\n        push!(difs,abs(game[i]-guess[i]))\n\
    \    end\n    return difs\nend", "    points = zeros(length(game))\n    for i\
    \ in 1:length(game)\n        points[i] = abs(game[i] - guess[i])\n    end\n  \
    \  return points\nend\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])", "    abs.(game .- guess)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
