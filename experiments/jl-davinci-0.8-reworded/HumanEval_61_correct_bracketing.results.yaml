name: HumanEval_61_correct_bracketing
language: jl
results:
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_counter\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      bracket_counter += 1\n        elseif brackets[i] == ')'\n            bracket_counter\
    \ -= 1\n        end\n        if bracket_counter < 0\n            return false\n\
    \        end\n    end\n    if bracket_counter == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets==\"\"\
    \n        return true\n    elseif brackets[1]==\"(\" && brackets[end]==\")\"\n\
    \        return correct_bracketing(brackets[2:end-1])\n    elseif brackets[1]==\"\
    (\" && brackets[end]!=\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]==\")\"\n        return false\n    elseif brackets[1]!=\"\
    (\" && brackets[end]!=\")\"\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a3riz1s.jl:31\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9a3riz1s.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a3riz1s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9a3riz1s.jl:32\n  Expression: candidate(\"(()())\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9a3riz1s.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a3riz1s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9a3riz1s.jl:33\n  Expression: candidate(\"()()(()())()\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9a3riz1s.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a3riz1s.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9a3riz1s.jl:34\n  Expression: candidate(\"()()((()()())())(()()(()))\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9a3riz1s.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9a3riz1s.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a3riz1s.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ char in brackets\n        if char == '('\n            count += 1\n        elseif\
    \ char == ')'\n            count -= 1\n        end\n        if count < 0\n   \
    \         return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for letter in brackets\n        if letter == '('\n            counter += 1\n\
    \        elseif letter == ')'\n            counter -= 1\n        end\n    end\n\
    \    return counter == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq52ysd9g.jl:34\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq52ysd9g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq52ysd9g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq52ysd9g.jl:39\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq52ysd9g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq52ysd9g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq52ysd9g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = count(p\
    \ -> p == '(', brackets)\n    num_close = count(p -> p == ')', brackets)\n   \
    \ if num_open == num_close\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiy6v1e7l.jl:32\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6v1e7l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6v1e7l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiy6v1e7l.jl:37\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy6v1e7l.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy6v1e7l.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiy6v1e7l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n      \
    \      open += 1\n        elseif brackets[i] == ')'\n            close += 1\n\
    \        end\n    end\n    if open == close\n        return true\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprt8zjg5b.jl:39\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt8zjg5b.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt8zjg5b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmprt8zjg5b.jl:44\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt8zjg5b.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt8zjg5b.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt8zjg5b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Int[]\n\
    \    for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ 1)\n        elseif bracket == ')'\n            if isempty(stack)\n         \
    \       return false\n            else\n                pop!(stack)\n        \
    \    end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    is_open = (c) ->\
    \ c=='('\n    open_n = 0\n    for c in brackets\n        if is_open(c)\n     \
    \       open_n += 1\n        elseif open_n <= 0\n            return false\n  \
    \      else\n            open_n -= 1\n        end\n    end\n    return open_n\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n_open = 0 \n  \
    \  for bracket in brackets \n        if bracket == '(' \n            n_open +=\
    \ 1 \n        elseif bracket == ')' \n            n_open -= 1 \n        end \n\
    \        if n_open < 0 \n            return false \n        end \n    end \n \
    \   if n_open != 0 \n        return false \n    end \n    return true \nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Brackets\
    \ is a string of \"(\" and \")\".\n    return true if every opening bracket has\
    \ a corresponding closing bracket.\n    \"\"\"\n    \n    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '('\n            push!(stack, bracket)\n\
    \        elseif bracket == ')'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n     n = length(brackets)\n\
    \     i = 1\n     stack = []\n     while i <= n\n        if brackets[i] == '('\n\
    \            push!(stack, brackets[i])\n        elseif brackets[i] == ')'\n  \
    \          if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n        i += 1\n \
    \    end\n     if isempty(stack)\n        return true\n     else\n        return\
    \ false\n     end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    lparen = 0\n   \
    \ rparen = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n\
    \            lparen += 1\n        elseif brackets[i] == ')'\n            rparen\
    \ += 1\n        end\n    end\n    if lparen == rparen\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp672skibl.jl:39\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp672skibl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp672skibl.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp672skibl.jl:44\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp672skibl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp672skibl.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp672skibl.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for i in brackets\n        if i == \"(\"\n            counter += 1\n      \
    \  elseif i == \")\"\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    return counter == 0\
    \ ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmxpo1q_o.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxpo1q_o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxpo1q_o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmxpo1q_o.jl:37\n  Expression: candidate(\")(()\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxpo1q_o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxpo1q_o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmxpo1q_o.jl:38\n  Expression: candidate(\"(\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxpo1q_o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxpo1q_o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmxpo1q_o.jl:39\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxpo1q_o.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxpo1q_o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmxpo1q_o.jl:40\n  Expression: candidate(\")\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmxpo1q_o.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)==0\n\
    \        return true\n    elseif brackets[1]=='('\n        if search(brackets,\"\
    )\")==0\n            return false\n        else\n            return correct_bracketing(brackets[2:end])\n\
    \        end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp024fm_w2.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"()\") == true\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp024fm_w2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp024fm_w2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp024fm_w2.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp024fm_w2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"(()())\") == true\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp024fm_w2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp024fm_w2.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp024fm_w2.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp024fm_w2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"()()(()())()\") == true\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp024fm_w2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp024fm_w2.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp024fm_w2.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp024fm_w2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"()()((()()())())(()()(()))\") == true\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp024fm_w2.jl:17\n   [2"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp024fm_w2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count_open, count_close\
    \ = 0, 0\n    for i in brackets\n        if i == '('\n            count_open +=\
    \ 1\n        elseif i == ')'\n            count_close += 1\n        end\n    end\n\
    \    if count_open == count_close\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3bxu7xg.jl:38\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3bxu7xg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3bxu7xg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa3bxu7xg.jl:43\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa3bxu7xg.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa3bxu7xg.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3bxu7xg.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_parens = 0\n\
    \    for c in brackets\n        if c == '('\n            open_parens += 1\n  \
    \      elseif c == ')'\n            open_parens -= 1\n        end\n        if\
    \ open_parens < 0\n            return false\n        end\n    end\n    return\
    \ open_parens == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    len = length(brackets)\n\
    \    if len == 0 \n        return true\n    end\n    if len % 2 != 0\n       \
    \ return false\n    end\n    if brackets[1] == \")\"\n        return false\n \
    \   end\n    open = 0\n    closed = 0\n    for i in 1:len\n        if brackets[i]\
    \ == \"(\"\n            open += 1\n        elseif brackets[i] == \")\"\n     \
    \       closed += 1\n        end\n        if closed > open\n            return\
    \ false\n        end\n    end\n    if open == closed\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqu7utyjn.jl:52\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqu7utyjn.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqu7utyjn.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpqu7utyjn.jl:54\n  Expression: candidate(\"((((\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqu7utyjn.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqu7utyjn.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpqu7utyjn.jl:57\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqu7utyjn.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqu7utyjn.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpqu7utyjn.jl:58\n  Expression: candidate(\"()()(()())()))()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqu7utyjn.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqu7utyjn.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqu7utyjn.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Your code here\n\
    \    stack = Array{Char,1}()\n    for i = 1:length(brackets)\n        push!(stack,\
    \ brackets[i])\n        if stack[end] == ')'\n            pop!(stack)\n      \
    \      if stack[end] != '('\n                return false\n            end\n \
    \           pop!(stack)\n        end\n    end\n    if length(stack) != 0\n   \
    \     return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0zk7brrt.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"((()())))\") == false\n  BoundsError: attempt to access\
    \ 0-element Vector{Char} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] correct_bracketing(brackets::String)\n    \
    \ @ Main /tmp/tmp0zk7brrt.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zk7brrt.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0zk7brrt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp0zk7brrt.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\")(()\") == false\n  BoundsError: attempt to access 0-element Vector{Char}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp0zk7brrt.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zk7brrt.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0zk7brrt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp0zk7brrt.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\")\") == false\n  BoundsError: attempt to access 0-element Vector{Char}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp0zk7brrt.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zk7brrt.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0zk7brrt.jl:35\ntest set:\
    \ Error During Test at /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zk7brrt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_bracket_count\
    \ += 1\n        elseif bracket == ')'\n            open_bracket_count -= 1\n \
    \       end\n    end\n    return open_bracket_count == 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66pw7tgo.jl:34\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66pw7tgo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66pw7tgo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp66pw7tgo.jl:39\n  Expression: candidate(\"()()(()())())(()\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66pw7tgo.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66pw7tgo.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66pw7tgo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for\
    \ b in brackets\n        if b == '('\n            depth += 1\n        elseif b\
    \ == ')'\n            depth -= 1\n        end\n        if depth < 0\n        \
    \    return false\n        end\n    end\n    return depth == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
