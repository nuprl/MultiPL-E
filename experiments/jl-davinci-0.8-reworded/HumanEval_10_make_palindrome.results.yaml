name: HumanEval_10_make_palindrome
language: jl
results:
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    return string*reverse(string[1:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0om0n_5_.jl:21\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0om0n_5_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0om0n_5_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0om0n_5_.jl:22\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0om0n_5_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0om0n_5_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0om0n_5_.jl:23\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0om0n_5_.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0om0n_5_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0om0n_5_.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0om0n_5_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0om0n_5_.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0om0n_5_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if is_palindrome(string)\n        return string\n    end\n    # Find the\
    \ longest postfix of the string that is a palindrome\n    l, r = 1, length(string)\n\
    \    while !is_palindrome(string[l:r])\n        l += 1\n    end\n    # Return\
    \ the reverse of the prefix before the palindromic suffix\n    return string *\
    \ reverse(string[1:l])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprvhnsdsm.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprvhnsdsm.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvhnsdsm.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvhnsdsm.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprvhnsdsm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprvhnsdsm.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvhnsdsm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvhnsdsm.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprvhnsdsm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprvhnsdsm.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvhnsdsm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvhnsdsm.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprvhnsdsm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprvhnsdsm.jl:13\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvhnsdsm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    isp = is_palindrome(string)\n    if isp == 1\n        return string\n\
    \    end\n    if isp == 0\n        return string*reverse(string)\n    end\n  \
    \  # isp == -1\n    llps = longest_letter_palindrome_suffix(string)\n    return\
    \ string*reverse(string[1:length(string)-llps])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp944m6e4z.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp944m6e4z.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp944m6e4z.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp944m6e4z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp944m6e4z.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp944m6e4z.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp944m6e4z.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp944m6e4z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp944m6e4z.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp944m6e4z.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp944m6e4z.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp944m6e4z.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp944m6e4z.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp944m6e4z.jl:13\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp944m6e4z.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    prefix_len = size(string, 1)\n    while (prefix_len > 0)\n        if is_palindrome(string[prefix_len:end])\n\
    \            return string * reverse(string[1:prefix_len])\n        end\n    \
    \    prefix_len -= 1\n    end\n    return string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnp7yslgg.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching size(::String,\
    \ ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpnp7yslgg.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnp7yslgg.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnp7yslgg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpnp7yslgg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching size(::String,\
    \ ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnp7yslgg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    let \n        len = length(string)\n        if len == 0\n            return\
    \ \"\"\n        end\n        for i = len:-1:0\n            if is_palindrome(string[1:i])\n\
    \                return string * reverse(string[1:len-i])\n            end\n \
    \       end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx9w7xoie.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx9w7xoie.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9w7xoie.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9w7xoie.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpx9w7xoie.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx9w7xoie.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9w7xoie.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9w7xoie.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpx9w7xoie.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx9w7xoie.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9w7xoie.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9w7xoie.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpx9w7xoie.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx9w7xoie.jl:19\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9w7xoie.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    longest_postfix = find_longest_palindromic_suffix(string)\n    return\
    \ string * reverse(string[1:end-length(longest_postfix)])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_c9elwv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx_c9elwv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_c9elwv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_c9elwv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_c9elwv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx_c9elwv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_c9elwv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_c9elwv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_c9elwv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx_c9elwv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_c9elwv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_c9elwv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_c9elwv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_c9elwv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    palindrome_suffix = last_palindrome_postfix(string)\n    return string\
    \ * string[1:length(palindrome_suffix)][end:-1:1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuhl_9v6q.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: last_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuhl_9v6q.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuhl_9v6q.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuhl_9v6q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuhl_9v6q.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: last_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpuhl_9v6q.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuhl_9v6q.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuhl_9v6q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuhl_9v6q.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: last_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuhl_9v6q.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuhl_9v6q.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuhl_9v6q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuhl_9v6q.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: last_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuhl_9v6q.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhl_9v6q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    is_palindrome = (str) -> str == reverse(str)\n    find_postfix_palindrome\
    \ = (str) -> findall(r\".*(.)(.+)\\2\", str)[1]\n    prefix = str[1:end]\n   \
    \ postfix = find_postfix_palindrome(str)\n    postfix == \"\" && return str\n\
    \    postfix_palindrome = str[end-length(postfix)+1:end]\n    prefix_palindrome\
    \ = reverse(prefix[1:end-length(postfix_palindrome)])\n    return str * prefix_palindrome\
    \ * postfix_palindrome\nend\n@testset \"make_palindrome with empty string\" begin\n\
    \    @test make_palindrome(\"\") == \"\"\nend\n@testset \"make_palindrome with\
    \ string that has no postfix palindrome\" begin\n    @test make_palindrome(\"\
    cat\") == \"catac\"\nend\n@testset \"make_palindrome with string that has a postfix\
    \ palindrome\" begin\n    @test make_palindrome(\"cata\") == \"catac\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp6kru_3ks.jl:22\nin expression starting at /tmp/tmp6kru_3ks.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    length = length(string)\n    i = length\n    while i > 0 && string[i]\
    \ != string[length]\n        i = i - 1\n    end\n    while i > 0 && string[1:i]\
    \ != reverse(string[length+1-i:length])\n        i = i - 1\n    end\n    return\
    \ string * reverse(string[1:length+1-i])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpms2y5ao3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpms2y5ao3.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpms2y5ao3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpms2y5ao3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpms2y5ao3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpms2y5ao3.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpms2y5ao3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpms2y5ao3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpms2y5ao3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpms2y5ao3.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpms2y5ao3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpms2y5ao3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpms2y5ao3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpms2y5ao3.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpms2y5ao3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if is_palindrome(string)\n        return string\n    end\n    for i in\
    \ length(string):-1:1\n        if is_palindrome(string[1:i])\n            return\
    \ string * reverse(string[1:i])\n        end\n    end\nend\nmake_palindrome(\"\
    catac\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: is_palindrome not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmp2j_yq_nd.jl:13\n [2]\
    \ top-level scope\n   @ /tmp/tmp2j_yq_nd.jl:22\nin expression starting at /tmp/tmp2j_yq_nd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    max_postfix_len = find_max_postfix_palindrome_len(string)\n    return\
    \ string * reverse(string[1:max_postfix_len])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr8xhsh2l.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_postfix_palindrome_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr8xhsh2l.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8xhsh2l.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8xhsh2l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr8xhsh2l.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_postfix_palindrome_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr8xhsh2l.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8xhsh2l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8xhsh2l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr8xhsh2l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_postfix_palindrome_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr8xhsh2l.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr8xhsh2l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr8xhsh2l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr8xhsh2l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_postfix_palindrome_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8xhsh2l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    end_idx = length(string)\n    while !is_palindrome(string[1:end_idx])\n\
    \        end_idx -= 1\n    end\n    reverse(string[1:end_idx]) * string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqcpfvgs0.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqcpfvgs0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcpfvgs0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcpfvgs0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqcpfvgs0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqcpfvgs0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcpfvgs0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcpfvgs0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqcpfvgs0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqcpfvgs0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcpfvgs0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcpfvgs0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqcpfvgs0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqcpfvgs0.jl:14\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqcpfvgs0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    suffix_len =  string |> longest_palindromic_suffix |> length\n    prefix\
    \ = string[1:end-suffix_len]\n    return string * reverse(prefix)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjm7jkfjl.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjm7jkfjl.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm7jkfjl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm7jkfjl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjm7jkfjl.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjm7jkfjl.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm7jkfjl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm7jkfjl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjm7jkfjl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjm7jkfjl.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm7jkfjl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm7jkfjl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjm7jkfjl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjm7jkfjl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    str_length = length(string)\n    for suffix_length in reverse(1:str_length)\n\
    \        suffix = string[end-suffix_length+1:end]\n        if is_palindrome(suffix)\n\
    \            return string * reverse(string[1:end-suffix_length])\n        end\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwko4mos6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwko4mos6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwko4mos6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwko4mos6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwko4mos6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwko4mos6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwko4mos6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwko4mos6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwko4mos6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwko4mos6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwko4mos6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwko4mos6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwko4mos6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwko4mos6.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwko4mos6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    index = find_palindrome_end(string)\n    return string * reverse(string[1:index])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ds512am.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_end not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1ds512am.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ds512am.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ds512am.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1ds512am.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_end not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ds512am.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ds512am.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ds512am.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1ds512am.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_end not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ds512am.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ds512am.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ds512am.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1ds512am.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_end not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ds512am.jl:13\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ds512am.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    len = length(string)\n    suffix = \"\"\n    prefix = \"\"\n    while\
    \ len > 0\n        len -= 1\n        if is_palindrome(string[1:len+1])\n     \
    \       suffix = string[1:len+1]\n            prefix = string[len+1:end]\n   \
    \         break\n        end\n    end\n    return string * reverse(prefix)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoxqk384i.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpoxqk384i.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxqk384i.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxqk384i.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpoxqk384i.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpoxqk384i.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxqk384i.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxqk384i.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpoxqk384i.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpoxqk384i.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxqk384i.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxqk384i.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpoxqk384i.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpoxqk384i.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoxqk384i.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    n = length(string)\n    string_rev = reverse(string)\n    # Find the longest\
    \ palindromic suffix.\n    for i in 1:n\n        if string[1:i] == string_rev[n-i+1:n]\n\
    \            prefix = string[i+1:n]\n            break\n        end\n    end\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp64qmjns7.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: prefix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp64qmjns7.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64qmjns7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64qmjns7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp64qmjns7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp64qmjns7.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64qmjns7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64qmjns7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp64qmjns7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp64qmjns7.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64qmjns7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64qmjns7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp64qmjns7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp64qmjns7.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64qmjns7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    end\n    return string * reverse(string[1:find_shortest_palindrome_prefix(string)-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1rjw_8dj.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_shortest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1rjw_8dj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1rjw_8dj.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rjw_8dj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1rjw_8dj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_shortest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1rjw_8dj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1rjw_8dj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rjw_8dj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1rjw_8dj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_shortest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1rjw_8dj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1rjw_8dj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rjw_8dj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1rjw_8dj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_shortest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome("
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1rjw_8dj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    len = length(string)\n    if len == 0\n        return \"\"\n    end\n\
    \    prepend = []\n    for i in range(len, 0, -1)\n        if is_palindrome(string[1:i])\n\
    \            return string * string[1:i]\n        end\n    end\n    return string\
    \ * string[1:len]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk0mxgi_p.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  ArgumentError: range(1.0, stop=0.0,\
    \ length=-1): negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpk0mxgi_p.jl:18\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpk0mxgi_p.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpk0mxgi_p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpk0mxgi_p.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  ArgumentError: range(3.0, stop=0.0, length=-1):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] range\n      @ ./range.jl:112 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpk0mxgi_p.jl:18\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpk0mxgi_p.jl:32 [inlined]\n\
    \   [10] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0mxgi_p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    n = length(string)\n    for i in 1:n\n        if string[i:end] == string[i:end]\n\
    \            return string * string[1:i]\n        end\n    end\n    return string\n\
    end\n \nmake_palindrome(\"cata\")\n \n \n\"\"\" Find palindromic shortest substring\
    \ in a supplied string.\n    A single palindromic substring can be found in O(n)\
    \ time by traversing the string from both ends to the middle.\n    There is a\
    \ pretty simple algorithm that does the same in O(n), but it uses suffix trees.\n\
    \    - Traverse the string from left to right.\n    - When reaching a new character,\
    \ determine the maximum palindromic substring that begins with that character.\n\
    \    - Traverse the string from right to left.\n    - When reaching a new character,\
    \ determine the maximum palindromic substring that ends with that character.\n\
    \    - Compare the length of maximum palindromic substrings found and return the\
    \ shortest.\n    \"\"\"\n \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbgf242te.jl:41\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgf242te.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgf242te.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbgf242te.jl:42\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbgf242te.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgf242te.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbgf242te.jl:43\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgf242te.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgf242te.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbgf242te.jl:44\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryj\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbgf242te.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbgf242te.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgf242te.jl:37\n"
  exit_code: 1
  status: SyntaxError
