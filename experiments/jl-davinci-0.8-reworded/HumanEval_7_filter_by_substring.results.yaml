language: jl
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for (i, s) in enumerate(strings)\n        if !occursin(substring, s)\n\
    \            strings[i] = 0\n        end\n    end\n    return strings[strings\
    \ .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi6ianwag.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpi6ianwag.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpi6ianwag.jl:10\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi6ianwag.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi6ianwag.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi6ianwag.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \     @ Base ./array.jl:903\n   [2] filter"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(s -> contains(s, substring), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  return [ s for s in strings if contains(s, substring) ]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    i = 0\n    while i < length(strings)\n        if !contains(strings[i],\
    \ substring)\n            deleteat!(strings, i)\n        else\n            i +=\
    \ 1\n        end\n    end\n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvg27dj65.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpvg27dj65.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpvg27dj65.jl:10\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvg27dj65.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvg27dj65.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvg27dj65.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpvg27dj65.jl:10\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvg27dj65.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvg27dj65.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvg27dj65.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  BoundsError: attempt to access 4-element Vector{String}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvg27dj65.jl:10\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Te"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> x \u2208 strings && contains(x, substring), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter(x -> contains(x, substring), strings)\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter(x -> contains(x, substring), strings)\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp45v84qcw.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp45v84qcw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp45v84qcw.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp45v84qcw.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp45v84qcw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp45v84qcw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp45v84qcw.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp45v84qcw"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcvdadzsn.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpcvdadzsn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcvdadzsn.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcvdadzsn.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpcvdadzsn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcvdadzsn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcvdadzsn.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpcvdadzsn.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> substring in x, strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx41qe_xx.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpx41qe_xx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmpx41qe_xx.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpx41qe_xx.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpx41qe_xx.jl:16 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpx41qe_xx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpx41qe_xx.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmpx41qe_xx.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpx41qe_xx.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpx41qe_xx.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpx41qe_xx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpx41qe_xx.jl:18\n  Test threw exc"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings_filtered = [string for string in strings if occursin(substring,\
    \ string)]\n    return strings_filtered\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> occursin(substring, s), strings)\nend\n \nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> occursin(substring, s), strings)\nend\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [str for str in strings if substring in str]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj8a3vd6t.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpj8a3vd6t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(str::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpj8a3vd6t.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpj8a3vd6t.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpj8a3vd6t.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpj8a3vd6t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(str::String)\n    \
    \  @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n  \
    \  [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @\
    \ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpj8a3vd6t.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpj8a3vd6t.jl:17"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> substring in x, strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5xotzksn.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5xotzksn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp5xotzksn.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp5xotzksn.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5xotzksn.jl:16 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5xotzksn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5xotzksn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp5xotzksn.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp5xotzksn.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5xotzksn.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5xotzksn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5xotzksn.jl:18\n  Test threw exc"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    new_arr = String[]\n    for i in strings\n        if(findfirst(i, substring)\
    \ != nothing)\n            push!(new_arr, i)\n        end\n    end\n    return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp53xrhjo8.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp53xrhjo8.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53xrhjo8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53xrhjo8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp53xrhjo8.jl:23\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53xrhjo8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53xrhjo8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp53xrhjo8.jl:24\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp53xrhjo8.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53xrhjo8.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    is_substring(x) = occursin(substring, x)\n    return filter(is_substring,\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    (str for str in strings if substring in str)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpwwugrqj_.jl:15\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    Cannot `convert` an object of type Base.Generator{Base.Iterators.Filter{var"#1#2"{String},
    Vector{String}}, typeof(identity)} to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main /tmp/tmpwwugrqj_.jl:8\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwugrqj_.jl:15 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwugrqj_.jl:14\ntest set: Error
    During Test at /tmp/tmpwwugrqj_.jl:16\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  MethodError:
    Cannot `convert` an object of type Base.Generator{Base.Iterators.Filter{var"#1#2"{String},
    Vector{String}}, typeof(identity)} to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T'
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = [isstring(s) && contains(s, substring) ? s : nothing for s\
    \ in strings]\n    return filter(x -> x != nothing, filtered)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2dwgmwjj.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp2dwgmwjj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isstring\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\"{String})(s::String)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{String}, var\"#1#3\"{String}})\n     @ Base\
    \ ./array.jl:724\n   [4] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp2dwgmwjj.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2dwgmwjj.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2dwgmwjj.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2dwgmwjj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isstring\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\"{String})(s::String)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{String}, var\"#1#3\"{String}})\n     @ Base\
    \ ./array.jl:724\n   [4] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp2dwgmwjj.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2dwgmwjj.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2dwgmwjj.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2dwgmwjj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: isstring not defined\n  Stacktrace:\n  \
    \ [1] (::var\"#1#3\"{String})(s::Strin"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    out = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(out, s)\n        end\n    end\n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if substring in string\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvo98v3r3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvo98v3r3.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> contains(x, substring), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    nonempty_strings = []\n    for string in strings\n        if has_substring(string,\
    \ substring)\n            push!(nonempty_strings, string)\n        end\n    end\n\
    \    return nonempty_strings\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuqzexgvr.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuqzexgvr.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: has_substring\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpuqzexgvr.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuqzexgvr.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqzexgvr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuqzexgvr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: has_substring\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpuqzexgvr.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuqzexgvr.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqzexgvr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuqzexgvr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: has_substring not defined\n  Stacktrace:\n\
    \   [1] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpuqzexgvr.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqzexgvr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqzexgvr.jl:20"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return strings[in.(strings, substring)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8opvvxz6.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp8opvvxz6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [4] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [5] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n      @ ./broadcast.jl:899\
    \ [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [8]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n      @ Main\
    \ /tmp/tmp8opvvxz6.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp8opvvxz6.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp8opvvxz6.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8opvvxz6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [4] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [5] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [8] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \      @ Main /tmp/tmp8opvvxz6.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> contains(x, substring), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for (i,s) in enumerate(strings)\n        if contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings_filtered = []\n    for s in strings\n        if substring in s\n\
    \            push!(strings_filtered, s)\n        end\n    end\n    return strings_filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8q66zwn7.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp8q66zwn7.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp8q66zwn7.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8q66zwn7.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8q66zwn7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8q66zwn7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp8q66zwn7.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp8q66zwn7.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8q66zwn7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8q66zwn7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if search(substring,\
    \ string) != nothing\n            push!(filtered, string)\n        end\n    end\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbfdfgu0t.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpbfdfgu0t.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpbfdfgu0t.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbfdfgu0t.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfdfgu0t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbfdfgu0t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpbfdfgu0t.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbfdfgu0t.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfdfgu0t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbfdfgu0t.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: search not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmpbfdfgu0t.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfdfgu0t.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfdfgu0t.jl:20\nTest Summary:\
    \ | Pass"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if occursin(substring, s)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    is_substring = (s -> occursin(s, substring))\n    filter(is_substring,\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr054ybya.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpr054ybya.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr054ybya.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr054ybya.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpr054ybya.jl:18\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr054ybya.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr054ybya.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpr054ybya.jl:19\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr054ybya.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpr054ybya.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979966
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    matches = String[]\n    for i in 1:length(strings)\n        if contains(strings[i],\
    \ substring)\n            push!(matches, strings[i])\n        end\n    end\n \
    \   return matches\nend\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    contains(s::String, sub::String) = s in sub\n    filter(contains, strings,\
    \ substring)\nend\n\"\"\"\nSelect and return array of length \"len\" of elements\
    \ that occur with frequency >= \"freq\"\nin array \"data\" of length > \"len\"\
    \ with elements of type \"T\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyjdiv3b.jl:11\nin expression starting at\
    \ /tmp/tmppyjdiv3b.jl:11\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    matching_strings = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(matching_strings, s)\n        end\n    end\n    return matching_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    start_idx = findfirst(substring, strings)\n    end_idx = findlast(substring,\
    \ strings)\n    if start_idx != 0 && end_idx != 0\n        return strings[start_idx:end_idx]\n\
    \    else\n        return Vector{String}()\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1mdcaq82.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1mdcaq82.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findfirst(::String, ::Vector{String})\n  Closest\
    \ candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1mdcaq82.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mdcaq82.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mdcaq82.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1mdcaq82.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findfirst(::String,\
    \ ::Vector{String})\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Union{AbstractString, AbstractArray}) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1mdcaq82.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mdcaq82.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglo"
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if contains(s, substring)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    res = []\n    for str in strings\n        if occursin(substring, str)\n\
    \            push!(res, str)\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [str for str in strings if substring in str]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj8a3vd6t.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpj8a3vd6t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(str::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpj8a3vd6t.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpj8a3vd6t.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpj8a3vd6t.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpj8a3vd6t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(str::String)\n    \
    \  @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n  \
    \  [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @\
    \ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpj8a3vd6t.jl:8\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpj8a3vd6t.jl:17"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return strings\n    end\n    return strings[find(x\
    \ -> contains(x, substring), strings)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzr4vyxmh.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzr4vyxmh.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpzr4vyxmh.jl:11\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzr4vyxmh.jl:19 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzr4vyxmh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzr4vyxmh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpzr4vyxmh.jl:11\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzr4vyxmh.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzr4vyxmh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzr4vyxmh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: find not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmpzr4vyxmh.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzr4vyxmh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzr4vyxmh.jl:17\nTest Summary:\
    \ | Pass  Erro"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(strings) do string\n        findnext(string, substring)\
    \ != nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpl3a00asx.jl:18\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  MethodError: Cannot `convert` an
    object of type String to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    oftype(x::Int64, y::String)\n     @ Base ./essentials.jl:396\n   [2] findnext(A::String,
    start::String)\n     @ Base ./array.jl:1864\n   [3] (::var"#1#2"{String})(string::String)\n     @
    Main /tmp/tmpl3a00asx.jl:9\n   [4] filter(f::var"#1#2"{String}, a::Vector{String})\n     @
    Base ./array.jl:2484\n   [5] filter_by_substring(strings::Vector{String}, substring::String)\n     @
    Main /tmp/tmpl3a00asx.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmpl3a00asx.jl:18 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmpl3a00asx.jl:16\ntest set: Error
    During Test at /tmp/tmpl3a00asx.jl:19\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"], "xx") == ["xxx", "aaaxxy", "xxxAAA",
    "xxx"]\n  MethodError: Cannot `convert` an object of type String to an object
    of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia'
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    # TODO: Add documentation\n    return filter(x -> contains(x, substring),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    contains_substring = [string_contains(s, substring) for s in strings]\n\
    \    return strings[contains_substring]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi5acpwx6.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpi5acpwx6.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: string_contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(s::String)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{String}, var\"#1#2\"{String}})\n     @ Base\
    \ ./array.jl:724\n   [4] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpi5acpwx6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpi5acpwx6.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpi5acpwx6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpi5acpwx6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: string_contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(s::String)\n    \
    \ @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{String}, var\"#1#2\"{String}})\n     @ Base\
    \ ./array.jl:724\n   [4] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpi5acpwx6.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpi5acpwx6.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpi5acpwx6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpi5acpwx6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: string_contains not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1"
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    res = []\n    for s in strings\n        if contains(s, substring)\n  \
    \          push!(res, s)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    has_substring = (s -> occursin(substring, s))\n    return filter(has_substring,\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    output = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(output, s)\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if substring in string\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvo98v3r3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvo98v3r3.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    is_matching = [contains(x, substring) for x in strings]\n    return strings[is_matching]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [ string for string in strings if substring in string ]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvvw2vuen.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpvvw2vuen.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvvw2vuen.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpvvw2vuen.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvvw2vuen.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvvw2vuen.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpvvw2vuen.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvvw2vuen.jl:17 [inlined"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return strings[search(r\"(?i)$substring\", strings)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphkp86gl3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmphkp86gl3.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: search not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphkp86gl3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphkp86gl3.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkp86gl3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphkp86gl3.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmphkp86gl3.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkp86gl3.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkp86gl3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphkp86gl3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphkp86gl3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphkp86gl3.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkp86gl3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphkp86g"
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    output = []\n    for string in strings\n        if substring in string\n\
    \            push!(output, string)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvt23t79q.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvt23t79q.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvt23t79q.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvt23t79q.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvt23t79q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvt23t79q.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvt23t79q.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvt23t79q.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvt23t79q.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvt23t79q.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[occursin.(substring, strings)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for s in strings\n        if s != \"\" && contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\n```\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjgdshg0.jl:10\nin expression starting at\
    \ /tmp/tmpzjgdshg0.jl:10\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings[findin(strings, substring)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplidhekdh.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmplidhekdh.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhekdh.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhekdh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhek"
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    list = []\n    for x in strings\n        if contains(x, substring)\n \
    \           push!(list, x)\n        end\n    end\n    return list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> contains(s, substring), strings)\nend\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    res = Vector{String}()\n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(res, str)\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if substring in string\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvo98v3r3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvo98v3r3.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter(x -> occursin(substring, x), strings)\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  for string in strings\n    if !occursin(substring, string)\n      deleteat!(strings,\
    \ findfirst(strings, string))\n    end\n  end\n  \n  return strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwnwla07r.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpwnwla07r.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnwla07r.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnwla07r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwnwla07r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwnwla07r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwnwla07r.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwnwla07r.jl:23 [inlined]\n"
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> contains(s, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \n \n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: use occursin(x, y) for string containment\nStacktrace:\n\
    \ [1] error(s::String)\n   @ Base ./error.jl:33\n [2] in(#unused#::String, #unused#::String)\n\
    \   @ Base ./strings/search.jl:638\n [3] (::var\"#1#2\"{String})(string::String)\n\
    \   @ Main ./none:0\n [4] iterate\n   @ ./iterators.jl:447 [inlined]\n [5] iterate\n\
    \   @ ./generator.jl:44 [inlined]\n [6] grow_to!\n   @ ./array.jl:797 [inlined]\n\
    \ [7] collect\n   @ ./array.jl:721 [inlined]\n [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n   @ Main /tmp/tmp25676h65.jl:8\n [9] top-level scope\n\
    \   @ /tmp/tmp25676h65.jl:10\nin expression starting at /tmp/tmp25676h65.jl:10\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter(x -> contains(x, substring), strings)\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> contains(x, substring), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return []\n    end\n    if length(strings)\
    \ == 1\n        return [strings[1]]\n    end\n    return filter(x -> occursin(substring,\
    \ x), strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if contains(string, substring)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for i in 1:length(strings)\n        if strings[i] contains\
    \ substring\n            push!(filtered, strings[i])\n        end\n    end\n \
    \   return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"substring\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj50c_vik.jl:10\nin expression starting at /tmp/tmpj50c_vik.jl:10\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> substring in x, strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5xotzksn.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5xotzksn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp5xotzksn.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp5xotzksn.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5xotzksn.jl:16 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5xotzksn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5xotzksn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp5xotzksn.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp5xotzksn.jl:8\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp5xotzksn.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp5xotzksn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5xotzksn.jl:18\n  Test threw exc"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [ s for s in strings if substring in s ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvlxgf792.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpvlxgf792.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvlxgf792.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpvlxgf792.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvlxgf792.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvlxgf792.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvlxgf792.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpvlxgf792.jl:17 [inlined]\n   [11] "
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(string -> contains(string, substring), strings)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return strings[findin(strings, substring)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwogccdkd.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpwogccdkd.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpwogccdkd.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwogccdkd.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwogccdkd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwogccdkd.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpwogccdkd.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwogccdkd.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwogccdkd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwogccdkd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpwogccdkd.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwogccdkd.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwogccdkd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwogccd"
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  filtered = []\n  for s in strings\n    if contains(s, substring)\n     \
    \ push!(filtered, s)\n    end\n  end\n  return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    output = []\n    for s in strings\n        if findfirst(substring, s)\
    \ != nothing\n            push!(output, s)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substring_filter = contains.(strings, substring)\n    filtered_strings\
    \ = strings[substring_filter]\n    return filtered_strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return[x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8y56l0d3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp8y56l0d3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8y56l0d3.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp8y56l0d3.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp8y56l0d3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8y56l0d3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8y56l0d3.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp8y56l0d3.jl:17 [inlined]\n   [11] "
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  vector_with_substring = []\n  for string in strings\n    if occursin(substring,\
    \ string)\n      push!(vector_with_substring, string)\n    end\n  end\n  return\
    \ vector_with_substring\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if occursin(substring, string)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    #if !(substring in strings)\n    #    return strings\n    #end\n    return\
    \ [string for string in strings if substring in string]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp95pi5ezl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp95pi5ezl.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp95pi5ezl.jl:11\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp95pi5ezl.jl:19 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp95pi5ezl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp95pi5ezl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp95pi5ezl.jl:11\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp95pi5ezl.jl:20 [inlin"
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> contains(s, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    r = [s for s in strings if substring in s]\n    return r\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp97_3f0z_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp97_3f0z_.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp97_3f0z_.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp97_3f0z_.jl:17 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp97_3f0z_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp97_3f0z_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp97_3f0z_.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp97_3f0z_.jl:18 [inlined]\n   [11] "
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter(x -> contains(x, substring), strings)\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    matches = []\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(matches, string)\n        end\n    end\n    return matches\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    str = []\n    for s in strings\n        if substring in s\n          \
    \  push!(str, s)\n        end\n    end\n    return str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1uf0vned.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1uf0vned.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp1uf0vned.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1uf0vned.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1uf0vned.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1uf0vned.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp1uf0vned.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1uf0vned.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1uf0vned.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1uf0vned.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979972
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    fstrings = Vector{String}()\n    for s in strings\n        if occursin(substring,\
    \ s)\n            push!(fstrings, s)\n        end\n    end\n    return fstrings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for str in strings\n        if contains(str, substring)\n\
    \            push!(filtered, str)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if findfirst(string,\
    \ substring) != nothing\n            push!(filtered, string)\n        end\n  \
    \  end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpihwb4u4q.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpihwb4u4q.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihwb4u4q.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihwb4u4q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpihwb4u4q.jl:23\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpihwb4u4q.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpihwb4u4q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpihwb4u4q.jl:24\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpihwb4u4q.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpihwb4u4q.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        contains(string, substring)\
    \ && push!(filtered, string)\n    end\n    return filtered\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  new_strs = []\n  for s in strings\n    if contains(s, substring)\n     \
    \ push!(new_strs, s)\n    end\n  end\n  return new_strs\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(string -> contains(string, substring), strings)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  res = String[]\n  for s in strings\n    if contains(s, substring)\n    \
    \  push!(res, s)\n    end\n  end\n  return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    indices = findin(substring, strings)\n    return strings[indices]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1yipnngb.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp1yipnngb.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp1yipnngb.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1yipnngb.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yipnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1yipnngb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1yipnngb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yipnngb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yipnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1yipnngb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp1yipnngb.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1yipnngb.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yipnngb.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp1yipnn"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if substring in string\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvo98v3r3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpvo98v3r3.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpvo98v3r3.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvo98v3r3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvo98v3r3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpvo98v3r3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return strings[findin.(strings, substring)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphzrslk3x.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmphzrslk3x.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphzrslk3x.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphzrslk3x.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzrslk3x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphzrslk3x.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmphzrslk3x.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzrslk3x.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzrslk3x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphzrslk3x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphzrslk3x.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphzrslk3x.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzrslk3x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphzrslk"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    ret = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(ret, s)\n        end\n    end\n    return ret\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if contains(s, substring)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for str_ in strings\n        if contains(str_, substring)\n\
    \            push!(filtered, str_)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occurin(substring, x), strings)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpidsuvbuy.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpidsuvbuy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: occurin\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmpidsuvbuy.jl:8\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpidsuvbuy.jl:8\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpidsuvbuy.jl:16 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpidsuvbuy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpidsuvbuy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: occurin\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmpidsuvbuy.jl:8\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpidsuvbuy.jl:8\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpidsuvbuy.jl:17 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpidsuvbuy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpidsuvbuy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: occurin not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmpidsuvbuy.jl:8\n   [2]\
    \ filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./a"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    out = []\n    for s in strings\n        if occursin(substring, s)\n  \
    \          push!(out, s)\n        end\n    end\n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    string_indices = findin(strings, substring)\n    return [strings[i] for\
    \ i in string_indices]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpoojs095e.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpoojs095e.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpoojs095e.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoojs095e.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoojs095e.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpoojs095e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpoojs095e.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoojs095e.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoojs095e.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpoojs095e.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpoojs095e.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoojs095e.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoojs095e.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpoojs09"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return strings[contains.(strings, substring)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings_filtered = []\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(strings_filtered, string)\n        end\n    end\n\
    \    return strings_filtered\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if ismatch(r\"$substring\"\
    , s)\n            push!(filtered, s)\n        end\n    end\n    return filtered\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxcx1zdss.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpxcx1zdss.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpxcx1zdss.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxcx1zdss.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcx1zdss.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxcx1zdss.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpxcx1zdss.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxcx1zdss.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcx1zdss.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxcx1zdss.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: ismatch not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmpxcx1zdss.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcx1zdss.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcx1zdss.jl:21\nTest Summary:\
    \ | P"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for i in strings\n        if has_substring(i,\
    \ substring)\n            push!(filtered, i)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpml__1jiw.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpml__1jiw.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: has_substring\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpml__1jiw.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpml__1jiw.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpml__1jiw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpml__1jiw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: has_substring\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpml__1jiw.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpml__1jiw.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpml__1jiw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpml__1jiw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: has_substring not defined\n  Stacktrace:\n\
    \   [1] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpml__1jiw.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpml__1jiw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpml__1jiw.jl:20"
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if contains(s, substring)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(s -> contains(s, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    valid_strings = String[]\n    for string in strings\n        if substring\
    \ in string\n            push!(valid_strings, string)\n        end\n    end\n\
    \    return valid_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpymdic0zv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpymdic0zv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpymdic0zv.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpymdic0zv.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpymdic0zv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpymdic0zv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpymdic0zv.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpymdic0zv.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpymdic0zv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpymdic0zv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] filter_by_substring(strings::Vec"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    # This function is already implemented for you.\n    # Follow along to\
    \ understand its behavior.\n    results = String[]\n    for s in strings\n   \
    \     if occursin(substring, s)\n            push!(results, s)\n        end\n\
    \    end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpasp_ta51.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpasp_ta51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpasp_ta51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpasp_ta51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpasp_ta51.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpasp_ta51.jl:17 [inlined"
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    @assert length(substring) > 0 \"filter_by_substring: substring must be\
    \ non-empty\"\n    return strings[findin(strings, substring)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5cpk1q5f.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp5cpk1q5f.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5cpk1q5f.jl:9\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5cpk1q5f.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5cpk1q5f.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp5cpk1q5f.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp5cpk1q5f.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5cpk1q5f.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5cpk1q5f.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp5cpk1q5f.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5cpk1q5f.jl:9\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5cpk1q5f.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5cpk1q5f.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp5cpk1q"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = Vector{String}()\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = [ string for string in strings if substring in string ]\n \
    \   return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfyweza0h.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpfyweza0h.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfyweza0h.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpfyweza0h.jl:17 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpfyweza0h.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpfyweza0h.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpfyweza0h.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpfyweza0h.jl:18 [inlined"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if contains(s, substring)]\nend\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979970
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substr(s, substring)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiv2ta3c0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpiv2ta3c0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: substr\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \      @ Main /tmp/tmpiv2ta3c0.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpiv2ta3c0.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpiv2ta3c0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpiv2ta3c0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: substr\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \      @ Main /tmp/tmpiv2ta3c0.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpiv2ta3c0.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/s"
  timestamp: 1659979973
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [x for x in strings if substring in x]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp42zc18k4.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp42zc18k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp42zc18k4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp42zc18k4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp42zc18k4.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmp42zc18k4.jl:17 [inlined]\n   [11] "
  timestamp: 1659979967
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(str -> contains(str, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgggd1v86.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpgggd1v86.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpgggd1v86.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgggd1v86.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgggd1v86.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpgggd1v86.jl:17 [in"
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(string -> contains(string, substring), strings)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979968
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = [string for string in strings if substring in string]\n   \
    \ return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpm2_b8pof.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpm2_b8pof.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpm2_b8pof.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpm2_b8pof.jl:17 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpm2_b8pof.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpm2_b8pof.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpm2_b8pof.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpm2_b8pof.jl:18 [inlined"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(e -> occursin(substring, e), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [ s for s in strings if substring in s ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvlxgf792.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpvlxgf792.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvlxgf792.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpvlxgf792.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvlxgf792.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvlxgf792.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvlxgf792.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpvlxgf792.jl:17 [inlined]\n   [11] "
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if find(s, substring) != nothing]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfwemhdwd.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfwemhdwd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \      @ Main /tmp/tmpfwemhdwd.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfwemhdwd.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfwemhdwd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfwemhdwd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \      @ Main /tmp/tmpfwemhdwd.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfwemhdwd.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for str_ in strings\n        if occursin(substring,\
    \ str_)\n            push!(filtered, str_)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_indexes = findin(strings, substring)\n    return strings[filter_indexes]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7_f4kzrs.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp7_f4kzrs.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp7_f4kzrs.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7_f4kzrs.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_f4kzrs.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7_f4kzrs.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp7_f4kzrs.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_f4kzrs.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_f4kzrs.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7_f4kzrs.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp7_f4kzrs.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7_f4kzrs.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_f4kzrs.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7_f4kz"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> occursin(substring, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> x in substring, strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_nm3zts9.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_nm3zts9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp_nm3zts9.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp_nm3zts9.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_nm3zts9.jl:16 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_nm3zts9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_nm3zts9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(x::String)\n     @ Main /tmp/tmp_nm3zts9.jl:8\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp_nm3zts9.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_nm3zts9.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_nm3zts9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_nm3zts9.jl:18\n  Test threw exception\n  Expression:"
  timestamp: 1659979973
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    array = Vector{String}()\n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(array, str)\n        end\n    end\n    return\
    \ array\nend\n \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings[findin(strings, substring)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplidhekdh.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmplidhekdh.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: findin not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhekdh.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhekdh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: findin\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmplidhekdh.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplidhekdh.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplidhekdh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplidhek"
  timestamp: 1659979969
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    res = Vector{String}()\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(res, s)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for string in strings\n        if occursin(substring,\
    \ string)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    selected = Vector{String}()\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(selected, s)\n        end\n    end\n    return\
    \ selected\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979972
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    out::Vector{String} = []\n    for st in strings\n        if contains(st,\
    \ substring)\n            push!(out, st)\n        end\n    end\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979972
