name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
  \ contains different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    # YOUR CODE HERE\n    max_uniqs = 0\n    max_uniq_word = \"\"\n\
    \    for word in words\n        uniqs = length(unique(word))\n        if uniqs\
    \ > max_uniqs\n            max_uniqs = uniqs\n            max_uniq_word = word\n\
    \        end\n    end\n    return max_uniq_word\nend", "    #initialize max_word\
    \ with the first word\n    max_word = words[1] \n    # find the maximum word in\
    \ the vector of words\n    for i in 2:length(words)\n        if unique_chars(words[i])\
    \ > unique_chars(max_word)\n            max_word = words[i]\n        end\n   \
    \ end\n    return max_word\nend\n    \n    ", "    word = \"\"\n    for i in 1:length(words)\n\
    \        if length(unique(words[i])) > length(unique(word))\n            word\
    \ = words[i]\n        end\n    end\n    word\nend", "    # this is a vector of\
    \ uniq characters in each word in vector\n    uniq_chars = [Set(collect(word))\
    \ for word in words]\n    # this is a vector of max uniq char for each word\n\
    \    max_uniq = [length(uniq_chars[i]) for i in 1:length(uniq_chars)]\n    # find\
    \ index of word with max number of uniq characters\n    max_index = findall(max_uniq\
    \ .== maximum(max_uniq))\n    # if more than one index, return first of them\n\
    \    if length(max_index) == 1\n        return words[max_index[1]]\n    else\n\
    \        # find index of word in lexicographical order\n        # sort words and\
    \ calculate index of first word in sorted list\n        sorted_index = findall(sort(words)\
    \ .== words[max_index[1]])\n        return words[sorted_index[1]]\n    end\nend",
  "    max = 0\n    index = 1\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max\n            max = length(unique(words[i]))\n            index = i\n \
    \       end\n    end\n    return words[index]\nend", "    max = 0\n    for word\
    \ in words\n        if length(unique(word)) > max\n            max = length(unique(word))\n\
    \            winner = word\n        end\n    end\n    return winner\nend\nfind_max([\"\
    name\", \"of\", \"string\"])\nfind_max([\"name\", \"enam\", \"game\"])\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])", "    max_count = count_unique(words[1])\n    max_word\
    \ = words[1]\n    for i = 2:length(words)\n        if count_unique(words[i]) >\
    \ max_count\n            max_count = count_unique(words[i])\n            max_word\
    \ = words[i]\n        end\n    end\n    return max_word\nend", "    maxlen = 0\n\
    \    maxword = \"\"\n    for word in words\n        if length(unique(word)) >\
    \ maxlen\n            maxlen = length(unique(word))\n            maxword = word\n\
    \        end\n    end\n    return maxword\nend", "    max_len = length(words[1])\n\
    \    max_word = words[1]\n    for i = 2:length(words)\n        if length(words[i])\
    \ > max_len\n            max_len = length(words[i])\n            max_word = words[i]\n\
    \        end\n    end\n    return max_word\nend", "    # initialising variables\n\
    \    max_unique = 0\n    max_unique_word = \"\"\n    # determining max unique\
    \ chars\n    for word in words\n        unique_char = length(unique(word))\n \
    \       if unique_char > max_unique\n            max_unique = unique_char\n  \
    \          max_unique_word = word\n        end\n    end\n    return max_unique_word\n\
    end", "    # 3\n    for i = length(words):-1:1 \n        for j = 1:i-1 \n    \
    \        if length(words[j]) < length(words[j+1]) \n                words[j],\
    \ words[j+1] = words[j+1], words[j] \n            end \n        end \n    end\
    \ \n    # 4\n    for i = 1:length(words) \n        k = 1 \n        while k <=\
    \ length(words[i]) \n            j = 1 \n            while j <= length(words[i])\
    \ \n                if j > k && words[i][k] == words[i][j] \n                \
    \    words[i] = replace(words[i], j, \"\") \n                end \n          \
    \      j += 1 \n            end \n            k += 1 \n        end \n    end \n\
    \    # 5\n    res = words[1] \n    # 6\n    for i = 2:length(words) \n       \
    \ if length(words[i]) == length(res) \n            if words[i] < res \n      \
    \          res = words[i] \n            end \n        elseif length(words[i])\
    \ > length(res) \n            res = words[i] \n        end \n    end \n    return\
    \ res \nend ", "    s = sort(words, by=length, rev=true)\n    for i in eachindex(s)\n\
    \        if (length(unique(s[i])) == length(s[i]))\n            return s[i]\n\
    \        end\n    end\nend", "    max_word = \"\"\n    max_count = 0\n    for\
    \ word in words\n        count = length(unique(word))\n        if count > max_count\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "    max_uniq = []\n    max_val = 0\n    for\
    \ word in words\n        if max_val < length(unique(word))\n            max_val\
    \ = length(unique(word))\n            max_uniq = [word]\n        elseif max_val\
    \ == length(unique(word))\n            push!(max_uniq, word)\n        end\n  \
    \  end\n    return sort(max_uniq)[1]\nend", "    max_word = words[1]\n    max_word_length\
    \ = length(unique(words[1]))\n    for i in 1:length(words)\n        current_length\
    \ = length(unique(words[i]))\n        if current_length > max_word_length\n  \
    \          max_word = words[i]\n            max_word_length = current_length\n\
    \        end\n    end\n    return max_word\nend", "    \"\"\"\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word\
    \ in words\n        if word_len(word) > max_len\n            max_len = word_len(word)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    temp_dict = Dict{String, Int}()\n    for i in words\n        temp_dict[i] =\
    \ length(unique(i))\n    end\n    max_val = maximum(temp_dict)\n    max_string\
    \ = findall(value -> value == max_val, temp_dict)\n    min_string = findmin(max_string)\n\
    \    return min_string\nend", "    max_word = words[1]\n    max_len = 0\n    for\
    \ w in words\n        if length(unique(w)) > max_len\n            max_word = w\n\
    \            max_len = length(unique(w))\n        end\n    end\n    return max_word\n\
    end", "    max_idx = 1\n    max_uniq = length(unique(words[1]))\n    for i in\
    \ 2:length(words)\n        if length(unique(words[i])) > max_uniq\n          \
    \  max_idx = i\n            max_uniq = length(unique(words[i]))\n        end\n\
    \    end\n    return words[max_idx]\nend", "    max_length = 0\n    max_word =\
    \ \"\"\n    for word in words\n        unique_count = length(unique(collect(word)))\n\
    \        if unique_count > max_length\n            max_length = unique_count\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
