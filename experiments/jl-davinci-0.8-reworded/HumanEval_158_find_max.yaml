name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
  \ contains different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    # YOUR CODE HERE\n    max_uniqs = 0\n    max_uniq_word = \"\"\n\
    \    for word in words\n        uniqs = length(unique(word))\n        if uniqs\
    \ > max_uniqs\n            max_uniqs = uniqs\n            max_uniq_word = word\n\
    \        end\n    end\n    return max_uniq_word\nend", "    #initialize max_word\
    \ with the first word\n    max_word = words[1] \n    # find the maximum word in\
    \ the vector of words\n    for i in 2:length(words)\n        if unique_chars(words[i])\
    \ > unique_chars(max_word)\n            max_word = words[i]\n        end\n   \
    \ end\n    return max_word\nend\n    \n    ", "    word = \"\"\n    for i in 1:length(words)\n\
    \        if length(unique(words[i])) > length(unique(word))\n            word\
    \ = words[i]\n        end\n    end\n    word\nend", "    # this is a vector of\
    \ uniq characters in each word in vector\n    uniq_chars = [Set(collect(word))\
    \ for word in words]\n    # this is a vector of max uniq char for each word\n\
    \    max_uniq = [length(uniq_chars[i]) for i in 1:length(uniq_chars)]\n    # find\
    \ index of word with max number of uniq characters\n    max_index = findall(max_uniq\
    \ .== maximum(max_uniq))\n    # if more than one index, return first of them\n\
    \    if length(max_index) == 1\n        return words[max_index[1]]\n    else\n\
    \        # find index of word in lexicographical order\n        # sort words and\
    \ calculate index of first word in sorted list\n        sorted_index = findall(sort(words)\
    \ .== words[max_index[1]])\n        return words[sorted_index[1]]\n    end\nend",
  "    max = 0\n    index = 1\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max\n            max = length(unique(words[i]))\n            index = i\n \
    \       end\n    end\n    return words[index]\nend", "    max = 0\n    for word\
    \ in words\n        if length(unique(word)) > max\n            max = length(unique(word))\n\
    \            winner = word\n        end\n    end\n    return winner\nend\nfind_max([\"\
    name\", \"of\", \"string\"])\nfind_max([\"name\", \"enam\", \"game\"])\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])", "    max_count = count_unique(words[1])\n    max_word\
    \ = words[1]\n    for i = 2:length(words)\n        if count_unique(words[i]) >\
    \ max_count\n            max_count = count_unique(words[i])\n            max_word\
    \ = words[i]\n        end\n    end\n    return max_word\nend", "    maxlen = 0\n\
    \    maxword = \"\"\n    for word in words\n        if length(unique(word)) >\
    \ maxlen\n            maxlen = length(unique(word))\n            maxword = word\n\
    \        end\n    end\n    return maxword\nend", "    max_len = length(words[1])\n\
    \    max_word = words[1]\n    for i = 2:length(words)\n        if length(words[i])\
    \ > max_len\n            max_len = length(words[i])\n            max_word = words[i]\n\
    \        end\n    end\n    return max_word\nend", "    # initialising variables\n\
    \    max_unique = 0\n    max_unique_word = \"\"\n    # determining max unique\
    \ chars\n    for word in words\n        unique_char = length(unique(word))\n \
    \       if unique_char > max_unique\n            max_unique = unique_char\n  \
    \          max_unique_word = word\n        end\n    end\n    return max_unique_word\n\
    end", "    # 3\n    for i = length(words):-1:1 \n        for j = 1:i-1 \n    \
    \        if length(words[j]) < length(words[j+1]) \n                words[j],\
    \ words[j+1] = words[j+1], words[j] \n            end \n        end \n    end\
    \ \n    # 4\n    for i = 1:length(words) \n        k = 1 \n        while k <=\
    \ length(words[i]) \n            j = 1 \n            while j <= length(words[i])\
    \ \n                if j > k && words[i][k] == words[i][j] \n                \
    \    words[i] = replace(words[i], j, \"\") \n                end \n          \
    \      j += 1 \n            end \n            k += 1 \n        end \n    end \n\
    \    # 5\n    res = words[1] \n    # 6\n    for i = 2:length(words) \n       \
    \ if length(words[i]) == length(res) \n            if words[i] < res \n      \
    \          res = words[i] \n            end \n        elseif length(words[i])\
    \ > length(res) \n            res = words[i] \n        end \n    end \n    return\
    \ res \nend ", "    s = sort(words, by=length, rev=true)\n    for i in eachindex(s)\n\
    \        if (length(unique(s[i])) == length(s[i]))\n            return s[i]\n\
    \        end\n    end\nend", "    max_word = \"\"\n    max_count = 0\n    for\
    \ word in words\n        count = length(unique(word))\n        if count > max_count\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "    max_uniq = []\n    max_val = 0\n    for\
    \ word in words\n        if max_val < length(unique(word))\n            max_val\
    \ = length(unique(word))\n            max_uniq = [word]\n        elseif max_val\
    \ == length(unique(word))\n            push!(max_uniq, word)\n        end\n  \
    \  end\n    return sort(max_uniq)[1]\nend", "    max_word = words[1]\n    max_word_length\
    \ = length(unique(words[1]))\n    for i in 1:length(words)\n        current_length\
    \ = length(unique(words[i]))\n        if current_length > max_word_length\n  \
    \          max_word = words[i]\n            max_word_length = current_length\n\
    \        end\n    end\n    return max_word\nend", "    \"\"\"\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word\
    \ in words\n        if word_len(word) > max_len\n            max_len = word_len(word)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    temp_dict = Dict{String, Int}()\n    for i in words\n        temp_dict[i] =\
    \ length(unique(i))\n    end\n    max_val = maximum(temp_dict)\n    max_string\
    \ = findall(value -> value == max_val, temp_dict)\n    min_string = findmin(max_string)\n\
    \    return min_string\nend", "    max_word = words[1]\n    max_len = 0\n    for\
    \ w in words\n        if length(unique(w)) > max_len\n            max_word = w\n\
    \            max_len = length(unique(w))\n        end\n    end\n    return max_word\n\
    end", "    max_idx = 1\n    max_uniq = length(unique(words[1]))\n    for i in\
    \ 2:length(words)\n        if length(unique(words[i])) > max_uniq\n          \
    \  max_idx = i\n            max_uniq = length(unique(words[i]))\n        end\n\
    \    end\n    return words[max_idx]\nend", "    max_length = 0\n    max_word =\
    \ \"\"\n    for word in words\n        unique_count = length(unique(collect(word)))\n\
    \        if unique_count > max_length\n            max_length = unique_count\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    arr = string.(words)\n    arr1 = string.(words)\n    n = length(arr)\n    for\
    \ i in 1:n \n        arr[i] = String(unique(arr[i]))\n    end\n    t = count_unique(arr[1])\n\
    \    for i in 2:n\n        if count_unique(arr[i]) > t\n            t = count_unique(arr[i])\n\
    \            k = i\n        end\n    end\n    find_max = arr1[k]\nend", "    #\
    \ number of unique chars in each word\n    v = [size(unique(word), 1) for word\
    \ in words]\n    idx = findmax(v)[2]\n    return words[idx]\nend", "    num_words\
    \ = length(words)\n    num_unique_char = zeros(num_words)\n    for (i, word) in\
    \ enumerate(words)\n        num_unique_char[i] = length(unique(word))\n    end\n\
    \    max_idx = indmax(num_unique_char)\n    return words[max_idx]\nend", "   \
    \ # Find the word with the most unique characters.\n    max = 0\n    max_word\
    \ = \"\"\n    for word in words\n        unique_count = length(unique(word))\n\
    \        if unique_count > max\n            max = unique_count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_n_unique =\
    \ 0\n    best_word = \"\"\n    for word in words\n        unique_chars = unique(word)\n\
    \        n_unique = length(unique_chars)\n        if n_unique > max_n_unique\n\
    \            max_n_unique = n_unique\n            best_word = word\n        elseif\
    \ n_unique == max_n_unique\n            best_word = min(best_word, word)\n   \
    \     end\n    end\n    return best_word\nend", "    if length(words)==0\n   \
    \     return \"\"\n    end\n    index=1\n    for i=2:length(words)\n        if\
    \ length(unique(words[i]))>length(unique(words[index]))\n            index=i\n\
    \        elseif length(unique(words[i]))==length(unique(words[index])) && words[i]<words[index]\n\
    \            index=i\n        end\n    end\n    return words[index]\nend", " \
    \   best_word = \"\"\n    best_word_char_count = 0\n    for word in words\n  \
    \      # Would be nice to use length(Set(word))\n        # but Julia doesn't have\
    \ the Set type yet\n        word_char_count = length(unique(word))\n        if\
    \ word_char_count > best_word_char_count\n            best_word = word\n     \
    \       best_word_char_count = word_char_count\n        end\n    end\n    return\
    \ best_word\nend", "    longest_unique_chars_word = \"\"\n    max_unique_chars\
    \ = 0\n    for word in words\n        unique_chars = length(unique(word))\n  \
    \      if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            longest_unique_chars_word = word\n        end\n    end\n    return\
    \ longest_unique_chars_word\nend", "    if length(words) == 0 \n        error(\"\
    Vector is empty!\")\n    end\n    max_string = words[1]\n    max_unique = unique_characters(max_string)\n\
    \    for i in 2:length(words)\n        if unique_characters(words[i]) > max_unique\n\
    \            max_string = words[i]\n            max_unique = unique_characters(max_string)\n\
    \        end\n    end\n    return max_string\nend", "    max_word = \"\"\n   \
    \ max_unique_chars = 0\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max_unique_chars\n            max_unique_chars = length(unique(words[i]))\n\
    \            max_word = words[i]\n        end\n    end\n    return max_word\n\
    end", "    if length(words) == 0\n        return \"\"\n    end\n    result = words[1]\n\
    \    max_unique = length(unique(result))\n    for i in 2:length(words)\n     \
    \   if max_unique < length(unique(words[i]))\n            result = words[i]\n\
    \            max_unique = length(unique(result))\n        end\n    end\n    return\
    \ result\nend", "    n = length(words)\n    i = 1\n    while i < n\n        if\
    \ length(unique(words[i])) > length(unique(words[i+1]))\n            return words[i]\n\
    \        else\n            return words[i+1]\n        end\n        i += 1\n  \
    \  end\nend", "    max_count::Int64 = 0\n    max_word::String = \"\"\n    for\
    \ word in words\n        if length(unique(word)) > max_count\n            max_count\
    \ = length(unique(word))\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    # Initialize a variable to keep track of the\
    \ word with the most unique\n    # characters.\n    word_with_most_uniques = words[1]\n\
    \    # Initialize a variable to keep track of the number of unique characters\n\
    \    # that word has.\n    max_unique_chars = length(unique(words[1]))\n    #\
    \ Iterate over the words.\n    for i = 2:length(words)\n        # Get the number\
    \ of unique characters in the current word.\n        num_uniques = length(unique(words[i]))\n\
    \        # Check if it is the new maximum.\n        if num_uniques > max_unique_chars\n\
    \            # Update the maximum number of unique characters.\n            max_unique_chars\
    \ = num_uniques\n            # Update the word with the most unique characters.\n\
    \            word_with_most_uniques = words[i]\n        end\n    end\n    # Return\
    \ the word with the most unique characters.\n    return word_with_most_uniques\n\
    end", "    # find the len of each word\n    # set diff to 0\n    # create a string\
    \ to store max word\n    # iterate through list of words\n        # iterate through\
    \ the letters of each word\n            # if letter in list_of_letters:\n    \
    \            # do nothing\n            # else:\n                # add it to list\
    \ of letters\n                # diff = diff + 1\n        # if diff > diff_of_max_word:\n\
    \            # diff_of_max_word = diff\n            # max_word = current_word\n\
    \        # diff = 0\n    # return max_word\n    diff = 0\n    diff_of_max_word\
    \ = 0\n    max_word = \"\"\n    for word in words\n        for letter in word\n\
    \            if letter in list_of_letters:\n                # do nothing\n   \
    \         else:\n                push!(list_of_letters, letter)\n            \
    \    diff = diff + 1\n        end\n        if diff > diff_of_max_word\n      \
    \      diff_of_max_word = diff\n            max_word = word\n        end\n   \
    \     diff = 0\n        list_of_letters = []\n    end\n    return max_word\nend",
  "    max_len = 0\n    max_word = \"\"\n    for w in words\n        if length(unique(w))\
    \ > max_len\n            max_len = length(unique(w))\n            max_word = w\n\
    \        end\n    end\n    return max_word\nend", "    max_word = \"\"\n    max_count\
    \ = 0\n    for word in words\n        count = 0\n        for c in word\n     \
    \       if !(c in max_word)\n                count += 1\n            end\n   \
    \     end\n        if count > max_count\n            max_word = word\n       \
    \     max_count = count\n        end\n    end\n    return max_word\nend", "  \
    \  num_unique = Dict()\n    for word in words\n        num_unique[word] = length(unique(word))\n\
    \    end\n    max_unique = maximum(values(num_unique))\n    for key in keys(num_unique)\n\
    \        if num_unique[key] == max_unique\n            return key\n        end\n\
    \    end\nend", "    ch = Vector{String}()\n    for word in words\n        append!(ch,\
    \ word)\n    end\n    p = 0\n    t = 0\n    for word in ch\n        if length(unique(word))\
    \ >= p\n            t = word\n            p = length(unique(word))\n        end\n\
    \    end\n    return t\nend", "    maxlength = 0\n    maxword = \"\"\n    for\
    \ word in words\n        letters = Set(collect(word))\n        if length(letters)\
    \ > maxlength\n            maxlength = length(letters)\n            maxword =\
    \ word\n        end\n    end\n    return maxword\nend", "    n = length(words)\n\
    \    max = 0\n    ret = 0\n    for i in 1:n\n        t = length(unique(collect(words[i])))\n\
    \        if t > max\n            max = t\n            ret = i\n        end\n \
    \   end\n    return words[ret]\nend", "    max_word = \"\"\n    max_len = 0\n\
    \    for w in words\n        unique_letters = Set()\n        for l in w\n    \
    \        push!(unique_letters, l)\n        end\n        if length(unique_letters)\
    \ > max_len ||\n            (length(unique_letters) == max_len && w < max_word)\n\
    \            max_word = w\n            max_len = length(unique_letters)\n    \
    \    end\n    end\n    return max_word\nend", "    max_string = \"\"\n    for\
    \ word in words\n        if length(unique(word)) > length(unique(max_string))\n\
    \            max_string = word\n        end\n    end\n    return max_string\n\
    end", "    \n    max_chars::Int = 0\n    max_word::String = \"\"\n    \n    for\
    \ word in words\n        num_chars::Int = length(unique(word))\n        if num_chars\
    \ > max_chars\n            max_chars = num_chars\n            max_word = word\n\
    \        end\n    end\n    \n    return max_word\nend", "    min_length, max_unique\
    \ = length(words[1]), 0\n    @inbounds for i in 2:length(words)\n        max_unique\
    \ = max(max_unique, length(setdiff(words[i], words[i-1])))\n        min_length\
    \ = min(min_length, length(words[i]))\n    end\n    @inbounds for i in 1:length(words)\n\
    \        length_ = length(words[i])\n        if length_ == min_length && length_(setdiff(words[i],\
    \ words[i-1])) == max_unique\n            return words[i]\n        end\n    end\n\
    end", "    output = Vector{String}()\n    max_length = 0\n    for word in words\n\
    \        # If the word is longer than the other words, \n        # it will have\
    \ more unique characters so we \n        # don't need to check it\n        if\
    \ length(word) > max_length\n            output = [word]\n            max_length\
    \ = length(word)\n        # If the word is equal to the max length\n        #\
    \ it might be the word with the most\n        # unique characters\n        elseif\
    \ length(word) == max_length\n            output = [word]\n        end\n    end\n\
    \    return output[1]\nend", "    # we will use a dictionary to count the number\
    \ of unique characters\n    # in a given word. The unique character is the key\
    \ and the value is the \n    # count. The count will be 1 as we only care if it\
    \ is unique or not.\n    # we will use a vector to compare the result of the computation\
    \ of the \n    # words based on the maximum number of unique characters. When\
    \ two words\n    # have the same number of unique characters, we will choose the\
    \ one that \n    # is lexicographically smaller.\n    # intialize the maximum\
    \ number of unique characters to 0\n    # initialize the index of the word with\
    \ the maximum number of unique \n    # characters to 0 \n    max = 0\n    index\
    \ = 0\n    for i in 1:length(words)\n        dictionary = Dict{String,Int}()\n\
    \        for j in 1:length(words[i])\n            dict_key = words[i][j]\n   \
    \         if haskey(dictionary, dict_key)\n                dictionary[dict_key]\
    \ += 1\n            else\n                dictionary[dict_key] = 1\n         \
    \   end\n        end\n        if length(dictionary) > max\n            max = length(dictionary)\n\
    \            index = i\n        end\n    end\n    return words[index]\nend", " \
    \   max_word = words[1]\n    max_word_freq = Dict()\n    for word in words\n \
    \       for char in word\n            if get(max_word_freq, char, 0) == 0\n  \
    \              max_word_freq[char] = 1\n            end\n        end\n       \
    \ if length(max_word_freq) > length(Dict())\n            return max_word\n   \
    \     end\n        max_word_freq = Dict()\n    end\n    return max_word\nend",
  "    max_length = 0\n    max_string = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_string\
    \ = word\n        end\n    end\n    return max_string\nend", "    max_length =\
    \ 0\n    max_word = words[1]\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_length\n            max_length = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    max_unique = 0\n    max_unique_word = \"\"\n    for word in words\n       \
    \ current_unique = length(unique(collect(word)))\n        if current_unique >\
    \ max_unique\n            max_unique = current_unique\n            max_unique_word\
    \ = word\n        elseif current_unique == max_unique\n            if word < max_unique_word\n\
    \                max_unique_word = word\n            end\n        end\n    end\n\
    \    return max_unique_word\nend", "    max_count = 0\n    max_str = \"\"\n  \
    \  for word in words\n        temp_count = Set(word)\n        if length(temp_count)\
    \ > max_count\n            max_count = length(temp_count)\n            max_str\
    \ = word\n        end\n    end\n    return max_str\nend", "    #initialize empty\
    \ vector\n    count_unique_characters = []\n    #iterate through every word in\
    \ vector\n    for word in words\n        #calculate unique characters in word\
    \ and append to vector\n        push!(count_unique_characters, length(unique(word)))\n\
    \    end\n    #store index of maximum value\n    i = findmax(count_unique_characters)[2]\n\
    \    #return max unique char string\n    return words[i]\nend", "    maxunique\
    \ = 0\n    maxunique_word = \" \"\n    for i = 1:length(words)\n        numunique\
    \ = length(unique(words[i]))\n        if (numunique > maxunique)\n           \
    \ maxunique = numunique\n            maxunique_word = words[i]\n        elseif\
    \ (numunique == maxunique)\n            if words[i] < maxunique_word\n       \
    \         maxunique_word = words[i]\n            end\n        end\n    end\n \
    \   return maxunique_word\nend", "    max_word = words[1]\n    max_uniq = 0\n\
    \    uniq_chars = Set()\n    for word in words\n        uniq_chars = Set()\n \
    \       for ch in word\n            push!(uniq_chars, ch)\n        end\n     \
    \   if length(uniq_chars) > max_uniq\n            max_uniq = length(uniq_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    m = length(words[1])\n    max_word = words[1]\n    for word in words\n    \
    \    if length(unique(word)) > m\n            m = length(unique(word))\n     \
    \       max_word = word\n        end\n    end\n    return max_word\nend", "  \
    \  return reduce(unique_max, words)\nend", "    # Initialize a dictionary\n  \
    \  dic = Dict()", "    max_word = words[1]\n    max_length = 0", "    max_word\
    \ = words[1]\n    max_unique = unique_count(max_word)\n    for word in words[2:end]\n\
    \        unique = unique_count(word)\n        if unique > max_unique || (unique\
    \ == max_unique && word < max_word)\n            max_word = word\n           \
    \ max_unique = unique\n        end\n    end\n    return max_word\nend", "    uniq_char_count\
    \ = map(str -> length(Set(str)), words)\n    index = findmax(uniq_char_count)[2]\n\
    \    words[index]\nend", "    temp_word = \"\"\n    max_unique = 0\n    for x\
    \ in words\n        if length(unique(x)) >= max_unique\n            temp_word\
    \ = x\n            max_unique = length(unique(x))\n        end\n    end\n    return\
    \ temp_word\nend", "    max_len = 0\n    max_str = \"\"\n    for word in words\n\
    \        unique_chars = Set(word)\n        curr_len = length(unique_chars)\n \
    \       if curr_len > max_len\n            max_len = curr_len\n            max_str\
    \ = word\n        elseif curr_len == max_len\n            max_str = ifelse(word\
    \ > max_str, word, max_str)\n        end\n    end\n    return max_str\nend", " \
    \   best_string = \"\"\n    best_set = Set()\n    best_size = 0\n    for word\
    \ in words\n        curr_set = Set(word)\n        if length(curr_set) > best_size\
    \ || \n            (length(curr_set) == best_size && word < best_string)\n   \
    \         best_string = word\n            best_set = curr_set\n            best_size\
    \ = length(curr_set)\n        end\n    end\n    return best_string\nend", "  \
    \  m = 0\n    cnt = 0\n    maxword = \"\"\n    for w in words\n        s = Set(w)\n\
    \        if length(s) > m\n            m = length(s)\n            maxword = w\n\
    \        end\n    end\n    return maxword\nend", "    maxLength = 0\n    maxString\
    \ = \"\"\n    for word in words\n        if(length(unique(word)) > maxLength)\n\
    \            maxLength = length(unique(word))\n            maxString = word\n\
    \        end\n    end\n    return maxString\nend", "    n = length(words)\n  \
    \  max = 0\n    max_word = \"\"\n    for i in 1:n\n        count = count_unique(words[i])\n\
    \        if count > max\n            max = count\n            max_word = words[i]\n\
    \        elseif count == max\n            if words[i] < max_word\n           \
    \     max_word = words[i]\n            end\n        end\n    end\n    return max_word\n\
    end", "    ret_string = \"\"\n    ret_size = 0\n    for word in words\n      \
    \  word_set = Set(word)\n        if length(word_set) > ret_size\n            ret_string\
    \ = word\n            ret_size = length(word_set)\n        end\n    end\n    return\
    \ ret_string\nend", "    # words = [\"name\", \"of\", \"string\"]\n    string_to_return\
    \ = \"\"\n    # set a max to compare against\n    max_unique_characters = 0 \n\
    \    for word in words\n        # if the word is larger than the current word,\
    \ do nothing.\n        if length(word) <= max_unique_characters\n            continue\n\
    \        end\n        # make an empty dictionary to store the characters\n   \
    \     characters = Dict{String, Int}()\n        # iterate through the word\n \
    \       for char in word\n            if haskey(characters, char)\n          \
    \      continue\n            else\n                characters[char] = 1\n    \
    \        end\n        end\n        if length(characters) > max_unique_characters\n\
    \            max_unique_characters = length(characters)\n            string_to_return\
    \ = word\n        end\n    end\n    return string_to_return\nend", "    \"\"\"\
    Finds the maximum length of a string\"\"\"\n    max = 0\n    for w in words\n\
    \        if length(w) > max\n            max = length(w)\n        end\n    end\n\
    \    max\nend", "    # find the word with maximum number of unique characters\n\
    \    # if multiple strings have maximum number of unique characters, return the\n\
    \    # one which comes first in lexicographical order\n    word = \"\"\n    num_chars\
    \ = 0\n    for w in words\n        # w = words[1]\n        if length(unique(w))\
    \ > num_chars\n            word = w\n            num_chars = length(unique(w))\n\
    \        end\n    end\n    return word\nend", "    maxchar = 0\n    maxstr = \"\
    \"\n    for word in words\n        unique_chars = unique(word)\n        if length(unique_chars)\
    \ > maxchar\n            maxchar = length(unique_chars)\n            maxstr =\
    \ word\n        end\n    end\n    return maxstr\nend", "    \"\"\"\"\"\"\n   \
    \ length = size(words, 1)\n    if length == 0\n        return \"\"\n    end\n\
    \    max_word = words[1]\n    max_len = length(unique(max_word))\n    for i =\
    \ 2:length\n        word = words[i]\n        len = length(unique(word))\n    \
    \    if len > max_len || (len == max_len && word < max_word)\n            max_word\
    \ = word\n            max_len = len\n        end\n    end\n    return max_word\n\
    end\n \n@testset \"Test for find_max\" begin\n    @test find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    @test find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n    @test find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    \nend\n ", "    uniques = length.(Set.(words)) # unique number of characters\n\
    \    maxindex = findmax(uniques)[2]\n    return words[maxindex]\nend", "    return\
    \ indmax(map(s -> length(Set(s)), words))\nend", "    num_unique_chars = [length(unique(s))\
    \ for s in words]\n    i = argmax(num_unique_chars)\n    return words[i]\nend",
  "    # Write your function here\n    max_word_index = 0\n    max_num_unique_char\
    \ = length(unique(words[1]))\n    for word_index in 2:length(words)\n        current_num_unique_char\
    \ = length(unique(words[word_index]))\n        if current_num_unique_char > max_num_unique_char\n\
    \            max_num_unique_char = current_num_unique_char\n            max_word_index\
    \ = word_index\n        end\n    end\n    return words[max_word_index]\nend",
  "    (word, m_word, n) = (\"\", \"\", 0)\n    for i in 1:length(words)\n       \
    \ word = words[i]\n        if length(unique(word)) > n\n            n = length(unique(word))\n\
    \            m_word = word\n        end\n    end\n    return m_word\nend", " \
    \   maximum = 0\n    for i in 1:length(words)\n        # Test if there are any\
    \ repeating characters in the word\n        if length(Set(words[i])) > maximum\n\
    \            maximum = length(Set(words[i]))\n            word = words[i]\n  \
    \      end\n    end\n    return word\nend", "    max_length = maximum(map(length,\
    \ words)) # find the max number of unique characters in the list\n    words_sorted\
    \ = sort(words) # sort the list of words\n    words_max_length = [] # create an\
    \ empty list to store the strings with max number of characters\n    for word\
    \ in words_sorted # iterate through the list\n        if length(word) == max_length\
    \ # if the length of the word is equal to the max number of characters\n     \
    \       push!(words_max_length, word) # append the word to the new list \n   \
    \     end\n    end\n    return words_max_length[1] # print the first word in the\
    \ new list\nend", "    if length(words)==0\n        return \"\"\n    end\n   \
    \ if length(words)==1\n        return words[1]\n    end\n    word_0=words[1]\n\
    \    max_unique=length(unique(word_0))\n    max_ind=1\n    for i in 2:length(words)\n\
    \        unique_num=length(unique(words[i]))\n        if unique_num>max_unique\n\
    \            max_unique=unique_num\n            max_ind=i\n        elseif unique_num==max_unique\n\
    \            if words[i]<word_0\n                max_ind=i\n            end\n\
    \        end\n    end\n    return words[max_ind]\nend", "    max_len = -1\n  \
    \  max_len_word = \"\"\n    for word in words\n        unique_len = length(unique(word))\n\
    \        if unique_len > max_len\n            max_len = unique_len\n         \
    \   max_len_word = word\n        end\n    end\n    return max_len_word\nend",
  "    max_i = 0\n    max_char = 0\n    for (i, word) in enumerate(words)\n      \
    \  nchar = length(unique(word))\n        if nchar > max_char\n            max_i\
    \ = i\n            max_char = nchar\n        end\n    end\n    return words[max_i]\n\
    end", "    max_word::String = words[1]\n    for word in words\n        if max_word\
    \ < word\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_word = nothing\n    for i in 1:length(words)\n        if max_word\
    \ == nothing || length(unique(words[i])) > length(unique(max_word))\n        \
    \    max_word = words[i]\n        end\n    end\n    return max_word\nend", " \
    \   max_score::Int64 = 0\n    output::String = \"\"\n    for word in words\n \
    \       # check the score for the current word\n        score::Int64 = length(unique(word))\n\
    \        if score > max_score\n            max_score = score\n            output\
    \ = word\n        elseif score == max_score\n            # if the score is the\
    \ same, compare the lexicographical order\n            if word < output\n    \
    \            output = word\n            end\n        end\n    end\n    return\
    \ output\nend", "    words_dict = Dict{String, Int}()\n    for word in words\n\
    \        words_dict[word] = unique_char_count(word)\n    end\n    max_word = maximum(words_dict,\
    \ by=values)\n    return max_word[1]\nend\n    \n@testset \"Test find_max\" begin\n\
    \    @test find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    @test find_max([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n    @test find_max([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\"\nend", "    max_count = 0\n    max_word = \"\"\n\
    \    for word in words\n        count = length(unique(word))\n        if count\
    \ > max_count\n            max_count = count\n            max_word = word\n  \
    \      end\n    end\n    return max_word\nend", "    num = zeros(length(words))\n\
    \    for i = 1:length(words)\n        num[i] = find_max(words[i])\n    end\n \
    \   return words[argmax(num)]\nend", "    n = length(words)\n    max = [0 for\
    \ i in 1:n]\n    for i in 1:n\n        max[i] = length(unique(words[i]))\n   \
    \ end\n    ind = argmax(max)\n    return words[ind]\nend\n@test find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n@test find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n@test find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
  "   \n    max = 0\n    s = \"\"\n    for i in words\n        if length(unique(i))\
    \ > max\n            max = length(unique(i))\n            s = i\n        end\n\
    \    end\n    return s\nend", "    index_unique = collect(1:length(words))\n \
    \   index_length = collect(1:length(words))\n    for i in 1:length(words)\n  \
    \      index_unique[i] = length(unique(collect(words[i])))\n        index_length[i]\
    \ = length(words[i])\n    end\n    println(index_unique)\n    println(index_length)\n\
    \    if length(unique(index_unique)) != length(index_unique)\n        index_unique\
    \ = index_unique[index_unique .== maximum(index_unique)]\n        index_length\
    \ = index_length[index_unique .== maximum(index_unique)]\n        return words[findfirst(index_length\
    \ .== minimum(index_length))]\n    else\n        return words[findfirst(index_unique\
    \ .== maximum(index_unique))]\n    end\nend", "    # Establish the initial guess.\n\
    \    max_word = words[1]\n    max_unique = find_unique(max_word)\n    # See if\
    \ there is a better guess.\n    for word in words[2:end]\n        if find_unique(word)\
    \ > max_unique\n            max_word = word\n            max_unique = find_unique(word)\n\
    \        end\n    end\n    # Return the best guess.\n    return max_word\nend",
  "    maxUniqueLetterCount = 0\n    maxWord = \"\"\n    for word in words\n     \
    \   uniqueLetterCount = uniqueCharsCount(word)\n        if uniqueLetterCount >\
    \ maxUniqueLetterCount\n            maxUniqueLetterCount = uniqueLetterCount\n\
    \            maxWord = word\n        elseif uniqueLetterCount == maxUniqueLetterCount\n\
    \            if word < maxWord\n                maxWord = word\n            end\n\
    \        end\n    end\n    return maxWord\nend", "    \"\"\"\n    We will loop\
    \ through the input vector and for each word we will create a dictionary \n  \
    \  that holds the unique elements. We will loop through the dictionary to find\
    \ out how many unique\n    characters there are. We will save the word if it is\
    \ the longest word and if it is the same length\n    as the current longest word,\
    \ we will compare it to our current longest word to decide if we will\n    save\
    \ it or not.\n    \"\"\"\n    longestWord = \"\"\n    longestWordLength = 0\n\
    \    for word in words\n        wordDict = Dict{Char, Int}()\n        length =\
    \ 0\n        for char in word\n            if !haskey(wordDict, char)\n      \
    \          wordDict[char] = 1\n                length += 1\n            end\n\
    \        end\n        if (length > longestWordLength)\n            longestWord\
    \ = word\n            longestWordLength = length\n        elseif (length == longestWordLength)\n\
    \            if (word < longestWord)\n                longestWord = word\n   \
    \         end\n        end\n    end\n    return longestWord\nend", "    n = length(words)\n\
    \    max_count = 0\n    max_index = 0\n    for i in 1:n\n        count = length(unique(words[i]))\n\
    \        if max_count < count\n            max_count = count\n            max_index\
    \ = i\n        end\n    end\n    return words[max_index]\nend", "    n = length(words)\n\
    \    cnt = Vector{Int}(undef, n)\n    for i in 1:n\n        cur = sort(Set(words[i]))\n\
    \        cnt[i] = length(cur)\n    end\n    idx = argmax(cnt)\n    return words[idx]\n\
    end", "    n = length(words)\n    max_num = 0\n    max_index = 1\n    for i in\
    \ 1:n\n        if length(unique(words[i])) >= max_num\n            max_num = length(unique(words[i]))\n\
    \            max_index = i\n        end\n    end\n    words[max_index]\nend",
  "    max_word = words[1]\n    for word in words[2:end]\n        if length(unique(word))\
    \ > length(unique(max_word))\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    max = (0, 0)\n    for (i, word) in enumerate(words)\n\
    \        if count_unique(word) > max[1]\n            max = (count_unique(word),\
    \ i)\n        end\n    end\n    return words[max[2]]\nend\n ", "    count = 0\n\
    \    maximum = \"\"\n    for word in words\n        if count < length(unique(word))\n\
    \            count = length(unique(word))\n            maximum = word\n      \
    \  end\n    end\n    return maximum\nend", "    max_word = words[1]\n    for word\
    \ in words[2:end]\n        if length(unique(word)) > length(unique(max_word))\
    \ ||\n            (length(unique(word)) == length(unique(max_word)) && word <\
    \ max_word)\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    max_count = 0\n    word = \"\"\n    for word_ in words\n        if\
    \ length(unique(word_)) > max_count\n            max_count = length(unique(word_))\n\
    \            word = word_\n        end\n    end\n    return word\nend", "    max_num_unique\
    \ = 0\n    max_index = 0\n    for (i, word) in enumerate(words)\n        num_unique\
    \ = length(unique(word))\n        if num_unique > max_num_unique\n           \
    \ max_num_unique = num_unique\n            max_index = i\n        end\n    end\n\
    \    return words[max_index]\nend", "    max_char_n = 0\n    max_char_s = \"\"\
    \n    for i in 1:length(words)\n        unique_char = unique(words[i])\n     \
    \   if length(unique_char) > max_char_n\n            max_char_n = length(unique_char)\n\
    \            max_char_s = words[i]\n        elseif length(unique_char) == max_char_n\n\
    \            if words[i] < max_char_s\n                max_char_s = words[i]\n\
    \            end\n        end\n    end\n    return max_char_s\nend\nprintln(find_max([\"\
    name\", \"of\", \"string\"]))\nprintln(find_max([\"name\", \"enam\", \"game\"\
    ]))\nprintln(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))", "    num_unique_chars\
    \ = [count_unique_chars(word) for word in words]\n    max_num_unique_chars = maximum(num_unique_chars)\n\
    \    max_inds = findall(num_unique_chars .== max_num_unique_chars)\n    max_ind\
    \ = findfirst(num_unique_chars .== max_num_unique_chars)\n    return words[max_ind]\n\
    end", "    # The function will return a string\n    max_word = \"\"\n    max_len\
    \ = 0\n    for word in words\n        if length(unique(collect(word))) > max_len\n\
    \            max_len = length(unique(collect(word)))\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "    #maxcount = count(unique(words[1]))\n\
    \    #maxindex = 1\n    #for i in 2:length(words)\n    #    count(unique(words[i]))\n\
    \    #    if count(unique(words[i])) > maxcount\n    #        maxcount = count(unique(words[i]))\n\
    \    #        maxindex = i\n    #    end\n    #end\n    #return words[maxindex]\n\
    \    wds = length(unique(words[1]))\n    idx = 1\n    for i in 2:length(words)\n\
    \        if length(unique(words[i])) > wds\n            wds = length(unique(words[i]))\n\
    \            idx = i\n        end\n    end\n    return words[idx]\nend", "   \
    \ longest_word = 1\n    length_of_longest_word = length(words[longest_word])\n\
    \    num_unique_chars = length(unique(words[longest_word]))\n    for (idx, word)\
    \ in enumerate(words)\n        if length(unique(word)) > num_unique_chars\n  \
    \          num_unique_chars = length(unique(word))\n            length_of_longest_word\
    \ = length(word)\n            longest_word = idx\n        elseif length(unique(word))\
    \ == num_unique_chars\n            if length(word) > length_of_longest_word\n\
    \                longest_word = idx\n            end\n        end\n    end\n \
    \   return words[longest_word]\nend", "    index = 0\n    maxchar = 0\n    for\
    \ i in 1:length(words)\n        if length(unique(words[i])) > maxchar\n      \
    \      maxchar = length(unique(words[i]))\n            index = i\n        end\n\
    \    end\n    return words[index]\nend\nprint(find_max([\"name\", \"of\", \"string\"\
    ]))", "    # @assert all(String === word for word in words)\n    n = length(words)\n\
    \    assert(n > 0)\n    idx_max = 1\n    chars_max = length(unique(collect(words[1])))\n\
    \    for i = 2:n\n        chars = length(unique(collect(words[i])))\n        if\
    \ chars > chars_max\n            idx_max = i\n            chars_max = chars\n\
    \        end\n    end\n    return words[idx_max]\nend", "    \n    if length(words)==0\n\
    \        return \"empty\"\n    end\n    \n    max_length = 0\n    max_word = \"\
    \"\n    for w in words\n        if length(unique(w)) > max_length\n          \
    \  max_length = length(unique(w))\n            max_word = w\n        end\n   \
    \ end\n    return max_word\nend", "    max_unique_chars = 0\n    max_unique_word\
    \ = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_unique_word = word\n        end\n    end\n    return max_unique_word\n\
    end", "    current_max = \"\"\n    for word in words\n        if length(unique(word))\
    \ > length(unique(current_max))\n            current_max = word\n        end\n\
    \    end\n    return current_max\nend", "    max_unique_letters_word = \"\"\n\
    \    max_unique_letters = 0\n    for i = 1:length(words)\n        num_unique_letters\
    \ = length(unique(char.(words[i])))\n        if num_unique_letters > max_unique_letters\n\
    \            max_unique_letters = num_unique_letters\n            max_unique_letters_word\
    \ = words[i]\n        end\n    end\n    return max_unique_letters_word\nend\n\
    words = [\"name\", \"of\", \"string\"]\nfind_max(words)", "    result_index =\
    \ 1\n    result_chars = length(unique(chars(words[1])))\n    for (i, word) in\
    \ enumerate(words)\n        number_of_chars = length(unique(chars(word)))\n  \
    \      if number_of_chars > result_chars\n            result_index = i\n     \
    \       result_chars = number_of_chars\n        end\n    end\n    return words[result_index]\n\
    end\n ", "    max_char = Set()\n    max_word = \"\"\n    for word in words\n \
    \       if length(Set(word)) > length(max_char)\n            max_char = Set(word)\n\
    \            max_word = word\n        elseif length(Set(word)) == length(max_char)\n\
    \            if word < max_word\n                max_char = Set(word)\n      \
    \          max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend", "    max_word = words[1]\n    max_len = length(Set(words[1]))\n\
    \    for word in words[2:end]\n        cur_len = length(Set(word))\n        if\
    \ cur_len > max_len\n            max_len = cur_len\n            max_word = word\n\
    \        elseif cur_len == max_len\n            max_word = min(max_word, word)\n\
    \        end\n    end\n    return max_word\nend", "    result = words[1]\n   \
    \ max_unique = length(unique(words[1]))\n    for word in words[2:end]\n      \
    \  uniq = length(unique(word))\n        if uniq > max_unique\n            max_unique\
    \ = uniq\n            result = word\n        elseif uniq == max_unique\n     \
    \       if result > word\n                result = word\n            end\n   \
    \     end\n    end\n    return result\nend", "    i = 0\n    max_word = \"\"\n\
    \    max_unique = 0\n    for word in words\n        count = 0\n        for char\
    \ in word\n            if !(char in words[i])\n                count += 1\n  \
    \          end\n        end\n        if count > max_unique\n            max_unique\
    \ = count\n            max_word = word\n        end\n        i += 1\n    end\n\
    \    return max_word\nend", "    word_counts = [count_unique(w) for w in words]\n\
    \    max_count = maximum(word_counts)\n    indices = findall(word_counts .== max_count)\n\
    \    max_indices = [indices[1]]\n    for i in indices[2:end]\n        if words[i]\
    \ < words[max_indices[1]]\n            max_indices = [i]\n        elseif words[i]\
    \ == words[max_indices[1]]\n            push!(max_indices, i)\n        end\n \
    \   end\n    return words[max_indices[1]]\nend\n \nfind_max([\"name\", \"of\"\
    , \"string\"])", "    max_unique_cnt = 0\n    max_unique_word = \"\"\n    for\
    \ word in words\n        unique_cnt = find_unique_cnt(word)\n        if unique_cnt\
    \ > max_unique_cnt\n            max_unique_cnt = unique_cnt\n            max_unique_word\
    \ = word\n        elseif unique_cnt == max_unique_cnt\n            if word < max_unique_word\n\
    \                max_unique_word = word\n            end\n        end\n    end\n\
    \    return max_unique_word\nend", "    max_char_word = \"\"\n    max_chars =\
    \ 0\n    for word in words\n        char_count = 0\n        for char in word\n\
    \            if !(char in word[1:word.index(char)])\n                char_count\
    \ += 1\n            end\n        end\n        if char_count > max_chars || (char_count\
    \ == max_chars && word < max_char_word)\n            max_char_word = word\n  \
    \          max_chars = char_count\n        end\n    end\n    return max_char_word\n\
    end", "    max_len = 0\n    max_string = \"\"\n    for word in words\n       \
    \ if length(unique(word)) > max_len\n            max_len = length(unique(word))\n\
    \            max_string = word\n        end\n    end\n    return max_string\n\
    end", "    n = length(words)\n    # maxLength = maximum(length.(words))\n    maxUniqueCharacters\
    \ = maximum(map(x -> length(unique(x)), words))\n    # max(map(x -> length(unique(x)),\
    \ words))\n    # return words[indmax(words)], maxLength, maxUniqueCharacters\n\
    \    if n <= 2\n        return [words[1], words[2]]\n    else\n        return\
    \ find_max([maxUniqueCharacters, max(words)])\n    end\nend", "    n = length(words)\n\
    \    result = 1\n    i = 1\n    while i < n\n        if unique_characters(words[i])\
    \ > unique_characters(words[result])\n            result = i\n        end\n  \
    \      i += 1\n    end\n    return words[result]\nend", "    max_unique_char_count\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_char_count\
    \ = unique_count(word)\n        if unique_char_count > max_unique_char_count\n\
    \            max_unique_char_count = unique_char_count\n            max_unique_word\
    \ = word\n        end\n    end\n    return max_unique_word\nend", "    max_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_chars\n            max_chars = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_unique = 0\n\
    \    unique_characters = Dict{Char, Bool}()\n    for word in words\n        for\
    \ character in word\n            unique_characters[character] = true\n       \
    \ end\n        if length(unique_characters) > max_unique\n            max_unique\
    \ = length(unique_characters)\n            output = word\n        end\n      \
    \  unique_characters = Dict{Char, Bool}()\n    end\n    return output\nend", " \
    \   # first we will compare the length of each word to get the most long word\n\
    \    long_word = maximum(words, lt = \n        function(a::String, b::String)\n\
    \            length(a) < length(b)\n        end)\n    # second we will return\
    \ the first word with unique characters\n    unique_words = filter(long_word)\
    \ do\n        word -> length(unique(word)) == length(word)\n    end\n    return\
    \ unique_words[1]\nend", "    maximum = maximum(map(unique, words))\n    length_sort\
    \ = sort(words, by=length)\n    for i in length_sort\n        if length(unique(i))\
    \ == maximum\n            return i\n        end\n    end\nend", "    max_unique\
    \ = 0\n    max_unique_index = 0\n    for i in 1:length(words)\n        word =\
    \ words[i]\n        word_unique = length(unique(word))\n        if word_unique\
    \ > max_unique\n            max_unique = word_unique\n            max_unique_index\
    \ = i\n        end\n    end\n    return words[max_unique_index]\nend", "    max_uniqs\
    \ = 0\n    for (i, w) in enumerate(words)\n        if length(unique(w)) > max_uniqs\n\
    \            max_uniqs = length(unique(w))\n            max_word = w\n       \
    \ end\n    end\n    return max_word\nend", "    max_word = \"\"\n    max_len =\
    \ 0\n    for word in words\n        if length(unique(word)) > max_len\n      \
    \      max_word = word\n            max_len = length(unique(word))\n        end\n\
    \    end\n    return max_word\nend", "    unique_counts = map(word -> length(unique(word)),\
    \ words)\n    idx = argmax(unique_counts)\n    return words[idx]\nend\nprintln(find_max([\"\
    name\", \"of\", \"string\"]))\nprintln(find_max([\"name\", \"enam\", \"game\"\
    ]))\nprintln(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))\n ", "    temp = []\n  \
    \  while !isempty(words)\n        push!(temp, length(unique(words[1])))\n    \
    \    words = words[2:end]\n    end\n    ind = findall(temp .== maximum(temp))\n\
    \    return(words[ind[1]])\nend", "    if length(words) == 0\n        return \"\
    \"\n    end\n    if length(words) == 1\n        return words[1]\n    end\n   \
    \ max_word = words[1]\n    max_uniques = length(unique(max_word))\n    for i in\
    \ 2:length(words)\n        if length(unique(words[i])) > max_uniques\n       \
    \     max_word = words[i]\n            max_uniques = length(unique(max_word))\n\
    \        end\n    end\n    return max_word\nend", "    num = Vector{Int}(length(words))\n\
    \    lex = Vector{String}(length(words))\n    for i in 1:length(words)\n     \
    \   num[i] = length(unique(collect(words[i])))\n        lex[i] = words[i]\n  \
    \  end\n    return(lex[findall(num .== maximum(num))[1]])\nend", "    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique = count_unique(word)\n\
    \        if unique > max_unique\n            max_unique = unique\n           \
    \ max_word = word\n        end\n    end\n    return max_word\nend\nfind_max([\"\
    name\", \"of\", \"string\"])", "    if length(words) == 0\n        return \"Not\
    \ found.\"\n    end\n    curr_max = length(unique(words[1]))\n    curr_max_index\
    \ = 1\n    for i in 2:length(words)\n        if length(unique(words[i])) > curr_max\n\
    \            curr_max = length(unique(words[i]))\n            curr_max_index =\
    \ i\n        end\n    end\n    return words[curr_max_index]\nend", "    unique_chars\
    \ = Vector{Int}(length(words))\n    for i in eachindex(words)\n        unique_chars[i]\
    \ = length(unique(words[i]))\n    end\n    mx = maximum(unique_chars)\n    for\
    \ i in eachindex(words)\n        if length(unique(words[i])) == mx\n         \
    \   return words[i]\n        end\n    end\nend", "    max_word = \"\"\n    max_count\
    \ = 0\n    for word in words\n        if length(unique(word)) > max_count\n  \
    \          max_count = length(unique(word))\n            max_word = word\n   \
    \     end\n    end\n    return max_word\nend", "    new_words = [word for word\
    \ in words if length(unique(word)) == maximum([length(unique(word)) for word in\
    \ words])]\n    return new_words[1]\nend", "    #We will use a dictionary to count\
    \ the number of unique characters for each string in the vector.\n    counter=Dict{String,\
    \ Int}()\n    max_number_unique=0\n    result=\"\"\n    for word in words\n  \
    \      if !haskey(counter, word)\n            counter[word]=length(unique(word))\n\
    \        end\n        if counter[word]>max_number_unique || (counter[word]==max_number_unique\
    \ && word<result)\n            max_number_unique=counter[word]\n            result=word\n\
    \        end\n    end\n    return result\nend", "    max_unique_char_count = 0\n\
    \    max_unique_char_string = \"\"\n    for i in 1:length(words)\n        current_unique_char_count\
    \ = length(unique(collect(words[i])))\n        if current_unique_char_count >\
    \ max_unique_char_count\n            max_unique_char_count = current_unique_char_count\n\
    \            max_unique_char_string = words[i]\n        elseif current_unique_char_count\
    \ == max_unique_char_count\n            if words[i] < max_unique_char_string\n\
    \                max_unique_char_string = words[i]\n            end\n        end\n\
    \    end\n    return max_unique_char_string\nend", "    max_len, max_word = 0,\
    \ \"\"\n    for w in words\n        if length(unique(w)) > max_len\n         \
    \   max_len, max_word = length(unique(w)), w\n        end\n    end\n    return\
    \ max_word\nend", "    set_max = 0\n    find = \"\"\n    for i = 1:length(words)\n\
    \        temp = Set(words[i])\n        if length(temp) >= set_max\n          \
    \  set_max = length(temp)\n            find = words[i]\n        end\n    end\n\
    \    return find\nend", "    max = 0\n    idx = 1\n    for (i, w) in enumerate(words)\n\
    \        aux = length(unique(w))\n        if aux > max\n            max = aux\n\
    \            idx = i\n        end\n    end\n    return words[idx]\nend", "   \
    \ s = Set(String)\n    max_word = words[1]\n    max_count = length(Set(max_word))\n\
    \    for word in words\n        s = Set(word)\n        c = length(s)\n       \
    \ if c > max_count || (c == max_count && word < max_word)\n            max_word\
    \ = word\n            max_count = c\n        end\n    end\n    return max_word\n\
    end", "    length_of_string = zeros(Int64, length(words))\n    for i in eachindex(words)\n\
    \        length_of_string[i] = length(unique(collect(words[i])))\n    end\n  \
    \  if length(findmax(length_of_string)[2]) != 1\n        return findfirst(length_of_string\
    \ .== findmax(length_of_string)[1],1)\n    else\n        return findmax(length_of_string)[2]\n\
    \    end\nend\n# Question 2\n# In this question, we will explore the effect of\
    \ changing the basis of a\n# function. The function f : R \u2192 R is defined\
    \ by f(x) = x.", "    global maximum_unique = -1\n    global result = \"\"\n \
    \   for word in words\n        unique_char = unique(word)\n        if length(unique_char)\
    \ > maximum_unique || (length(unique_char) == maximum_unique && word < result)\n\
    \            maximum_unique = length(unique_char)\n            result = word\n\
    \        end\n    end\n    return result\nend", "    if length(words) == 0\n \
    \       throw(DomainError())\n    end\n    sorted_words = sort(words)\n    max_word\
    \ = sorted_words[1]\n    for word in sorted_words\n        if length(unique(word))\
    \ > length(unique(max_word))\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    # YOUR CODE HERE\n    maximum = 1\n    index\
    \ = 1\n    for (i, word) in enumerate(words)\n        if length(unique(word))\
    \ > maximum\n            maximum = length(unique(word))\n            index = i\n\
    \        end\n    end\n    return words[index]\n    \nend\n ", "    m = Dict()\n\
    \    for word in words\n        d = Dict()\n        for c in word\n          \
    \  if haskey(d, c)\n                d[c] += 1\n            else\n            \
    \    d[c] = 1\n            end\n        end\n        m[word] = length(keys(d))\n\
    \    end\n    max_keys = keys(m)[argmax(values(m))]\n    min_key = max_keys[1]\n\
    \    for key in max_keys\n        if key < min_key\n            min_key = key\n\
    \        end\n    end\n    return min_key\nend", "    max = 0\n    i = 0\n   \
    \ val = \"\"\n    for word in words\n        if length(unique(word)) > max\n \
    \           max = length(unique(word))\n            val = word\n        end\n\
    \    end\n    return val\nend", "    max_num_chars = 0\n    max_ind = 0\n    for\
    \ i = 1:length(words)\n        if length(unique(words[i])) > max_num_chars\n \
    \           max_num_chars = length(unique(words[i]))\n            max_ind = i\n\
    \        end\n    end\n    return words[max_ind]\nend", "    count_words = Dict{String,\
    \ Int}()\n    for word in words\n        count_words[word] = length(unique(word))\n\
    \    end\n    sorted_words = sort(collect(keys(count_words)), by=x->(count_words[x],\
    \ x))\n    return last(sorted_words)\nend", "    max_word = words[1]\n    max_val\
    \ = length(Set(collect(max_word)))\n    for word in words[2:end]\n        curr_val\
    \ = length(Set(collect(word)))\n        if curr_val > max_val\n            max_val\
    \ = curr_val\n            max_word = word\n        elseif curr_val == max_val\n\
    \            if word < max_word\n                max_word = word\n           \
    \ end\n        end\n    end\n    return max_word\nend", "    return sort([(length(unique(word)),\
    \ word) for word in words])[end][2]\nend", "    # check if empty\n    if length(words)\
    \ == 0\n        return \"\"\n    end\n    # max unique charecters\n    max_uniques\
    \ = 0\n    max_str = \"\"\n    for word in words\n        uniques = 0\n      \
    \  for char in word\n            if count(findall(word, char)) == 1\n        \
    \        uniques += 1\n            end\n        end\n        if uniques > max_uniques\n\
    \            max_uniques = uniques\n            max_str = word\n        end\n\
    \    end\n    return max_str\nend", "    n = length(words)\n    max_string = \"\
    \"\n    max_count = 0\n    for i in 1:n\n        word = words[i]\n        unique_chars\
    \ = unique(word)\n        if length(unique_chars) > max_count\n            max_count\
    \ = length(unique_chars)\n            max_string = word\n        end\n    end\n\
    \    return max_string\nend", "    # For each word, count the number of unique\
    \ characters\n    num_unique_chars = [unique(w) for w in words]\n    # Determine\
    \ the maximum number of unique characters\n    max_unique_char = maximum(num_unique_chars)\n\
    \    # Return the word that has the maximum number of unique characters\n    return\
    \ words[findfirst(num_unique_chars .== max_unique_char)]\nend", "    n = 0\n \
    \   best_word = \"\"\n    for word in words\n        n_chars = length(unique(word))\n\
    \        if n_chars > n\n            n = n_chars\n            best_word = word\n\
    \        end\n    end\n    return best_word\nend\n ", "    max_index = 1\n   \
    \ max_len = length(unique(words[1]))\n    for i in 2:length(words)\n        #\
    \ Check for unique elements in the word,\n        # and store length of the word\
    \ with maximum number of unique elements\n        # in a variable max_len\n  \
    \      # We are checking if length of the word with maximum number of\n      \
    \  # unique elements is less than the length of the current word\n        # because\
    \ we want the word with maximum number of unique elements\n        if max_len\
    \ < length(unique(words[i]))\n            max_len = length(unique(words[i]))\n\
    \            max_index = i\n        end\n    end\n    return words[max_index]\n\
    end\nfind_max([\"name\", \"of\", \"string\"])", "    # find the maximum number\
    \ of unique characters\n    # in words and store in this variable\n    max_unique\
    \ = 0\n    # store the index of the word with maximum number\n    # of unique\
    \ characters. If multiple words have\n    # this number, store the index of the\
    \ word which\n    # comes first in lexicographical order\n    max_index = 0\n\
    \    index = 0\n    # store the number of unique characters in the word\n    uniques\
    \ = 0\n    # store the characters in the word\n    word = \"\"\n    # loop over\
    \ the vector words, find the word with maximum\n    # number of unique characters\
    \ and store it at index\n    # max_index\n    for (i, w) in enumerate(words)\n\
    \        # find the number of unique characters in the word\n        # and store\
    \ it in uniques\n        uniques = count_unique(w)\n        # if uniques is greater\
    \ than max_unique\n        # store the index of the word in max_index\n      \
    \  # and update max_unique\n        if uniques > max_unique\n            max_unique\
    \ = uniques\n            max_index = i\n        end\n    end\n    # return the\
    \ word at max_index\n    words[max_index]\nend", "    max_word = words[1]\n  \
    \  max_word_set = Set(collect(max_word))\n    max_word_len = length(max_word_set)\n\
    \    for i in 2:length(words)\n        word = words[i]\n        word_set = Set(collect(word))\n\
    \        word_len = length(word_set)\n        if word_len > max_word_len\n   \
    \         max_word = word\n            max_word_set = word_set\n            max_word_len\
    \ = word_len\n        elseif word_len == max_word_len\n            if word > max_word\n\
    \                max_word = word\n                max_word_set = word_set\n  \
    \              max_word_len = word_len\n            end\n        end\n    end\n\
    \    return max_word\nend", "    unique_chars = map(x -> unique(x), words)\n \
    \   max_value = maximum(map(x -> length(x), unique_chars))\n    filtered_vector\
    \ = filter(x -> length(x) == max_value, unique_chars)\n    return words[argmin(map(x\
    \ -> length(x), filtered_vector))]\nend", "    # Your code goes here\n    return\
    \ \"Dummy\"\nend", "    ind = 1\n    unique = unique_char(words[1])\n    for i\
    \ in 2:length(words)\n        if unique_char(words[i]) > unique\n            unique\
    \ = unique_char(words[i])\n            ind = i\n        end\n    end\n    return\
    \ words[ind]\nend", "    w1 = words[1]\n    w2 = words[2]\n    if length(unique(w1))\
    \ > length(unique(w2))\n        return w1\n    elseif length(unique(w1)) < length(unique(w2))\n\
    \        return w2\n    else\n        w3 = words[3]\n        if length(unique(w3))\
    \ > length(unique(w1))\n            return w3\n        else\n            if w1\
    \ < w2\n                return w1\n            else\n                return w2\n\
    \            end\n        end\n    end\nend", "    c = 0\n    for i in words\n\
    \        if length(unique(i))>c\n            c = length(unique(i))\n         \
    \   @show c\n            s = i\n        end\n    end\n    return s\nend", "  \
    \  max_num = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_num\n            max_num = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    \n    n = 0\n\
    \    count = 0\n    word = \"\"\n   \n    for i in 1:length(words)\n        word\
    \ = words[i]\n        count = 0\n        for j in 1:length(word)\n           \
    \ if occursin(word[j], word[1:j-1]) == false\n                count += 1\n   \
    \         end\n        end\n        if count > n\n            n = count\n    \
    \        word = words[i]\n        end\n    end\n    return word\nend", "    max_unique\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = unique(collect(word))\n        if length(unique_chars) > max_unique\n    \
    \        max_unique = length(unique_chars)\n            max_unique_word = word\n\
    \        end\n    end\n    return max_unique_word\nend", "    unique_char_words\
    \ = unique_char_count.(words)\n    idx = indmax(unique_char_words)\n    return\
    \ words[idx]\nend", "    max = 1\n    max_word = words[1]\n    for word in words\n\
    \        characters = 0\n        character_array = Array{Int, 1}(length(word))\n\
    \        for c in word\n            if character_array[Int(c)] == 0\n        \
    \        character_array[Int(c)] = 1\n                characters += 1\n      \
    \      end\n        end\n        if characters > max\n            max = characters\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    # YOUR CODE HERE\n    return argmax(string -> length(unique(string)), words)\n\
    end", "    min_idx = 1\n    max_idx = 1\n    for i = 1:length(words)\n       \
    \ # find max unique characters\n        if length(unique(chars(words[i]))) > length(unique(chars(words[max_idx])))\n\
    \            max_idx = i\n        end\n        # find lexicographical index\n\
    \        if words[i] < words[min_idx]\n            min_idx = i\n        end\n\
    \    end\n    if max_idx == min_idx\n        return words[max_idx]\n    else\n\
    \        return words[min_idx]\n    end\nend", "    num_unique = zeros(length(words))\n\
    \    for (idx, word) in enumerate(words)\n        num_unique[idx] = length(unique(word))\n\
    \    end\n    max_idx = argmax(num_unique)\n    return words[max_idx]\nend", " \
    \   max_word = \"\"\n    max_length = 0\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend", "    max_count = 0\n\
    \    max_words = []\n    for i in 1:length(words)\n        if length(unique(words[i]))\
    \ > max_count\n            max_count = length(unique(words[i]))\n            max_words\
    \ = [words[i]]\n        elseif length(unique(words[i])) == max_count\n       \
    \     push!(max_words, words[i])\n        end\n    end\n    #println(max_words)\n\
    \    return find_min(max_words)\nend", "    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = length(unique(word))\n    end\n    max_count\
    \ = maximum(values(word_counts))\n    max_count_words = [k for (k, v) in word_counts\
    \ if v == max_count]\n    sort!(max_count_words)\n    return max_count_words[1]\n\
    end", "    return sort(unique(words), by=x->length(x), rev=true)[1]\nend", " \
    \   max_word = words[1]\n    n_max = n_unique_chars(max_word)\n    for word in\
    \ words[2:end]\n        n_word = n_unique_chars(word)\n        if n_word > n_max\n\
    \            max_word = word\n            n_max = n_word\n        end\n    end\n\
    \    return max_word\nend\n@test find_max([\"name\", \"of\", \"string\"]) == \"\
    string\"\n@test find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n@test find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"", "    # Get length of words\n    num_words\
    \ = length(words)\n    # Assign the first word to a variable to compare to\n \
    \   max_word = words[1]\n    # Iterate over the rest of the words\n    for i in\
    \ 2:num_words\n        # Get first word from the array\n        word1 = words[i]\n\
    \        # Get the word that was assigned to max_word\n        word2 = max_word\n\
    \        # Get the lengths of each word\n        len1 = length(word1)\n      \
    \  len2 = length(word2)\n        # If the lengths are the same, compare them lexicographically\n\
    \        if len1 == len2\n            if word1 < word2\n                max_word\
    \ = word1\n            end\n        # Otherwise, find the longest word and assign\
    \ it to max_word\n        elseif len1 > len2\n            max_word = word1\n \
    \       end\n    end\n    return max_word\nend", "    uniq = [length(unique(w))\
    \ for w in words]\n    maxi = indmax(uniq)\n    return words[maxi]\nend", "  \
    \  # TODO: Implement this function\n    result::String = \"\"\n    uniques::Set{Char}\
    \ = Set{Char}()\n    max_unique::Int = 0\n    for w in words\n        for c in\
    \ w\n            if !(c in uniques)\n                push!(uniques, c)\n     \
    \       end\n        end\n        if max_unique < length(uniques)\n          \
    \  max_unique = length(uniques)\n            result = w\n        end\n       \
    \ uniques = Set{Char}()\n    end\n    return result\nend", "    sorted = sort(unique(words))\n\
    \    string = sorted[end]\n    return string\nend", "    len_max = 0\n    ind_max\
    \ = 0\n    for (ind, word) in enumerate(words)\n        letters = set(ch for ch\
    \ in word)\n        len_letters = length(letters)\n        if len_letters > len_max\n\
    \            len_max = len_letters\n            ind_max = ind\n        end\n \
    \   end\n    return words[ind_max]\nend", "    n = length(words)\n    max_num_unique\
    \ = 0\n    max_word = \"\"\n    for i in 1:n\n        num_unique = 0\n       \
    \ curr_word = words[i]\n        for j in 1:length(curr_word)\n            if curr_word[j]\
    \ \u2209 max_word\n                num_unique += 1\n            end\n        end\n\
    \        if num_unique > max_num_unique\n            max_num_unique = num_unique\n\
    \            max_word = curr_word\n        end\n    end\n    return max_word\n\
    end", "    n = length(words)\n    maxIndex = 1\n    maxNum = length(unique(words[1]))\n\
    \    for i in 1:n\n        temp = length(unique(words[i]))\n        if temp >\
    \ maxNum\n            maxNum = temp\n            maxIndex = i\n        end\n \
    \   end\n    return words[maxIndex]\nend", "    max_val = 0\n    max_idx = 0\n\
    \    for i in 1:length(words)\n        unique_chars = unique(words[i])\n     \
    \   if length(unique_chars) > max_val\n            max_val = length(unique_chars)\n\
    \            max_idx = i\n        end\n    end\n    return words[max_idx]\nend\n\
    \    \n ", "    max_word = nothing\n    max_n = 0\n    for word in words\n   \
    \     if isnothing(max_word)\n            max_word = word\n            max_n =\
    \ length(unique(collect(word)))\n        else\n            if length(unique(collect(word)))\
    \ > max_n\n                max_word = word\n                max_n = length(unique(collect(word)))\n\
    \            end\n        end\n    end\n    return max_word\nend", "    words_dict\
    \ = Dict{String,Int}()\n    unique_dict = Dict{String,Int}()\n    for word in\
    \ words\n        words_dict[word] = length(word)\n        unique_dict[word] =\
    \ length(Set(word))\n    end\n    max_unique = maximum(values(unique_dict))\n\
    \    max_set = []\n    for (key, value) in unique_dict\n        if value == max_unique\n\
    \            push!(max_set, key)\n        end\n    end\n    min_word = min(max_set)\n\
    \    return min_word\nend", "    max_unique_char = 0\n    max_unique_word = \"\
    \"\n    for word in words\n        word_unique_char = length(unique(word))\n \
    \       if word_unique_char > max_unique_char\n            max_unique_char = word_unique_char\n\
    \            max_unique_word = word\n        elseif word_unique_char == max_unique_char\n\
    \            if word < max_unique_word\n                max_unique_word = word\n\
    \            end\n        end\n    end\n    return max_unique_word\nend", "  \
    \  chars::Set{Char} = Set{Char}()\n    unique_chars::Int = 0\n    unique_word::String\
    \ = \"\"\n    for word in words\n        chars = unique(word)\n        if unique_chars\
    \ <= length(chars)\n            unique_chars = length(chars)\n            unique_word\
    \ = word\n        end\n    end\n    return unique_word\nend", "    max_word =\
    \ words[1]\n    max_len = length(Set(words[1]))\n    for (i, word) in enumerate(words)\n\
    \        if length(Set(word)) > max_len\n            max_word = word\n       \
    \     max_len = length(Set(word))\n        end\n    end\n    return max_word\n\
    end", "    return findmax([length(unique(x)) for x in words])[2]\nend", "    n_uniq_chars_max\
    \ = 0\n    uniq_chars_max = \"\"\n    for word in words\n        n_uniq_chars\
    \ = length(Set(collect(word)))\n        if n_uniq_chars > n_uniq_chars_max\n \
    \           n_uniq_chars_max = n_uniq_chars\n            uniq_chars_max = word\n\
    \        end\n    end\n    return uniq_chars_max\nend", "    str_len_dict = Dict{String,\
    \ Int}()\n    for i in words\n        if haskey(str_len_dict, i) == false\n  \
    \          str_len_dict[i] = length(unique(collect(i)))\n        end\n    end\n\
    \    max = maximum(values(str_len_dict))\n    max_words = [k for (k,v) in str_len_dict\
    \ if v == max]\n    max_words = sort(max_words)\n    return max_words[1]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
