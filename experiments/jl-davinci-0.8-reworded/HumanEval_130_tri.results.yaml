language: jl
name: HumanEval_130_tri
results:
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        result = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(result,\
    \ Int64(1 + i / 2))\n            else\n                push!(result, Int64(result[i]\
    \ + result[i - 1] + result[i + 1]))\n            end\n        end\n        return\
    \ result\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmptf2xgjsy.jl:42\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptf2xgjsy.jl:31\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmptf2xgjsy.jl:42 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmptf2xgjsy.jl:41\ntest set: Error
    During Test at /tmp/tmptf2xgjsy.jl:43\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element Vector{Int64} at
    index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmptf2xgjsy.jl:31\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmptf2xgjsy.jl:43 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmptf2xgjsy.jl:41\ntest set: Error During Test at
    /tmp/tmptf2xgjsy.jl:44\n  Test threw exception\n  Expression: candidate(5) ==
    [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element Vector{Int64}
    at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmptf2xgjsy.jl:31\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmptf2xgjsy.jl:44 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmptf2xgjsy.jl:41\ntest set: Error During Test at
    /'
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci = [1, 3, 2]\n    if n <= 3\n        tribonacci[1:n+1]\n   \
    \ else\n        for i in 4:n+1\n            if iseven(i)\n                push!(tribonacci,\
    \ Int64(1 + i / 2))\n            else\n                push!(tribonacci, Int64(tribonacci[i-1]\
    \ + tribonacci[i-2] + tribonacci[i+1]))\n            end\n        end\n      \
    \  tribonacci\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2k0lhcdv.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp2k0lhcdv.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [1:4]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] tri(n::Int64)\n     @ Main /tmp/tmp2k0lhcdv.jl:21\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2k0lhcdv.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2k0lhcdv.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp2k0lhcdv.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2k0lhcdv.jl:27\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2k0lhcdv.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2k0lhcdv.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp2k0lhcdv.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2k0lhcdv.jl:27\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2k0lhcdv.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a, b, c = 3, 1, 2\n    v = Vector{Int64}()\n    push!(v, a)\n    for i\
    \ = 2:n\n        push!(v, b)\n        push!(v, c)\n        if (i % 2 == 0)\n \
    \           a = 1 + (i / 2)\n        else\n            a = b + c + a\n       \
    \ end\n        b, c = c, a\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpds2kq7l6.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpds2kq7l6.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 1, 2, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpds2kq7l6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpds2kq7l6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpds2kq7l6.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 1, 2, 2, 2, 2, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpds2kq7l6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpds2kq7l6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpds2kq7l6.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [3, 1, 2, 2, 2, 2, 6, 6, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpds2kq7l6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpds2kq7l6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpds2kq7l6.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [3, 1, 2, 2, 2, 2, 6, 6, 3, 3, 12] == [1, 3, 2, 8,\
    \ 3, 15, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpds2kq7l6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpds2kq7l6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpds2kq7l6.jl:43\n  Expression: candi"
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = zeros(Int64, n + 1)\n    seq[1] = 1\n    seq[2] = 3\n    seq[3]\
    \ = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            seq[i] = 1 + (i\
    \ / 2)\n        else\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n\
    \        end\n    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpvtgorz7z.jl:37\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtgorz7z.jl:37 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtgorz7z.jl:36\ntest set: Error
    During Test at /tmp/tmpvtgorz7z.jl:38\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpvtgorz7z.jl:27\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpvtgorz7z.jl:38 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpvtgorz7z.jl:36\ntest set: Test Failed at /tmp/tmpvtgorz7z.jl:39\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3,
    2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtgorz7z.jl:39 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtgorz7z.jl:36\ntest set: Error
    During Test at /tmp/tmpvtgorz7z.jl:40\n  Test threw exception\n  Expression: candidate(6)
    == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element Vector{Int64}
    at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpvtgorz7z.jl:27\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = Vector{Int64}(undef, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3]\
    \ = 2\n    for i in 4:n + 1\n        v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n \
    \   end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpt4sqyevu.jl:33\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpt4sqyevu.jl:24\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt4sqyevu.jl:33 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt4sqyevu.jl:32\ntest set: Error
    During Test at /tmp/tmpt4sqyevu.jl:34\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpt4sqyevu.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpt4sqyevu.jl:34 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpt4sqyevu.jl:32\ntest set: Error During Test at
    /tmp/tmpt4sqyevu.jl:35\n  Test threw exception\n  Expression: candidate(5) ==
    [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element Vector{Int64}
    at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpt4sqyevu.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpt4sqyevu.jl:35 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpt4sqyevu.jl:32\ntest set: Error During Test at
    /'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    for i in\
    \ 2 : n + 1\n        if i % 2 == 0\n            result[i] = i / 2\n        else\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n     \
    \   end\n    end\n    return result\nend\ntri(3)\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp4a0j0e7n.jl:36\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 1, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp4a0j0e7n.jl:36 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp4a0j0e7n.jl:35\ntest set: Error
    During Test at /tmp/tmp4a0j0e7n.jl:37\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmp4a0j0e7n.jl:25\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp4a0j0e7n.jl:37 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp4a0j0e7n.jl:35\ntest set: Test Failed at /tmp/tmp4a0j0e7n.jl:38\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 1, 2, 2, 47012482347732,
    3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp4a0j0e7n.jl:38 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp4a0j0e7n.jl:35\ntest set: Error
    During Test at /tmp/tmp4a0j0e7n.jl:39\n  Test threw exception\n  Expression: candidate(6)
    == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element Vector{Int64}
    at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmp4a0j0e7n.jl:25\n   [3] macro expansion\n     @
    /shared/centos'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = ones(Int64, n + 1)\n    tri[1] = 1\n    i = 2\n    while i <= n\
    \ + 1\n        if i % 2 == 0\n            tri[i] = 1 + i / 2\n        else\n \
    \           tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n     \
    \   i += 1\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpkuwapfys.jl:37\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 2, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpkuwapfys.jl:37 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpkuwapfys.jl:36\ntest set: Error
    During Test at /tmp/tmpkuwapfys.jl:38\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpkuwapfys.jl:26\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpkuwapfys.jl:38 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpkuwapfys.jl:36\ntest set: Test Failed at /tmp/tmpkuwapfys.jl:39\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 2, 4, 3, 8, 4] == [1, 3,
    2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpkuwapfys.jl:39 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpkuwapfys.jl:36\ntest set: Error
    During Test at /tmp/tmpkuwapfys.jl:40\n  Test threw exception\n  Expression: candidate(6)
    == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element Vector{Int64}
    at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpkuwapfys.jl:26\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    ans = fill(0, n + 1)\n    ans[1] = 1\n    ans[2] = 3\n    ans[3] = 2\n\
    \    for i in 4:n + 1\n        if i % 2 == 0\n            ans[i] = ans[i - 1]\
    \ + ans[i - 2] + ans[i + 1]\n        else\n            ans[i] = floor(i / 2) +\
    \ 1\n        end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpus1f2ggy.jl:37\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpus1f2ggy.jl:25\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpus1f2ggy.jl:37 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpus1f2ggy.jl:36\ntest set: Test
    Failed at /tmp/tmpus1f2ggy.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8, 3]\n   Evaluated:
    [1, 3, 2, 5, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpus1f2ggy.jl:38 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpus1f2ggy.jl:36\ntest set: Error
    During Test at /tmp/tmpus1f2ggy.jl:39\n  Test threw exception\n  Expression: candidate(5)
    == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element Vector{Int64}
    at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpus1f2ggy.jl:25\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpus1f2ggy.jl:39 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpus1f2ggy.jl:36\ntest set: Test Failed at /tmp/tmpus1f2ggy.jl:40\n  Expression:
    candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   Evaluated: [1, 3, 2, 5, 3, 8, 4] ==
    [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n [1] macro expansion\n   @ /sh'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    res[3]\
    \ = 2\n    for i = 4:n + 1\n        res[i] = i % 2 == 0 ? res[i - 1] : res[i -\
    \ 1] + res[i - 2] + res[i + 1]\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1eot2n01.jl:33\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1eot2n01.jl:33 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1eot2n01.jl:32\ntest set: Error
    During Test at /tmp/tmp1eot2n01.jl:34\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmp1eot2n01.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp1eot2n01.jl:34 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp1eot2n01.jl:32\ntest set: Test Failed at /tmp/tmp1eot2n01.jl:35\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 2, 4, 4] == [1, 3,
    2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1eot2n01.jl:35 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1eot2n01.jl:32\ntest set: Error
    During Test at /tmp/tmp1eot2n01.jl:36\n  Test threw exception\n  Expression: candidate(6)
    == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element Vector{Int64}
    at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmp1eot2n01.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = [1, 3, 2]\n    for i = 3:n\n        if i % 2 == 0\n            push!(a,\
    \ i / 2 + 1)\n        else\n            push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n\
    \        end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpodqxm106.jl:34\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpodqxm106.jl:24\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpodqxm106.jl:34 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpodqxm106.jl:33\ntest set: Error
    During Test at /tmp/tmpodqxm106.jl:35\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element Vector{Int64} at
    index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpodqxm106.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpodqxm106.jl:35 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpodqxm106.jl:33\ntest set: Error During Test at
    /tmp/tmpodqxm106.jl:36\n  Test threw exception\n  Expression: candidate(5) ==
    [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element Vector{Int64}
    at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpodqxm106.jl:24\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpodqxm106.jl:36 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpodqxm106.jl:33\ntest set: Error During Test at
    /'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    numbers = zeros(Int64, n+1)\n    numbers[1] = 1\n    numbers[2] = 3\n\
    \    numbers[3] = 2\n    for i in 4:n+1\n        if (i % 2 == 0)\n           \
    \ numbers[i] = 1 + i / 2\n        else\n            numbers[i] = numbers[i-1]\
    \ + numbers[i-2] + numbers[i-3]\n        end\n    end\n    return numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpziqgki2u.jl:37\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpziqgki2u.jl:37 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpziqgki2u.jl:36\ntest set: Test Failed
    at /tmp/tmpziqgki2u.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8, 3]\n   Evaluated:
    [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpziqgki2u.jl:38 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpziqgki2u.jl:36\ntest set: Test Failed
    at /tmp/tmpziqgki2u.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated:
    [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpziqgki2u.jl:39 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpziqgki2u.jl:36\ntest set: Test Failed at /tmp/tmpziqgki2u.jl:40\n  Expression:
    candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] ==
    [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpziqgki2u.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpziqgki2u.jl:36\ntest set: Test Failed
    at /tmp/tmpziqgki2u.jl:41'
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"n has to be a non-negative integer.\")\n   \
    \ end\n    if n < 1\n        return [1]\n    end\n    if n < 2\n        return\
    \ [1, 3]\n    end\n    if n < 3\n        return [1, 3, 2]\n    end\n    tri =\
    \ [1, 3, 2]\n    for i = 4:n + 1\n        if i % 2 == 0\n            push!(tri,\
    \ div(i, 2))\n        else\n            push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ - 3])\n        end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpya1tu29b.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpya1tu29b.jl:46\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1tu29b.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1tu29b.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpya1tu29b.jl:47\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1tu29b.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1tu29b.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpya1tu29b.jl:48\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1tu29b.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1tu29b.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpya1tu29b.jl:49\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1tu29b.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1tu29b.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpya1tu29b.jl:50\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer!\")\n    end\n\
    \    if n == 0\n        return [1]\n    end\n    if n == 1\n        return [1,\
    \ 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    seq = [1,\
    \ 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n            append!(seq, 1 +\
    \ (i / 2))\n        else\n            append!(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n        end\n    end\n    return seq\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpw1zmjn8i.jl:46\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw1zmjn8i.jl:36\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zmjn8i.jl:46 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zmjn8i.jl:45\ntest set: Error
    During Test at /tmp/tmpw1zmjn8i.jl:47\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element Vector{Int64} at
    index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpw1zmjn8i.jl:36\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpw1zmjn8i.jl:47 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpw1zmjn8i.jl:45\ntest set: Error During Test at
    /tmp/tmpw1zmjn8i.jl:48\n  Test threw exception\n  Expression: candidate(5) ==
    [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element Vector{Int64}
    at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpw1zmjn8i.jl:36\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpw1zmjn8i.jl:48 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpw1zmjn8i.jl:45\ntest set: Error During Test at
    /'
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    c = [1, 3, 2]\n    if n <= 2\n        return c[1:n+1]\n    end\n    for\
    \ i = 4:n+1\n        push!(c, c[i-1] + c[i-2] + c[i-3])\n    end\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzzkbesq6.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpzzkbesq6.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzkbesq6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzkbesq6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzzkbesq6.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzkbesq6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzkbesq6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzzkbesq6.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzkbesq6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzkbesq6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzzkbesq6.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzkbesq6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzkbesq6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzzkbesq6.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3"
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    output = zeros(Int64, n + 1)\n    output[1] = 1\n    for i in 2:n\n  \
    \      output[i] = output[i - 1] + output[i - 2] + output[i - 3]\n    end\n  \
    \  return output\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxymccptn.jl:31\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxymccptn.jl:22\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxymccptn.jl:31 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxymccptn.jl:30\ntest set: Error
    During Test at /tmp/tmpxymccptn.jl:32\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpxymccptn.jl:22\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpxymccptn.jl:32 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpxymccptn.jl:30\ntest set: Error During Test at
    /tmp/tmpxymccptn.jl:33\n  Test threw exception\n  Expression: candidate(5) ==
    [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element Vector{Int64}
    at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpxymccptn.jl:22\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpxymccptn.jl:33 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpxymccptn.jl:30\ntest set: Error During Test at
    /'
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = zeros(Int64,\
    \ n+1)\n        a[1:3] = [1, 3, 2]\n        for i = 4:n+1\n            if i %\
    \ 2 == 0\n                a[i] = 1 + i / 2\n            else\n               \
    \ a[i] = a[i-1] + a[i-2] + a[i-3]\n            end\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4d_ttgvw.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp4d_ttgvw.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4d_ttgvw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4d_ttgvw.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp4d_ttgvw.jl:44\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4d_ttgvw.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4d_ttgvw.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp4d_ttgvw.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4d_ttgvw.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4d_ttgvw.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp4d_ttgvw.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4d_ttgvw.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4d_ttgvw.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp4d_ttgvw.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    f = [1,3,2]\n    if n > 3\n        for i in 4:n\n            if i % 2\
    \ == 0\n                push!(f,1 + i / 2)\n            else\n               \
    \ push!(f,f[i-1] + f[i-2] + f[i+1])\n            end\n        end\n    end\n \
    \   return f\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpy4n0oz7e.jl:36\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpy4n0oz7e.jl:36 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpy4n0oz7e.jl:35\ntest set: Test Failed
    at /tmp/tmpy4n0oz7e.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8, 3]\n   Evaluated:
    [1, 3, 2, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpy4n0oz7e.jl:37 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpy4n0oz7e.jl:35\ntest set: Error
    During Test at /tmp/tmpy4n0oz7e.jl:38\n  Test threw exception\n  Expression: candidate(5)
    == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 4-element Vector{Int64}
    at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpy4n0oz7e.jl:25\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpy4n0oz7e.jl:38 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpy4n0oz7e.jl:35\ntest set: Error During Test at
    /tmp/tmpy4n0oz7e.jl:39\n  Test threw exception\n  Expression: candidate(6) ==
    [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 4-element Vector{Int64}
    at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpy4n0oz7e.jl:25\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Check if n is negative or null.\n    if n <= 0 \n        return [1]\n\
    \    end\n    # Initialize the vector with the first 3 values of the Tribonacci\
    \ sequence.\n    tri_v = zeros(Int64,n+1)\n    tri_v[1] = 1\n    tri_v[2] = 3\n\
    \    tri_v[3] = 2\n    for i = 4:n+1\n        # Check if i is even or odd.\n \
    \       if i % 2 == 0\n            tri_v[i] = 1 + i / 2\n        else\n      \
    \      tri_v[i] = tri_v[i-1] + tri_v[i-2] + tri_v[i+1]\n        end\n    end\n\
    \    return tri_v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpji645qn4.jl:43\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpji645qn4.jl:43 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpji645qn4.jl:42\ntest set: Error
    During Test at /tmp/tmpji645qn4.jl:44\n  Test threw exception\n  Expression: candidate(4)
    == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element Vector{Int64} at
    index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpji645qn4.jl:33\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpji645qn4.jl:44 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpji645qn4.jl:42\ntest set: Test Failed at /tmp/tmpji645qn4.jl:45\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3,
    2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpji645qn4.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpji645qn4.jl:42\ntest set: Error
    During Test at /tmp/tmpji645qn4.jl:46\n  Test threw exception\n  Expression: candidate(6)
    == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element Vector{Int64}
    at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]
    tri(n::Int64)\n     @ Main /tmp/tmpji645qn4.jl:33\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3'
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    sequence = [0, 1, 3]\n    sequence = [sequence[i] for i in 1:n+1]\n  \
    \  for i in 3:n+1\n        sequence[i] = (sequence[i-1] + sequence[i-2] + sequence[i-3])\n\
    \    end\n    return sequence\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp45amjveh.jl:31\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt
    to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64},
    i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var"#1#2")(i::Int64)\n      @
    Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!(dest::Vector{Int64},
    itr::Base.Generator{UnitRange{Int64}, var"#1#2"}, offs::Int64, st::Int64)\n      @
    Base ./array.jl:782\n    [5] collect_to_with_first!(dest::Vector{Int64}, v1::Int64,
    itr::Base.Generator{UnitRange{Int64}, var"#1#2"}, st::Int64)\n      @ Base ./array.jl:760\n    [6]
    collect(itr::Base.Generator{UnitRange{Int64}, var"#1#2"})\n      @ Base ./array.jl:734\n    [7]
    tri(n::Int64)\n      @ Main /tmp/tmp45amjveh.jl:20\n    [8] macro expansion\n      @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9]
    macro expansion\n      @ /tmp/tmp45amjveh.jl:31 [inlined]\n   [10] macro expansion\n      @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11]
    top-level scope\n      @ /tmp/tmp45amjveh.jl:30\ntest set: Error During Test at
    /tmp/tmp45amjveh.jl:32\n  Test threw exception\n  Expression: candidate(4) ==
    [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element Vector{Int64} at index
    [4]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64}, i1::Int64)\n      @ Base
    ./array.jl:861\n    [2] (::var"#1#2")(i::Int64)\n      @ Main ./none:0\n    [3]
    iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!(dest::Vector{Int64},
    itr::Base.Generator{UnitRange{Int64}, var"#1#2"}, offs::Int64, st::Int64)\n      @
    Base ./array.jl:782\n    [5] collect_to_with_first!(dest::Vector{Int64}, v1::Int64,
    itr::Base.Generator{UnitRange{Int64}, var"#1#2"}, st::Int64)\n      @ Base ./array.jl:760\n    [6]
    collect(itr::Base.Generator{UnitRange{Int64}, var"#1#2"})\n      @ Base ./array.jl:734\n    [7]
    tri(n::Int64)\n      @ Main /tmp/tmp'
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [0]\n    end\n    if n == 1\n        return\
    \ [1, 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    v = [1,\
    \ 3, 2]\n    for i in 4:n + 1\n        if i % 2 == 0\n            push!(v, i /\
    \ 2)\n        else\n            push!(v, v[end] + v[end - 1] + v[end - 2])\n \
    \       end\n    end\n    return v\nend\n \n \nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcb9kpv0d.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpcb9kpv0d.jl:45\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb9kpv0d.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb9kpv0d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcb9kpv0d.jl:46\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb9kpv0d.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb9kpv0d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcb9kpv0d.jl:47\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb9kpv0d.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb9kpv0d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcb9kpv0d.jl:48\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb9kpv0d.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb9kpv0d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcb9kpv0d.jl:49\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15,"
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        # calculate the\
    \ first three numbers\n        v = [1, 3, 2]\n        for i in 3:n\n         \
    \   if i % 2 == 0\n                push!(v, round(Int64, 1 + i / 2))\n       \
    \     else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n       \
    \     end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqo7vp1vp.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpqo7vp1vp.jl:43\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqo7vp1vp.jl:32\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqo7vp1vp.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqo7vp1vp.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpqo7vp1vp.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqo7vp1vp.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqo7vp1vp.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqo7vp1vp.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpqo7vp1vp.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqo7vp1vp.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqo7vp1vp.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqo7vp1vp.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpqo7vp1vp.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979127
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = [1, 3, 2]\n    if n < 3\n        return tri_vec[1:n+1]\n   \
    \ end\n    while length(tri_vec) < n + 1\n        tri_vec = [tri_vec; (1 + length(tri_vec)\
    \ / 2) * iseven(length(tri_vec)) + (tri_vec[end] + tri_vec[end-1] + tri_vec[end-2])\
    \ * isodd(length(tri_vec))]\n    end\n    return tri_vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxenvuzgm.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpxenvuzgm.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxenvuzgm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxenvuzgm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxenvuzgm.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxenvuzgm.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxenvuzgm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxenvuzgm.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxenvuzgm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxenvuzgm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxenvuzgm.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxenvuzgm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxenvuzgm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxenvuzgm.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 1"
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    ans = Array(Int64, n + 1)\n\
    \    ans[1] = 1\n    ans[2] = 3\n    ans[3] = 2\n    for i in 4:n + 1\n      \
    \  if i % 2 == 0\n            ans[i] = (i / 2) + 1\n        else\n           \
    \ ans[i] = ans[i - 1] + ans[i - 2] + ans[i + 1]\n        end\n    end\n    return\
    \ ans\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpgojm3ihc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpgojm3ihc.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ Array(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpgojm3ihc.jl:22\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgojm3ihc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgojm3ihc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgojm3ihc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching Array(::Type{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpgojm3ihc.jl:22\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgojm3ihc.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgojm3ihc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgojm3ihc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  MethodError: no method matching Array(::Type{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpgojm3ihc.jl:22\n   [2]\
    \ macro expansion"
  timestamp: 1659979127
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = Vector{Int64}(undef, n + 1)\n    res[1] = 1\n    res[2] = 3\n  \
    \  res[3] = 2\n    n > 3 && (res[4] = 8)\n    n > 4 && (res[5] = 21)\n    n >\
    \ 5 && (res[6] = 13)\n    n > 6 && (res[7] = 34)\n    n > 7 && (res[8] = 144)\n\
    \    n > 8 && (res[9] = 89)\n    n > 9 && (res[10] = 233)\n    n > 10 && (res[11]\
    \ = 377)\n    n > 11 && (res[12] = 610)\n    n > 12 && (res[13] = 987)\n    n\
    \ > 13 && (res[14] = 1597)\n    n > 14 && (res[15] = 2584)\n    n > 15 && (res[16]\
    \ = 4181)\n    n > 16 && (res[17] = 6765)\n    n > 17 && (res[18] = 10946)\n \
    \   n > 18 && (res[19] = 17711)\n    n > 19 && (res[20] = 28657)\n    n > 20 &&\
    \ (res[21] = 46368)\n    n > 21 && (res[22] = 75025)\n    n > 22 && (res[23] =\
    \ 121393)\n    n > 23 && (res[24] = 196418)\n    n > 24 && (res[25] = 317811)\n\
    \    n > 25 && (res[26] = 514229)\n    n > 26 && (res[27] = 832040)\n    n > 27\
    \ && (res[28] = 1346269)\n    n > 28 && (res[29] = 2178309)\n    n > 29 && (res[30]\
    \ = 3524578)\n    n > 30 && (res[31] = 5702887)\n    n > 31 && (res[32] = 9227465)\n\
    \    n > 32 && (res[33] = 14930352)\n    n > 33 && (res[34] = 24157817)\n   \n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2wc0613p.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2wc0613p.jl:1\n\
    in expression starting at /tmp/tmp2wc0613p.jl:1\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  first_seq = [1, 3, 2]\n  if n <= 3\n    return first_seq[1:n]\n  end\n \
    \ function rec_tri(n::Int64, vec::Vector{Int64})::Vector{Int64}\n    if n == 3\n\
    \      return vec\n    end\n    rec_tri(n - 1, push!(vec, vec[end - 2] + vec[end\
    \ - 1] + vec[end]))\n  end\n  rec_tri(n, first_seq)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmc0aj2ig.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpmc0aj2ig.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc0aj2ig.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc0aj2ig.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmc0aj2ig.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmc0aj2ig.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmc0aj2ig.jl:35\ntest set: Test Failed at /tmp/tmpmc0aj2ig.jl:38\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 6,\
    \ 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc0aj2ig.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc0aj2ig.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmc0aj2ig.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc0aj2ig.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc0aj2ig.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmc0aj2ig.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == "
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your solution goes here\nend\n\"\"\"The function count_ones_and_zeros\
    \ counts the number of zeros and ones in an input \n    binary number. The function\
    \ takes a vector of binary digits v and outputs a pair \n    (one_count, zero_count)\
    \ where one_count is the number of ones in v and zero_count \n    is the number\
    \ of zeros in v.\n    Example:\n    >>> count_ones_and_zeros([1, 1, 0, 0, 1, 0,\
    \ 1])\n    (4, 3)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp4tvqfrvu.jl:21\nin expression starting at /tmp/tmp4tvqfrvu.jl:21\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"\"\" This function returns the Vector of the first n+1 numbers of the\
    \ Tribonacci sequence\"\"\"\n    out = zeros(Int64, n+1)\n    out[1] = 1\n   \
    \ out[2] = 3\n    for i in 3:n+1\n        if iseven(i)\n            out[i] = 1\
    \ + i / 2\n        else\n            out[i] = out[i-1] + out[i-2] + out[i+1]\n\
    \        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp78p66863.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp78p66863.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78p66863.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78p66863.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp78p66863.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp78p66863.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp78p66863.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp78p66863.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp78p66863.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78p66863.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78p66863.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp78p66863.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp78p66863.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = Vector{Int64}(n + 1)\n    for i = 1:n + 1\n        if i == 1\n   \
    \         a[i] = 1\n        elseif i == 2\n            a[i] = 3\n        elseif\
    \ i == 3\n            a[i] = 2\n        else\n            a[i] = a[i - 1] + a[i\
    \ - 2] + a[i - 3]\n        end\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmptutql2p5.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmptutql2p5.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmptutql2p5.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptutql2p5.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptutql2p5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmptutql2p5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmptutql2p5.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptutql2p5.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptutql2p5.jl:37\ntest set:\
    \ Error During Test at /tmp/tmptutql2p5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  MethodError: no method matching Vector"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    if n > 0\n      \
    \  result[2] = 3\n        for i in 3:n + 1\n            if i % 2 == 0\n      \
    \          result[i] = Int64(1 + i / 2)\n            else\n                result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1]\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd_ldm6ui.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpd_ldm6ui.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_ldm6ui.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_ldm6ui.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpd_ldm6ui.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd_ldm6ui.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd_ldm6ui.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd_ldm6ui.jl:37\ntest set:\
    \ Test Failed at /tmp/tmpd_ldm6ui.jl:40\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_ldm6ui.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_ldm6ui.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpd_ldm6ui.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd_ldm6ui.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        answer = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(answer,\
    \ i / 2 + 1)\n            else\n                push!(answer, answer[i - 1] +\
    \ answer[i - 2] + answer[i + 1])\n            end\n        end\n        return\
    \ answer\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1rcaf526.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp1rcaf526.jl:42\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1rcaf526.jl:31\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1rcaf526.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1rcaf526.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp1rcaf526.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1rcaf526.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1rcaf526.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1rcaf526.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp1rcaf526.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1rcaf526.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1rcaf526.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1rcaf526.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp1rcaf526.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979127
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i in 3:n + 1\n        if i % 2 == 0\n            result[i] = 1 + i / 2\n\
    \        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5_w8jz4o.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp5_w8jz4o.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_w8jz4o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_w8jz4o.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp5_w8jz4o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5_w8jz4o.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5_w8jz4o.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5_w8jz4o.jl:35\ntest set:\
    \ Test Failed at /tmp/tmp5_w8jz4o.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_w8jz4o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_w8jz4o.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp5_w8jz4o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5_w8jz4o.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_seq = [1, 3, 2]\n    for i = 3:n\n        if i % 2 == 0\n        \
    \    append!(tri_seq, (1 + (i / 2)))\n        else\n            append!(tri_seq,\
    \ (tri_seq[i] + tri_seq[i - 1] + tri_seq[i + 1]))\n        end\n    end\n    return\
    \ tri_seq\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpy7bht9p2.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpy7bht9p2.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy7bht9p2.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy7bht9p2.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy7bht9p2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpy7bht9p2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy7bht9p2.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy7bht9p2.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy7bht9p2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpy7bht9p2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy7bht9p2.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy7bht9p2.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy7bht9p2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpy7bht9p2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0 return [1] end\n  T = zeros(Int64, n + 1)\n  T[1] = 1\n  T[2]\
    \ = 3\n  T[3] = 2\n  for i in 4:n+1\n    T[i] = 3 * T[i - 1] - 3 * T[i - 2] +\
    \ T[i - 3]\n  end\n  return T\nend\n \nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\n\
    print(tri(6))\nprint(tri(7))\nprint(tri(8))\nprint(tri(9))\nprint(tri(10))\n \n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpf9l0o90b.jl:42

    '
  stdout: "[1, 3, 2, -2][1, 3, 2, -2, -9][1, 3, 2, -2, -9, -19][1, 3, 2, -2, -9, -19,\
    \ -32][1, 3, 2, -2, -9, -19, -32, -48][1, 3, 2, -2, -9, -19, -32, -48, -67][1,\
    \ 3, 2, -2, -9, -19, -32, -48, -67, -89][1, 3, 2, -2, -9, -19, -32, -48, -67,\
    \ -89, -114]test set: Test Failed at /tmp/tmpf9l0o90b.jl:45\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, -2] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9l0o90b.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9l0o90b.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpf9l0o90b.jl:46\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, -2, -9] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9l0o90b.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9l0o90b.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpf9l0o90b.jl:47\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, -2, -9, -19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9l0o90b.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9l0o90b.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpf9l0o90b.jl:48\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, -2, -9, -19, -32] == [1, 3, 2, 8, 3, 15,\
    \ 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9l0o90b.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/p"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = 0\n    b = 0\n    c = 3\n    v = [a, b, c]\n    if n < 3\n       \
    \ v = [a, b, c]\n    else\n        for i = 3:n\n            if i % 2 == 0\n  \
    \              a = i / 2\n            else\n                a = b + c + (i + 1)\n\
    \            end\n            b = c\n            c = a\n            push!(v, a)\n\
    \        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4lthsdd4.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp4lthsdd4.jl:44\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 0, 3, 7] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lthsdd4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lthsdd4.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp4lthsdd4.jl:45\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 0, 3, 7, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lthsdd4.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lthsdd4.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp4lthsdd4.jl:46\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 0, 3, 7, 2, 15] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lthsdd4.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lthsdd4.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp4lthsdd4.jl:47\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 0, 3, 7, 2, 15, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4lthsdd4.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4lthsdd4.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp4lthsdd4.jl:48\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 0, 3, 7, 2, 1"
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 4:n + 1\n            push!(v, (i % 2 == 0) ? 1 + i / 2 : v[end]\
    \ + v[end - 1] + v[end - 2])\n        end\n        return v\n    end\nend\n\"\"\
    \"You are given a sorted array of integers nums. A palindrome pivot is an index\
    \ \n    such that nums[index] == nums[index - 1], or index == 0.\n    Return an\
    \ array of palindrome pivots for nums. In case of no palindrome pivots,\n    return\
    \ an empty array.\n    Example:\n    >>> palindrome_pivots([0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n    [0, 2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpxb3piony.jl:33\nin expression starting at /tmp/tmpxb3piony.jl:33\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    trib = Vector{Int64}(undef, n+1)\n    trib[1] = 1\n    trib[2] = 3\n \
    \   trib[3] = 2\n    for i in 4:n+1\n        if (i % 2 == 0)\n            trib[i]\
    \ = 1 + i / 2\n        else\n            trib[i] = trib[i-1] + trib[i-2] + trib[i+1]\n\
    \        end\n    end\n    return trib\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp078s9hsc.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp078s9hsc.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp078s9hsc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp078s9hsc.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp078s9hsc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp078s9hsc.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp078s9hsc.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp078s9hsc.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp078s9hsc.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp078s9hsc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp078s9hsc.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp078s9hsc.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp078s9hsc.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    for i in 2:n + 1\n\
    \        if i % 2 == 0\n            result[i] = 1 + (i / 2)\n        else\n  \
    \          result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n       \
    \ end\n    end\n    return result\nend\ntri(3)\n \n \n\"\"\"\n    Our task is\
    \ to find the first n numbers of the series of positive integers\n    which are\
    \ divisible by neither of their digits.\n    For example:\n    - first number\
    \ of the series is 12,\n    - the second is 15,\n    - third is 18,\n    - the\
    \ fourth is 21, etc.\n    Examples:\n    >>> find_sequence(3)\n    [12, 15, 18]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2nz3w4e9.jl:33\nin expression starting at /tmp/tmp2nz3w4e9.jl:33\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = [3, 2, 1]\n    for i in 4:n + 1\n        if i % 2 == 0\n         \
    \   push!(v, div(i, 2) + 1)\n        else\n            push!(v, v[end] + v[end\
    \ - 1] + v[end - 2])\n        end\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmhiwe_k_.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpmhiwe_k_.jl:34\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 1, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmhiwe_k_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmhiwe_k_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmhiwe_k_.jl:35\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 2, 1, 3, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmhiwe_k_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmhiwe_k_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmhiwe_k_.jl:36\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [3, 2, 1, 3, 6, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmhiwe_k_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmhiwe_k_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmhiwe_k_.jl:37\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [3, 2, 1, 3, 6, 4, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmhiwe_k_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmhiwe_k_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmhiwe_k_.jl:38\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [3, 2, 1, 3, 6, 4,"
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = [1, 3, 2]\n    if n < 3\n        return x[1:n+1]\n    end\n    for\
    \ i = 4:n+1\n        if i % 2 == 0\n            push!(x, i/2 + 1)\n        else\n\
    \            push!(x, x[i-1] + x[i-2] + x[i-3])\n        end\n    end\n    return\
    \ x\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfokwj1f0.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpfokwj1f0.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfokwj1f0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfokwj1f0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpfokwj1f0.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfokwj1f0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfokwj1f0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpfokwj1f0.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfokwj1f0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfokwj1f0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpfokwj1f0.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfokwj1f0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfokwj1f0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpfokwj1f0.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = Vector{Int64}(n + 1)\n    seq[1] = 1\n    for i = 2:n + 1\n    \
    \    if i % 2 == 0\n            seq[i] = 1 + i / 2\n        else\n           \
    \ seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n        end\n    end\n    return\
    \ seq\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp1rvmf9fk.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp1rvmf9fk.jl:35\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp1rvmf9fk.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1rvmf9fk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rvmf9fk.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1rvmf9fk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp1rvmf9fk.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1rvmf9fk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1rvmf9fk.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1rvmf9fk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  MethodError: no method matching Vector"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    elseif n > 2\n        i\
    \ = 1\n        v = [1, 3, 2]\n        while i <= n - 2\n            if i % 2 ==\
    \ 0\n                push!(v, div(i + 1, 2))\n            else \n            \
    \    push!(v, v[end - 2] + v[end - 1] + v[end])\n            end\n           \
    \ i += 1\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxckbkjev.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpxckbkjev.jl:44\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxckbkjev.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxckbkjev.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpxckbkjev.jl:45\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 1] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxckbkjev.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxckbkjev.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpxckbkjev.jl:46\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 1, 9] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxckbkjev.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxckbkjev.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpxckbkjev.jl:47\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 1, 9, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxckbkjev.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxckbkjev.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpxckbkjev.jl:48\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 1, 9, "
  timestamp: 1659979126
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x = zeros(Int64, n + 1)\n    x[1] = 1\n    x[2] = 3\n    x[3] = 2\n  \
    \  for i in 4:n + 1\n        if i % 2 == 0\n            x[i] = 1 + i / 2\n   \
    \     else\n            x[i] = x[i - 1] + x[i - 2] + x[i + 1]\n        end\n \
    \   end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp1lecsdjk.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp1lecsdjk.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lecsdjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lecsdjk.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp1lecsdjk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1lecsdjk.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1lecsdjk.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1lecsdjk.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp1lecsdjk.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lecsdjk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lecsdjk.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp1lecsdjk.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1lecsdjk.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = Array{Int64}(undef, n + 1)\n    res[1] = 1\n    res[2] = 3\n   \
    \ res[3] = 2\n    for i in 4:n+1\n        res[i] = 1 + (i / 2)\n        if isodd(i)\n\
    \            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp1d2c3veg.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp1d2c3veg.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1d2c3veg.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1d2c3veg.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp1d2c3veg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(3.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmp1d2c3veg.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1d2c3veg.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1d2c3veg.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1d2c3veg.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(3.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmp1d2c3veg.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1d2c3veg.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1d2c3veg.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1d2c3veg.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  InexactError: Int64(3.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./fl"
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            x = [x..., x[i] + x[i - 1] + x[i - 2]]\n  \
    \      end\n        return x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3i7qgapi.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp3i7qgapi.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i7qgapi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i7qgapi.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3i7qgapi.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i7qgapi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i7qgapi.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3i7qgapi.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i7qgapi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i7qgapi.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3i7qgapi.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3i7qgapi.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3i7qgapi.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3i7qgapi.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979128
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in range(4, n + 1)\n        if i % 2 == 0\n            tri[i]\
    \ = i / 2\n        else\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]\n        end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2rpvck1r.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2rpvck1r.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rpvck1r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rpvck1r.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp2rpvck1r.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2rpvck1r.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2rpvck1r.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2rpvck1r.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp2rpvck1r.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 2, 4, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rpvck1r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rpvck1r.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp2rpvck1r.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2rpvck1r.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, div(i,\
    \ 2))\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9wd_af83.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp9wd_af83.jl:42\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wd_af83.jl:31\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9wd_af83.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9wd_af83.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp9wd_af83.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wd_af83.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9wd_af83.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9wd_af83.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp9wd_af83.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wd_af83.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9wd_af83.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9wd_af83.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp9wd_af83.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979129
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Create an array for the sequence up to n\n    t = zeros(Int64, n+1)\n\
    \    t[1] = 1\n    t[2] = 3\n    t[3] = 2\n    # Recurrence\n    for i = 4:n+1\n\
    \        if i % 2 == 0\n            t[i] = (i/2) + 1\n        else\n         \
    \   t[i] = t[i-1] + t[i-2] + t[i-3]\n        end\n    end\n    return t\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpqas0c90k.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpqas0c90k.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqas0c90k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqas0c90k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqas0c90k.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqas0c90k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqas0c90k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqas0c90k.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqas0c90k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqas0c90k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqas0c90k.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqas0c90k.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqas0c90k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqas0c90k.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_vec = Array{Int64}(undef,\
    \ n + 1)\n        tri_vec[1] = 1\n        tri_vec[2] = 3\n        tri_vec[3] =\
    \ 2\n        for i in 4:n + 1\n            if i % 2 == 0\n                tri_vec[i]\
    \ = Int64(1 + i / 2)\n            else\n                tri_vec[i] = tri_vec[i\
    \ - 1] + tri_vec[i - 2] + tri_vec[i + 1]\n            end\n        end\n     \
    \   return tri_vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpldfyaiyk.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpldfyaiyk.jl:45\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpldfyaiyk.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpldfyaiyk.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpldfyaiyk.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpldfyaiyk.jl:34\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpldfyaiyk.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpldfyaiyk.jl:44\ntest set:\
    \ Test Failed at /tmp/tmpldfyaiyk.jl:47\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpldfyaiyk.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpldfyaiyk.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpldfyaiyk.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpldfyaiyk.jl:34\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(n + 1)\n    for i in 1:n\n        result[i] = if\
    \ i == 1\n            3\n        elseif i % 2 == 0\n            i/2\n        else\n\
    \            result[i - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmprhwg2xld.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprhwg2xld.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmprhwg2xld.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhwg2xld.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhwg2xld.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprhwg2xld.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmprhwg2xld.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhwg2xld.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhwg2xld.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprhwg2xld.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  MethodError: no method matching Vector"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return [0]\n    end\n    \n    if n == 1\n  \
    \      return [1, 3]\n    end\n    \n    if n == 2\n        return [1, 3, 2]\n\
    \    end\n    \n    tri = [1, 3, 2]\n    \n    for i in 3:n\n        if i % 2\
    \ == 0\n            push!(tri, i/2 + 1)\n        else\n            push!(tri,\
    \ tri[i-1] + tri[i-2] + tri[i+1])\n        end\n    end\n    \n    return tri\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp3o5zbxsi.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmp3o5zbxsi.jl:49\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3o5zbxsi.jl:38\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3o5zbxsi.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3o5zbxsi.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp3o5zbxsi.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3o5zbxsi.jl:38\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3o5zbxsi.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3o5zbxsi.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp3o5zbxsi.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3o5zbxsi.jl:38\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3o5zbxsi.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3o5zbxsi.jl:48\ntest set:\
    \ Error During Test at /tmp/tmp3o5zbxsi.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n + 1\n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphsiaqnh5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphsiaqnh5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    end \n    if n == 1\n        return\
    \ [1]\n    end \n    if n == 2\n        return [1, 3]\n    end \n    if n == 3\n\
    \        return [1, 3, 2]\n    end \n    a = [1, 3, 2]\n    for i in 4:n\n   \
    \     a = [a; a[end] + a[end - 1] + a[end - 2]]\n    end \n    return a\nend \n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7j81huc1.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp7j81huc1.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j81huc1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j81huc1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7j81huc1.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7j81huc1.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7j81huc1.jl:41\ntest set: Test Failed at /tmp/tmp7j81huc1.jl:44\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 6,\
    \ 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j81huc1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j81huc1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7j81huc1.jl:45\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7j81huc1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7j81huc1.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp7j81huc1.jl:46\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == "
  timestamp: 1659979129
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        vec = [1, 3, 2, 8]\n        i = 4\n        while\
    \ i <= n\n            if i % 2 == 0\n                push!(vec, 1 + (i / 2))\n\
    \            else\n                push!(vec, vec[i-1] + vec[i-2] + vec[i+1])\n\
    \            end\n            i += 1\n        end\n        return vec\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpnee8ycnf.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpnee8ycnf.jl:48\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to\
    \ access 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnee8ycnf.jl:34\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnee8ycnf.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnee8ycnf.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpnee8ycnf.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnee8ycnf.jl:34\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnee8ycnf.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnee8ycnf.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpnee8ycnf.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnee8ycnf.jl:34\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnee8ycnf.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnee8ycnf.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpnee8ycnf.jl:51\n  Test threw exception\n  Expression:\
    \ can"
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    sequence = [1, 3, 2]\n    for i = 3:n\n        if i % 2 == 0\n       \
    \     push!(sequence, 1 + (i / 2))\n        else\n            push!(sequence,\
    \ sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        end\n    end\n\
    \    return sequence\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4gq1quc0.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp4gq1quc0.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4gq1quc0.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4gq1quc0.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4gq1quc0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4gq1quc0.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4gq1quc0.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4gq1quc0.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4gq1quc0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4gq1quc0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4gq1quc0.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4gq1quc0.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4gq1quc0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4gq1quc0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    (1 \u2264 n \u2264 10^6)\n    return []\nend\n```\n---\n<p align=\"center\"\
    > <a href=\"http://neerc.ifmo.ru/teaching/discrete_math_eng/2015/problems/f1.pdf\"\
    >\u0417\u0430\u0434\u0430\u0447\u0430 1</a> </p>\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qfok065.jl:22\nin expression starting at\
    \ /tmp/tmp_qfok065.jl:22\n"
  stdout: ''
  timestamp: 1659979129
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = Int64[]\n    for i = 1:n + 1\n        push!(tri, i % 2 == 0 ? 1\
    \ + Int64(i / 2) : tri[end] + tri[end - 1] + tri[end - 2])\n    end\n    return\
    \ tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpv06wbyzg.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpv06wbyzg.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpv06wbyzg.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv06wbyzg.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv06wbyzg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpv06wbyzg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpv06wbyzg.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv06wbyzg.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv06wbyzg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpv06wbyzg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpv06wbyzg.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv06wbyzg.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv06wbyzg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpv06wbyzg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        [1, 3]\n    else\n        x = tri(n - 1)\n        append!(x,\
    \ n / 2)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6e6x0jn0.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp6e6x0jn0.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n      @ ./number.jl:7\
    \ [inlined]\n    [3] setindex!\n      @ ./array.jl:903 [inlined]\n    [4] _append!(a::Vector{Int64},\
    \ #unused#::Base.HasShape{0}, iter::Float64)\n      @ Base ./array.jl:1060\n \
    \   [5] append!\n      @ ./array.jl:1050 [inlined]\n    [6] tri(n::Int64)\n  \
    \    @ Main /tmp/tmp6e6x0jn0.jl:23\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp6e6x0jn0.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6e6x0jn0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6e6x0jn0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n      @ ./number.jl:7\
    \ [inlined]\n    [3] setindex!\n      @ ./array.jl:903 [inlined]\n    [4] _append!(a::Vector{Int64},\
    \ #unused#::Base.HasShape{0}, iter::Float64)\n      @ Base ./array.jl:1060\n \
    \   [5] append!\n      @ ./array.jl:1050 [inlined]\n    [6] tri(n::Int64)\n  \
    \    @ Main /tmp/tmp6e6x0jn0.jl:23\n    [7] tri(n::Int64)\n      @ Main /tmp/tmp6e6x0jn0.jl:22\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6e6x0jn0.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6e6x0jn0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6e6x0jn0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] convert\n      @ ./number.jl:7\
    \ [inlined"
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        while length(v) <= n\n            if v[end] % 2 == 0\n              \
    \  push!(v, 1 + v[end] / 2)\n            else\n                push!(v, v[end\
    \ - 1] + v[end - 2] + v[end - 3])\n            end\n        end\n        return\
    \ v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz6yc2kia.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpz6yc2kia.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6yc2kia.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6yc2kia.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpz6yc2kia.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6yc2kia.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6yc2kia.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpz6yc2kia.jl:44\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 2, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6yc2kia.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6yc2kia.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpz6yc2kia.jl:45\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 2, 2, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6yc2kia.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6yc2kia.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpz6yc2kia.jl:46\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 2, 2, 2, "
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1] end\n    tri_n = Array{Int64}(n+1)\n    tri_n[1]\
    \ = 1\n    tri_n[2] = 3\n    for i = 3:n+1\n        if iseven(i)\n           \
    \ tri_n[i] = 1 + i/2\n        else\n            tri_n[i] = tri_n[i-1] + tri_n[i-2]\
    \ + tri_n[i+1]\n        end\n    end\n    return tri_n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpg0a2xo5q.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpg0a2xo5q.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpg0a2xo5q.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0a2xo5q.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0a2xo5q.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg0a2xo5q.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpg0a2xo5q.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"n must be non-negative integer\")\n    end\n\
    \    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n    result[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            result[i] = 1\
    \ + i / 2\n        else\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp65bkoqnq.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp65bkoqnq.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65bkoqnq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65bkoqnq.jl:39\ntest set: Error\
    \ During Test at /tmp/tmp65bkoqnq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp65bkoqnq.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp65bkoqnq.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp65bkoqnq.jl:39\ntest set:\
    \ Test Failed at /tmp/tmp65bkoqnq.jl:42\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65bkoqnq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65bkoqnq.jl:39\ntest set: Error\
    \ During Test at /tmp/tmp65bkoqnq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp65bkoqnq.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    #return [1, 3, 2, 8]\n    if n == 0\n        return [0]\n    end\n   \
    \ if n == 1\n        return [1, 3]\n    end\n    if n == 2\n        return [1,\
    \ 3, 2]\n    end\n    #n > 2\n    tri_vec = zeros(Int64, n + 1)\n    tri_vec[1]\
    \ = 1\n    tri_vec[2] = 3\n    tri_vec[3] = 2\n    for i in 4:n + 1\n        if\
    \ mod(i, 2) == 0\n            tri_vec[i] = 1 + i / 2\n        else\n         \
    \   tri_vec[i] = tri_vec[i - 1] + tri_vec[i - 2] + tri_vec[i - 3]\n        end\n\
    \    end\n    return tri_vec\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpikz8elqc.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpikz8elqc.jl:48\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikz8elqc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikz8elqc.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpikz8elqc.jl:49\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikz8elqc.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikz8elqc.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpikz8elqc.jl:50\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikz8elqc.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikz8elqc.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpikz8elqc.jl:51\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikz8elqc.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikz8elqc.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpikz8elqc.jl:52\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n  \
    \  for i in 4:n + 1\n        if i % 2 == 0\n            v[i] = 1 + i / 2\n   \
    \     else\n            v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n \
    \   end\n    return v\nend\n \n \n\"\"\" Given a list of numbers and a positive\
    \ integer number n, create a list in which \n    each element of the original\
    \ list is repeated n times. \n    Example:\n    >>> repeat_n_times([1, 2, 3],\
    \ 2)\n    [1, 1, 2, 2, 3, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpmrp3n1md.jl:34\nin expression starting at /tmp/tmpmrp3n1md.jl:34\n"
  stdout: ''
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\n   \
    \ \"\"\"\n    tribo = [0, 1, 3]\n    if n == 1 return tribo\n    end\n    for\
    \ i = 4:n\n        if i % 2 == 0\n            tribo[i] = 1 + i / 2\n        else\n\
    \            tribo[i] = tribo[i - 1] + tribo[i - 2] + tribo[i + 1]\n        end\n\
    \    end\n    return tribo\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpul9l2d0n.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpul9l2d0n.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpul9l2d0n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpul9l2d0n.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpul9l2d0n.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpul9l2d0n.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpul9l2d0n.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpul9l2d0n.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpul9l2d0n.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpul9l2d0n.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpul9l2d0n.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpul9l2d0n.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpul9l2d0n.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Mai"
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    if n <= 3\n        return result[1:n+1]\n    end\n\
    \    for i in 3:n\n        result[i+1] = result[i] + result[i-1] + result[i-2]\n\
    \    end\n    return result\nend\ntri(1)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5yp9f7j4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp5yp9f7j4.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [1:4]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] tri(n::Int64)\n     @ Main /tmp/tmp5yp9f7j4.jl:21\n   [5]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5yp9f7j4.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5yp9f7j4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5yp9f7j4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5yp9f7j4.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5yp9f7j4.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5yp9f7j4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5yp9f7j4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5yp9f7j4.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5yp9f7j4.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmped2gc4u3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmped2gc4u3.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmped2gc4u3.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmped2gc4u3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmped2gc4u3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmped2gc4u3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmped2gc4u3.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmped2gc4u3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = Vector{Int64}(undef, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3]\
    \ = 2\n    i = 4\n    while i <= n + 1\n        if i % 2 == 0\n            v[i]\
    \ = 1 + (i / 2)\n        else\n            v[i] = v[i - 1] + v[i - 2] + v[i +\
    \ 1]\n        end\n        i += 1\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp0f2t9bhi.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp0f2t9bhi.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f2t9bhi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2t9bhi.jl:38\ntest set: Error\
    \ During Test at /tmp/tmp0f2t9bhi.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0f2t9bhi.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0f2t9bhi.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0f2t9bhi.jl:38\ntest set:\
    \ Test Failed at /tmp/tmp0f2t9bhi.jl:41\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 46939055694805, 4] == [1, 3, 2, 8,\
    \ 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f2t9bhi.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f2t9bhi.jl:38\ntest set: Error\
    \ During Test at /tmp/tmp0f2t9bhi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0f2t9bhi.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expans"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i in 3:(n + 1)\n        if i % 2 == 0\n            result[i] = 1 + i /\
    \ 2\n        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp62hwn9__.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp62hwn9__.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp62hwn9__.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp62hwn9__.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp62hwn9__.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp62hwn9__.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp62hwn9__.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp62hwn9__.jl:35\ntest set:\
    \ Test Failed at /tmp/tmp62hwn9__.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp62hwn9__.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp62hwn9__.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp62hwn9__.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp62hwn9__.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return []\n    end\n    res = [1, 3, 2]\n    if n <\
    \ 3\n        return res[1:n]\n    end\n    for i in 3:n\n        t = i / 2\n \
    \       if i % 2 == 0\n            push!(res, 1 + t)\n        else\n         \
    \   push!(res, res[end] + res[end - 1] + res[end - 2])\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb_3lpojq.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpb_3lpojq.jl:41\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_3lpojq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_3lpojq.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb_3lpojq.jl:42\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_3lpojq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_3lpojq.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb_3lpojq.jl:43\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_3lpojq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_3lpojq.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb_3lpojq.jl:44\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_3lpojq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_3lpojq.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb_3lpojq.jl:45\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 1"
  timestamp: 1659979131
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    sequence = [1, 3, 2]\n    if n > 2\n        for i = 3:n\n            if\
    \ i % 2 == 0\n                push!(sequence, Int64(1 + i / 2))\n            else\n\
    \                push!(sequence, sequence[i] + sequence[i-1] + sequence[i+1])\n\
    \            end\n        end\n    end\n    return sequence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnw0xn7up.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpnw0xn7up.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnw0xn7up.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnw0xn7up.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnw0xn7up.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnw0xn7up.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnw0xn7up.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnw0xn7up.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnw0xn7up.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnw0xn7up.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnw0xn7up.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnw0xn7up.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnw0xn7up.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnw0xn7up.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979134
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    for i in 2:n + 1\n    \
    \    res[i] = n % 2 == 0 ? 1 + i / 2 : res[i - 1] + res[i - 2] + res[i + 1]\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpdnty4fch.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpdnty4fch.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnty4fch.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdnty4fch.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdnty4fch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdnty4fch.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpdnty4fch.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdnty4fch.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdnty4fch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdnty4fch.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnty4fch.jl:22\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdnty4fch.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdnty4fch.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdnty4fch.jl:34\n  Test threw"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        s = [1, 3, 2]\n\
    \        push!(s, 0)\n        for i = 1:n - 2\n            if mod(i, 2) == 0\n\
    \                s[i + 3] = 1 + floor(i / 2)\n            else\n             \
    \   s[i + 3] = s[i + 2] + s[i + 1] + s[i]\n            end\n        end\n    \
    \    return s\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp39pyff8w.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp39pyff8w.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp39pyff8w.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp39pyff8w.jl:42\ntest set: Error\
    \ During Test at /tmp/tmp39pyff8w.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp39pyff8w.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp39pyff8w.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp39pyff8w.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp39pyff8w.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp39pyff8w.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp39pyff8w.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp39pyff8w.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp39pyff8w.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ "
  timestamp: 1659979134
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"your code here\"\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkq95savy.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpkq95savy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: Cannot `convert` an\
    \ object of type String to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpkq95savy.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkq95savy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkq95savy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkq95savy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: Cannot `convert` an object of\
    \ type String to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpkq95savy.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkq95savy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 1]\n    else\n        v = tri(n - 1)\n\
    \        append!(v, sum(v[(n - 2):n]))\n        return v\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpotw3pf_u.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpotw3pf_u.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotw3pf_u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotw3pf_u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpotw3pf_u.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotw3pf_u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotw3pf_u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpotw3pf_u.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotw3pf_u.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotw3pf_u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpotw3pf_u.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotw3pf_u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotw3pf_u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpotw3pf_u.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_numbers = Array{Int64}(1)\n    tri_numbers[1] = 1\n    tri_numbers\
    \ = push!(tri_numbers, 3)\n    for i in 2:n + 1\n        if i % 2 == 0\n     \
    \       tri_numbers = push!(tri_numbers, 1 + Int64(i / 2))\n        else\n   \
    \         tri_numbers = push!(tri_numbers, tri_numbers[i - 1] + tri_numbers[i\
    \ - 2] + tri_numbers[i + 1])\n        end\n    end\n    return tri_numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp9ekmf_ta.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp9ekmf_ta.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp9ekmf_ta.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ekmf_ta.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ekmf_ta.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9ekmf_ta.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp9ekmf_ta.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    x, y, z = 1, 3, 2\n    r = [x, y, z]\n    i = 3\n    while i <= n\n  \
    \      if i % 2 == 0\n            x = 1 + i / 2\n        else\n            x =\
    \ y + z + r[i + 1]\n        end\n        push!(r, x)\n        i += 1\n    end\n\
    \    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp1ettsfkr.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp1ettsfkr.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1ettsfkr.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1ettsfkr.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1ettsfkr.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1ettsfkr.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1ettsfkr.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1ettsfkr.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1ettsfkr.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1ettsfkr.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1ettsfkr.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1ettsfkr.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1ettsfkr.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1ettsfkr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    output = Int64[]\n    for i = 1:n+1\n        if i == 1 \n            push!(output,\
    \ 1)\n        elseif i == 2\n            push!(output, 3)\n        elseif i ==\
    \ 3\n            push!(output, 2)\n        elseif i % 2 == 0\n            push!(output,\
    \ 1 + (i / 2))\n        else\n            push!(output, output[i-1] + output[i-2]\
    \ + output[i-3])\n        end\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4g94xv2h.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp4g94xv2h.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4g94xv2h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4g94xv2h.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4g94xv2h.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4g94xv2h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4g94xv2h.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4g94xv2h.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4g94xv2h.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4g94xv2h.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4g94xv2h.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4g94xv2h.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4g94xv2h.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4g94xv2h.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979133
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n      \
    \      result[i] = 1 + Int64(i / 2)\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return result\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp5j63cxo1.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp5j63cxo1.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j63cxo1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j63cxo1.jl:37\ntest set: Error\
    \ During Test at /tmp/tmp5j63cxo1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5j63cxo1.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5j63cxo1.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5j63cxo1.jl:37\ntest set:\
    \ Test Failed at /tmp/tmp5j63cxo1.jl:40\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 47958675357781, 4] == [1, 3, 2, 8,\
    \ 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5j63cxo1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5j63cxo1.jl:37\ntest set: Error\
    \ During Test at /tmp/tmp5j63cxo1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5j63cxo1.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expans"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  if n == 0 \n    return [0]\n  elseif n == 1\n    return [1, 3]\n  elseif\
    \ n == 2\n    return [1, 3, 2]\n  elseif n == 3\n    return [1, 3, 2, 8]\n  elseif\
    \ n == 4\n    return [1, 3, 2, 8, 4]\n  elseif n == 5\n    return [1, 3, 2, 8,\
    \ 4, 9]\n  elseif n == 6\n    return [1, 3, 2, 8, 4, 9, 6]\n  elseif n == 7\n\
    \    return [1, 3, 2, 8, 4, 9, 6, 19]\n  elseif n == 8\n    return [1, 3, 2, 8,\
    \ 4, 9, 6, 19, 14]\n  elseif n == 9\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14,\
    \ 21]\n  elseif n == 10\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12]\n  elseif\
    \ n == 11\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38]\n  elseif n ==\
    \ 12\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38, 26]\n  elseif n ==\
    \ 13\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38, 26, 31]\n  elseif n\
    \ == 14\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38, 26, 31, 13]\n  elseif\
    \ n == 15\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38, 26, 31, 13, 27]\n\
    \  elseif n == 16\n    return [1, 3, 2, 8, 4, 9, 6, 19, 14, 21, 12, 38, 26, 31,\
    \ 13, 27, 35]\n  elseif n == 17\n    return [1, 3, 2, 8,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1ub0_sq.jl:57\nin expression starting at\
    \ /tmp/tmpf1ub0_sq.jl:57\n"
  stdout: ''
  timestamp: 1659979132
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    s = zeros(Int64, n + 1)\n    s[1] = 1\n    s[2] = 3\n    for i in 2:n\n\
    \        if i % 2 == 0\n            s[i + 1] = 1 + i / 2\n        else\n     \
    \       s[i + 1] = s[i] + s[i - 1] + s[i + 1 - 1]\n        end\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxwfvz4j7.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpxwfvz4j7.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 7] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwfvz4j7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwfvz4j7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxwfvz4j7.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 7, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwfvz4j7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwfvz4j7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxwfvz4j7.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 7, 3, 13] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwfvz4j7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwfvz4j7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxwfvz4j7.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 7, 3, 13, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwfvz4j7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwfvz4j7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxwfvz4j7.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 7, 3, 1"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    for i in 2:n + 1\n\
    \        result[i] = if i % 2 == 0\n            i / 2\n        else\n        \
    \    result[i - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp73rsiywd.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp73rsiywd.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 1, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73rsiywd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73rsiywd.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp73rsiywd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp73rsiywd.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp73rsiywd.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp73rsiywd.jl:34\ntest set:\
    \ Test Failed at /tmp/tmp73rsiywd.jl:37\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 1, 2, 2, 4, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73rsiywd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73rsiywd.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp73rsiywd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp73rsiywd.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = zeros(Int64, n + 1)\n    a[1] = 1\n    a[2] = 3\n    for i = 3:n +\
    \ 1\n        if i % 2 == 0\n            a[i] = 1 + i / 2\n        else\n     \
    \       a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n        end\n    end\n    return\
    \ a\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0xqkds17.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp0xqkds17.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xqkds17.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xqkds17.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp0xqkds17.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0xqkds17.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0xqkds17.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0xqkds17.jl:35\ntest set:\
    \ Test Failed at /tmp/tmp0xqkds17.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xqkds17.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xqkds17.jl:35\ntest set: Error\
    \ During Test at /tmp/tmp0xqkds17.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0xqkds17.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979136
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    for i in 2:n + 1\n    \
    \    res[i] = 3 * res[i - 1] - res[i - 2]\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpksxqfzi4.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpksxqfzi4.jl:31\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpksxqfzi4.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpksxqfzi4.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpksxqfzi4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpksxqfzi4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpksxqfzi4.jl:22\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpksxqfzi4.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpksxqfzi4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpksxqfzi4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpksxqfzi4.jl:22\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpksxqfzi4.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpksxqfzi4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpksxqfzi4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979135
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    if n <= 2\n        return\
    \ [1, 3, 2]\n    end\n    prev = tri(n - 1)\n    prev2 = tri(n - 2)\n    prev3\
    \ = tri(n - 3)\n    sizeh = length(prev)\n    sizet = length(prev2)\n    size3\
    \ = length(prev3)\n    if sizeh != sizet\n        println(\"Error: vectors of\
    \ different lengths\")\n        return []\n    end\n    if sizeh != size3\n  \
    \      println(\"Error: vectors of different lengths\")\n        return []\n \
    \   end\n    trivec = Array(Int64, sizeh + 1)\n    trivec[1] = 1\n    for i =\
    \ 2:sizeh + 1\n        if i % 2 == 0\n            trivec[i] = 1 + (i / 2)\n  \
    \      else\n            trivec[i] = prev[i - 1] + prev2[i - 1] + prev3[i - 1]\n\
    \        end\n    end\n    return trivec\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''Error: vectors of different lengths\ntest set: Test Failed at /tmp/tmp5e9h0tga.jl:55\n  Expression:
    candidate(3) == [1, 3, 2, 8]\n   Evaluated: Int64[] == [1, 3, 2, 8]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e9h0tga.jl:55 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e9h0tga.jl:54\nError: vectors of
    different lengths\nError: vectors of different lengths\ntest set: Test Failed
    at /tmp/tmp5e9h0tga.jl:56\n  Expression: candidate(4) == [1, 3, 2, 8, 3]\n   Evaluated:
    Int64[] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e9h0tga.jl:56 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e9h0tga.jl:54\nError: vectors of
    different lengths\nError: vectors of different lengths\nError: vectors of different
    lengths\nError: vectors of different lengths\ntest set: Test Failed at /tmp/tmp5e9h0tga.jl:57\n  Expression:
    candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: Int64[] == [1, 3, 2, 8, 3,
    15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e9h0tga.jl:57 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e9h0tga.jl:54\nError: vectors of
    different lengths\nError: vectors of different lengths\nError: vectors of different
    lengths\nError: vectors of different lengths\nError: vectors of different lengths\nError:
    vectors of different lengths\nError: vectors of different lengths\ntest set: Error
    During Test at /tmp/tmp5e9h0tga.jl:58\n  Test threw exception\n  Expression: candi'
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3]\
    \ = 2\n    for i in 4:n + 1\n        tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmphsiaqnh5.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmphsiaqnh5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphsiaqnh5.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphsiaqnh5.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphsiaqnh5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphsiaqnh5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979130
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    lst = [1, 3, 2]\n    for i in 4:n+1\n        if i % 2 == 0\n         \
    \   push!(lst, 1 + (i / 2))\n        else\n            push!(lst, lst[i-1] + lst[i-2]\
    \ + lst[i+1])\n        end\n    end\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpvo6emfcr.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpvo6emfcr.jl:34\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvo6emfcr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvo6emfcr.jl:33\ntest set: Error\
    \ During Test at /tmp/tmpvo6emfcr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvo6emfcr.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvo6emfcr.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvo6emfcr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpvo6emfcr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvo6emfcr.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvo6emfcr.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvo6emfcr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpvo6emfcr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Mai"
  timestamp: 1659979136
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0 \n        return zeros(Int64, 1)\n    end\n    result = zeros(Int64,\
    \ n + 1)\n    result[1] = 1\n    if n >= 1\n        result[2] = 3\n    end\n \
    \   if n >= 2\n        result[3] = 2\n    end\n    i = 4\n    while i <= n + 1\n\
    \        if i % 2 == 0\n            result[i] = i / 2\n        else\n        \
    \    result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n        end\n\
    \        i += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpoq5quk74.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpoq5quk74.jl:46\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq5quk74.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq5quk74.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpoq5quk74.jl:47\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq5quk74.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq5quk74.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpoq5quk74.jl:48\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq5quk74.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq5quk74.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpoq5quk74.jl:49\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq5quk74.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq5quk74.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpoq5quk74.jl:50\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 2, 7, 3,"
  timestamp: 1659979135
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1]\n    elseif n == 1 return [1, 3]\n    elseif n ==\
    \ 2 return [1, 3, 2]\n    elseif n % 2 == 0 return [tri(i) for i in 0:n]\n   \
    \ else return [tri(i) for i in 0:n+1]\n    end\nend\n    \n    \n \nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979138
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 4:n+1\n            if mod(i, 2) == 0\n                seq =\
    \ push!(seq, 1 + i / 2)\n            else\n                seq = push!(seq, seq[end-2]\
    \ + seq[end-1] + seq[end])\n            end\n        end\n        return seq\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2rhlr8hq.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp2rhlr8hq.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rhlr8hq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rhlr8hq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2rhlr8hq.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rhlr8hq.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rhlr8hq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2rhlr8hq.jl:44\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rhlr8hq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rhlr8hq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2rhlr8hq.jl:45\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2rhlr8hq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2rhlr8hq.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp2rhlr8hq.jl:46\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979135
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    end\n    if n == 1\n        return [1]\n\
    \    end\n    if n == 2\n        return [1, 3]\n    end\n    v = [1, 3, 2]\n \
    \   for i in 3:n\n        if i % 2 == 0\n            push!(v, 1 + i / 2)\n   \
    \     else\n            push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n        end\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfs_8zebm.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpfs_8zebm.jl:43\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfs_8zebm.jl:33\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfs_8zebm.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfs_8zebm.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfs_8zebm.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfs_8zebm.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfs_8zebm.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfs_8zebm.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfs_8zebm.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfs_8zebm.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfs_8zebm.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfs_8zebm.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfs_8zebm.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \"\"\"\n    :param n: The number of Tribonacci sequence required\n   \
    \ :return: The first n numbers of the Tribonacci sequence.\n    \"\"\"\n    result\
    \ = zeros(Int64, n + 1)\n    result[1] = 1\n    for i in 2:n\n        if i % 2\
    \ == 0\n            result[i] = 1 + i / 2\n        else\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14b7uc_x.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp14b7uc_x.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3, 0] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14b7uc_x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14b7uc_x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14b7uc_x.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 2, 3, 3, 0] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14b7uc_x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14b7uc_x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14b7uc_x.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 2, 3, 3, 6, 0] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14b7uc_x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14b7uc_x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14b7uc_x.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 2, 3, 3, 6, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14b7uc_x.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14b7uc_x.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp14b7uc_x.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 2, 3, 3, 6, 4, "
  timestamp: 1659979136
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_array = zeros(Int64, n + 1)\n    tri_array[1] = 1\n    for i = 2:n\
    \ + 1\n        if i % 2 == 0\n            tri_array[i] = 1 + i / 2\n        else\n\
    \            tri_array[i] = tri_array[i - 1] + tri_array[i - 2] + tri_array[i\
    \ + 1]\n        end\n    end\n    return tri_array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0lnawgug.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp0lnawgug.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0lnawgug.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0lnawgug.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp0lnawgug.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0lnawgug.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0lnawgug.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0lnawgug.jl:34\ntest set:\
    \ Test Failed at /tmp/tmp0lnawgug.jl:37\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 2, 3, 3, 6, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0lnawgug.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0lnawgug.jl:34\ntest set: Error\
    \ During Test at /tmp/tmp0lnawgug.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0lnawgug.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # IMPLEMENT ME!\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpnk9u3yqc.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnk9u3yqc.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpnk9u3yqc.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnk9u3yqc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnk9u3yqc.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnk9u3yqc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpnk9u3yqc.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnk9u3yqc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659979138
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = Vector{Int64}(undef, n + 1)\n    t[1] = 1\n    for i in 2:n + 1\n\
    \        if i % 2 == 0\n            t[i] = 1 + i / 2\n        else\n         \
    \   t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n    return t\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpibwpgvi7.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpibwpgvi7.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwpgvi7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwpgvi7.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpibwpgvi7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpibwpgvi7.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpibwpgvi7.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpibwpgvi7.jl:34\ntest set:\
    \ Test Failed at /tmp/tmpibwpgvi7.jl:37\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 2, 8589934597, 3, 17179869194, 4] == [1, 3,\
    \ 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpibwpgvi7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpibwpgvi7.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpibwpgvi7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpibwpgvi7.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro "
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri=[0,1,3,2]\n    if n<=3\n        return tri[1:n+1]\n    end\n    for\
    \ i in 4:n+1\n        push!(tri, tri[i-1]+tri[i-2]+tri[i-3])\n    end\n    return\
    \ tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuz6l29t1.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpuz6l29t1.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuz6l29t1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuz6l29t1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpuz6l29t1.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 3, 2, 4, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuz6l29t1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuz6l29t1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpuz6l29t1.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 3, 2, 4, 6, 9] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuz6l29t1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuz6l29t1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpuz6l29t1.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 3, 2, 4, 6, 9, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuz6l29t1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuz6l29t1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpuz6l29t1.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 3,"
  timestamp: 1659979136
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v=zeros(Int64, n+1)\n    v[1]=1\n    v[2]=3\n    v[3]=2\n    for i in\
    \ 3:n\n        if (i%2==0)\n            v[i+1]=Int64(1+i/2)\n        else\n  \
    \          v[i+1]=v[i]+v[i-1]+v[i+1]\n        end\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpxzfwhusf.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpxzfwhusf.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 5] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzfwhusf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzfwhusf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxzfwhusf.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 5, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzfwhusf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzfwhusf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxzfwhusf.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 5, 3, 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzfwhusf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzfwhusf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxzfwhusf.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzfwhusf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzfwhusf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxzfwhusf.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 5, 3, 8, "
  timestamp: 1659979138
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    elseif n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1,3]\n    else\n        return vcat(tri(n-1),[(n%2\
    \ == 0) ? n/2 + 1 : tri(n-1)[end] + tri(n-2)[end] + tri(n+1)[end]])\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   result[3] = 2\n    for i in 4:n + 1\n        result[i] = (1 + i) / 2\n   \
    \ end\n    return result\nend\nprintln(tri(5))\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: InexactError: Int64(2.5)\nStacktrace:\n [1] Int64\n \
    \  @ ./float.jl:812 [inlined]\n [2] convert\n   @ ./number.jl:7 [inlined]\n [3]\
    \ setindex!\n   @ ./array.jl:903 [inlined]\n [4] tri(n::Int64)\n   @ Main /tmp/tmp0ul_bn9x.jl:24\n\
    \ [5] top-level scope\n   @ /tmp/tmp0ul_bn9x.jl:28\nin expression starting at\
    \ /tmp/tmp0ul_bn9x.jl:28\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n + 1)\n    tri[1] = 1\n    for i in 1:n \n       \
    \ if (i % 2 == 0) \n            tri[i + 1] = Int64(1 + i / 2)\n        else \n\
    \            tri[i + 1] = tri[i] + tri[i - 1] + tri[i + 1]\n        end\n    end\n\
    \    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmplwcf41u3.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmplwcf41u3.jl:35\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplwcf41u3.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplwcf41u3.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwcf41u3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmplwcf41u3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplwcf41u3.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplwcf41u3.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwcf41u3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmplwcf41u3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplwcf41u3.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplwcf41u3.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwcf41u3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmplwcf41u3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci = [1, 3, 2]\n    for i in 1:n-2\n        tribonacci = push!(tribonacci,\
    \ tribonacci[end-2] + tribonacci[end-1] + tribonacci[end])\n    end\n    return\
    \ tribonacci\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzfetd5o0.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpzfetd5o0.jl:30\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfetd5o0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfetd5o0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfetd5o0.jl:31\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfetd5o0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfetd5o0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfetd5o0.jl:32\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfetd5o0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfetd5o0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfetd5o0.jl:33\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzfetd5o0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzfetd5o0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzfetd5o0.jl:34\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979138
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_nums = [1, 3, 2]\n    for i = 3:n\n        tri_nums[i + 1] = (tri_nums[i]\
    \ + tri_nums[i - 1] + tri_nums[i - 2])\n    end\n    return tri_nums\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpk6rwmlak.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpk6rwmlak.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpk6rwmlak.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6rwmlak.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk6rwmlak.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpk6rwmlak.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpk6rwmlak.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6rwmlak.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk6rwmlak.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpk6rwmlak.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpk6rwmlak.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk6rwmlak.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk6rwmlak.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpk6rwmlak.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3"
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = [1, 3, 2]\n    if n < 3\n        return seq[1:n]\n    end\n    for\
    \ i in 3:n\n        if i % 2 == 0\n            push!(seq, 1 + (i / 2))\n     \
    \   else\n            push!(seq, seq[i - 1] + seq[i - 2] + seq[i + 1])\n     \
    \   end\n    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5pvp38b0.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp5pvp38b0.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5pvp38b0.jl:27\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pvp38b0.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5pvp38b0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5pvp38b0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5pvp38b0.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pvp38b0.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5pvp38b0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5pvp38b0.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5pvp38b0.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5pvp38b0.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5pvp38b0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5pvp38b0.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = [1, 3, 2]\n    for i in 3:n\n        if iseven(i)\n            push!(t,\
    \ 1 + i / 2)\n        else\n            push!(t, t[i-1] + t[i-2] + t[i+1])\n \
    \       end\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp54479rz4.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp54479rz4.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp54479rz4.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp54479rz4.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp54479rz4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp54479rz4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp54479rz4.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp54479rz4.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp54479rz4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp54479rz4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp54479rz4.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp54479rz4.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp54479rz4.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp54479rz4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    s = Vector{Int64}()\n    push!(s,1)\n    for i in\
    \ 1:n\n        if i == 1\n            push!(s,3)\n        elseif i == 2\n    \
    \        push!(s,2)\n        elseif i % 2 == 0\n            push!(s, i/2)\n  \
    \      else\n            push!(s, s[i] + s[i-1] + s[i+1])\n        end\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp80fx3424.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp80fx3424.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp80fx3424.jl:30\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp80fx3424.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp80fx3424.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp80fx3424.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp80fx3424.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp80fx3424.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp80fx3424.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp80fx3424.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp80fx3424.jl:30\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp80fx3424.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp80fx3424.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp80fx3424.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    arr = Array{Int64}(n + 1)\n    arr[1] = 1\n    arr[2] = 3\n    arr[3]\
    \ = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            arr[i] = 1 + i\
    \ / 2\n        else\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n\
    \        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp5hifwxtz.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp5hifwxtz.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp5hifwxtz.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5hifwxtz.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5hifwxtz.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5hifwxtz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmp5hifwxtz.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    elseif n == 4\n        return [1, 3, 2, 8, 7]\n    elseif\
    \ n == 5\n        return [1, 3, 2, 8, 7, 22]\n    elseif n == 6\n        return\
    \ [1, 3, 2, 8, 7, 22, 26]\n    elseif n == 7\n        return [1, 3, 2, 8, 7, 22,\
    \ 26, 80]\n    elseif n == 8\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87]\n\
    \    elseif n == 9\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258]\n    elseif\
    \ n == 10\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258, 296]\n    elseif\
    \ n == 11\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258, 296, 966]\n   \
    \ elseif n == 12\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258, 296, 966,\
    \ 1102]\n    elseif n == 13\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258,\
    \ 296, 966, 1102, 3666]\n    elseif n == 14\n        return [1, 3, 2, 8, 7, 22,\
    \ 26, 80, 87, 258, 296, 966, 1102, 3666, 4108]\n    elseif n == 15\n        return\
    \ [1, 3, 2, 8, 7, 22, 26, 80, 87, 258, 296, 966, 1102, 3666, 4108, 13764]\n  \
    \  elseif n == 16\n        return [1, 3, 2, 8, 7, 22, 26, 80, 87, 258, 296, 966,\
    \ 1102, 3666, 4108, 13764, 15732\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0pbdtjb.jl:53\nin expression starting at\
    \ /tmp/tmpx0pbdtjb.jl:53\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    for i = 4:n + 1\n        result[i] = ifelse(i %\
    \ 2 == 0, 1 + i / 2, result[i - 1] + result[i - 2] + result[i + 1])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkmh5q61c.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpkmh5q61c.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkmh5q61c.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkmh5q61c.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkmh5q61c.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkmh5q61c.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkmh5q61c.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkmh5q61c.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkmh5q61c.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkmh5q61c.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkmh5q61c.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkmh5q61c.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkmh5q61c.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkmh5q61c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979139
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   result[3] = 2\n    for i in 3:n\n        result[i + 1] = (i + 1) / 2 if i\
    \ % 2 == 0 else result[i] + result[i - 1] + result[i - 2]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2x3_oztd.jl:23 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2x3_oztd.jl:24\n\
    in expression starting at /tmp/tmp2x3_oztd.jl:24\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    k = []\n    k = append!(k, 1)\n    k = append!(k, 3)\n    for i in 2:n\n\
    \        if i % 2 == 0\n            k = append!(k, 1 + i / 2)\n        else\n\
    \            k = append!(k, k[i - 1] + k[i - 2] + k[i + 1])\n        end\n   \
    \ end\n    return k\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9sswpfcv.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp9sswpfcv.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Any} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9sswpfcv.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9sswpfcv.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9sswpfcv.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9sswpfcv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Any} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9sswpfcv.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9sswpfcv.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9sswpfcv.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9sswpfcv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Any} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9sswpfcv.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9sswpfcv.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9sswpfcv.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9sswpfcv.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,3]\n\
    \    else\n        a = 0\n        b = 1\n        c = 3\n        seq = [0,1,3]\n\
    \        for i in 1:n-2\n            if i % 2 == 0\n                d = a + b\
    \ + c\n                push!(seq,d)\n                a = b\n                b\
    \ = c\n                c = d\n            else\n                d = 1 + (i+1)/2\n\
    \                push!(seq,d)\n                a = b\n                b = c\n\
    \                c = d\n            end\n        end\n        return seq\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf4iteza8.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpf4iteza8.jl:51\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4iteza8.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4iteza8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf4iteza8.jl:52\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 3, 2, 6] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4iteza8.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4iteza8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf4iteza8.jl:53\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 3, 2, 6, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4iteza8.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4iteza8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf4iteza8.jl:54\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4iteza8.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4iteza8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpf4iteza8.jl:55\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 3, 2, 6, 3,"
  timestamp: 1659979138
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  out = zeros(Int64, n + 1)\n  out[1] = 1\n  out[2] = 3\n  out[3] = 2\n  for\
    \ i in 4:n + 1\n    out[i] = if i % 2 == 0 \n              out[i] = i / 2 + 1\n\
    \            else\n              out[i] = out[i - 1] + out[i - 2] + out[i + 1]\n\
    \            end\n  end\n  return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpkrvzxc8i.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpkrvzxc8i.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrvzxc8i.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrvzxc8i.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpkrvzxc8i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkrvzxc8i.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkrvzxc8i.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkrvzxc8i.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpkrvzxc8i.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrvzxc8i.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrvzxc8i.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpkrvzxc8i.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkrvzxc8i.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code here\n    x = zeros(Int64,n+1)\n    x[1] = 1\n    x[2] = 3\n\
    \    x[3] = 2\n    for i in 4:n+1\n        if i%2 == 0\n            x[i] = x[i-1]\
    \ + x[i-2] + x[i-3]\n        else\n            x[i] = x[i-1] + x[i-2] + 1 + Int64(i/2)\n\
    \        end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpzuumk6df.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpzuumk6df.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzuumk6df.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzuumk6df.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpzuumk6df.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpzuumk6df.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzuumk6df.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzuumk6df.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpzuumk6df.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpzuumk6df.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzuumk6df.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzuumk6df.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpzuumk6df.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpzuumk6df.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    vec = zeros(Int64, n + 1)\n    vec[1] = 1\n    vec[2] = 3\n    for i in\
    \ 3:n + 1\n        if i % 2 == 0\n            vec[i] = 1 + i / 2\n        else\n\
    \            vec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1]\n        end\n    end\n\
    \    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpd55xv47v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd55xv47v.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd55xv47v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd55xv47v.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpd55xv47v.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd55xv47v.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd55xv47v.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd55xv47v.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpd55xv47v.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd55xv47v.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd55xv47v.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpd55xv47v.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd55xv47v.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    nums = [1, 3, 2] \n    idx = 3\n    while idx <= n\n        if idx % 2\
    \ == 0\n            nums[idx + 1] = idx / 2 + 1\n        else\n            nums[idx\
    \ + 1] = nums[idx] + nums[idx - 1] + nums[idx - 2]\n        end\n        idx +=\
    \ 1\n    end\n    return nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxer57wkq.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpxer57wkq.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxer57wkq.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxer57wkq.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxer57wkq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxer57wkq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxer57wkq.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxer57wkq.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxer57wkq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxer57wkq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxer57wkq.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxer57wkq.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxer57wkq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxer57wkq.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 1:n-2\n        result = [result[1], result[2],\
    \ result[3], result[2] + result[3] + result[4]]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpe0vl1c8q.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpe0vl1c8q.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpe0vl1c8q.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0vl1c8q.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0vl1c8q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0vl1c8q.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpe0vl1c8q.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0vl1c8q.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0vl1c8q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0vl1c8q.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpe0vl1c8q.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0vl1c8q.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0vl1c8q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0vl1c8q.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n % 2 == 0\n        return\
    \ append!(tri(n - 1), 1 + n / 2)\n    else\n        return append!(tri(n - 1),\
    \ tri(n - 1)[end] + tri(n - 2)[end] + tri(n - 3)[end])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_pdqha9c.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp_pdqha9c.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 5] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pdqha9c.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pdqha9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_pdqha9c.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 5, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pdqha9c.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pdqha9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_pdqha9c.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 5, 3, 10] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pdqha9c.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pdqha9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_pdqha9c.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 5, 3, 10, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_pdqha9c.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_pdqha9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_pdqha9c.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 5, 3, 1"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    for i in\
    \ 3:n + 1\n        if i % 2 == 0\n            res[i] = 1 + (i / 2)\n        else\n\
    \            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n    end\n\
    \    return res\nend\ntri(3)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfaz55bah.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpfaz55bah.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfaz55bah.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfaz55bah.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpfaz55bah.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfaz55bah.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfaz55bah.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfaz55bah.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpfaz55bah.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfaz55bah.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfaz55bah.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpfaz55bah.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfaz55bah.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    end\n    if n == 1\n \
    \       return [1]\n    end\n    if n == 2\n        return [1, 3]\n    end\n \
    \   r = [1, 3, 2]\n    while length(r) <= n\n        if mod(length(r), 2) == 0\n\
    \            push!(r, trunc(Int64, (length(r) + 1) / 2))\n        else\n     \
    \       push!(r, r[end] + r[end - 1] + r[end - 2])\n        end\n    end\n   \
    \ return r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc57fjp7n.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpc57fjp7n.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc57fjp7n.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc57fjp7n.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpc57fjp7n.jl:44\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc57fjp7n.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc57fjp7n.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpc57fjp7n.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc57fjp7n.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc57fjp7n.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpc57fjp7n.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc57fjp7n.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc57fjp7n.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpc57fjp7n.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 2, 1"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = tri(n - 1)\n\
    \        if iseven(n)\n            push!(v, 1 + n / 2)\n        else\n       \
    \     push!(v, v[end - 2] + v[end - 1] + v[end])\n        end\n        return\
    \ v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk48skyve.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpk48skyve.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk48skyve.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk48skyve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpk48skyve.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk48skyve.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk48skyve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpk48skyve.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk48skyve.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk48skyve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpk48skyve.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk48skyve.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk48skyve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpk48skyve.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 1"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # The tri vector of size n + 1\n    tri = Vector{Int64}(undef, n + 1)\n\
    \    tri[1] = 1\n    tri[2] = 3\n    tri[3] = 2\n    for i = 4:n + 1\n       \
    \ if i % 2 == 0\n            tri[i] = i / 2\n        else\n            tri[i]\
    \ = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n    return tri\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl7m5eslo.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpl7m5eslo.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7m5eslo.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7m5eslo.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpl7m5eslo.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl7m5eslo.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl7m5eslo.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl7m5eslo.jl:37\ntest set:\
    \ Test Failed at /tmp/tmpl7m5eslo.jl:40\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 2, 4, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl7m5eslo.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl7m5eslo.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpl7m5eslo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl7m5eslo.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        out = [1,\
    \ 3, 2]\n        for i in 1:n - 2\n            if i % 2 == 0\n               \
    \ push!(out, 1 + i / 2)\n            else\n                push!(out, out[end\
    \ - 2] + out[end - 1] + out[end])\n            end\n        end\n        return\
    \ out\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9uhnwe2p.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp9uhnwe2p.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9uhnwe2p.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uhnwe2p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp9uhnwe2p.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9uhnwe2p.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uhnwe2p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp9uhnwe2p.jl:44\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9uhnwe2p.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uhnwe2p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp9uhnwe2p.jl:45\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9uhnwe2p.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uhnwe2p.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp9uhnwe2p.jl:46\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 2, 1"
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    for i in\
    \ 2:n\n        if i % 2 == 0\n            res[i + 1] = 1 + i / 2\n        else\n\
    \            res[i + 1] = res[i] + res[i - 1] + res[i + 1]\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdbz8ytrd.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpdbz8ytrd.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 5] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbz8ytrd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbz8ytrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdbz8ytrd.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 5, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbz8ytrd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbz8ytrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdbz8ytrd.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 5, 3, 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbz8ytrd.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbz8ytrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdbz8ytrd.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbz8ytrd.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbz8ytrd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdbz8ytrd.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 5, 3, 8, "
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    else\n        trib = [1, 3, 2]\n        for i = 4:n+1\n            trib_next\
    \ = trib[end-1] + trib[end-2] + trib[end]\n            push!(trib, trib_next)\n\
    \        end\n        return trib\n    end\nend\n# Find the Greatest Common Divisor(GCD)\n\
    \"\"\"Given two integers a and b, find their greatest common divisor.\nExamples:\n\
    >>> gcd(8, 3)\n1\n>>> gcd(10, 50)\n10\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpb58gemua.jl:33\nin expression starting at /tmp/tmpb58gemua.jl:33\n"
  stdout: ''
  timestamp: 1659979140
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    j = 1\n    k = 2\n    t = 3\n    for i = 4:n\n        if i % 2 == 0\n\
    \            t = Int64(1 + (i / 2))\n        else\n            t = j + k + t\n\
    \        end\n        j = k\n        k = t\n    end\n    return [j, k, t]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_tzu8808.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp_tzu8808.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tzu8808.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tzu8808.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_tzu8808.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [2, 3, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_tzu8808.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_tzu8808.jl:37\ntest set: Test Failed at /tmp/tmp_tzu8808.jl:40\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [3, 8, 8] ==\
    \ [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tzu8808.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tzu8808.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_tzu8808.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [8, 4, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_tzu8808.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_tzu8808.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_tzu8808.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [4, 16, 16] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktr"
  timestamp: 1659979141
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [0]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        #for i in 1:n\n\
    \        #    if iseven(i)\n        #        push!(v,i/2)\n        #    else\n\
    \        #        push!(v,v[i-1]+v[i-2]+v[i+1])\n        #    end\n        #end\n\
    \        #return v\n        #This is an alternate solution using append!\n   \
    \     v = [1,3,2]\n        for i in 3:n\n            if iseven(i)\n          \
    \      append!(v, i/2)\n            else\n                append!(v, v[i-1]+v[i-2]+v[i+1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpycl5zl6k.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpycl5zl6k.jl:51\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpycl5zl6k.jl:40\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycl5zl6k.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycl5zl6k.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpycl5zl6k.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpycl5zl6k.jl:40\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycl5zl6k.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycl5zl6k.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpycl5zl6k.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpycl5zl6k.jl:40\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpycl5zl6k.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpycl5zl6k.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpycl5zl6k.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_ = zeros(Int64, n + 1)\n    tri_[1] = 1\n    for i = 2:n + 1\n   \
    \     if i % 2 == 0\n            tri_[i] = (1 + i / 2)\n        else\n       \
    \     tri_[i] = tri_[i - 1] + tri_[i - 2] + tri_[i + 1]\n        end\n    end\n\
    \    return tri_\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpvtr1njga.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpvtr1njga.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 2, 3, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtr1njga.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtr1njga.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpvtr1njga.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtr1njga.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvtr1njga.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvtr1njga.jl:34\ntest set:\
    \ Test Failed at /tmp/tmpvtr1njga.jl:37\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 2, 3, 3, 6, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvtr1njga.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvtr1njga.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpvtr1njga.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtr1njga.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979143
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    return [n <= 2 ? 1 : n <= 3 ? 3 : n % 2 == 0 ? n / 2 : tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) for n in 0:n]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmppp0rk2wi.jl:26\n  Expression: candidate(3)
    == [1, 3, 2, 8]\n   Evaluated: [1, 1, 1, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]
    macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmppp0rk2wi.jl:26 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmppp0rk2wi.jl:25\ntest set: Test Failed
    at /tmp/tmppp0rk2wi.jl:27\n  Expression: candidate(4) == [1, 3, 2, 8, 3]\n   Evaluated:
    [1, 1, 1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmppp0rk2wi.jl:27 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmppp0rk2wi.jl:25\n'''
  timestamp: 1659979144
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    if n > 0\n        result[1] = 1\n  \
    \  end\n    if n > 1\n        result[2] = 3\n    end\n    if n > 2\n        result[3]\
    \ = 2\n    end\n    for i in 4:n + 1\n        if mod(i, 2) == 0\n            result[i]\
    \ = Int64(ceil(i / 2))\n        else\n            result[i] = result[i - 1] +\
    \ result[i - 2] + result[i - 3]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjbolmauj.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpjbolmauj.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbolmauj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbolmauj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpjbolmauj.jl:44\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbolmauj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbolmauj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpjbolmauj.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbolmauj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbolmauj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpjbolmauj.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbolmauj.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbolmauj.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpjbolmauj.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 2, 7, 3,"
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    end\n    t = Vector{Int64}()\n    push!(t,\
    \ 1)\n    push!(t, 3)\n    for i in 2:n\n        if i % 2 == 0\n            push!(t,\
    \ 1 + (i / 2))\n        else\n            push!(t, t[i - 1] + t[i - 2] + t[i +\
    \ 1])\n        end\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6wj5rxxj.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp6wj5rxxj.jl:39\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6wj5rxxj.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wj5rxxj.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wj5rxxj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6wj5rxxj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6wj5rxxj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wj5rxxj.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wj5rxxj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6wj5rxxj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6wj5rxxj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wj5rxxj.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wj5rxxj.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp6wj5rxxj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979144
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        res = [1, 3, 2]\n\
    \        i = 3\n        while i <= n + 1\n            if i % 2 == 0\n        \
    \        res = vcat(res, Int64(1 + i / 2))\n            else\n               \
    \ res = vcat(res, res[i] + res[i - 1] + res[i + 1])\n            end\n       \
    \     i += 1\n        end\n        return res\n    end\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmplgt7tkaj.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmplgt7tkaj.jl:45\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplgt7tkaj.jl:32\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplgt7tkaj.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplgt7tkaj.jl:44\ntest set:\
    \ Error During Test at /tmp/tmplgt7tkaj.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplgt7tkaj.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplgt7tkaj.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplgt7tkaj.jl:44\ntest set:\
    \ Error During Test at /tmp/tmplgt7tkaj.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplgt7tkaj.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplgt7tkaj.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplgt7tkaj.jl:44\ntest set:\
    \ Error During Test at /tmp/tmplgt7tkaj.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1]\n    tri1 = 3\n    tri2 = 0\n    tri3 = 0\n    res\
    \ = [1, 3]\n    for i = 2:n\n        tri4 = (i % 2 == 0) ? tri1 + i/2 : tri1 +\
    \ tri2 + tri3\n        push!(res, tri4)\n        tri3 = tri2\n        tri2 = tri1\n\
    \        tri1 = tri4\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgdbqhez.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgdbqhez.jl:1\n\
    in expression starting at /tmp/tmpzgdbqhez.jl:1\n"
  stdout: ''
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    if n > 2\n        for i in 4:n+1\n           \
    \ if i % 2 == 0\n                push!(result, i / 2)\n            else\n    \
    \            push!(result, result[i-1] + result[i-2] + result[i-3])\n        \
    \    end\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4mg2s3yr.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp4mg2s3yr.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4mg2s3yr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4mg2s3yr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4mg2s3yr.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 7] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4mg2s3yr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4mg2s3yr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4mg2s3yr.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 7, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4mg2s3yr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4mg2s3yr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4mg2s3yr.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 7, 3, 12] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4mg2s3yr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4mg2s3yr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4mg2s3yr.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 2, 7, 3,"
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = [1, 3, 2]\n    while length(tri) - 1 < n\n        push!(tri, (tri[end]\
    \ + tri[end - 1] + tri[end - 2]) % MOD)\n    end\n    return tri\nend\ntri(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: n not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8r4dbp_y.jl:25\nin expression starting at /tmp/tmp8r4dbp_y.jl:25\n"
  stdout: ''
  timestamp: 1659979142
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Your code here\n    if n == 0\n        return [1]\n    elseif n == 1\n\
    \        return [1,3]\n    elseif n == 2\n        return [1,3,2]\n    else\n \
    \       if n % 2 == 0\n            return [1,3,2,8]\n        else\n          \
    \  return [1,3,2,8,8]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9qvkehqf.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp9qvkehqf.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 8, 8] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qvkehqf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qvkehqf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9qvkehqf.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9qvkehqf.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9qvkehqf.jl:38\ntest set: Test Failed at /tmp/tmp9qvkehqf.jl:41\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 8,\
    \ 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qvkehqf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qvkehqf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9qvkehqf.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qvkehqf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qvkehqf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9qvkehqf.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 8] == [1, 3, 2, 8,"
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = [1, 3, 2]\n    if n < 3\n        return tri_vec[1:n+1]\n   \
    \ end\n    for i in 1:n-2\n        push!(tri_vec, tri_vec[end] + tri_vec[end-1]\
    \ + tri_vec[end-2])\n    end\n    return tri_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb4df69b1.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb4df69b1.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4df69b1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4df69b1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb4df69b1.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4df69b1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4df69b1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb4df69b1.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4df69b1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4df69b1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb4df69b1.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4df69b1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4df69b1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb4df69b1.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n        \
    \    append!(result, 1 + i / 2)\n        else\n            append!(result, result[i]\
    \ + result[i - 1] + result[i + 1])\n        end\n    end\n    return result\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp40v5tx0s.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp40v5tx0s.jl:35\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp40v5tx0s.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp40v5tx0s.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp40v5tx0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp40v5tx0s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp40v5tx0s.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp40v5tx0s.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp40v5tx0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp40v5tx0s.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp40v5tx0s.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp40v5tx0s.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp40v5tx0s.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp40v5tx0s.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 return Vector{Int64}() end\n    vec = [3]\n    for i in 2:n\n\
    \        if i % 2 == 0\n            push!(vec, Int64(1 + i / 2))\n        else\n\
    \            push!(vec, vec[end] + vec[end - 1] + vec[end - 2])\n        end\n\
    \    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpr76ydac9.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpr76ydac9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 2-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr76ydac9.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr76ydac9.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr76ydac9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr76ydac9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr76ydac9.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr76ydac9.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr76ydac9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr76ydac9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr76ydac9.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr76ydac9.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr76ydac9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr76ydac9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n      \
    \      result[i] = 1 + i / 2\n        else\n            result[i] = result[i -\
    \ 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpuv_bd61l.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpuv_bd61l.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv_bd61l.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv_bd61l.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpuv_bd61l.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuv_bd61l.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuv_bd61l.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuv_bd61l.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpuv_bd61l.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuv_bd61l.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuv_bd61l.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpuv_bd61l.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuv_bd61l.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        vec = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(vec, vec[i] + vec[i - 1] + vec[i - 2])\n\
    \        end\n        return vec\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4yn9av7t.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp4yn9av7t.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yn9av7t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yn9av7t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp4yn9av7t.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yn9av7t.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yn9av7t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp4yn9av7t.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yn9av7t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yn9av7t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp4yn9av7t.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4yn9av7t.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4yn9av7t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp4yn9av7t.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979143
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return [0]\n    end\n    if n == 1\n        return\
    \ [1, 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    \n  \
    \  vec = [1, 3, 2]\n    for i = 3:n\n        if i % 2 == 0\n            push!(vec,\
    \ i + 1)\n        else\n            push!(vec, vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3])\n        end\n    end\n    return vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfskbxsju.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpfskbxsju.jl:45\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfskbxsju.jl:35\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfskbxsju.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfskbxsju.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfskbxsju.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfskbxsju.jl:35\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfskbxsju.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfskbxsju.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfskbxsju.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfskbxsju.jl:35\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfskbxsju.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfskbxsju.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfskbxsju.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    return [tri_iter(i) for i = 0:n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpoqyqewk6.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpoqyqewk6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  UndefVarError: tri_iter not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpoqyqewk6.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpoqyqewk6.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpoqyqewk6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoqyqewk6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  UndefVarError: tri_iter not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n    \
    \ @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpoqyqewk6.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpoqyqewk6.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpoqyqewk6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoqyqewk6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  UndefVarError: tri_iter not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] tri(n::Int64)\n     @ Main\
    \ /tmp/tmpoqyqewk6.jl:19\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}(0)\n    end\n    v = Vector{Int64}(n\
    \ + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n    if n < 3\n        return\
    \ v[1:n + 1]\n    end\n    for i in 4:n + 1\n        if i % 2 == 0\n         \
    \   v[i] = 1 + i / 2\n        else\n            v[i] = v[i - 1] + v[i - 2] + v[i\
    \ + 1]\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpp1y26z2x.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpp1y26z2x.jl:43\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n  \
    \  Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpp1y26z2x.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1y26z2x.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1y26z2x.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpp1y26z2x.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpp1y26z2x.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1y26z2x.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1y26z2x.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpp1y26z2x.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  MethodError: no method matching Vector"
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n + 1)\n    res[1] = 1\n    res[2] = 3\n    res[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            res[i] = (i /\
    \ 2) + 1\n        else\n            res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1]\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpzjbfsapp.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpzjbfsapp.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjbfsapp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjbfsapp.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpzjbfsapp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzjbfsapp.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjbfsapp.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjbfsapp.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpzjbfsapp.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzjbfsapp.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzjbfsapp.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpzjbfsapp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzjbfsapp.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        ans = [1, 3, 2]\n\
    \        i = 3\n        while i <= n\n            iseven = (i % 2 == 0)\n    \
    \        if iseven\n                tm = 1 + i / 2\n            else\n       \
    \         tm = ans[i] + ans[i - 1] + ans[i + 1]\n            end\n           \
    \ push!(ans, tm)\n            i += 1\n        end\n        return ans\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpj54_caza.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpj54_caza.jl:46\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpj54_caza.jl:33\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj54_caza.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj54_caza.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpj54_caza.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpj54_caza.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj54_caza.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj54_caza.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpj54_caza.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpj54_caza.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj54_caza.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj54_caza.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpj54_caza.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    v = zeros(Int64, n + 1)\n\
    \    v[1] = 1\n    v[2] = 3\n    v[3] = 2\n    i = 4\n    while i <= n + 1\n \
    \       if i % 2 == 0\n            v[i] = v[i - 1] + v[i - 2] + 1 + i / 2\n  \
    \      else\n            v[i] = v[i - 1] + v[i - 2] + v[i - 3]\n        end\n\
    \        i += 1\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmppcwhjprt.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmppcwhjprt.jl:43\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8, 13] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcwhjprt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcwhjprt.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppcwhjprt.jl:44\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8, 13, 25] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcwhjprt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcwhjprt.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppcwhjprt.jl:45\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8, 13, 25, 46] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcwhjprt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcwhjprt.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppcwhjprt.jl:46\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8, 13, 25, 46, 76] == [1, 3, 2, 8, 3,\
    \ 15, 4, 24]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcwhjprt.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcwhjprt.jl:41\ntest set: Test\
    \ Failed at /tmp/tmppcwhjprt.jl:47\n  Expression: candidate(8) == [1, 3, 2, "
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        v = tri(n-1)\n \
    \       if n % 2 == 0\n            push!(v, 1 + n / 2)\n        else\n       \
    \     push!(v, v[end] + v[end-1] + v[end-2])\n        end\n        return v\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxtv3tud_.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpxtv3tud_.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtv3tud_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtv3tud_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxtv3tud_.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtv3tud_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtv3tud_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxtv3tud_.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtv3tud_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtv3tud_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxtv3tud_.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtv3tud_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtv3tud_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpxtv3tud_.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 1"
  timestamp: 1659979144
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # We assume that n >= 1\n    seq = [3, 3, 3]\n    if n == 1\n        return\
    \ [3]\n    elseif n == 2\n        return [3, 3]\n    elseif n == 3\n        return\
    \ [3, 3, 3]\n    else\n        for i = 4:n\n            seq = [seq[2], seq[3],\
    \ seq[1] + seq[2] + seq[3]]\n        end\n        push!(seq, seq[1] + seq[2] +\
    \ seq[3])\n        return seq\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_vapra2l.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmp_vapra2l.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 3, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vapra2l.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vapra2l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_vapra2l.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 3, 9, 15] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vapra2l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vapra2l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_vapra2l.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [3, 9, 15, 27] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vapra2l.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vapra2l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_vapra2l.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [9, 15, 27, 51] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_vapra2l.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_vapra2l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_vapra2l.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [15, 27, 51, 93] == [1, 3, 2, 8, 3"
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i in 3:n + 1\n        if i % 2 == 0\n            result[i] = 1 + Int64(i\
    \ / 2)\n        else\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpbe2fwru9.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpbe2fwru9.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbe2fwru9.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbe2fwru9.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpbe2fwru9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbe2fwru9.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbe2fwru9.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbe2fwru9.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpbe2fwru9.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbe2fwru9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbe2fwru9.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpbe2fwru9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbe2fwru9.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    res = Vector{Int64}(undef, n + 1)\n    res[1] = 1\n    for i in 2:n+1\n\
    \        res[i] = 1 + (i / 2)\n    end\n    for i in 3:n+1\n        if i % 2 ==\
    \ 1\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjwbijxtl.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpjwbijxtl.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpjwbijxtl.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjwbijxtl.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjwbijxtl.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjwbijxtl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpjwbijxtl.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjwbijxtl.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjwbijxtl.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjwbijxtl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(2.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] setindex!\n     @ ./array.jl:903 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmpjwbijxtl.jl:22\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjwbijxtl.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scop"
  timestamp: 1659979147
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    for i in 4:n+1\n        if i % 2 == 0\n        \
    \    result[i] = 1 + i / 2\n        else\n            result[i] = result[i - 1]\
    \ + result[i - 2] + result[i + 1]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpp4ewrytt.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpp4ewrytt.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4ewrytt.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4ewrytt.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpp4ewrytt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpp4ewrytt.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp4ewrytt.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp4ewrytt.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpp4ewrytt.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4ewrytt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4ewrytt.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpp4ewrytt.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpp4ewrytt.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979147
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return []\n    end\n    #return @tri_rec 1, 3, 2, n\n\
    \    return @tri_iter 1, 3, 2, n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @tri_iter not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp8x29f144.jl:1\nin\
    \ expression starting at /tmp/tmp8x29f144.jl:1\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = [3,2,1]\n    if n <= 3\n        return tri[1:n]\n    end\n    for\
    \ i in 4:n\n        push!(tri, 1 + (i / 2))\n        if i % 2 == 1\n         \
    \   tri[i] = tri[i] + tri[i - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n\
    \    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmppdmnks8i.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmppdmnks8i.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 1] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdmnks8i.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdmnks8i.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppdmnks8i.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 2, 1, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppdmnks8i.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppdmnks8i.jl:35\ntest set: Error During Test\
    \ at /tmp/tmppdmnks8i.jl:38\n  Test threw exception\n  Expression: candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1] Int64\n\
    \     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] push!\n     @ ./array.jl:994 [inlined]\n   [4] tri(n::Int64)\n     @ Main\
    \ /tmp/tmppdmnks8i.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppdmnks8i.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppdmnks8i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppdmnks8i.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  InexactError: Int64(3.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] push!\n     @ ./array.jl:994 [inlined]\n   [4] tri(n::Int64)\n\
    \     @ Main /tmp/tmppdmnks8i.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri(n) = if n == 1\n    tri(n) = 3\n    elseif n % 2 == 0\n    tri(n)\
    \ = 1 + n / 2\n    else\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpol81zc3r.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpol81zc3r.jl:1\n\
    in expression starting at /tmp/tmpol81zc3r.jl:1\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    result = zeros(Int64, n +\
    \ 1)\n    result[1] = 1\n    for i in 2:n\n        result[i] = result[i - 1] +\
    \ result[i - 2] + result[i - 3]\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp33yj_4nh.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp33yj_4nh.jl:34\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp33yj_4nh.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp33yj_4nh.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp33yj_4nh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp33yj_4nh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp33yj_4nh.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp33yj_4nh.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp33yj_4nh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp33yj_4nh.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp33yj_4nh.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp33yj_4nh.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp33yj_4nh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp33yj_4nh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [3]\n    for i in 2:n + 1\n        push!(result, (i % 2 == 0\
    \ ? (1 + i / 2) : (result[end] + result[end - 1] + result[end - 2])))\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2znxprrb.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp2znxprrb.jl:30\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 2-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2znxprrb.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2znxprrb.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2znxprrb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2znxprrb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2znxprrb.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2znxprrb.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2znxprrb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2znxprrb.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2znxprrb.jl:21\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2znxprrb.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2znxprrb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2znxprrb.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_vec = ones(Int64, n+1)\n    tri_vec[1] = 3\n    for i in 2:n\n   \
    \     if iseven(i)\n            tri_vec[i] = i / 2\n        else\n           \
    \ tri_vec[i] = tri_vec[i-1] + tri_vec[i-2] + tri_vec[i+1]\n        end\n    end\n\
    \    return tri_vec\nend\ntri(3)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4p8qr73v.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp4p8qr73v.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 1, 5, 1] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p8qr73v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p8qr73v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4p8qr73v.jl:37\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 1, 5, 2, 1] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p8qr73v.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p8qr73v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4p8qr73v.jl:38\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [3, 1, 5, 2, 8, 1] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p8qr73v.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p8qr73v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4p8qr73v.jl:39\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [3, 1, 5, 2, 8, 3, 1] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p8qr73v.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p8qr73v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4p8qr73v.jl:40\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [3, 1, 5, 2, 8, 3, "
  timestamp: 1659979146
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   result[3] = 2\n    for i = 4:n + 1\n        result[i] = ifelse(i % 2 == 0,\
    \ 1 + i / 2, result[i - 1] + result[i - 2] + result[i + 1])\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpr9ie5nls.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpr9ie5nls.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr9ie5nls.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr9ie5nls.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr9ie5nls.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr9ie5nls.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr9ie5nls.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr9ie5nls.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr9ie5nls.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr9ie5nls.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr9ie5nls.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr9ie5nls.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr9ie5nls.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr9ie5nls.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979147
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    for i = 3:n+1\n\
    \        if i % 2 == 0\n            v[i] = 1 + i / 2\n        else\n         \
    \   v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n    end\n    return v\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpd3hkr46a.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpd3hkr46a.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3hkr46a.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3hkr46a.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpd3hkr46a.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd3hkr46a.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd3hkr46a.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd3hkr46a.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpd3hkr46a.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd3hkr46a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd3hkr46a.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpd3hkr46a.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpd3hkr46a.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    out = zeros(Int64, n + 1)\n    out[1] = 1\n    out[2] = 3\n    out[3]\
    \ = 2\n    for i = 4:n\n        out[i] = i % 2 == 0 ?  out[i] = i / 2 : out[i]\
    \ = out[i - 1] + out[i - 2] + out[i + 1]\n    end\n    return out\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpjagn_cjb.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpjagn_cjb.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 0] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjagn_cjb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjagn_cjb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjagn_cjb.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 2, 0] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjagn_cjb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjagn_cjb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjagn_cjb.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 2, 4, 0] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjagn_cjb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjagn_cjb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjagn_cjb.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 2, 4, 3, 0] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjagn_cjb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjagn_cjb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjagn_cjb.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 2, 4, 3, "
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    end\n    if n == 1\n \
    \       return [1]\n    end\n    if n == 2\n        return [1, 3]\n    end\n \
    \   x = [1, 3, 2]\n    k = n - 2\n    i = 3\n    while k > 0\n        if mod(i,\
    \ 2) == 0\n            push!(x, convert(Int64, div(i, 2)))\n        else\n   \
    \         push!(x, x[i] + x[i - 1] + x[i - 2])\n        end\n        i += 1\n\
    \        k -= 1\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrosxen5.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmpmrosxen5.jl:47\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrosxen5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrosxen5.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmrosxen5.jl:48\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrosxen5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrosxen5.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmrosxen5.jl:49\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 2, 10] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrosxen5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrosxen5.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmrosxen5.jl:50\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 2, 10, 3] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrosxen5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrosxen5.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmrosxen5.jl:51\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 2, 1"
  timestamp: 1659979147
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    array = zeros(Int64, n + 1)\n    for i in 1:n+1\n        if i == 1\n \
    \           array[i] = 1\n        elseif i == 2\n            array[i] = 3\n  \
    \      elseif i == 3\n            array[i] = 2\n        else\n            array[i]\
    \ = array[i-1] + array[i-2] + array[i-3]\n        end\n    end\n    return array\n\
    end\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn141t6ti.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpn141t6ti.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn141t6ti.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn141t6ti.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpn141t6ti.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn141t6ti.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn141t6ti.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpn141t6ti.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn141t6ti.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn141t6ti.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpn141t6ti.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn141t6ti.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn141t6ti.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpn141t6ti.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979147
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribo = zeros(Int64, n + 1)\n    tribo[1] = 1\n    tribo[2] = 3\n    tribo[3]\
    \ = 2\n    for i in 3:n \n        if i % 2 == 0 \n            tribo[i + 1] = 1\
    \ + i / 2\n        else \n            tribo[i + 1] = tribo[i] + tribo[i - 1] +\
    \ tribo[i + 1]\n        end\n    end\n    return tribo\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp297i4u5g.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp297i4u5g.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 5] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297i4u5g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297i4u5g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp297i4u5g.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 5, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297i4u5g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297i4u5g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp297i4u5g.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 5, 3, 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297i4u5g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297i4u5g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp297i4u5g.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp297i4u5g.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp297i4u5g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp297i4u5g.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 5, 3, 8, "
  timestamp: 1659979149
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    v = Vector{Int64}(undef, n + 1)\n    v[1] = 1\n    v[2] = 3\n    v[3]\
    \ = 2\n    for i in 4:n + 1\n        v[i] = (v[i - 1] + v[i - 2] + v[i - 3])\n\
    \    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp7vnylc_c.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp7vnylc_c.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vnylc_c.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vnylc_c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7vnylc_c.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vnylc_c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vnylc_c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7vnylc_c.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vnylc_c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vnylc_c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7vnylc_c.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vnylc_c.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vnylc_c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7vnylc_c.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979149
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri(n - 1)\n \
    \       val = 0\n        if n % 2 == 0\n            val = (n / 2) + 1\n      \
    \  else\n            val = tri(n - 1)[end] + tri(n - 2)[end] + tri(n + 1)[end]\n\
    \        end\n        append!(tri(n - 1), val)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer.\")\n    end\n\
    \    # Let's use dynamic programming, and also allocate storage for numbers\n\
    \    # in advance to reduce vector resizing.\n    storage = zeros(Int64, n + 1)\n\
    \    storage[1] = 1\n    storage[2] = 3\n    storage[3] = 2\n    for i in 4:n\
    \ + 1\n        if i % 2 == 0\n            storage[i] = 1 + i / 2\n        else\n\
    \            storage[i] = storage[i - 1] + storage[i - 2] + storage[i + 1]\n \
    \       end\n    end\n    return storage\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp_7a04wg3.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp_7a04wg3.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7a04wg3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7a04wg3.jl:41\ntest set: Error\
    \ During Test at /tmp/tmp_7a04wg3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_7a04wg3.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_7a04wg3.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_7a04wg3.jl:41\ntest set:\
    \ Test Failed at /tmp/tmp_7a04wg3.jl:44\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_7a04wg3.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_7a04wg3.jl:41\ntest set: Error\
    \ During Test at /tmp/tmp_7a04wg3.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_7a04wg3.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = [1, 3, 2]\n    for i = 3:n\n        seq_n = seq[i] + seq[i - 1]\
    \ + seq[i - 2]\n        seq = vcat(seq, seq_n)\n    end\n    return seq\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmput5r9ibj.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmput5r9ibj.jl:31\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput5r9ibj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput5r9ibj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmput5r9ibj.jl:32\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput5r9ibj.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput5r9ibj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmput5r9ibj.jl:33\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput5r9ibj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput5r9ibj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmput5r9ibj.jl:34\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmput5r9ibj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmput5r9ibj.jl:30\ntest set: Test\
    \ Failed at /tmp/tmput5r9ibj.jl:35\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    T = fill(0, n + 1)\n    T[1] = 1\n    T[2] = 3\n    T[3] = 2\n    for\
    \ i in 4:n + 1\n        if i % 2 == 0\n            T[i] = 1 + i / 2\n        else\n\
    \            T[i] = T[i - 1] + T[i - 2] + T[i + 1]\n        end\n    end\n   \
    \ return T\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp1gzny7jj.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp1gzny7jj.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1gzny7jj.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1gzny7jj.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp1gzny7jj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1gzny7jj.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1gzny7jj.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1gzny7jj.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp1gzny7jj.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1gzny7jj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1gzny7jj.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp1gzny7jj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1gzny7jj.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = tri(n - 1)\n\
    \        if n % 2 == 0\n            push!(a, div(n, 2) + 1)\n        else\n  \
    \          push!(a, a[end - 2] + a[end - 1] + a[end] + 1)\n        end\n     \
    \   return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi8i_wtrs.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpi8i_wtrs.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 7] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8i_wtrs.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8i_wtrs.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi8i_wtrs.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 7, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8i_wtrs.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8i_wtrs.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi8i_wtrs.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 7, 3, 13] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8i_wtrs.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8i_wtrs.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi8i_wtrs.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 7, 3, 13, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi8i_wtrs.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi8i_wtrs.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpi8i_wtrs.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 7, 3, 1"
  timestamp: 1659979148
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1,3]\n\
    \    elseif n == 2\n        return [1,3,2]\n    else\n        a = [1,3,2]\n  \
    \      for i in 3:n+1\n            push!(a, a[i-1] + a[i-2] + a[i-3])\n      \
    \  end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyqfuvrxb.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpyqfuvrxb.jl:38\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyqfuvrxb.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyqfuvrxb.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqfuvrxb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpyqfuvrxb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyqfuvrxb.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyqfuvrxb.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqfuvrxb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpyqfuvrxb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyqfuvrxb.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyqfuvrxb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyqfuvrxb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpyqfuvrxb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpwba4xtbe.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpwba4xtbe.jl:27\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpwba4xtbe.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwba4xtbe.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwba4xtbe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwba4xtbe.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpwba4xtbe.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwba4xtbe.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659979151
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = [1, 3, 2]\n    for i in 1:n\n        push!(result, result[end]\
    \ + result[end - 1] + result[end - 2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbs5f0fvj.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpbs5f0fvj.jl:30\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs5f0fvj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs5f0fvj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbs5f0fvj.jl:31\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs5f0fvj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs5f0fvj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbs5f0fvj.jl:32\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36, 66] == [1, 3, 2, 8, 3, 15]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs5f0fvj.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs5f0fvj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbs5f0fvj.jl:33\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36, 66, 121] == [1, 3, 2, 8, 3,\
    \ 15, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs5f0fvj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs5f0fvj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbs5f0fvj.jl:34\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4"
  timestamp: 1659979149
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Initialize first three elements to be [1, 3, 2].\n    seq = [1, 3, 2]\n\
    \    for i = 3:n\n        if iseven(i)\n            # For even i, append the value\
    \ 1 + i / 2.\n            push!(seq, 1 + i / 2)\n        else\n            # For\
    \ odd i, append the value tri(i - 1) + tri(i - 2) + tri(i + 1).\n            push!(seq,\
    \ seq[i - 1] + seq[i - 2] + seq[i + 1])\n        end\n    end\n    return seq\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp32vvqftp.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp32vvqftp.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp32vvqftp.jl:27\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp32vvqftp.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp32vvqftp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp32vvqftp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp32vvqftp.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp32vvqftp.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp32vvqftp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp32vvqftp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp32vvqftp.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp32vvqftp.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp32vvqftp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp32vvqftp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979151
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i in 2:n\n        result[i + 1] = result[i]\n        if i % 2 == 0\n \
    \           result[i + 1] += Int64(i / 2)\n        else\n            result[i\
    \ + 1] += result[i - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0kek0_iw.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp0kek0_iw.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 12] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kek0_iw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kek0_iw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0kek0_iw.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 4, 12, 14] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kek0_iw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kek0_iw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0kek0_iw.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 4, 12, 14, 44] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kek0_iw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kek0_iw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0kek0_iw.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 4, 12, 14, 44, 47] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kek0_iw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kek0_iw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0kek0_iw.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 4,"
  timestamp: 1659979151
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci = [1, 3, 2]\n    for i in 1:n\n        push!(tribonacci, tri(i))\n\
    \    end\n    return tribonacci\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n   \n    out = zeros(Int64, n + 1)\n    out[1] = 1\n    out[2] = 3\n    out[3]\
    \ = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            out[i] = Int64(1\
    \ + i / 2)\n        else\n            out[i] = out[i - 1] + out[i - 2] + out[i\
    \ + 1]\n        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpfmqm83zx.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpfmqm83zx.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfmqm83zx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfmqm83zx.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpfmqm83zx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfmqm83zx.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfmqm83zx.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfmqm83zx.jl:37\ntest set:\
    \ Test Failed at /tmp/tmpfmqm83zx.jl:40\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfmqm83zx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfmqm83zx.jl:37\ntest set: Error\
    \ During Test at /tmp/tmpfmqm83zx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfmqm83zx.jl:28\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Int64[]\n    end\n    if n == 1\n        return\
    \ [3]\n    end\n    v = zeros(Int64, n + 1)\n    v[1] = 3\n    v[2] = 2\n    for\
    \ i in 3:n + 1\n        if i % 2 == 0\n            v[i] = 1 + i / 2\n        else\n\
    \            v[i] = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n    end\n   \
    \ return v\nend\nprintln(tri(3))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcg0h0f97.jl:40

    '
  stdout: "[3, 2, 5, 3]\ntest set: Test Failed at /tmp/tmpcg0h0f97.jl:43\n  Expression:\
    \ candidate(3) == [1, 3, 2, 8]\n   Evaluated: [3, 2, 5, 3] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcg0h0f97.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg0h0f97.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpcg0h0f97.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcg0h0f97.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcg0h0f97.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcg0h0f97.jl:42\ntest set:\
    \ Test Failed at /tmp/tmpcg0h0f97.jl:45\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcg0h0f97.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcg0h0f97.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpcg0h0f97.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcg0h0f97.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expans"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n\
    \    elseif n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64,\
    \ n + 1)\n        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i\
    \ in 4:n + 1\n            if i % 2 == 0\n                a[i] = 1 + (i / 2)\n\
    \            else\n                a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n   \
    \         end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpw77isxtw.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpw77isxtw.jl:45\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw77isxtw.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw77isxtw.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpw77isxtw.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw77isxtw.jl:34\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw77isxtw.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw77isxtw.jl:44\ntest set:\
    \ Test Failed at /tmp/tmpw77isxtw.jl:47\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [0, 1, 1, 3, 4, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw77isxtw.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw77isxtw.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpw77isxtw.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw77isxtw.jl:34\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # TODO: \n    # Your code here\n    return [1,3,2,8]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp78l54xml.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp78l54xml.jl:29\n  Expression: candidate(4)\
    \ == [1, 3, 2, 8, 3]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78l54xml.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78l54xml.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp78l54xml.jl:30\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78l54xml.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78l54xml.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp78l54xml.jl:31\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78l54xml.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78l54xml.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp78l54xml.jl:32\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 8] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78l54xml.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78l54xml.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp78l54xml.jl:33\n  Expression: candidate(8) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5]\n   Evaluated: [1, 3,"
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Base case:\n    if n == 0\n        return [1]\n    elseif n == 1\n \
    \       return [1, 3]\n    elseif n == 2\n        return [1, 3, 2]\n    end\n\
    \    # Tri(n) = Tri(n - 1) + Tri(n - 2) + Tri(n - 3)\n    a, b, c = 1, 3, 2\n\
    \    out = [a, b, c]\n    for i in 3:n\n        out = [out..., a + b + c]\n  \
    \      a, b, c = b, c, a + b + c\n    end\n    return out\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0mjdqls2.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp0mjdqls2.jl:41\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mjdqls2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mjdqls2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0mjdqls2.jl:42\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mjdqls2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mjdqls2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0mjdqls2.jl:43\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mjdqls2.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mjdqls2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0mjdqls2.jl:44\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mjdqls2.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mjdqls2.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0mjdqls2.jl:45\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979150
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = Array{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    @inbounds for i in 4:n + 1\n        if i % 2 ==\
    \ 0\n            result[i] = 1 + i / 2\n        else\n            result[i] =\
    \ result[i - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpfsdbn15r.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpfsdbn15r.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfsdbn15r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfsdbn15r.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfsdbn15r.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 47376840132685] == [1, 3, 2, 8, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfsdbn15r.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfsdbn15r.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfsdbn15r.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 671, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfsdbn15r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfsdbn15r.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfsdbn15r.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 6, 4, 47376847235490] == [1, 3, 2, 8,\
    \ 3, 15, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfsdbn15r.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfsdbn15r.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfsdbn15r.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Ev"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        start = [1, 3,\
    \ 2]\n        for i = 3:n\n            push!(start, start[i - 1] + start[i - 2]\
    \ + start[i])\n        end\n        return start\n    end\nend\ntri(0)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0v34gpkr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp0v34gpkr.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v34gpkr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v34gpkr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0v34gpkr.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v34gpkr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v34gpkr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0v34gpkr.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v34gpkr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v34gpkr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0v34gpkr.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v34gpkr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v34gpkr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp0v34gpkr.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979151
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    result = Vector{Int64}(undef, n + 1)\n    result[1] = 1\n    result[2]\
    \ = 3\n    result[3] = 2\n    \n    for i = 4:n + 1\n        if i % 2 == 0\n \
    \           result[i] = 1 + i / 2\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    \n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpnfpnm93s.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpnfpnm93s.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfpnm93s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfpnm93s.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpnfpnm93s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnfpnm93s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnfpnm93s.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnfpnm93s.jl:39\ntest set:\
    \ Test Failed at /tmp/tmpnfpnm93s.jl:42\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfpnm93s.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfpnm93s.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpnfpnm93s.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnfpnm93s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n  result = Vector{Int64}(undef, n + 1)\n  result[1] = 1\n  result[2] = 3\n\
    \  result[3] = 2\n  for i = 4:n + 1\n    result[i] = if iseven(i)\n      result[i\
    \ \xF7 2]\n    else\n      result[i - 1] + result[i - 2] + result[i + 1]\n   \
    \ end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp15yotwbk.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp15yotwbk.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yotwbk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yotwbk.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp15yotwbk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp15yotwbk.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp15yotwbk.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp15yotwbk.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp15yotwbk.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 47499210600533, 2] == [1, 3, 2, 8,\
    \ 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yotwbk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yotwbk.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp15yotwbk.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp15yotwbk.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expans"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   for i in 3:n + 1\n        if i % 2 == 0\n            result[i] = Int64(i /\
    \ 2)\n        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfhey1s8n.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpfhey1s8n.jl:36\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhey1s8n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhey1s8n.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpfhey1s8n.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfhey1s8n.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfhey1s8n.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfhey1s8n.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpfhey1s8n.jl:38\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 4, 2, 6, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfhey1s8n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfhey1s8n.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpfhey1s8n.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfhey1s8n.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        while length(v) <= n\n            push!(v, sum(v[end-2:end]) + 1)\n \
    \       end\n        return v\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzv167mki.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpzv167mki.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 7] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv167mki.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv167mki.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpzv167mki.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 7, 13] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv167mki.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv167mki.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpzv167mki.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 7, 13, 23] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv167mki.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv167mki.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpzv167mki.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 7, 13, 23, 44] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv167mki.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv167mki.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpzv167mki.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 7, "
  timestamp: 1659979151
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n     tri_vector = zeros(Int64, n+1)\n     tri_vector[1] = 1\n     tri_vector[2]\
    \ = 3\n     tri_vector[3] = 2\n     for i in 4:n+1\n         if i % 2 == 0\n \
    \            tri_vector[i] = 1 + Int64(i / 2)\n         else\n             tri_vector[i]\
    \ = tri_vector[i-1] + tri_vector[i-2] + tri_vector[i+1]\n         end\n     end\n\
    \     return tri_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpru2szsao.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpru2szsao.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru2szsao.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru2szsao.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpru2szsao.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpru2szsao.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpru2szsao.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpru2szsao.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpru2szsao.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru2szsao.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru2szsao.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpru2szsao.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpru2szsao.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri = zeros(Int64, n+1)\n    tri[1] = 1\n    tri[2] = 3\n    tri[3] =\
    \ 2\n    for i in 4:n+1\n        if i % 2 == 0\n            tri[i] = 1 + (i /\
    \ 2)\n        else\n            tri[i] = tri[i-1] + tri[i-2] + tri[i+1]\n    \
    \    end\n    end\n    return tri\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp2bpy88ww.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2bpy88ww.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bpy88ww.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bpy88ww.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp2bpy88ww.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2bpy88ww.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2bpy88ww.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2bpy88ww.jl:36\ntest set:\
    \ Test Failed at /tmp/tmp2bpy88ww.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bpy88ww.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bpy88ww.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp2bpy88ww.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2bpy88ww.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    if n == 1\n        return\
    \ [1, 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    res =\
    \ [1, 3, 2]\n    for i in 3:n\n        if i % 2 == 0\n            push!(res, 1\
    \ + i / 2)\n        else\n            push!(res, res[end] + res[end - 1] + res[end\
    \ - 2])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp444wvp9w.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp444wvp9w.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp444wvp9w.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp444wvp9w.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp444wvp9w.jl:44\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp444wvp9w.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp444wvp9w.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp444wvp9w.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp444wvp9w.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp444wvp9w.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp444wvp9w.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp444wvp9w.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp444wvp9w.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp444wvp9w.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 1"
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        ans = [1, 3, 2]\n\
    \        for i in 3:n\n            if iseven(i)\n                push!(ans, i/2)\n\
    \            else\n                push!(ans, ans[i] + ans[i-1] + ans[i+1])\n\
    \            end\n        end\n        return ans\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxys3jk0i.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpxys3jk0i.jl:42\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxys3jk0i.jl:31\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxys3jk0i.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxys3jk0i.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpxys3jk0i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxys3jk0i.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxys3jk0i.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxys3jk0i.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpxys3jk0i.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxys3jk0i.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxys3jk0i.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxys3jk0i.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpxys3jk0i.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    t = Array{Int64}(3)\n    t[1] = 1\n    t[2] = 3\n    t[3] = 2\n    if\
    \ n < 3\n        t = t[1:n+1]\n    else\n        k = 3\n        while k <= n \n\
    \            t = append!(t, t[k] + t[k-1] + t[k-2])\n            k += 1\n    \
    \    end\n    end\n    return t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpf5g38z5c.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpf5g38z5c.jl:39\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpf5g38z5c.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5g38z5c.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5g38z5c.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpf5g38z5c.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] tri(n::Int64)\n     @ Main /tmp/tmpf5g38z5c.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1659979154
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 return [1] end\n    r = [1, 3, 2]\n    for i = 4:n+1\n     \
    \   if i % 2 == 0\n            push!(r, Int64(1 + i / 2))\n        else\n    \
    \        push!(r, r[end] + r[end-1] + r[end-2])\n        end\n    end\n    return\
    \ r\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj8xsflza.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpj8xsflza.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8xsflza.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8xsflza.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj8xsflza.jl:36\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8xsflza.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8xsflza.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj8xsflza.jl:37\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8xsflza.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8xsflza.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj8xsflza.jl:38\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8xsflza.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8xsflza.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj8xsflza.jl:39\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 3, 8, 4,"
  timestamp: 1659979152
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tri_array = [1, 3, 2]\n    for i in 3:n\n        tri_array = [tri_array,\
    \ i % 2 == 0 ? 1 + i / 2 : tri_array[end] + tri_array[end - 1] + tri_array[end\
    \ - 2]]\n    end\n    return tri_array\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp0s2st4m7.jl:30\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: Cannot `convert`
    an object of type Vector{Int64} to an object of type Int64\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n    [1]
    setindex!(A::Vector{Int64}, x::Vector{Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2]
    _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Any}, soffs::Int64,
    n::Int64)\n      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307
    [inlined]\n    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @
    ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7]
    copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n      @
    Base ./array.jl:563\n    [9] convert(#unused#::Type{Vector{Int64}}, a::Vector{Any})\n      @
    Base ./array.jl:554\n   [10] tri(n::Int64)\n      @ Main /tmp/tmp0s2st4m7.jl:23\n   [11]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [12] macro expansion\n      @ /tmp/tmp0s2st4m7.jl:30 [inlined]\n   [13]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [14] top-level scope\n      @ /tmp/tmp0s2st4m7.jl:29\ntest set:
    Error During Test at /tmp/tmp0s2st4m7.jl:31\n  Test threw exception\n  Expression:
    candidate(4) == [1, 3, 2, 8, 3]\n  MethodError: Cannot `convert` an object of
    type Vector{Any} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    conve'
  timestamp: 1659979155
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n <= 0\n        return [1]\n    end\n    if n == 1\n        return\
    \ [1, 3]\n    end\n    if n == 2\n        return [1, 3, 2]\n    end\n    F = [1,\
    \ 3, 2]\n    for i in 1:n-2\n        append!(F, F[end - 2] + F[end - 1] + F[end])\n\
    \    end\n    return F\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_q_ri_m5.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp_q_ri_m5.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q_ri_m5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q_ri_m5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_q_ri_m5.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q_ri_m5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q_ri_m5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_q_ri_m5.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q_ri_m5.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q_ri_m5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_q_ri_m5.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q_ri_m5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q_ri_m5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_q_ri_m5.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, "
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    result[2] = 3\n \
    \   result[3] = 2\n    for i = 4:n + 1\n        if i % 2 == 0\n            result[i]\
    \ = i / 2\n        else\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1]\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpy3ixmkqc.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpy3ixmkqc.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy3ixmkqc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy3ixmkqc.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpy3ixmkqc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy3ixmkqc.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy3ixmkqc.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy3ixmkqc.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpy3ixmkqc.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 2, 4, 3] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy3ixmkqc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy3ixmkqc.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpy3ixmkqc.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy3ixmkqc.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979154
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    # Add your code here\nend\n```\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ra1pk6p.jl:21\nin expression starting at\
    \ /tmp/tmp1ra1pk6p.jl:21\n"
  stdout: ''
  timestamp: 1659979152
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    tribonacci = [1, 3, 2]\n    while length(tribonacci) < n + 1\n       \
    \ last_three = tribonacci[end-2:end]\n        # Compute the next odd value\n \
    \       next_odd = last_three[1] + last_three[2] + last_three[3]\n        push!(tribonacci,\
    \ next_odd)\n        # Compute the next even value\n        push!(tribonacci,\
    \ (tribonacci[end] + 1) \xF7 2)\n    end\n    return tribonacci\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpukqu0ko_.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpukqu0ko_.jl:35\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpukqu0ko_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpukqu0ko_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpukqu0ko_.jl:36\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpukqu0ko_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpukqu0ko_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpukqu0ko_.jl:37\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11, 6] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpukqu0ko_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpukqu0ko_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpukqu0ko_.jl:38\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 6] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpukqu0ko_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpukqu0ko_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpukqu0ko_.jl:39\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6"
  timestamp: 1659979153
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    a = Vector{Int64}(undef, n + 1)\n    a[1] = 1\n    a[2] = 3\n    a[3]\
    \ = 2\n    for i in 4:n + 1\n        if i % 2 == 0\n            a[i] = 1 + (i\
    \ / 2)\n        else\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n    \
    \    end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpuleyog28.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpuleyog28.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuleyog28.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuleyog28.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpuleyog28.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuleyog28.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuleyog28.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuleyog28.jl:36\ntest set:\
    \ Test Failed at /tmp/tmpuleyog28.jl:39\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuleyog28.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuleyog28.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpuleyog28.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuleyog28.jl:27\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979155
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    seq = zeros(Int64, n + 1)\n    seq[1] = 1\n    seq[2] = 3\n    seq[3]\
    \ = 2\n    for i in 4:n + 1\n        seq[i] = seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1]\n    end\n    return seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpt8yzp9x8.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpt8yzp9x8.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpt8yzp9x8.jl:24\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8yzp9x8.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8yzp9x8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt8yzp9x8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpt8yzp9x8.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8yzp9x8.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8yzp9x8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt8yzp9x8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpt8yzp9x8.jl:24\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt8yzp9x8.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt8yzp9x8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt8yzp9x8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979154
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"n must be positive or zero\")\n    end\n   \
    \ v = zeros(Int64, n + 1)\n    v[1] = 1\n    v[2] = 3\n    for i in 3:n\n    \
    \    if iseven(i)\n            v[i] = 1 + i / 2\n        else\n            v[i]\
    \ = v[i - 1] + v[i - 2] + v[i + 1]\n        end\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp1tgarkd6.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp1tgarkd6.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 4, 0] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tgarkd6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tgarkd6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1tgarkd6.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 4, 3, 0] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tgarkd6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tgarkd6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1tgarkd6.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 4, 3, 7, 0] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tgarkd6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tgarkd6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1tgarkd6.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 4, 3, 7, 4, 0] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tgarkd6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tgarkd6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1tgarkd6.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 4, 3, 7, 4, "
  timestamp: 1659979155
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n + 1)\n    result[1] = 1\n    for i = 2:n + 1\n\
    \        if i % 2 == 0\n            result[i] = i / 2\n        else\n        \
    \    result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n        end\n\
    \    end\n    return result\nend\ntri(2)\n \n \nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [4]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ tri(n::Int64)\n   @ Main /tmp/tmp_7zocu6o.jl:25\n [3] top-level scope\n   @\
    \ /tmp/tmp_7zocu6o.jl:30\nin expression starting at /tmp/tmp_7zocu6o.jl:30\n"
  stdout: ''
  timestamp: 1659979154
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    \n    # preallocates the array\n    myArray = zeros(Int64, n + 1)\n  \
    \  \n    # base cases\n    myArray[1] = 1\n    myArray[2] = 3\n    myArray[3]\
    \ = 2\n    \n    # fills the array\n    for i in 4:n + 1\n        if i % 2 ==\
    \ 0\n            myArray[i] = 1 + i / 2\n        else\n            myArray[i]\
    \ = myArray[i - 1] + myArray[i - 2] + myArray[i + 1]\n        end\n    end\n \
    \   return myArray\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmprjf9njnx.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmprjf9njnx.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjf9njnx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjf9njnx.jl:42\ntest set: Error\
    \ During Test at /tmp/tmprjf9njnx.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjf9njnx.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprjf9njnx.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprjf9njnx.jl:42\ntest set:\
    \ Test Failed at /tmp/tmprjf9njnx.jl:45\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [1, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjf9njnx.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjf9njnx.jl:42\ntest set: Error\
    \ During Test at /tmp/tmprjf9njnx.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjf9njnx.jl:33\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979156
