name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
  \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
  \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>>\
  \ histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n\
  \n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    test = split(test)\n    dict = Dict()\n    for i in test\n    \
    \    dict[i] = get(dict, i, 0) + 1\n    end\n    maxval = maximum(values(dict))\n\
    \    maxdict = Dict()\n    for (k, v) in dict\n        if v == maxval\n      \
    \      maxdict[k] = v\n        end\n    end\n    return maxdict\nend", "    #Create\
    \ a dictionary and a vector\n    d = Dict()\n    v = split(test, r\"\\s+\")\n\
    \    #For each element in the vector, add it to the dictionary if not already\
    \ in the dictionary\n    #if already in the dictionary, increment the corresponding\
    \ value\n    for x in v\n        if haskey(d, x)\n            d[x] += 1\n    \
    \    else\n            d[x] = 1\n        end\n    end\n    #Find the highest value\
    \ in the dictionary\n    maximum = maximum(collect(values(d)))\n    #Create a\
    \ dictionary that will be returned. Add the element in the first dictionary corresponding\
    \ to the highest value\n    d1 = Dict()\n    for x in v\n        if d[x] == maximum\n\
    \            d1[x] = maximum\n        end\n    end\n    #Return the dictionary\n\
    \    return d1\nend", "    h = Dict()\n    if test == \"\"\n        return h\n\
    \    end\n    for k in split(test)\n        if haskey(h, k)\n            h[k]\
    \ += 1\n        else\n            h[k] = 1\n        end\n    end\n    maximumValue\
    \ = maximum(values(h))\n    for (k, v) in h\n        if v != maximumValue\n  \
    \          delete!(h, k)\n        end\n    end\n    return h\nend", "    \n  \
    \  \n    \n    \nend", "    if length(test)==0\n        return Dict{String, Int64}()\n\
    \    end\n    histo = Dict{String, Int64}()\n    for i = 1:length(test)\n    \
    \    if !haskey(histo, test[i])\n            histo[test[i]] = 1\n        else\n\
    \            histo[test[i]] += 1\n        end\n    end\n    max_histo = 0\n  \
    \  result_histo = []\n    for (key, value) in histo\n        if value > max_histo\n\
    \            max_histo = value\n            result_histo = []\n            push!(result_histo,\
    \ key)\n        elseif value == max_histo\n            push!(result_histo, key)\n\
    \        end\n    end\n    result = Dict{String, Int64}()\n    for el in result_histo\n\
    \        result[el] = max_histo\n    end\n    return result\nend", '    dct =
    Dict{String, Int64}()', "    result = Dict{String, Int64}()\n    for c in test\n\
    \        #print(c)\n        if c in keys(result)\n            result[c] += 1\n\
    \        else\n            result[c] = 1\n        end\n    end\n    return result\n\
    end\n@assert histogram(\"a b c\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    @assert histogram(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"b b b b a\"\
    ) == Dict(\"b\" => 4)\n@assert histogram(\"\") == Dict()\ntest = histogram(\"\
    a b c\")\ntest2 = histogram(\"a b b a\")\ntest3 = histogram(\"a b c a b\")\ntest4\
    \ = histogram(\"b b b b a\")\ntest5 = histogram(\"\")", "\nend", "    hist = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        if !haskey(hist, letter)\n\
    \            hist[letter] = 1\n        else\n            hist[letter] += 1\n \
    \       end\n    end\n    return hist\nend", "    test = Dict(lowercase(x) =>\
    \ count(lowercase(x)) for x in split(test)) \n    if max(test) > 1 # if any letter\
    \ has occured more than once\n        return Dict(key => value for (key, value)\
    \ in test if value == max(test))\n    else\n        return test\n    end\nend",
  "    # Splits the string into a vector of letters using split function\n    letr\
    \ = split(test)\n    # Initializing the dictionary \n    histo = Dict{String,\
    \ Int64}()\n    # Iterates through the elements in letr vector\n    for l in letr\n\
    \        # Defines a default value of 1 if the string is not found in the dictionary\n\
    \        # Updates the key value if the string is already in the dictionary\n\
    \        histo[l] = get(histo, l, 1) + 1\n    end\n    # Returns the dictionary\n\
    \    return histo\nend", "    \"Calculate the histogram using a string.\"\n  \
    \  return histogram(readdlm(IOBuffer(test),' '))\nend", "    dict = Dict{String,\
    \ Int64}()\n    for letter in test\n        if letter in keys(dict)\n        \
    \    dict[letter] += 1\n        else\n            dict[letter] = 1\n        end\n\
    \    end\n    maximum(dict)\nend", "    res = Dict{String, Int64}()\n    for i\
    \ in test.lowercase\n        if haskey(res, i)\n            res[i] += 1\n    \
    \    else\n            res[i] = 1\n        end\n    end\n    return res\nend",
  "    # declare and initialize local variables\n    new_test = test\n    result =\
    \ Dict{String, Int64}()\n    index = 0\n    max_index = 0\n    letter = \"\"\n\
    \    max_letter = \"\"\n    count = 0\n    max_count = 0\n    # iterate through\
    \ the input String\n    for i in test\n        # if the letter is not in the dictionary\n\
    \        if !haskey(result, i)\n            # add the letter to the dictionary\n\
    \            result[i] = 1\n        # if the letter is in the dictionary\n   \
    \     else\n            # increment the letter's value in the dictionary\n   \
    \         result[i] += 1\n        end\n    end\n    # get the max value in the\
    \ dictionary\n    for (k, v) in result\n        if v > max_count\n           \
    \ max_count = v\n        end\n    end\n    # iterate through the dictionary\n\
    \    for (k, v) in result\n        # if the value is less than the max value\n\
    \        if v < max_count\n            # delete the key from the dictionary\n\
    \            delete!(result, k)\n        end\n    end\n    return result\nend",
  "    hist = Dict()\n    str = split(test, \" \")\n    if length(str) > 0\n     \
    \   for c in str\n            if haskey(hist, c)\n                hist[c] += 1\n\
    \            else\n                hist[c] = 1\n            end\n        end\n\
    \    end\n    return hist\nend\nhistogram(\"a b b c a b\")", "    histogram=Dict{String,\
    \ Int64}()\n    for word in split(test)\n        if haskey(histogram, word)\n\
    \            histogram[word] += 1\n        else\n            histogram[word] =\
    \ 1\n        end\n    end\n    count = maximum(values(histogram))\n    return\
    \ filter(histogram) do (letter, occurrences)\n        occurrences == count\n \
    \   end\nend", "    letter_occurence = Dict{String, Int64}()\n    for letter in\
    \ test\n        letter_occurence[letter] = get(letter_occurence, letter, 0) +\
    \ 1\n    end\n    sorted_letter_occurence = sort(collect(letter_occurence), by=x->x[2],\
    \ rev=true)\n    max_occurence = sorted_letter_occurence[1][2]\n    max_occurence_letters\
    \ = filter(x->x[2] == max_occurence, sorted_letter_occurence)\n    return Dict(map(x->(x[1],\
    \ x[2]), max_occurence_letters))\nend", "    return Dict(\"a\" => 0, \"b\" =>\
    \ 0, \"c\" => 0)\nend", "    testStr = split(test)\n    dict = Dict()\n    for\
    \ i in testStr\n        if !(haskey(dict, i))\n            dict[i] = 1\n     \
    \   else\n            dict[i] += 1\n        end\n    end\n    dict\nend", "  \
    \  \n    out = Dict()\n    for x in test\n        out[x] = get(out, x, 0) + 1\n\
    \    end\n    return out\nend", "  #initialize dictionary\n  hist = Dict{String,\
    \ Int64}()\n  \n  #split string into list of letters\n  letters = split(test)\n\
    \  \n  #iterate over letters\n  for i in letters\n    #if letter is already in\
    \ dictionary increase count \n    if i in keys(hist)\n      hist[i] += 1\n   \
    \   #else add letter to dictionary with count of 1\n    else\n      hist[i] =\
    \ 1\n    end\n  end\n  return hist\nend", " \n    hist = Dict{String, Int64}()\n\
    \    for el in split(test)\n        hist[el] = get(hist, el, 0) + 1\n    end\n\
    \    hist\nend", "    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(hist, letter)\n            hist[letter] += 1\n        else\n\
    \            hist[letter] = 1\n        end\n    end\n    return hist\nend", " \
    \   letter_histogram = Dict{String, Int64}()\n    for (index, letter) in enumerate(test)\n\
    \        if haskey(letter_histogram, letter)\n            letter_histogram[letter]\
    \ += 1\n        else\n            letter_histogram[letter] = 1\n        end\n\
    \    end\n    return letter_histogram\nend", "    words = split(test, \" \")\n\
    \    word_dict = Dict{String, Int64}()\n    for word in words\n        if word\
    \ in keys(word_dict)\n            word_dict[word] += 1\n        else\n       \
    \     word_dict[word] = 1\n        end\n    end\n    return word_dict\nend", " \
    \   let result: Dict{String, Int64} = Dict{String, Int64}()\n    for letter in\
    \ test\n        result[letter] = get(result, letter, 0) + 1\n    end\n    # lets\
    \ do some filtering because I don't know how to do it on a dict\n    let pairs\
    \ = [(key, value) for (key, value) in result]\n    let maxval = max(pairs[2:end])[2]\n\
    \    pairs = [(key, value) for (key, value) in pairs if value == maxval]\n   \
    \ return Dict(pairs)\nend", "    words = split(test)\n    dict = Dict()\n    for\
    \ i in words\n        if haskey(dict, i)\n            dict[i] += 1\n        else\n\
    \            dict[i] = 1\n        end\n    end\n    #return dict\n    dict2 =\
    \ Dict()\n    max = 0\n    for (k, v) in dict\n        if v > max\n          \
    \  max = v\n        end\n    end\n    for (k, v) in dict\n        if v == max\n\
    \            dict2[k] = v\n        end\n    end\n    return dict2\nend\n ", " \
    \   letter_count = Dict{String, Int64}()\n    words = split(test)\n    max_count\
    \ = -1\n    result = Dict{String, Int64}()\n    for word in words\n        if\
    \ !haskey(letter_count, word)\n            letter_count[word] = 1\n        else\n\
    \            letter_count[word] += 1\n        end\n        if letter_count[word]\
    \ > max_count\n            max_count = letter_count[word]\n        end\n    end\n\
    \    for (k, v) in letter_count\n        if v == max_count\n            result[k]\
    \ = v\n        end\n    end\n    return result\nend", "    new_histo = Dict{String,\
    \ Int64}()\n    words = split(test, ' ')\n    for word in words\n        if haskey(new_histo,\
    \ word)\n            new_histo[word] += 1\n        else\n            new_histo[word]\
    \ = 1\n        end\n    end\n    return new_histo\nend", "    # this is a good\
    \ dictionary to keep track of the occurences for each character\n    occurences\
    \ = Dict()\n    # iterate over each character of the string\n    for ch in test\n\
    \        # if the character is already in the dictionary, add 1 to its occurence\n\
    \        if haskey(occurences, ch)\n            occurences[ch] += 1\n        #\
    \ otherwise, it is the first time we see this character, we initialize its occurence\
    \ to 1\n        else\n            occurences[ch] = 1\n        end\n    end\n \
    \   # this is a dictionary that will contain the character with the most occurence\
    \ and its count\n    result = Dict()\n    # iterate over all the characters in\
    \ the dictionary\n    for ch in keys(occurences)\n        # if there are no entries\
    \ in the result, we have to add the first entry\n        if isempty(result)\n\
    \            result[ch] = occurences[ch]\n        # otherwise, we have to check\
    \ the count for the current character\n        else\n            # we get the\
    \ maximum count of the result\n            max_count = maximum(values(result))\n\
    \            # if the current character occurence is greater than the previous\
    \ maximum, we replace the result by the current character and its count\n    \
    \        if occurences[ch] > max_count\n                result = Dict()\n    \
    \            result[ch] = occurences[ch]\n            # otherwise, if the current\
    \ character occurence is equal to the previous maximum, we add the current character\
    \ and its count to the result\n            elseif occurences[ch] == max_count\n\
    \                result[ch] = occurences[ch]\n            end\n        end\n \
    \   end\n    # we return the result\n    return result\nend", "    chars = split(test,\
    \ ' ')\n    counts = Dict{String, Int64}()\n    for char in chars\n        if\
    \ haskey(counts, char)\n            counts[char] += 1\n        else\n        \
    \    counts[char] = 1\n        end\n    end\n    return counts\nend", "    letters\
    \ = Dict{String, Int64}()\n    for l in split(test)\n        if l in keys(letters)\n\
    \            letters[l] += 1\n        else\n            letters[l] = 1\n     \
    \   end\n    end\n    letters\nend", "    return Dict()\nend", "    letters =\
    \ split(test)\n    histo = Dict()\n    for letter in letters\n        if (letter\
    \ in keys(histo))\n            histo[letter] += 1\n        else\n            histo[letter]\
    \ = 1\n        end\n    end\n    max = maximum(histo)\n    keys(histo)[histo .==\
    \ max]\nend", "    hist = Dict{String, Int64}()\n    for word in test\n      \
    \  if word != ' ' && haskey(hist, word)\n            hist[word] += 1\n       \
    \ elseif word != ' '\n            hist[word] = 1\n        end\n    end\n    return\
    \ hist\nend", "    temp = Dict()\n    for i in test\n        if haskey(temp, i)\n\
    \            temp[i] += 1\n        else\n            temp[i] = 1\n        end\n\
    \    end\n    counts = values(temp)\n    letters = keys(temp)\n    result = Dict()\n\
    \    for i in 1:length(letters)\n        if haskey(result, string(counts[i]))\n\
    \            result[string(counts[i])] = result[string(counts[i])] * letters[i]\n\
    \        else\n            result[string(counts[i])] = letters[i]\n        end\n\
    \    end\n    return result\nend", "    \"\"\"Helper function that takes in a\
    \ string and a dictionary of key value pairs and\n    increments the dictionary\
    \ entry if the string key exists in the dictionary.\n    \"\"\"\n    function\
    \ increment(test::String, hist::Dict{String, Int64})::Dict{String, Int64}\n  \
    \      is_key = haskey(hist, test)\n        if is_key\n            hist[test]\
    \ += 1\n        else\n            hist[test] = 1\n        end\n        return\
    \ hist\n    end\n    \n    \"\"\"Helper function that takes in a dictionary of\
    \ key value pairs and a value and\n    returns all keys in the dictionary that\
    \ equal the given value.\n    \"\"\"\n    function get_keys(hist::Dict{String,\
    \ Int64}, val::Int64)::Vector{String}\n        key_arr = []\n        for key in\
    \ keys(hist)\n            if hist[key] == val\n                push!(key_arr,\
    \ key)\n            end\n        end\n        return key_arr\n    end\n    \n\
    \    hist = Dict{String, Int64}()\n    for test in split(test)\n        hist =\
    \ increment(test, hist)\n    end\n    val = maximum(values(hist))\n    key_arr\
    \ = get_keys(hist, val)\n    return Dict(key_arr[i] => val for i in 1:length(key_arr))\n\
    end", "    # split the string into a vector of strings\n    # count the occurrence\
    \ of each letter\n    # return a dictionary of the max count with the corresponding\
    \ letters\n    # if several letters have the same occurrence, return all of them.\n\
    \    \n    max_count = 0\n    letter_count = Dict{String, Int64}()\n    # make\
    \ sure the string contains lowercase letters\n    regex = r\"[^a-z]\"\n    if\
    \ occursin(regex, test)\n        throw(ArgumentError(\"String should contain lowercase\
    \ letters only\"))\n    end\n    temp = split(test)\n    for i = 1:length(temp)\n\
    \        if haskey(letter_count, temp[i])\n            letter_count[temp[i]] +=\
    \ 1\n        else\n            letter_count[temp[i]] = 1\n        end\n    end\n\
    \    for (key, value) in letter_count\n        if value > max_count\n        \
    \    max_count = value\n        end\n    end\n    println(max_count)\n    println(letter_count)\n\
    \    println(\"{$(key) => $(value)}\")\n    # return a dictionary of the max count\
    \ with the corresponding letters\n    dict = Dict(\"$(key)\" => $(value))\nend\n\
    \ ", "# check the input is a string\n    if typeof(test) != String\n        error(\"\
    Input is not a string\")\n    end\n    \n    # create a dictionary\n    histogram_dict\
    \ = Dict()\n    \n    # iterate through each element of the string, and increment\n\
    \    # the value in the dictionary by 1\n    for i in test\n        histogram_dict[i]\
    \ = get(histogram_dict, i, 0) + 1\n    end\n    \n    # iterate through each entry\
    \ in the dictionary, and check if it's\n    # the highest so far. If it is, overwrite\
    \ the list of the highest\n    # so far\n    max_val = 0\n    max_keys = []\n\
    \    for (key, val) in histogram_dict\n        if val > max_val\n            max_val\
    \ = val\n            max_keys = [key]\n        elseif val == max_val\n       \
    \     push!(max_keys, key)\n        end\n    end\n    \n    # iterate through\
    \ each entry in the dictionary, and remove any\n    # that don't have the highest\
    \ count.\n    for (key, val) in histogram_dict\n        if val != max_val\n  \
    \          delete!(histogram_dict, key)\n        end\n    end\n    \n    # return\
    \ the dictionary\n    return histogram_dict\nend", "    # TODO: Write implementation\
    \ here\nend\n```", "    occurrences = Dict{String, Int64}()\n    for l in test\n\
    \        if haskey(occurrences, l)\n            occurrences[l] += 1\n        else\n\
    \            occurrences[l] = 1\n        end\n    end\n    maximum = 0\n    for\
    \ (key, value) in occurrences\n        if value > maximum\n            maximum\
    \ = value\n        end\n    end\n    result = Dict{String, Int64}()\n    for (key,\
    \ value) in occurrences\n        if value == maximum\n            result[key]\
    \ = value\n        end\n    end\n    return result\nend", "    letters_dict =\
    \ Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if (haskey(letters_dict, letter))\n            letters_dict[letter] +=\
    \ 1\n        else\n            letters_dict[letter] = 1\n        end\n    end\n\
    \    return letters_dict\nend", "    hist = Dict()\n    testsplit = split(test)\n\
    \    for key in testsplit\n        if hist[key] == nothing\n            hist[key]\
    \ = 1\n        else\n            hist[key] += 1\n        end\n    end\n    return\
    \ hist\nend", "    \"\"\"Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    of the letter with the most repetition and\
    \ containing the corresponding count.\n    If several letters have the same occurrence,\
    \ return all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()", "    # Split string with space delimiter and count\
    \ letters\n    # Do this by setting a variable to a new dictionary, then iterating\
    \ through our string, \n    # separating the words and adding them to our new\
    \ variable. \n    # We'll also do a count and add one each time a character/letter\
    \ is added to our dictionary.\n    # Then, return our dictionary variable. \n\
    \    \n    test_dict = Dict() \n    \n    for s in split(test) # For each character\
    \ in the string...\n        if haskey(test_dict, s) # If the character is in the\
    \ dictionary...\n            test_dict[s] += 1 # Add one to the count \n     \
    \   else \n            test_dict[s] = 1 # Else, make the count 1\n        end\n\
    \    end \n    \n    return test_dict # Return the variable\n    \nend", "   \
    \ d = Dict{String, Int64}()\n    for word in split(test)\n        if in(word,\
    \ keys(d))\n            d[word] += 1\n        else\n            d[word] = 1\n\
    \        end\n    end\n    filter!(!(,v) -> v == maximum(values(d)), d)\n    return\
    \ d\nend", "    return Dict()\nend", "    # each letter is a key\n    histogram\
    \ = Dict()\n    # split the string\n    words = split(test, \" \")\n    # loop\
    \ over the string\n    for word in words\n        # the value is the counter\n\
    \        count = histogram[word]\n        # if key exist, add 1 to count\n   \
    \     if count == 0\n            histogram[word] = 1\n        else\n         \
    \   histogram[word] = count + 1\n        end\n    end\n    # return the value\
    \ of the key with the highest count\n    max = 0\n    for key in keys(histogram)\n\
    \        if histogram[key] > max\n            max = histogram[key]\n        end\n\
    \    end\n    # return the value of the key with the highest count\n    return\
    \ [key for key in keys(histogram) if histogram[key] == max]\nend", "    letters\
    \ = Dict(i => 0 for i in string(\"abcdefghijklmnopqrstuvwxyz\"))\n    input =\
    \ split(test)\n    for i in input\n        letters[i] += 1\n    end\n    max_value\
    \ = maximum(collect(values(letters)))\n    letter_dict = Dict{String, Int64}()\n\
    \    for (key, value) in letters\n        if value == max_value\n            letter_dict[key]\
    \ = value\n        end\n    end\n    return letter_dict\nend", "    letters =\
    \ Dict()\n    for letter in split(test)\n        if haskey(letters, letter)\n\
    \            letters[letter] += 1\n        else\n            letters[letter] =\
    \ 1\n        end\n    end\n    return letters\nend", "  #Return empty Dict if\
    \ it's an empty string\n  if test == \"\"\n    return Dict{String, Int64}()\n\
    \  end\n  #Split the string into an array of characters\n  test = split(test,\
    \ ' ')\n  histo = Dict{String, Int64}()\n  #check each character in the array\
    \ to see if it is a key in the Dict, \n  #if it is, we add one to its value, if\
    \ not, we make a new key with value one\n  for i in test\n    if haskey(histo,\
    \ i)\n      histo[i] += 1\n    else\n      histo[i] = 1\n    end\n  end\n  #Create\
    \ a new Dict that contains only the keys with the highest values\n  #Dict(key\
    \ => value) where key is highest value\n  histo = filter(x -> x[2] == maximum(values(histo)),\
    \ histo)\n  return histo\nend", "    hist = Dict{String, Int64}()\n    for t in\
    \ test\n        if haskey(hist, t)\n            hist[t] += 1\n        else\n \
    \           hist[t] = 1\n        end\n    end\n    maximum(hist)\nend", "    result\
    \ = Dict{String, Int64}()\n    for c in test.split(\" \")\n        result[c] =\
    \ get(result, c, 0) + 1\n    end\n    return result\nend", "    hist = Dict()\n\
    \    for v in split(test, ' ')\n        hist[v] = get(hist, v, 0) + 1\n    end\n\
    \    # Sort the values by number of occurences\n    vals = sort(collect(values(hist)),\
    \ rev=true)\n    # Get the maximum value\n    maximum = vals[1]\n    # Filter\
    \ all the keys of this value\n    return filter(k -> hist[k] == maximum, keys(hist))\n\
    end", "    results = Dict{String, Int64}()\n    split_letters = split(test)\n\
    \    for letter in split_letters\n        if letter in keys(results)\n       \
    \     results[letter] += 1\n        else\n            results[letter] = 1\n  \
    \      end\n    end\n    return results\nend\n ", "    str = split(test)\n   \
    \ d = Dict()\n    for i in str\n        if !haskey(d, i)\n            d[i] = 1\n\
    \        else\n            d[i] += 1\n        end\n    end\n    return d\nend",
  "    dict = Dict{String, Int64}()\n    test_list = split(test)\n    for i in 1:length(test_list)\n\
    \        if test_list[i] in keys(dict)\n            dict[test_list[i]] += 1\n\
    \        else\n            dict[test_list[i]] = 1\n        end\n    end\n    dict\n\
    end", "    \n    let hist = Dict()\n    for letter in test\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    \n    return hist\nend", "    first_count_dict::Dict{String,\
    \ Int64} = Dict()\n    for word in split(test)\n        first_count_dict[word]\
    \ = get(first_count_dict, word, 0) + 1\n    end\n    return first_count_dict\n\
    end", "    counter= Dict{String, Int64}()\n    list= split(test)\n    for i in\
    \ list\n        if !haskey(counter, i)\n            counter[i]= 1\n        else\n\
    \            counter[i]+= 1\n        end\n    end\n    return counter\nend", " \
    \   histogram = Dict{String, Int64}()\n    for i in test\n        if i \u2260\
    \ \" \"\n            if haskey(histogram, i)\n                histogram[i] +=\
    \ 1\n            else\n                histogram[i] = 1\n            end\n   \
    \     end\n    end\n    max = 0\n    for i in keys(histogram)\n        if histogram[i]\
    \ > max\n            max = histogram[i]\n        end\n    end\n    for i in keys(histogram)\n\
    \        if histogram[i] < max\n            delete!(histogram, i)\n        end\n\
    \    end\n    return histogram\nend", "    m =  count_letters(test)\n    d = Dict{String,\
    \ Int64}()\n    max = 0\n    for k in keys(m)\n        if max < m[k]\n       \
    \     max = m[k]\n        end\n    end\n    for k in keys(m)\n        if m[k]\
    \ == max\n            d[k] = m[k]\n        end\n    end\n    return d\nend", " \
    \   hist = Dict{String, Int64}()\n    for x in split(test)\n        if x in keys(hist)\n\
    \            hist[x] += 1\n        else\n            hist[x] = 1\n        end\n\
    \    end\n    return hist\nend", "    let\n        letters = split(test, ' ')\n\
    \        count_letters = Dict(i => count(letters, i) for i in letters)\n     \
    \   max_count = maximum(values(count_letters))\n        max_count_letters = filter(x\
    \ -> x.second == max_count, count_letters)\n    end\n    return max_count_letters\n\
    end\nprintln(histogram(\"a b c\"))\nprintln(histogram(\"a b b a\"))\nprintln(histogram(\"\
    a b c a b\"))\nprintln(histogram(\"b b b b a\"))\nprintln(histogram(\"\"))", " \
    \   d = Dict{String, Int64}()\n    for word in split(test)\n        if haskey(d,\
    \ word)\n            d[word] += 1\n        else\n            d[word] = 1\n   \
    \     end\n    end\n   \n    max_occurence = maximum(values(d))\n    dict_with_max_occurence\
    \ = Dict(k => v for (k, v) in d if v == max_occurence)\n    return dict_with_max_occurence\n\
    end", "    counter = Dict()\n    for i in test\n        if i != \" \"\n      \
    \      if !haskey(counter, i)\n                counter[i] = 1\n            else\n\
    \                counter[i] += 1\n            end\n        end\n    end\n    return\
    \ counter\nend", "    letters = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if haskey(letters, letter)\n            letters[letter] += 1\n      \
    \  else\n            letters[letter] = 1\n        end\n    end\n    return letters\n\
    end", "    hist = Dict()\n    if length(test) == 0\n        return hist\n    end\n\
    \    test = split(test)\n    for letter in test\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend", "    chars = split(test)\n    dict\
    \ = Dict{String, Int64}()\n    for i in chars\n        if haskey(dict, i) == false\n\
    \            dict[i] = 1\n        else \n            dict[i] += 1\n        end\n\
    \    end\n    max_ = maximum(values(dict))\n    result = Dict{String, Int64}()\n\
    \    for i in keys(dict)\n        if dict[i] == max_\n            result[i] =\
    \ max_\n        end\n    end\n    return result\nend", "    #Split the string\
    \ into a vector of Strings\n    #Note that the split function will return a vector\
    \ of\n    #Strings (not a vector of Chars)\n    words = split(test, ' ')\n   \
    \ #Create a dictionary of type Dict{String, Int64}\n    hist = Dict{String, Int64}()\n\
    \    #Loop over the words\n    for word in words\n        #Find out how many times\
    \ word appears in the vector\n        #using the count function\n        frequency\
    \ = count(x -> x == word, words)\n        #Update the dictionary\n        hist[word]\
    \ = frequency\n    end\n    return hist\nend", "    words = split(test)\n    hist\
    \ = Dict()\n    for word in words\n        if (haskey(hist, word))\n         \
    \   hist[word] += 1\n        else\n            hist[word] = 1\n        end\n \
    \   end\n    return hist\nend", "    str = split(test)\n    dict = Dict{String,\
    \ Int64}()\n    for char in str\n        if haskey(dict, char)\n            dict[char]\
    \ += 1\n        else\n            dict[char] = 1\n        end\n    end\n    max\
    \ = 0\n    for value in values(dict)\n        if value > max\n            max\
    \ = value\n        end\n    end\n    dict_max = Dict{String, Int64}()\n    for\
    \ (key, value) in dict\n        if value == max\n            dict_max[key] = value\n\
    \        end\n    end\n    return dict_max\nend", "    v = split(test)\n    if\
    \ isempty(v)\n        return Dict{String, Int64}()\n    end\n    letter_freq =\
    \ Dict{String, Int64}()\n    for i = 1:length(v)\n        letter_freq[v[i]] =\
    \ get(letter_freq, v[i], 0) + 1\n    end\n    letter_freq = filter(x -> x[2] ==\
    \ maximum(values(letter_freq)), letter_freq)\n    return letter_freq\nend", " \
    \   array_string = split(test)\n    dict_letters = Dict{String, Int64}()\n   \
    \ for i in 1:length(array_string)\n        char = array_string[i]\n        if(haskey(dict_letters,\
    \ char))\n            dict_letters[char] += 1\n        else\n            dict_letters[char]\
    \ = 1\n        end\n    end\n    max = 0\n    for (key, value) in dict_letters\n\
    \        if(value > max)\n            max = value\n        end\n    end\n    dict_letters_max\
    \ = Dict{String, Int64}()\n    for (key, value) in dict_letters\n        if(value\
    \ == max)\n            dict_letters_max[key] = value\n        end\n    end\n \
    \   return dict_letters_max\nend\nhistogram(\"a b c\")\nhistogram(\"a b b a\"\
    )\nhistogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\")", "   \
    \ test = strip(test)\n    test = split(test)\n    d = Dict{String, Int64}()\n\
    \    for s in test\n        if haskey(d, s)\n            d[s] += 1\n        else\n\
    \            d[s] = 1\n        end\n    end\n    return d\nend", "    if test\
    \ == \"\"\n        return Dict()\n    end\n    histogram(test) = countmap(split(test,\
    \ ' '))\nend", "    testlist = split(test)\n    alphabet = get_alpha(testlist)\n\
    \    counter = zeros(Int64, length(alphabet))\n    for i in 1:length(alphabet)\n\
    \        counter[i] = count(x -> x == alphabet[i], testlist)\n    end\n    retdict\
    \ = Dict(alphabet[i] => counter[i] for i in 1:length(alphabet))\n    retdict =\
    \ filter(x -> x[2] == maximum(counter), retdict)\n    return retdict\nend", " \
    \   test = test.split()\n    result = Dict{String, Int64}()\n    for s in test\n\
    \        if !haskey(result, s)\n            result[s] = 1\n        else\n    \
    \        result[s] += 1\n        end\n    end\n    return result\nend", "    \n\
    \    if test == \"\"\n        return Dict()\n    end\n    \n    letters = split(test)\n\
    \    letter_count = countmap(letters)\n    letter_dict = Dict()\n    count = maximum(values(letter_count))\n\
    \    \n    for (key, value) in letter_count\n        if value == count\n     \
    \       letter_dict[key] = value\n        end\n    end\n    \n    return letter_dict\n\
    end", "    hist = Dict{String, Int64}()\n    str = split(test)\n    for i in str\n\
    \        if i in keys(hist)\n            hist[i] += 1\n        else\n        \
    \    hist[i] = 1\n        end\n    end\n    return hist\nend", "    # Split the\
    \ string into an array of characters\n    test_array = split(test, \" \")", " \
    \   \n    if length(test) == 0\n        return Dict()\n    end\n    \n    # initialize\
    \ an array with the first letter\n    letter_list = Array(test[1])\n    counts\
    \ = Array(1)\n    \n    # loop over each letter and update the counts\n    for\
    \ i in 2:length(test)\n        letter = test[i]\n        if letter in letter_list\n\
    \            idx = findall(letter_list .== letter)[1]\n            counts[idx]\
    \ += 1\n        else\n            push!(letter_list, letter)\n            push!(counts,\
    \ 1)\n        end\n    end\n    \n    # find all the most common letters\n   \
    \ idx = findall(counts .== maximum(counts))\n    max_letters = letter_list[idx]\n\
    \    \n    # loop over the most common letters and create the dictionary\n   \
    \ dict = Dict()\n    for letter in max_letters\n        dict[letter] = counts[letter_list\
    \ .== letter][1]\n    end\n    \n    return dict\nend", "    letter_counts = Dict()\n\
    \    for letter in test \n        letter_counts[letter] = get(letter_counts, letter,\
    \ 0) + 1\n    end\n    return letter_counts\nend", "    letter_count = {}\n  \
    \  max_value = 0\n    # First pass, create a dictionary of counts\n    for letter\
    \ in split(test)\n        if letter in keys(letter_count)\n            letter_count[letter]\
    \ += 1\n        else\n            letter_count[letter] = 1\n        end\n    end\n\
    \    # Second pass, find the max value in the dictionary\n    for key in keys(letter_count)\n\
    \        if letter_count[key] > max_value\n            max_value = letter_count[key]\n\
    \        end\n    end\n    # Final pass, collect the keys with the corresponding\
    \ max value\n    final_dict = {}\n    for key in keys(letter_count)\n        if\
    \ letter_count[key] == max_value\n            final_dict[key] = max_value\n  \
    \      end\n    end\n    return final_dict\nend", "        words = split(test)\n\
    \        # Initialize dictionary\n        dict = Dict{String, Int64}()\n     \
    \   # Initialize a maximum value\n        max = 0\n        # For each element\
    \ of input\n        for i = 1:length(words)\n            # If the element is not\
    \ in the dictionary, add it\n            if haskey(dict, words[i]) == false\n\
    \                dict[words[i]] = 1\n            # If the element is in the dictionary,\
    \ increment its value\n            elseif haskey(dict, words[i]) == true\n   \
    \             dict[words[i]] += 1\n            end\n        end\n        # Loop\
    \ to find the maximum value in the dictionary\n        for value in values(dict)\n\
    \            if value > max\n                max = value\n            end\n  \
    \      end\n        # Delete from the dictionary all elements except the ones\
    \ equal to the maximum value\n        dict = filter(x -> x == max, dict)\n   \
    \     return dict\nend", "    letters = split(test)\n    dict = Dict{String, Int64}()\n\
    \    count = 0\n    char = 0\n    for i in 1:length(letters)\n        if haskey(dict,\
    \ letters[i])\n            dict[letters[i]] += 1\n        else\n            dict[letters[i]]\
    \ = 1\n        end\n        if dict[letters[i]] > count\n            count = dict[letters[i]]\n\
    \            char = letters[i]\n        end\n    end\n    dict2 = Dict{String,\
    \ Int64}()\n    for (key, value) in dict\n        if value == count\n        \
    \    dict2[key] = value\n        end\n    end\n    return dict2\nend", "    _,\
    \ counts = countmap(test)\n    max_count = 0\n    for key in keys(counts)\n  \
    \      if counts[key] > max_count\n            max_count = counts[key]\n     \
    \   end\n    end\n    result = Dict()\n    for key in keys(counts)\n        if\
    \ counts[key] == max_count\n            result[key] = counts[key]\n        end\n\
    \    end\n    return result\nend", "    words = split(test, \" \")\n    dict =\
    \ Dict()\n    for i in words\n        if haskey(dict, i)\n            dict[i]\
    \ += 1\n        else\n            dict[i] = 1\n        end\n    end\n    return\
    \ dict\nend", "    histogram = Dict()\n    for ch in test\n        if histogram[ch]\
    \ == 0\n            histogram[ch] = 1\n        else\n            histogram[ch]\
    \ += 1\n        end\n    end\n    return histogram\nend", "\ndictionary = Dict()\n\
    list = split(test)\nfor i in list\n    if haskey(dictionary, i) == false\n   \
    \     dictionary[i] = 1\n    else\n        dictionary[i] += 1\n    end\nend",
  "    dict = Dict()\n    for item in split(test)\n        if haskey(dict, item)\n\
    \            dict[item] += 1\n        else\n            dict[item] = 1\n     \
    \   end\n    end\n    return dict\nend", "    dict = Dict{String, Int64}()\n \
    \   for i in 1:length(test)\n        dict[string(test[i])] = get(dict, string(test[i]),\
    \ 0) + 1\n    end\n    dict\nend", "    # Split the string using spaces as delimiters\n\
    \    letters = split(test)\n    # Initialize dictionary with empty keys\n    hist\
    \ = Dict{String, Int64}(x => 0 for x in letters)\n    # For each letter in the\
    \ list of letters, increase the corresponding count\n    for letter in letters\n\
    \        hist[letter] += 1\n    end\n    # Return dictionary\n    return hist\n\
    end\n\"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()", "    \n    # Result dictionary\n    dict_hist\
    \ = Dict()\n    \n    # Convert the space separated string into an array\n   \
    \ array_hist = test.split()\n    \n    # Iterate through the array to count the\
    \ number of repetition for each letter\n    for letter in array_hist\n       \
    \ dict_hist[letter] = dict_hist[letter] + 1\n    end\n    \n    # Search the maximum\
    \ repetition in the dictionary \n    max_hist = maximum(values(dict_hist))\n \
    \   \n    # Copy the dictionary into a new one\n    dict_hist_copy = deepcopy(dict_hist)\n\
    \    \n    # Create a new dictionary containing only letters with the same max_hist\n\
    \    for key in keys(dict_hist)\n        if dict_hist[key] != max_hist\n     \
    \       delete!(dict_hist_copy, key)\n        end\n    end\n    return dict_hist_copy\n\
    end", "    dict = Dict()\n    split_test = split(test)\n    for word in split_test\n\
    \        dict[word] = get(dict, word, 0) + 1\n    end\n    dict\nend", "    Dict{String,\
    \ Int64}()\nend", "    hist = Dict()\n    for s in split(test)\n        if (s\
    \ in keys(hist))\n            hist[s] += 1\n        else\n            hist[s]\
    \ = 1\n        end\n    end\n    hist\nend", "    max_occurrences = 0\n    result\
    \ = Dict{String, Int64}()\n    all_letters = split(test)\n    for letter in all_letters\n\
    \        if letter in keys(result)\n            result[letter] += 1\n        else\n\
    \            result[letter] = 1\n        end\n        if result[letter] > max_occurrences\n\
    \            max_occurrences = result[letter]\n        end\n    end\n    dict_max_occurrences\
    \ = Dict{String, Int64}()\n    for (key, value) in result\n        if value ==\
    \ max_occurrences\n            dict_max_occurrences[key] = value\n        end\n\
    \    end\n    return dict_max_occurrences\nend", "    # Initialise dictionary\n\
    \    letter_counts = Dict{String, Int64}()\n    # Iterate through letters\n  \
    \  for letter in test\n        # If already in dictionary, increment count\n \
    \       if letter_counts[letter]\n            letter_counts[letter] += 1\n   \
    \     # If not in dictionary, add to dictionary with count of 1\n        else\n\
    \            letter_counts[letter] = 1\n        end\n    end\n    return letter_counts\n\
    end", '    histogram = Dict{String, Int64}()', "    test = lowercase(test)\n \
    \   words = split(test)\n    counts = Dict{String, Int64}()\n    for word in words\n\
    \        if haskey(counts, word)\n            counts[word] += 1\n        else\n\
    \            counts[word] = 1\n        end\n    end\n    return counts\nend",
  "    \"\"\"\n    Returns a dictionary of letters with their respective counts.\n\
    \    If multiple letters have the same count, all are returned.\n    If no letters,\
    \ returns empty dictionary.\n    \"\"\"\n    # Dict to store letters and their\
    \ respective counts\n    hist = Dict{String, Int64}()\n    # Split string into\
    \ array of words\n    letters = split(test)\n    # For every word, check if in\
    \ dictionary\n    for letter in letters\n        # If letter is not in dictionary,\
    \ add it with count 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # Else add 1 to letter's count\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # Sort letters by count, descending\n    sorted_counts\
    \ = sort(collect(values(hist)), rev=true)\n    # If there are no letters (empty\
    \ dictionary), return dictionary\n    if length(sorted_counts) == 0\n        return\
    \ hist\n    end\n    # Create array to store letters with the most repetitions\n\
    \    max_letters = Array{String, 1}()\n    # Check for letters with the highest\
    \ count\n    for letter in letters\n        if hist[letter] == sorted_counts[1]\n\
    \            push!(max_letters, letter)\n        end\n    end\n    # Create dictionary\
    \ of letters with most repetitions\n    max_hist = Dict{String, Int64}()\n   \
    \ for letter in max_letters\n        max_hist[letter] = hist[letter]\n    end\n\
    \    return max_hist\nend", "    #TODO: Implement histogram function\nend", " \n\
    \    results = Dict()\n    # iterate over characters in test string\n    for c\
    \ in test\n        # ensure that c is a letter, ignore non-letters\n        if\
    \ c in 'abcdefghijklmnopqrstuvwxyz'\n            # if c is already in results,\
    \ increment value\n            if c in results\n                results[c] +=\
    \ 1\n            # otherwise, initialize value to 1\n            else\n      \
    \          results[c] = 1\n            end\n        end\n    end\n    # find the\
    \ maximum value in results\n    maxvalue = maximum(values(results))\n    # return\
    \ all letters with the maximum value\n    output = Dict{String, Int64}()\n   \
    \ for (letter, value) in results\n        if value == maxvalue\n            output[letter]\
    \ = value\n        end\n    end\n    # return output\n    return output\nend",
  "    if test == \"\"\n        return Dict()\n    end\n    letters = split(test)\n\
    \    current_letter = letters[1]\n    count = 1\n    for i in 2:length(letters)\n\
    \        if letters[i] == current_letter\n            count += 1\n        else\n\
    \            count = 1\n            current_letter = letters[i]\n        end\n\
    \    end\n    return Dict(current_letter => count)\nend", "    if test == \"\"\
    \n        return Dict{String, Int64}()\n    end\n    h = Dict{String, Int64}()\n\
    \    for c in split(test)\n        h[c] = get(h, c, 0) + 1\n    end\n    h\nend",
  "    histo = Dict{String, Int64}()\n    for letter in split(test)\n        histo[letter]\
    \ = get(histo, letter, 0) + 1\n    end\n    max_histo = []\n    for key in keys(histo)\n\
    \        if length(max_histo) == 0\n            max_histo = [key]\n        elseif\
    \ histo[key] == histo[max_histo[1]]\n            append!(max_histo, key)\n   \
    \     elseif histo[key] > histo[max_histo[1]]\n            max_histo = [key]\n\
    \        end\n    end\n    max_histo_dict = Dict{String, Int64}()\n    for key\
    \ in max_histo\n        max_histo_dict[key] = histo[key]\n    end\n    return\
    \ max_histo_dict\nend", "    if isempty(test)\n        return Dict()\n    end\n\
    \    letrs = split(test)\n    key_counts = countmap(letrs)\n    max_count = maximum(values(key_counts))\n\
    \    max_vals = [k for (k, v) in key_counts if v == max_count]\n    return Dict(max_vals=>max_count)\n\
    end", "    words = split(test, r\"\\s+\")\n    h = countmap(words)\n    vals =\
    \ values(h)\n    maxval = maximum(vals)\n    return map(k->k=>h[k], filter(k->h[k]==maxval,\
    \ keys(h)))\nend", "    test = replace(test, \" \", \"\")\n    hist = Dict{String,\
    \ Int64}()\n    max_occurrence = 0\n    for letter in test\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n        if hist[letter] > max_occurrence\n            max_occurrence\
    \ = hist[letter]\n        end\n    end\n    highest_frequencies = Dict{String,\
    \ Int64}()\n    for key in keys(hist)\n        if hist[key] == max_occurrence\n\
    \            highest_frequencies[key] = hist[key]\n        end\n    end\n    return\
    \ highest_frequencies\nend", "    letter_dict = Dict()\n    for letter in split(test)\n\
    \        if letter in keys(letter_dict)\n            letter_dict[letter] += 1\n\
    \        else\n            letter_dict[letter] = 1\n        end\n    end\n   \
    \ top_letters = Dict()\n    sorted_dict = sort(collect(letter_dict), by=x->x[2],\
    \ rev=true)\n    if length(sorted_dict) == 0\n        return Dict()\n    else\n\
    \        top_count = sorted_dict[1][2]\n        for letter in keys(letter_dict)\n\
    \            if letter_dict[letter] == top_count\n                top_letters[letter]\
    \ = top_count\n            end\n        end\n        return top_letters\n    end\n\
    end", "    letters_dict = Dict{String, Int64}()\n    for char in test\n      \
    \  if haskey(letters_dict, char) == false\n            letters_dict[char] = 1\n\
    \        else\n            letters_dict[char] += 1\n        end\n    end\n   \
    \ return letters_dict\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    return\nend", "   \
    \ # split string into array of lowercase letters\n    # iterate through array,\
    \ create dictionary, and count\n    # return dictionary\n    letters = split(test)\n\
    \    hist = Dict{String, Int64}()\n    for letter in letters\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    maxCount = 0\n    for letter in keys(hist)\n\
    \        if hist[letter] > maxCount\n            maxCount = hist[letter]\n   \
    \     end\n    end\n    maxKeys = []\n    for letter in keys(hist)\n        if\
    \ hist[letter] == maxCount\n            push!(maxKeys, letter)\n        end\n\
    \    end\n    tempDict = Dict{String, Int64}()\n    for letter in maxKeys\n  \
    \      tempDict[letter] = maxCount\n    end\n    return tempDict\nend", "    count\
    \ = Dict()\n    new_val = 0\n    for letter in test\n        if haskey(count,\
    \ letter)\n            count[letter] += 1\n        else\n            count[letter]\
    \ = 1\n        end\n    end\n    max_val = maximum(values(count))\n    for letter\
    \ in keys(count)\n        if count[letter] == max_val\n            new_val = max_val\n\
    \        end\n    end\n    new_dict = Dict()\n    for letter in keys(count)\n\
    \        if count[letter] == new_val\n            new_dict[letter] = new_val\n\
    \        end\n    end\n    return new_dict\nend", "    letters = Dict{String,\
    \ Int64}()\n    for letter in test\n        if letters[letter] == nothing\n  \
    \          letters[letter] = 1\n        else\n            letters[letter] += 1\n\
    \        end\n    end\n    return letters\nend", "    data = Dict()\n    for letter\
    \ in test\n        if haskey(data, letter)\n            data[letter] += 1\n  \
    \      else\n            data[letter] = 1\n        end\n    end\n    max = maximum(values(data))\n\
    \    new_dict = Dict()\n    for (key, value) in data\n        if value == max\n\
    \            new_dict[key] = value\n        end\n    end\n    return new_dict\n\
    end", "    hist = Dict{String, Int64}()\n    test = lowercase(test)\n    # split\
    \ string into word array\n    letters = split(test)\n    for letter in letters\n\
    \        # if letter already exists in dictionary, increment value\n        if\
    \ letter in keys(hist)\n            hist[letter] += 1\n        # if letter does\
    \ not exist in dictionary, initialize it\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend", "\ntest = \"a b c\"\ntest2\
    \ = \"a b b a\"\ntest3 = \"a b c a b\"\ntest4 = \"b b b b a\"\ntest5 = \"\"\n\"\
    \"\"\nA.2", "    \n    hist_dict = Dict{String, Int64}()", "    Dict()\nend",
  "    hist = Dict()\n    for letter in test\n        if haskey(hist, letter) == false\n\
    \            hist[letter] = 1\n        else\n            hist[letter] += 1\n \
    \       end\n    end\n    return hist\nend", "    d = Dict{String, Int64}()\n\
    \    for c in test\n        v = haskey(d, c) ? get(d, c, 0) : 0\n        d[c]\
    \ = v + 1\n    end\n    return d\nend\nd = histogram(\"a b c a b\")", "    \n\
    \    #error(\"Implement this\")\n    Dict()\nend", "\nend", "    # First split\
    \ the string into a vector of strings\n    split_test = split(test)\n    # Initialize\
    \ a dictionary \n    dict_test = Dict{String, Int64}()\n    # Initialize an empty\
    \ list\n    occurance = []\n    # Loop through the vector to go through each letter\n\
    \    for i in split_test\n        # Check if the letter is already in the dictionary\n\
    \        if i in keys(dict_test)\n            # Increment the value by 1\n   \
    \         dict_test[i] += 1\n        else\n            # Create a new key with\
    \ the default value of 1\n            dict_test[i] = 1\n        end\n    end\n\
    \    # Loop through the dictionary\n    for (k, v) in dict_test\n        # Add\
    \ the corresponding count to the list\n        push!(occurance, v)\n    end\n\
    \    # Find the max of the list\n    max_occurance = maximum(occurance)\n    #\
    \ Create an empty dictionary\n    max_dict = Dict{String, Int64}()\n    # Loop\
    \ through the dictionary again\n    for (k, v) in dict_test\n        # Check if\
    \ the value is the max\n        if v == max_occurance\n            # Add the corresponding\
    \ key and value to the new dictionary\n            max_dict[k] = v\n        end\n\
    \    end\n    # Return the new dictionary\n    return max_dict\nend", "    words\
    \ = split(test, \" \")\n    hist = Dict()\n    for word in words\n        if (haskey(hist,\
    \ word))\n            hist[word] += 1\n        else\n            hist[word] =\
    \ 1\n        end\n    end\n    return hist\nend", "    # You can use Python Dictionaries\n\
    \    return Dict()\nend", "    new_dict = Dict() # instantiate dictionary\n  \
    \  test_array = split(test) # split into array\n    for item in test_array\n \
    \       if haskey(new_dict, item)\n            new_dict[item] += 1\n        else\n\
    \            new_dict[item] = 1\n        end\n    end\n    return new_dict\nend",
  "    newDict = Dict()\n    splitted = split(test)\n    for x in splitted\n     \
    \   if haskey(newDict, x) == false\n            newDict[x] = 1\n        else\n\
    \            newDict[x] += 1\n        end\n    end\n    newDict\nend", "    letters\
    \ = Dict()\n    for letter in test\n        if letter in keys(letters)\n     \
    \       letters[letter] += 1\n        else\n            letters[letter] = 1\n\
    \        end\n    end\n    return letters\nend", "    testarr = split(test)\n\
    \    hist = histogram(testarr)\n    return hist\n    end\n ", "    count = Dict()\n\
    \    for i in 1:size(test)[1]\n        if !haskey(count,test[i])\n           \
    \ count[test[i]] = 1\n        else\n            count[test[i]] += 1\n        end\n\
    \    end\n    max_value = maximum(values(count))\n    max_occurrence = Dict()\n\
    \    for (k,v) in count\n        if v == max_value\n            max_occurrence[k]\
    \ = v\n        end\n    end\n    return max_occurrence\nend", "    count = Dict()\n\
    \    for c in test\n        if haskey(count, c)\n            count[c] += 1\n \
    \       else\n            count[c] = 1\n        end\n    end\n    return count\n\
    end", "    histogram = Dict()\n    for c in test\n        if haskey(histogram,\
    \ c)\n            histogram[c] += 1\n        else\n            histogram[c] =\
    \ 1\n        end\n    end\n    return histogram\nend", "    \n    histogram_dict\
    \ = Dict{String, Int64}()\n    for value in test \n        if !haskey(histogram_dict,\
    \ value)\n            histogram_dict[value] = 1\n        else\n            histogram_dict[value]\
    \ += 1\n        end\n    end\n    histogram_dict\n    \nend", "    # We split\
    \ the string in words\n    let words = split(test, \" \")\n    # We build a dictionary\
    \ to hold the histogram\n    let hist = Dict{String, Int64}()\n    # We iterate\
    \ over the words\n    for i in words\n        # If the word does not appear in\
    \ the histogram, we add it\n        if hist[i] == nothing\n            hist[i]\
    \ = 1\n        # Otherwise, we increment the count\n        else\n           \
    \ hist[i] += 1\n        end\n    end\n    # Now that we have built the histogram,\
    \ we are going to find the most repeated\n    # words. We start with a negative\
    \ value for max_repetitions.\n    let max_repetitions = -1\n    # We iterate over\
    \ the histogram\n    for (k, v) in hist\n        # If we have more repetitions,\
    \ we update the max and build a new set of\n        # the most repeated words\n\
    \        if v > max_repetitions\n            max_repetitions = v\n           \
    \ most_repeated = Set([k])\n        # Otherwise, if we have the same amount of\
    \ repetitions, we just add to\n        # the set\n        elseif v == max_repetitions\n\
    \            push!(most_repeated, k)\n        end\n    end\n    # Finally, we\
    \ return a new dictionary where the key is the most repeated word,\n    # and\
    \ the value is the number of repetitions.\n    return Dict(Array(most_repeated)[1]\
    \ => max_repetitions)\nend", "    d = Dict{String, Int64}()\n    for word in split(test)\n\
    \        d[word] = get(d, word, 0) + 1\n    end\n    return d\nend", " \n    hist_dict\
    \ = Dict{String, Int64}()\n    test_str = split(test)\n    for t in test_str\n\
    \        if haskey(hist_dict, t)\n            hist_dict[t] += 1\n        else\n\
    \            hist_dict[t] = 1\n        end\n    end\n    test_maximum = maximum(values(hist_dict))\n\
    \    hist_result = Dict{String, Int64}()\n    for (k, v) in hist_dict\n      \
    \  if v == test_maximum\n            hist_result[k] = v\n        end\n    end\n\
    \    return hist_result\nend", "    # code here\n    d = Dict()\n    for letter\
    \ in test\n        if letter == ' '\n            continue\n        end\n     \
    \   d[letter] = get(d, letter, 0) + 1\n    end\n    res = Dict()\n    max = 0\n\
    \    for (key, value) in d\n        if value >= max\n            max = value\n\
    \        end\n    end\n    for (key, value) in d\n        if value == max\n  \
    \          res[key] = value\n        end\n    end\n    return res\nend", "   \
    \ test = split(test)\n    test = Dict{String, Int64}(test .=> 0)\n    for w in\
    \ test\n        if w in test\n            test[w] += 1\n        end\n    end\n\
    \    return test\nend", "    dic = Dict{String, Int64}()\n    for c in test\n\
    \        get!(dic, c, 0) += 1\n    end\n    dic\nend", "    \"\"\"Given a string\
    \ representing a space separated lowercase letters, return a dictionary\n    of\
    \ the letter with the most repetition and containing the corresponding count.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1,\
    \ \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n\
    \    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "  \
    \  letters = split(test, \" \")\n    letterCounts = Dict{String, Int64}()\n  \
    \  for letter in letters\n        letterCounts[letter] = get(letterCounts, letter,\
    \ 0) + 1\n    end\n    return letterCounts\nend\n ", "    # Create a dictionary\
    \ with default values of 1\n    letters = Dict(x => 1 for x in split(test))\n\
    \    for x in split(test)\n        #print(letters[x])\n        letters[x] += 1\n\
    \    end\n    #print(letters)\n    # Only keep the maximum values\n    return\
    \ Dict(x => letters[x] for x in keys(letters) if letters[x] == maximum(values(letters)))\n\
    end", "    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n  \
    \  # Create a list of the lowercase characters in the string\n    list_of_chars\
    \ = split(test)\n    # Iterate through the list of characters\n    for char in\
    \ list_of_chars\n        # If the character is in the dictionary, increment its\
    \ value by 1\n        if haskey(hist, char)\n            hist[char] += 1\n   \
    \     # If the character is not in the dictionary, add it with a value of 1\n\
    \        else\n            hist[char] = 1\n        end\n    end\n    # Return\
    \ the histogram\n    return hist\nend", "    mydict = Dict{String, Int64}()\n\
    \    for i in test.split(\" \")\n        if i in keys(mydict)\n            mydict[i]\
    \ += 1\n        else\n            mydict[i] = 1\n        end\n    end\n    mydict\n\
    end", "    @assert isvalid(test), \"test is not valid\"\n    output = {}\n   \
    \ if test == \"\"\n        return output\n    end\n    words = split(test)\n \
    \   # loop over each item in words\n    for item in words\n        # if the item\
    \ is not in the output, initialize it\n        if item in keys(output)\n     \
    \       output[item] += 1\n        else\n            output[item] = 1\n      \
    \  end\n    end\n    return output\nend\n    \n    \"\"\"Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    \    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "    hist = Dict{String,\
    \ Int64}()\n    words = split(test)\n    for x in words\n        if haskey(hist,\
    \ x)\n            hist[x] += 1\n        else\n            hist[x] = 1\n      \
    \  end\n    end\n    # https://docs.julialang.org/en/v1/stdlib/Statistics/index.html#Statistics.sortperm\n\
    \    # sortperm(col, [lt=isless, by=identity])\n    # sortperm(col::AbstractVector,\
    \ by::Function, [lt=isless])\n    # Outputs the permutation that sorts col according\
    \ to the function by.\n    # Elements are compared using the function lt.\n  \
    \  # If lt is omitted, then the default is isless.\n    # If col is of type AbstractVector{T},\
    \ then by is called as by(x::T) and should output a value that can be sorted.\n\
    \    # Useful for example when sorting strings by their lengths,\n    # or sorting\
    \ by a specific field of a struct:\n    # sortperm(names, by=length)\n    # sortperm(people,\
    \ by=x->x.name)\n    # This is equivalent to sortperm(by.(col))\n    # https://docs.julialang.org/en/v1/stdlib/DataStructures/#DataStructures.sort!\n\
    \    # sort!(r::AbstractVector, [lt=isless, by=identity], [rev=false])\n    #\
    \ sort!(r::AbstractVector, col::AbstractVector, [lt=isless], [rev=false])\n  \
    \  # Sorts the elements of r according to the order induced by lt,\n    # which\
    \ defaults to the less-than operator isless and operates on the transformed elements\
    \ by,\n    # which defaults to the identity function.\n    # https://docs.julialang.org/en/v1/stdlib/Base/#Base.sort\n\
    \    # sort(r::AbstractVector, [lt=isless, by=identity], [rev=false])\n    # sort(r::AbstractVector,\
    \ col::AbstractVector, [lt=isless], [rev=false])\n    # Sort the elements of r\
    \ according to the order induced by lt,", "    # For each letter and their corresponding\
    \ counter in the dictionary, \n    # if the letter already exists, add 1 to its\
    \ count. Otherwise, insert the letter and set \n    # its count to 1.\n    counter\
    \ = Dict()\n    for c in test\n        if haskey(counter, string(c))\n       \
    \     counter[string(c)] += 1\n        else\n            counter[string(c)] =\
    \ 1\n        end\n    end\n    # Determine the maximum count\n    maxCount = maximum(values(counter))\n\
    \    # For each letter and its corresponding count in the dictionary, check if\
    \ the count is equal\n    # to the maximum count. If it is, delete all other letters\
    \ with smaller counts.\n    for (key, val) in counter\n        if val != maxCount\n\
    \            delete!(counter, key)\n        end\n    end\n    return counter\n\
    end", "    output = Dict()\n    a =  split(test, \" \")\n    for i in a\n    \
    \    output[i] = get(output, i, 0) + 1\n    end\n    maximum = 0\n    for i in\
    \ output\n        if i[2] > maximum\n            maximum = i[2]\n        end\n\
    \    end\n    output2 = Dict()\n    for i in output\n        if i[2] == maximum\n\
    \            output2[i[1]] = i[2]\n        end\n    end\n    return output2\n\
    end", "    histo = Dict{String, Int64}()\n    for word in split(test)\n      \
    \  if !haskey(histo, word)\n            histo[word] = 1\n        else\n      \
    \      histo[word] += 1\n        end\n    end\n    return histo\nend", "    letters\
    \ = split(test)\n    counts = 1:length(letters)\n    hist = Dict{String, Int64}()\n\
    \    #walk through each letter\n    for i in 1:length(letters)\n        if letters[i]\
    \ in keys(hist)\n            hist[letters[i]] += 1\n        else\n           \
    \ hist[letters[i]] = 1\n        end\n    end\n    return hist\nend", "    letters\
    \ = Dict()\n    \"\"\"\n    letters = Dict('a' => 1, 'b' => 1, 'c' => 1)\n   \
    \ histogram(\"a b c\")\n    letters = Dict('a' => 2, 'b' => 2)\n    histogram(\"\
    a b b a\")\n    letters = Dict('a' => 2, 'b' => 2, 'c' => 1)\n    histogram(\"\
    a b c a b\")\n    letters = Dict('b' => 4, 'a' => 1)\n    histogram(\"b b b b\
    \ a\")\n    \"\"\"\n    for c in test\n        if haskey(letters, c)\n       \
    \     letters[c] += 1\n        else\n            letters[c] = 1\n        end\n\
    \    end\n    return letters\nend", "    test_dic = Dict()\n    for i in 1:length(test)\n\
    \        if test[i] in keys(test_dic)\n            test_dic[test[i]] += 1\n  \
    \      else\n            test_dic[test[i]] = 1\n        end\n    end\n    return\
    \ test_dic\nend", "    letters = Dict{String, Int64}()\n    for letter in test\n\
    \        if letter in keys(letters)\n            letters[letter] += 1\n      \
    \  else\n            letters[letter] = 1\n        end\n    end\n    return letters\n\
    end", '    end', "    # Define a dictionary to hold the results\n    hist = Dict()\n\
    \    # Iterate over all words. Convert each word to a tuple, containing \n   \
    \ # the word and a 1. e.g. (\"a\", 1). We do this because the reduce\n    # function\
    \ expects a tuple of two things to reduce.\n    for (word, count) in test |> \n\
    \                         split |>\n                         map(t->(t, 1)) |>\n\
    \                         reduce(+, hist)\n        # Lookup the current count\
    \ of the letter\n        current_count = get(hist, word, 0)\n        # Set the\
    \ new count\n        hist[word] = current_count + count\n    end\n    # Return\
    \ the dictionary we've built\n    return hist\nend", "    input = lowercase(test)\n\
    \    lst = split(input)\n    collect = Dict()\n    for word in lst\n        if\
    \ !haskey(collect, word)\n            collect[word] = 1\n        else\n      \
    \      collect[word] += 1\n        end\n    end\n    for (k, v) in collect\n \
    \       if v == 1\n            delete!(collect, k)\n        end\n    end\n   \
    \ return collect\nend", "    hist = Dict{String, Int64}()\n    for word in split(test)\n\
    \        hist[word] = get(hist, word, 0) + 1\n    end\n    return hist\nend",
  "    \n    \"\"\"Calculate the frequency of each letter in the input string.\n \
    \   \"\"\"\n    frequencies = Dict()\n    for l in test\n        if (haskey(frequencies,\
    \ l)) \n            frequencies[l] += 1\n        else\n            frequencies[l]\
    \ = 1\n        end\n    end\n    \n    \"\"\"Return the letter or letters with\
    \ the maximum frequency.\n    \"\"\"\n    max_frequency = maximum(frequencies)\n\
    \    histogram = Dict()\n    for l in frequencies\n        if (frequencies[l]\
    \ == max_frequency)\n            histogram[l] = max_frequency\n        end\n \
    \   end\n    return histogram\nend", "    # Implementation here\nend", "    #\
    \ split string into list of letters (split() takes care of whitespace)\n    letters\
    \ = split(test)\n    # init empty dictionary\n    D = Dict{String, Int64}()\n\
    \    # for each letter\n    for l in letters\n        # if the letter is not in\
    \ the dictionary, add it with count 1\n        if !haskey(D, l)\n            D[l]\
    \ = 1\n        # otherwise increment the count\n        else\n            D[l]\
    \ += 1\n        end\n    end\n    # init max count\n    max = 0\n    # for each\
    \ letter\n    for (key, val) in D\n        # if the count is greater than max\n\
    \        if val > max\n            # reset the max\n            max = val\n  \
    \      end\n    end\n    # init empty result dictionary\n    R = Dict{String,\
    \ Int64}()\n    # for each letter\n    for (key, val) in D\n        # if the count\
    \ matches the max\n        if val == max\n            # add the letter to the\
    \ result dictionary\n            R[key] = val\n        end\n    end\n    # return\
    \ the result dictionary\n    return R\nend", "    char_counts = Dict()\n    for\
    \ character in test\n        if character in keys(char_counts)\n            char_counts[character]\
    \ += 1\n        else\n            char_counts[character] = 1\n        end\n  \
    \  end\n    return char_counts\nend", "    hist = Dict()\n    str_split = split(test)\n\
    \    for letter in str_split\n        letter_count = get(hist, letter, 0)\n  \
    \      hist[letter] = letter_count + 1\n    end\n    max_value = maximum(values(hist))\n\
    \    keys_of_max_value = []\n    for key in keys(hist)\n        if hist[key] ==\
    \ max_value\n            push!(keys_of_max_value, key)\n        end\n    end\n\
    \    hist_of_max_value = Dict(key => max_value for key in keys_of_max_value)\n\
    \    return hist_of_max_value\nend", "    # Define Dictionary\n    d = Dict{String,\
    \ Int64}()\n    # Split the string into words\n    words = split(test)\n    #\
    \ Loop over the words\n    for word in words\n        # If the word is not yet\
    \ in the dictionary, create an entry\n        if word \u2209 keys(d)\n       \
    \     d[word] = 1\n        # Otherwise, increment the count\n        else\n  \
    \          d[word] += 1\n        end\n    end\n    # Return the dictionary\n \
    \   return d\nend", "    occur = Dict()\n    for i = 1:length(test)\n        if\
    \ isalpha(test[i])\n            if haskey(occur, test[i])\n                occur[test[i]]\
    \ += 1\n            else\n                occur[test[i]] = 1\n            end\n\
    \        end\n    end\n    return occur\nend", '', "    return Dict(split(test)\
    \ .=> 1) |> countmap |> filter(x -> x[2] == maximum(values(countmap(Dict(split(test)\
    \ .=> 1)))))\nend", "    hist = Dict{String, Int64}()\n    for word in split(test)\n\
    \        if haskey(hist, word)\n            hist[word] += 1\n        else\n  \
    \          hist[word] = 1\n        end\n    end\n    dict = Dict{String, Int64}()\n\
    \    maxvalue = 0\n    for (key, value) in hist\n        if maxvalue < value\n\
    \            maxvalue = value\n        end\n    end\n    for (key, value) in hist\n\
    \        if maxvalue == value\n            dict[key] = value\n        end\n  \
    \  end\n    return dict\nend", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \nend \n \n \n \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    letters = OrderedDict{String,\
    \ Int64}()\n    for i in test\n        if haskey(letters, i)\n            letters[i]\
    \ += 1\n        else\n            letters[i] = 1\n        end\n    end\n    letters\n\
    end", "    d = Dict()\n    for s in test\n        d[s] = get(d, s, 0) + 1\n  \
    \  end\n    d_out = Dict()\n    for (k, v) in d\n        if get(d_out, v, \"\"\
    ) == \"\"\n            d_out[v] = [k]\n        else\n            d_out[v] = [d_out[v]...,\
    \ k]\n        end\n    end\n    max_key = maximum(keys(d_out))\n    d_out = Dict(k\
    \ => max_key for k in d_out[max_key])\n    return d_out\nend", "    chars = split(test)\n\
    \    histo = Dict()\n    for c in chars\n        if haskey(histo, c)\n       \
    \     histo[c] += 1\n        else\n            histo[c] = 1\n        end\n   \
    \ end\n    return histo\nend", "    letters_count = Dict{String, Int64}()\n  \
    \  for letter in split(test)\n        if haskey(letters_count, letter)\n     \
    \       letters_count[letter] += 1\n        else\n            letters_count[letter]\
    \ = 1\n        end\n    end\n    letters_count\nend", "    \"\"\"\n    # Create\
    \ the dictionary from the letters to their counts\n    histo = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histo[letter] = get(histo, letter, 0)\
    \ + 1\n    end\n    \n    # Compute the maximum count\n    max_count = maximum(values(histo))\n\
    \    \n    # Filter the dictionary to contain only keys with maximum count\n \
    \   filt = filter(kv -> kv[2] == max_count, histo)\n    \n    return filt\nend",
  "    let words = split(test, \" \")\n    dict = Dict()\n    for s in words\n   \
    \     if haskey(dict, s) == false\n            dict[s] = 1\n        else\n   \
    \         dict[s] += 1\n        end\n    end\n    for (k, v) in dict\n       \
    \ if v == maximum(values(dict))\n            return dict\n        end\n    end\n\
    end", "    letters = split(test, r\"\\s+\")\n    d = Dict{String, Int64}()\n \
    \   for letter in letters\n        d[letter] = get(d, letter, 0) + 1\n    end\n\
    \    return d\nend\n        \nhistogram(\"a b c a b\")", "    result = Dict()\n\
    \    for letter in split(test)\n        if letter in keys(result)\n          \
    \  result[letter] += 1\n        else\n            result[letter] = 1\n       \
    \ end\n    end\n    return result\nend", "    my_dict = Dict()\n    for char in\
    \ test\n        if char != ' '\n            if !haskey(my_dict, char)\n      \
    \          my_dict[char] = 1\n            else\n                my_dict[char]\
    \ += 1\n            end\n        end\n    end\n    return my_dict\nend", "\"\"\
    \"\n\"\"\"", "    test_list = split(test)\n    h = Dict()\n    for s in test_list\n\
    \        if haskey(h, s)\n            h[s] += 1\n        else\n            h[s]\
    \ = 1\n        end\n    end\n    max_count = maximum(h)\n    return [k for k in\
    \ h if h[k] == max_count]\nend", "    histo = Dict(\"a\" => 0, \"b\" => 0, \"\
    c\" => 0)\n    words = split(test)\n    for word in words\n        histo[word]\
    \ += 1\n    end\n    histo\nend", "#     println(test)\n    test_clean = replace(test,\
    \ \" \" => \"\")\n    count = Dict()\n    for i in test_clean\n        if haskey(count,\
    \ i)\n            count[i] += 1\n        else\n            count[i] = 1\n    \
    \    end\n    end\n    values = values(count)\n    max_val = maximum(values)\n\
    \    return filter(x -> x == max_val, count)\nend", "    hist = Dict{String, Int64}()\n\
    \    for c in split(test)\n        c in keys(hist) ? hist[c] += 1 : hist[c] =\
    \ 1\n    end\n    return hist\nend\n ", '    letters = Dict{String, Int64}()',
  "    test_array = split(test, \" \")\n    hist = Dict()\n    for i = 1:length(test_array)\n\
    \        if test_array[i] in keys(hist)\n            hist[test_array[i]] += 1\n\
    \        else\n            hist[test_array[i]] = 1\n        end\n    end\n   \
    \ hist\nend", "    \n ", "\"\"\"Given a string representing a space separated\
    \ lowercase letters, return a dictionary\n    of the letter with the most repetition\
    \ and containing the corresponding count.\n    If several letters have the same\
    \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"a b\
    \ c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b\
    \ b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n\
    \    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"\
    b\" => 4)\n    >>> histogram(\"\")\n    Dict()", "    println(\"function histogram\"\
    )\n    # Create dictionary\n    histogram = Dict{String, Int64}()\n    # Iterate\
    \ through each letter and keep track of the repeat count\n    for letter in test\n\
    \        println(\"in loop\")\n        if !haskey(histogram, letter)\n       \
    \     histogram[letter] = 1\n        else\n            histogram[letter] += 1\n\
    \        end\n    end\n    # Get largest repeat value\n    maxVal = 0\n    for\
    \ (key, val) in histogram\n        if val > maxVal\n            maxVal = val\n\
    \        end\n    end\n    # Create dictionary of letters with the highest repeat\
    \ value\n    histogram_max = Dict{String, Int64}()\n    for (key, val) in histogram\n\
    \        if val == maxVal\n            histogram_max[key] = val\n        end\n\
    \    end\n    return histogram_max\nend", "    words = [word for word in test.split(\"\
    \ \")]\n    counts = Dict{String, Int64}()\n    for letter in words\n        if\
    \ haskey(counts, letter)\n            counts[letter] += 1\n        else\n    \
    \        counts[letter] = 1\n        end\n    end\n    return counts\nend", " \
    \   hist = Dict()\n    for key in test\n        if !haskey(hist, key)\n      \
    \      hist[key] = 1\n        else\n            hist[key] += 1\n        end\n\
    \    end\n    hist\nend", "    letters = Dict()\n    for letter in test\n    \
    \    if letter in keys(letters)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    println(letters)\n\
    end", "    # initialize the dictionary\n    hist = Dict{String, Int64}()\n   \
    \ # iterate through the string\n    for letter in test\n        # if letter is\
    \ not in the dictionary, add it to the dictionary\n        if !(haskey(hist, letter))\n\
    \            hist[letter] = 1\n        # if letter is in the dictionary, increment\
    \ its count\n        else\n            hist[letter] += 1\n        end\n    end\n\
    \    # return the dictionary\n    return hist\nend", "    hist = Dict{String,\
    \ Int64}()\n    for word in test \n        if haskey(hist, word)\n           \
    \ hist[word] += 1\n        else\n            hist[word] = 1\n        end\n   \
    \ end\n    hist\nend", "    max_count = 0\n    letter_count = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        if haskey(letter_count, letter)\n    \
    \        letter_count[letter] += 1\n        else\n            letter_count[letter]\
    \ = 1\n        end\n        if letter_count[letter] > max_count\n            max_count\
    \ = letter_count[letter]\n        end\n    end\n    temp = Dict{String, Int64}()\n\
    \    for letter in keys(letter_count)\n        if letter_count[letter] == max_count\n\
    \            temp[letter] = max_count\n        end\n    end\n    return temp\n\
    end", "    test_lower = lowercase(test) #converts the string to lowercase letters\n\
    \    split = split(test_lower) #splits the string into a tuple\n    sort = sort(split)\
    \ #sorts the tuple\n    #print(sort)\n    count = countmap(sort) #counts the occurrences\
    \ of letters\n    count = Dict(count) #converts the countmap to a dictionary\n\
    \    #print(count)\n    highest_value = maximum(values(count)) #finds the highest\
    \ value in the dictionary\n    #print(highest_value)\n    letters = [] #initializes\
    \ an empty list\n    for key in keys(count) #iterates through the keys in the\
    \ dictionary\n        if count[key] == highest_value #if the count value equals\
    \ the highest value\n            push!(letters, key) #adds the key to the empty\
    \ list\n        end\n    end\n    #print(letters)\n    final_count = Dict{String,\
    \ Int64}() #initializes a new dictionary\n    for i in letters #iterates through\
    \ the letters in the letters list\n        final_count[i] = highest_value #adds\
    \ the letters and highest value to the dictionary\n    end\n    #print(final_count)\n\
    \    return final_count #returns the dictionary\nend", "  if isempty(test)\n \
    \       return Dict()\n    end\n    dictionary = Dict{String, Int64}()\n    for\
    \ l in split(test)\n        if haskey(dictionary, l)\n            dictionary[l]\
    \ += 1\n        else\n            dictionary[l] = 1\n        end\n    end\n  \
    \  maximum_value = maximum(values(dictionary))\n    dictionary_new = Dict{String,\
    \ Int64}()\n    for k in keys(dictionary)\n        if dictionary[k] == maximum_value\n\
    \            dictionary_new[k] = maximum_value\n        end\n    end\n    return\
    \ dictionary_new", "    letterCount = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        if letter in keys(letterCount)\n            letterCount[letter]\
    \ += 1\n        else\n            letterCount[letter] = 1\n        end\n    end\n\
    \    return letterCount\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
