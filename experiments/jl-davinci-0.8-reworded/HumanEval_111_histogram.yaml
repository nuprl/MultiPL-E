name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
  \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
  \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>>\
  \ histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n\
  \n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    test = split(test)\n    dict = Dict()\n    for i in test\n    \
    \    dict[i] = get(dict, i, 0) + 1\n    end\n    maxval = maximum(values(dict))\n\
    \    maxdict = Dict()\n    for (k, v) in dict\n        if v == maxval\n      \
    \      maxdict[k] = v\n        end\n    end\n    return maxdict\nend", "    #Create\
    \ a dictionary and a vector\n    d = Dict()\n    v = split(test, r\"\\s+\")\n\
    \    #For each element in the vector, add it to the dictionary if not already\
    \ in the dictionary\n    #if already in the dictionary, increment the corresponding\
    \ value\n    for x in v\n        if haskey(d, x)\n            d[x] += 1\n    \
    \    else\n            d[x] = 1\n        end\n    end\n    #Find the highest value\
    \ in the dictionary\n    maximum = maximum(collect(values(d)))\n    #Create a\
    \ dictionary that will be returned. Add the element in the first dictionary corresponding\
    \ to the highest value\n    d1 = Dict()\n    for x in v\n        if d[x] == maximum\n\
    \            d1[x] = maximum\n        end\n    end\n    #Return the dictionary\n\
    \    return d1\nend", "    h = Dict()\n    if test == \"\"\n        return h\n\
    \    end\n    for k in split(test)\n        if haskey(h, k)\n            h[k]\
    \ += 1\n        else\n            h[k] = 1\n        end\n    end\n    maximumValue\
    \ = maximum(values(h))\n    for (k, v) in h\n        if v != maximumValue\n  \
    \          delete!(h, k)\n        end\n    end\n    return h\nend", "    \n  \
    \  \n    \n    \nend", "    if length(test)==0\n        return Dict{String, Int64}()\n\
    \    end\n    histo = Dict{String, Int64}()\n    for i = 1:length(test)\n    \
    \    if !haskey(histo, test[i])\n            histo[test[i]] = 1\n        else\n\
    \            histo[test[i]] += 1\n        end\n    end\n    max_histo = 0\n  \
    \  result_histo = []\n    for (key, value) in histo\n        if value > max_histo\n\
    \            max_histo = value\n            result_histo = []\n            push!(result_histo,\
    \ key)\n        elseif value == max_histo\n            push!(result_histo, key)\n\
    \        end\n    end\n    result = Dict{String, Int64}()\n    for el in result_histo\n\
    \        result[el] = max_histo\n    end\n    return result\nend", '    dct =
    Dict{String, Int64}()', "    result = Dict{String, Int64}()\n    for c in test\n\
    \        #print(c)\n        if c in keys(result)\n            result[c] += 1\n\
    \        else\n            result[c] = 1\n        end\n    end\n    return result\n\
    end\n@assert histogram(\"a b c\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n\
    @assert histogram(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n@assert histogram(\"b b b b a\"\
    ) == Dict(\"b\" => 4)\n@assert histogram(\"\") == Dict()\ntest = histogram(\"\
    a b c\")\ntest2 = histogram(\"a b b a\")\ntest3 = histogram(\"a b c a b\")\ntest4\
    \ = histogram(\"b b b b a\")\ntest5 = histogram(\"\")", "\nend", "    hist = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        if !haskey(hist, letter)\n\
    \            hist[letter] = 1\n        else\n            hist[letter] += 1\n \
    \       end\n    end\n    return hist\nend", "    test = Dict(lowercase(x) =>\
    \ count(lowercase(x)) for x in split(test)) \n    if max(test) > 1 # if any letter\
    \ has occured more than once\n        return Dict(key => value for (key, value)\
    \ in test if value == max(test))\n    else\n        return test\n    end\nend",
  "    # Splits the string into a vector of letters using split function\n    letr\
    \ = split(test)\n    # Initializing the dictionary \n    histo = Dict{String,\
    \ Int64}()\n    # Iterates through the elements in letr vector\n    for l in letr\n\
    \        # Defines a default value of 1 if the string is not found in the dictionary\n\
    \        # Updates the key value if the string is already in the dictionary\n\
    \        histo[l] = get(histo, l, 1) + 1\n    end\n    # Returns the dictionary\n\
    \    return histo\nend", "    \"Calculate the histogram using a string.\"\n  \
    \  return histogram(readdlm(IOBuffer(test),' '))\nend", "    dict = Dict{String,\
    \ Int64}()\n    for letter in test\n        if letter in keys(dict)\n        \
    \    dict[letter] += 1\n        else\n            dict[letter] = 1\n        end\n\
    \    end\n    maximum(dict)\nend", "    res = Dict{String, Int64}()\n    for i\
    \ in test.lowercase\n        if haskey(res, i)\n            res[i] += 1\n    \
    \    else\n            res[i] = 1\n        end\n    end\n    return res\nend",
  "    # declare and initialize local variables\n    new_test = test\n    result =\
    \ Dict{String, Int64}()\n    index = 0\n    max_index = 0\n    letter = \"\"\n\
    \    max_letter = \"\"\n    count = 0\n    max_count = 0\n    # iterate through\
    \ the input String\n    for i in test\n        # if the letter is not in the dictionary\n\
    \        if !haskey(result, i)\n            # add the letter to the dictionary\n\
    \            result[i] = 1\n        # if the letter is in the dictionary\n   \
    \     else\n            # increment the letter's value in the dictionary\n   \
    \         result[i] += 1\n        end\n    end\n    # get the max value in the\
    \ dictionary\n    for (k, v) in result\n        if v > max_count\n           \
    \ max_count = v\n        end\n    end\n    # iterate through the dictionary\n\
    \    for (k, v) in result\n        # if the value is less than the max value\n\
    \        if v < max_count\n            # delete the key from the dictionary\n\
    \            delete!(result, k)\n        end\n    end\n    return result\nend",
  "    hist = Dict()\n    str = split(test, \" \")\n    if length(str) > 0\n     \
    \   for c in str\n            if haskey(hist, c)\n                hist[c] += 1\n\
    \            else\n                hist[c] = 1\n            end\n        end\n\
    \    end\n    return hist\nend\nhistogram(\"a b b c a b\")", "    histogram=Dict{String,\
    \ Int64}()\n    for word in split(test)\n        if haskey(histogram, word)\n\
    \            histogram[word] += 1\n        else\n            histogram[word] =\
    \ 1\n        end\n    end\n    count = maximum(values(histogram))\n    return\
    \ filter(histogram) do (letter, occurrences)\n        occurrences == count\n \
    \   end\nend", "    letter_occurence = Dict{String, Int64}()\n    for letter in\
    \ test\n        letter_occurence[letter] = get(letter_occurence, letter, 0) +\
    \ 1\n    end\n    sorted_letter_occurence = sort(collect(letter_occurence), by=x->x[2],\
    \ rev=true)\n    max_occurence = sorted_letter_occurence[1][2]\n    max_occurence_letters\
    \ = filter(x->x[2] == max_occurence, sorted_letter_occurence)\n    return Dict(map(x->(x[1],\
    \ x[2]), max_occurence_letters))\nend", "    return Dict(\"a\" => 0, \"b\" =>\
    \ 0, \"c\" => 0)\nend", "    testStr = split(test)\n    dict = Dict()\n    for\
    \ i in testStr\n        if !(haskey(dict, i))\n            dict[i] = 1\n     \
    \   else\n            dict[i] += 1\n        end\n    end\n    dict\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
