name: HumanEval_8_sum_product
language: jl
results:
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sump = sum(numbers)\n\
    \    prodp = prod(numbers)\n    return (sump, prodp)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    x = 0\n    y\
    \ = 1\n    for i in numbers\n        x += i\n        y *= i\n    end\n    return\
    \ x, y\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for i in numbers\n        sum += i\n        product *= i\n\
    \    end\n    return sum, product\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    # Base case\n\
    \    if length(numbers) == 0\n        return (0, 1)\n    else\n        # Recursive\
    \ call\n        # Unpack return tuple from sum_product\n        sum_tail, product_tail\
    \ = sum_product(numbers[2:end])\n        return (numbers[1] + sum_tail, numbers[1]\
    \ * product_tail)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if isempty(numbers)\n\
    \        return (0, 1)\n    else\n        sum, product = 0, 1\n        for i in\
    \ numbers\n            sum += i\n            product *= i\n        end\n     \
    \   return (sum, product)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0\n        return (0, 1)\n    else\n        sum = 0\n        prod = 1\n \
    \       for i in numbers\n            sum += i\n            prod *= i\n      \
    \  end\n        return (sum, prod)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return (sum(numbers),\
    \ prod(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if isempty(numbers)\n\
    \        return (0, 1)\n    else\n        sum = 0\n        prod = 1\n        for\
    \ num in numbers\n            sum += num\n            prod *= num\n        end\n\
    \        return (sum, prod)\n    end\nend\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return sum(numbers),\
    \ prod(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    end\n    return (sum, product)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return (sum(numbers),\
    \ prod(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    @assert 1 ==\
    \ length(numbers) || ! isempty(numbers)\n    if isempty(numbers)\n        return\
    \ (0, 1)\n    end\n    n = length(numbers)\n    prod = 1\n    summ = 0\n    for\
    \ i in 1:n\n        prod *= numbers[i]\n        summ += numbers[i]\n    end\n\
    \    return (summ, prod)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy6t0eon1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  AssertionError: 1 ==\
    \ length(numbers) || !(isempty(numbers))\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpy6t0eon1.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy6t0eon1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy6t0eon1.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6t0eon1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return (sum(numbers),\
    \ prod(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    s = sum(numbers)\n\
    \    p = prod(numbers)\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    \n    if length(numbers)\
    \ > 0\n        sum = reduce(+, numbers)\n        product = reduce(*, numbers)\n\
    \    else\n        sum = 0\n        product = 1\n    end\n    return sum, product\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for i in numbers\n        sum += i\n        product *= i\n\
    \    end\n    return sum, product\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    # Your code goes\
    \ here\n   \nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl719euoo.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Int64, Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl719euoo.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl719euoo.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl719euoo.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl719euoo.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Int64, Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl719euoo.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl719euoo.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl719euoo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return(sum(numbers),\
    \ prod(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    return (sum(numbers),\
    \ product(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuvj4stru.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: product\
    \ not defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpuvj4stru.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvj4stru.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvj4stru.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuvj4stru.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvj4stru.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvj4stru.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvj4stru.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuvj4stru.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvj4stru.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvj4stru.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvj4stru.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuvj4stru.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpuvj4stru.jl:9\n\
    \   [2] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvj4stru.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for i in numbers\n        sum += i\n        product *= i\n\
    \    end\n    return sum, product\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
