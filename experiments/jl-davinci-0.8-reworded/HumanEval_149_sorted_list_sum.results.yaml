name: HumanEval_149_sorted_list_sum
language: jl
results:
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst2 = []\n    for i in lst\n        if length(i) % 2 == 0\n         \
    \   push!(lst2, i)\n        end\n    end\n    sorted = sort(lst2)\n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyuh95g5a.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuh95g5a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuh95g5a.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyuh95g5a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for i in lst\n        if length(i) % 2 == 0\n     \
    \       push!(new_list, i)\n        end\n    end\n    sort(new_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpprfp2yiv.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprfp2yiv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprfp2yiv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpprfp2yiv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort([s for s in lst if length(s) % 2 == 0])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1cy91xz.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1cy91xz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1cy91xz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1cy91xz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n \n    lst_sum = sum(length.(lst))\n    #println(lst_sum)\n    lst_sum_to_string\
    \ = string(lst_sum)\n    #println(lst_sum_to_string)\n    #println(length(lst_sum_to_string))\n\
    \    lst_sum_array = array(Char, length(lst_sum_to_string))\n    #println(lst_sum_array)\n\
    \    for i in 1:length(lst_sum_to_string)\n        lst_sum_array[i] = lst_sum_to_string[i]\n\
    \    end\n    #println(lst_sum_array)\n    sorted_list_sum = sort(lst_sum_array)\n\
    \    #println(sorted_list_sum)\n    return sorted_list_sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp25x2pwao.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25x2pwao.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst2 = []\n    for i in lst\n        if length(i) % 2 == 0\n         \
    \   push!(lst2, i)\n        end\n    end\n    sort(lst2)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmei5d17i.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmei5d17i.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmei5d17i.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmei5d17i.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(s -> length(s) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwr58vmc.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwr58vmc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwr58vmc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwr58vmc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #Create an empty vector to store the result\n    result = []\n    #Iterate\
    \ on the lst vector \n    for i in lst \n        #Check if the word length is\
    \ even then append it to the result vector \n        if length(i) % 2 == 0\n \
    \           push!(result, i)\n        end\n    end\n    #Sort the result vector\
    \ alphabetically \n    sort(result)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpu7i96e7f.jl:41\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7i96e7f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7i96e7f.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7i96e7f.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_lst = sort(lst, by=length, rev=true)\n    unique_lst = unique(sorted_lst)\n\
    \    delete_lst = []\n    for i in 1:length(unique_lst)\n        if length(unique_lst[i])%2\
    \ != 0\n            push!(delete_lst, unique_lst[i])\n        end\n    end\n \
    \   final_lst = unique_lst\n    for j in 1:length(delete_lst)\n        final_lst\
    \ = delete!(final_lst, delete_lst[j])\n    end\n    final_lst = sort(final_lst,\
    \ by=length)\n    return final_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfmwi2trz.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  MethodError: no method matching delete!(::Vector{String}, ::String)\\n  Closest\
    \ candidates are:\\n    delete!(!Matched::IdDict{K}, ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\\\
    n    delete!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\\\
    n    delete!(!Matched::Dict, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(lst::Vector{String})\\n    \
    \ @ Main /tmp/tmpfmwi2trz.jl:28\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfmwi2trz.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfmwi2trz.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpfmwi2trz.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\\n  MethodError: no method matching delete!(::Vector{String}, ::String)\\n \
    \ Closest candidates are:\\n    delete!(!Matched::IdDict{K}, ::Any) where K at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\\n    delete!(!Matched::Base.IdSet,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\\n    delete!(!Matched::Dict,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\\n    ...\\\
    n  Stacktrace:\\n   [1] sorted_list_sum(lst::Vector{String})\\n     @ Main /tmp/tmpfmwi2trz.jl:28\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfmwi2trz.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfmwi2trz.jl:37\\ntest set:\
    \ Error During "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Declare a dictionary to store the mapping of string length to array\
    \ of words of that length\n    dict = Dict{Int, Vector{String}}()\n    for word\
    \ in lst\n        # Find the length of string\n        length = length(word)\n\
    \        # If the length of the string is not a key in the dictionary\n      \
    \  if !haskey(dict, length)\n            # Add the length of the string as a key\
    \ in the dictionary and the string as the value\n            dict[length] = [word]\n\
    \        else\n            # Append the string to the array of words of that length\n\
    \            push!(dict[length], word)\n        end\n    end\n    dict2 = Dict{Int,\
    \ Vector{String}}()\n    for (key, value) in dict\n        if mod(key, 2) == 0\n\
    \            dict2[key] = value\n        end\n    end\n    sorted_keys = sort(collect(keys(dict2)))\n\
    \    sorted_list = []\n    for key in sorted_keys\n        for word in dict2[key]\n\
    \            push!(sorted_list, word)\n        end\n    end\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps_072_w_.jl:52\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ length not defined\n  Stacktrac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_072_w_.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(lst) do x\n        length(x) % 2 == 0\n    end)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ffy1s1t.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ffy1s1t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ffy1s1t.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ffy1s1t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Filter odd\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # Sort\
    \ and return\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4_8i4l1s.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8i4l1s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8i4l1s.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_8i4l1s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_filtered = filter(x -> length(x) % 2 == 0, lst)\n    sorted_filtered\
    \ = sort(odd_filtered, by=x -> (length(x), x))\n    return sorted_filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    lst_new = []\n    lst_no_doubles\
    \ = []\n    lst_sorted = []\n    for i in lst\n        if i in lst_new\n     \
    \       #nothing\n        else\n            push!(lst_new, i)\n        end\n \
    \   end\n    lst_no_doubles = lst_new\n    for i in lst_no_doubles\n        if\
    \ length(i)%2 == 0\n            push!(lst_sorted, i)\n        end\n    end\n \
    \   return sort(lst_sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp051i8yw7.jl:48\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp051i8yw7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp051i8yw7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp051i8yw7.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_odd = [] # list to store words with odd length\n    lst_even = []\
    \ # list to store words with even length\n    for i in lst\n        if length(i)\
    \ % 2 == 0\n            push!(lst_even, i)\n        else\n            push!(lst_odd,\
    \ i)\n        end\n    end\n    sort!(lst_odd)\n    sort!(lst_even)\n    return\
    \ lst_even\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpeel98kfs.jl:42\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeel98kfs.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeel98kfs.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeel98kfs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    length = 0\n    sorted_list = []\n    for x in lst\n        if length_of_string(x)%2==0\n\
    \            length = length_of_string(x)\n            push!(sorted_list, x)\n\
    \        end\n    end\n    sorted_list = sort(sorted_list)\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfoqvqis.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError: "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfoqvqis.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n  lst = delete_odd_length(lst)\n  return sort_string_list(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgo_3hx_3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarErro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo_3hx_3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i)%2==0\n          \
    \  push!(new_lst, i)\n        end\n    end\n    return sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7nc142zq.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7nc142zq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nc142zq.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7nc142zq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst; by = (len, :ascending, order = :stable))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid named tuple element \":ascending\" around\
    \ /tmp/tmpbszyvxlb.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbszyvxlb.jl:1\n\
    in expression starting at /tmp/tmpbszyvxlb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    new_list = []\n\
    \    for i in lst\n        if length(i) % 2 == 0\n            push!(new_list,\
    \ i)\n        end\n    end\n    return sort(new_list)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxsihvx30.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsihvx30.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsihvx30.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsihvx30.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #nothing here\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpldp7ulid.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpldp7ulid.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldp7ulid.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldp7ulid.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpldp7ulid.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpldp7ulid.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldp7ulid.jl:22\n"
  exit_code: 1
  status: SyntaxError
