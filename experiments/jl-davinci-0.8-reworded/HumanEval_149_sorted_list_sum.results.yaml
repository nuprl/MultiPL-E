language: jl
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst2 = []\n    for i in lst\n        if length(i) % 2 == 0\n         \
    \   push!(lst2, i)\n        end\n    end\n    sorted = sort(lst2)\n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyuh95g5a.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpyuh95g5a.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyuh95g5a.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyuh95g5a.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for i in lst\n        if length(i) % 2 == 0\n     \
    \       push!(new_list, i)\n        end\n    end\n    sort(new_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpprfp2yiv.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpprfp2yiv.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprfp2yiv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprfp2yiv.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort([s for s in lst if length(s) % 2 == 0])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw1cy91xz.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpw1cy91xz.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw1cy91xz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw1cy91xz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n \n    lst_sum = sum(length.(lst))\n    #println(lst_sum)\n    lst_sum_to_string\
    \ = string(lst_sum)\n    #println(lst_sum_to_string)\n    #println(length(lst_sum_to_string))\n\
    \    lst_sum_array = array(Char, length(lst_sum_to_string))\n    #println(lst_sum_array)\n\
    \    for i in 1:length(lst_sum_to_string)\n        lst_sum_array[i] = lst_sum_to_string[i]\n\
    \    end\n    #println(lst_sum_array)\n    sorted_list_sum = sort(lst_sum_array)\n\
    \    #println(sorted_list_sum)\n    return sorted_list_sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp25x2pwao.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp25x2pwao.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp25x2pwao.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp25x2pwao.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp25x2pwao.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp25x2pwao.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ array not defined\n  Stacktrace:\n "
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst2 = []\n    for i in lst\n        if length(i) % 2 == 0\n         \
    \   push!(lst2, i)\n        end\n    end\n    sort(lst2)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmei5d17i.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpmei5d17i.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmei5d17i.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmei5d17i.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(s -> length(s) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnwr58vmc.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpnwr58vmc.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwr58vmc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwr58vmc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #Create an empty vector to store the result\n    result = []\n    #Iterate\
    \ on the lst vector \n    for i in lst \n        #Check if the word length is\
    \ even then append it to the result vector \n        if length(i) % 2 == 0\n \
    \           push!(result, i)\n        end\n    end\n    #Sort the result vector\
    \ alphabetically \n    sort(result)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu7i96e7f.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpu7i96e7f.jl:41\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7i96e7f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7i96e7f.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_lst = sort(lst, by=length, rev=true)\n    unique_lst = unique(sorted_lst)\n\
    \    delete_lst = []\n    for i in 1:length(unique_lst)\n        if length(unique_lst[i])%2\
    \ != 0\n            push!(delete_lst, unique_lst[i])\n        end\n    end\n \
    \   final_lst = unique_lst\n    for j in 1:length(delete_lst)\n        final_lst\
    \ = delete!(final_lst, delete_lst[j])\n    end\n    final_lst = sort(final_lst,\
    \ by=length)\n    return final_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpfmwi2trz.jl:38\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching delete!(::Vector{String}, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},
    ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n    delete!(!Matched::Base.IdSet,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n    delete!(!Matched::Dict,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpfmwi2trz.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmwi2trz.jl:38 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmwi2trz.jl:37\ntest set: Error
    During Test at /tmp/tmpfmwi2trz.jl:39\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError: no method matching
    delete!(::Vector{String}, ::String)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},
    ::Any) where K at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:130\n    delete!(!Matched::Base.IdSet,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:23\n    delete!(!Matched::Dict,
    ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:661\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpfmwi2trz.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmwi2trz.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmwi2trz.jl:37\ntest set: Error
    During '
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Declare a dictionary to store the mapping of string length to array\
    \ of words of that length\n    dict = Dict{Int, Vector{String}}()\n    for word\
    \ in lst\n        # Find the length of string\n        length = length(word)\n\
    \        # If the length of the string is not a key in the dictionary\n      \
    \  if !haskey(dict, length)\n            # Add the length of the string as a key\
    \ in the dictionary and the string as the value\n            dict[length] = [word]\n\
    \        else\n            # Append the string to the array of words of that length\n\
    \            push!(dict[length], word)\n        end\n    end\n    dict2 = Dict{Int,\
    \ Vector{String}}()\n    for (key, value) in dict\n        if mod(key, 2) == 0\n\
    \            dict2[key] = value\n        end\n    end\n    sorted_keys = sort(collect(keys(dict2)))\n\
    \    sorted_list = []\n    for key in sorted_keys\n        for word in dict2[key]\n\
    \            push!(sorted_list, word)\n        end\n    end\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps_072_w_.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmps_072_w_.jl:52\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps_072_w_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps_072_w_.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps_072_w_.jl:51\ntest set:\
    \ Error During Test at /tmp/tmps_072_w_.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ length not defined\n  Stacktrac"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(lst) do x\n        length(x) % 2 == 0\n    end)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6ffy1s1t.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp6ffy1s1t.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ffy1s1t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ffy1s1t.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Filter odd\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # Sort\
    \ and return\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4_8i4l1s.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4_8i4l1s.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8i4l1s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8i4l1s.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_filtered = filter(x -> length(x) % 2 == 0, lst)\n    sorted_filtered\
    \ = sort(odd_filtered, by=x -> (length(x), x))\n    return sorted_filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst = [\"aa\", \"a\", \"aaa\"]\n    lst_new = []\n    lst_no_doubles\
    \ = []\n    lst_sorted = []\n    for i in lst\n        if i in lst_new\n     \
    \       #nothing\n        else\n            push!(lst_new, i)\n        end\n \
    \   end\n    lst_no_doubles = lst_new\n    for i in lst_no_doubles\n        if\
    \ length(i)%2 == 0\n            push!(lst_sorted, i)\n        end\n    end\n \
    \   return sort(lst_sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp051i8yw7.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp051i8yw7.jl:48\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp051i8yw7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp051i8yw7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_odd = [] # list to store words with odd length\n    lst_even = []\
    \ # list to store words with even length\n    for i in lst\n        if length(i)\
    \ % 2 == 0\n            push!(lst_even, i)\n        else\n            push!(lst_odd,\
    \ i)\n        end\n    end\n    sort!(lst_odd)\n    sort!(lst_even)\n    return\
    \ lst_even\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeel98kfs.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpeel98kfs.jl:42\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeel98kfs.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeel98kfs.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    length = 0\n    sorted_list = []\n    for x in lst\n        if length_of_string(x)%2==0\n\
    \            length = length_of_string(x)\n            push!(sorted_list, x)\n\
    \        end\n    end\n    sorted_list = sort(sorted_list)\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmptfoqvqis.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmptfoqvqis.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ length_of_string not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptfoqvqis.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfoqvqis.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfoqvqis.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptfoqvqis.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError: "
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n  lst = delete_odd_length(lst)\n  return sort_string_list(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgo_3hx_3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpgo_3hx_3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ delete_odd_length not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgo_3hx_3.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo_3hx_3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo_3hx_3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgo_3hx_3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarErro"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i)%2==0\n          \
    \  push!(new_lst, i)\n        end\n    end\n    return sort(new_lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7nc142zq.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp7nc142zq.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7nc142zq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7nc142zq.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst; by = (len, :ascending, order = :stable))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid named tuple element \":ascending\" around\
    \ /tmp/tmpbszyvxlb.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbszyvxlb.jl:1\n\
    in expression starting at /tmp/tmpbszyvxlb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    new_list = []\n\
    \    for i in lst\n        if length(i) % 2 == 0\n            push!(new_list,\
    \ i)\n        end\n    end\n    return sort(new_list)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxsihvx30.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpxsihvx30.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsihvx30.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsihvx30.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #nothing here\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpldp7ulid.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpldp7ulid.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpldp7ulid.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldp7ulid.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldp7ulid.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpldp7ulid.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpldp7ulid.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"\n    function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\n    deleteat!(lst, findall(x->length(x) % 2 != 0, lst))\n\
    \    sort!(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp59ausqxz.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp59ausqxz.jl:50\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp59ausqxz.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp59ausqxz.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    n = length(lst)\n    i = 1\n    while i \u2264 n\n        @assert typeof(lst[i])\
    \ == String\n        s = length(lst[i])\n        if s % 2 == 1\n            deleteat!(lst,\
    \ i)\n            n -= 1\n        else\n            i += 1\n        end\n    end\n\
    \    sort!(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0skn9h7e.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp0skn9h7e.jl:44\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0skn9h7e.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0skn9h7e.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd = set()\n    for i in lst\n        if length(i) % 2 != 0\n       \
    \     push!(odd, i)\n        end\n    end\n    odd_lst = Array(odd)\n    odd_lst\
    \ = sort(odd_lst)\n    for i in odd_lst\n        for j in eachindex(lst)\n   \
    \         if lst[j] == i\n                deleteat!(lst, j)\n            end\n\
    \        end\n    end\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpv94ygn94.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpv94ygn94.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpv94ygn94.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv94ygn94.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv94ygn94.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv94ygn94.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: set not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpv94ygn94.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv94ygn94.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv94ygn94.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv94ygn94.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpv94ygn94.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv94ygn94.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv94ygn94.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv94ygn94.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{Stri"
  timestamp: 1659979853
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    tmp=sort(lst,by=length)\n    tmp=sort(tmp, by=identity)\n    tmp=filter(x->length(x)%2==0,tmp)\n\
    \    return tmp\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6cvx779q.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp6cvx779q.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cvx779q.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cvx779q.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # we first use a list comprehension to filter the string list\n    # we\
    \ create an empty vector of strings that will be filled by the words we want to\
    \ keep\n    # we check that the length of the string is even (thus the modulo\
    \ 2 = 0)\n    # if it is, we append it to the list\n    evens = [i for i in lst\
    \ if length(i) % 2 == 0]\n    # we sort the list of strings in ascending order\
    \ according to the length of the strings\n    # we first sort the list by length,\
    \ then sort the list by alphabetical order\n    sort(sort(evens, by = length),\
    \ by = string)\nend\nprintln(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\nprintln(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]))\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp48ydspjq.jl:31

    '
  stdout: "[\"aa\"]\n[\"ab\", \"cd\"]\ntest set: Test Failed at /tmp/tmp48ydspjq.jl:40\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48ydspjq.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp48ydspjq.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = filter(x -> length(x) % 2 == 0, lst)\n    sort(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa9_5iu7u.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpa9_5iu7u.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9_5iu7u.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9_5iu7u.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979851
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    v = Vector{String}()\n    for i in lst\n        if length(i) % 2 == 0\n\
    \            push!(v, i)\n        end\n    end\n    sort(v)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptoci7amx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmptoci7amx.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptoci7amx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptoci7amx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return [x for x in lst if length(x) % 2 == 0]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3vvv0co8.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp3vvv0co8.jl:26\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated:\
    \ [\"school\", \"AI\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vvv0co8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vvv0co8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3vvv0co8.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vvv0co8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vvv0co8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3vvv0co8.jl:31\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vvv0co8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vvv0co8.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979852
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    for word in lst\n        if length(word) % 2 == 1\n            deleteat!(lst,\
    \ findfirst(lst, word))\n        end\n    end\n    # Sort by length of each word\n\
    \    sort!(lst, by = x -> length(x))\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp22dfzk8c.jl:32\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates
    are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})
    at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,
    ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,
    ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmp22dfzk8c.jl:20\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22dfzk8c.jl:32 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22dfzk8c.jl:31\ntest set: Error
    During Test at /tmp/tmp22dfzk8c.jl:33\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError: no method matching
    findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function,
    ::Union{AbstractString, AbstractArray}) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,
    ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,
    ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:104\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmp22dfzk8c.jl:20\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22dfzk8c.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n  '
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6952m2pe.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp6952m2pe.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test Failed at /tmp/tmp6952m2p"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # This function will compute the sorted list\n    #by removing the odd\
    \ length words and keep the even length words\n    #to sort the list in ascending\
    \ order,first we need to get the max length \n    #of words \n    max_length=maximum(length.(lst))\n\
    \    #initialize a vector\n    sorted_list=String[]\n    #iterate through the\
    \ vector to find the even length words\n    for i in 1:max_length\n        if\
    \ (i%2)==0\n            #push the words that have even length\n            sorted_list=push!(sorted_list,lst[i])\n\
    \        end\n    end\n    #sort the resulting vector\n    return sort(sorted_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpq0p2m4df.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpq0p2m4df.jl:40\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0p2m4df.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0p2m4df.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpq0p2m4df.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 4-element Vector{String} at index [6]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpq0p2m4df.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq0p2m4df.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq0p2m4df.jl:39\ntest set:\
    \ Test Failed at /tmp/tmpq0p2m4df.jl:43\n  Expression: candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"dcba\"] ==\
    \ [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0p2m4df.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0p2m4df.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpq0p2m4df.jl:44\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: [\"ai\"] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0p2m4df.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    v = Vector{String}() \n    for i in lst \n        if length(i) % 2 ==\
    \ 0 \n            push!(v, i) \n        end \n    end \n    sort(v) \nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpocvsz1le.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpocvsz1le.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocvsz1le.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocvsz1le.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sort(lst, by=x->(length(x), x))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe6btaec5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpe6btaec5.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6btaec5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6btaec5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe6btaec5.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6btaec5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6btaec5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe6btaec5.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6btaec5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6btaec5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe6btaec5.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6btaec5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6btaec5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpe6btaec"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list_even = Vector{String}()\n    for i in lst\n        if iseven(length(i))\n\
    \            sorted_list_even = vcat(sorted_list_even, i)\n        end\n    end\n\
    \    sort(sorted_list_even)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0efab77u.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0efab77u.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0efab77u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0efab77u.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for word in lst\n        if length(word) % 2 == 0\n\
    \            push!(new_lst, word)\n        end\n    end\n    sort(new_lst)\nend\n\
    sorted_list_sum([\"aa\", \"a\", \"aaa\"])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1mm3m_l7.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp1mm3m_l7.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mm3m_l7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mm3m_l7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #Your code here\nend\n\"\"\"Given a dictionary of words, compute the total\
    \ number of vowels in all the words\n    and return that number.\n    You may\
    \ assume that all words are lowercase. \n    You will need to make sure that a\
    \ dictionary is an acceptable input for your function.\n    You may assume that\
    \ the dictionary will always be a dictionary of strings.\n    You may assume that\
    \ the dictionary will not contain any non-ASCII characters.\n    For example:\n\
    \    >>> word_vowel_count({\"cat\": True, \"drunk\": True, \"hippo\": True})\n\
    \    6\n    >>> word_vowel_count({\"horse\": True, \"meow\": True, \"monkey\"\
    : True})\n    9\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpbunb2qjo.jl:20\nin expression starting at /tmp/tmpbunb2qjo.jl:20\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_odd_lengths = sort(lst[end % 2 == 0 for end in lst])\n    return\
    \ sorted_odd_lengths\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6h92wiwf.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp6h92wiwf.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching _array_for(::Vector{String}, ::Vector{String}, ::Base.HasShape{1})\n\
    \  Closest candidates are:\n    _array_for(!Matched::Type{T}, ::Any, ::Any) where\
    \ T at ~/.conda/envs/polyglot/share/julia/base/array.jl:616\n    _array_for(!Matched::Type{T},\
    \ !Matched::Base.HasShape{N}, ::Any) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:613\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmp6h92wiwf.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h92wiwf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h92wiwf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6h92wiwf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching _array_for(::Vector{String}, ::Vector{String},\
    \ ::Base.HasShape{1})\n  Closest candidates are:\n    _array_for(!Matched::Type{T},\
    \ ::Any, ::Any) where T at ~/.conda/envs/polyglot/share/julia/base/array.jl:616\n\
    \    _array_for(!Matched::Type{T}, !Matched::Base.HasShape{N}, ::Any) where {T,\
    \ N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:613\n  Stacktrace:\n\
    \   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmp6h92wiwf.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h92wiwf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h92wiwf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp6h92wiwf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  Meth"
  timestamp: 1659979853
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, lt=(x,y)->length(x)<length(y))\n    res = []\n    sz =\
    \ length(lst)\n    push!(res, lst[1])\n    p=1\n    len_p = length(lst[1])\n \
    \   for i=2:sz\n        if length(lst[i]) > len_p\n            push!(res, lst[i])\n\
    \            p += 1\n            len_p = length(lst[i])\n        end\n    end\n\
    \    for i=p+1:sz\n        push!(res, lst[i])\n    end\n    res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpri_7yr8x.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpri_7yr8x.jl:41\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri_7yr8x.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri_7yr8x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpri_7yr8x.jl:42\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri_7yr8x.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri_7yr8x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpri_7yr8x.jl:43\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpri_7yr8x.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpri_7yr8x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpri_7yr8x.jl:44\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"\
    dcba\", \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpri_7yr8x.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpri_7yr8x.jl:40\ntest set: Test Failed at /tmp/tmpri_7"
  timestamp: 1659979852
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sum = sum(lst)\n    lst_sum = sort(lst_sum)\n    return lst_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.\nin expression starting at /tmp/tmpfmovzp0_.jl:24\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmpfmovzp0_.jl:27\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n    [1]
    add_sum(x::String, y::String)\n      @ Base ./reduce.jl:24\n    [2] _mapreduce\n      @
    ./reduce.jl:410 [inlined]\n    [3] _mapreduce_dim\n      @ ./reducedim.jl:330
    [inlined]\n    [4] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n    [5]
    mapreduce\n      @ ./reducedim.jl:322 [inlined]\n    [6] #_sum#741\n      @ ./reducedim.jl:894
    [inlined]\n    [7] _sum\n      @ ./reducedim.jl:894 [inlined]\n    [8] #_sum#740\n      @
    ./reducedim.jl:893 [inlined]\n    [9] _sum\n      @ ./reducedim.jl:893 [inlined]\n   [10]
    #sum#738\n      @ ./reducedim.jl:889 [inlined]\n   [11] sum\n      @ ./reducedim.jl:889
    [inlined]\n   [12] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpfmovzp0_.jl:18\n   [13]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [14] macro expansion\n      @ /tmp/tmpfmovzp0_.jl:27 [inlined]\n   [15]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [16] top-level scope\n      @ /tmp/tmpfmovzp0_.jl:26\ntest set:
    Error During Test at /tmp/tmpfmovzp0_.jl:28\n  Test threw exception\n  Expression:
    candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError:
    no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n    [1]
    add_sum(x::String, y::String)\n      @ Base ./reduce.jl:24\n    [2] _mapreduce\n      @
    ./reduce.jl:410 [inlined]\n    [3] _mapreduce_dim\n      @ ./reducedim.jl:330
    [inlined]\n    [4] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n    [5]
    mapredu'
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    newset = Array{String}(length(lst)) # create an empty array of strings\n\
    \    i = 1\n    for element in lst\n        if length(element)%2 == 0\n      \
    \      newset[i] = element # copy element if length is even\n            i +=\
    \ 1\n        end\n    end\n    return sort(newset[1:i-1]) # sort array from 1\
    \ to i - 1\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpzzssnj0p.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpzzssnj0p.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching (Array{String})(::Int64)\n  Closest candidates are:\n   \
    \ (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64, Int64})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpzzssnj0p.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzssnj0p.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzzssnj0p.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzzssnj0p.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching (Array{String})(::Int64)\n  Closest candidates\
    \ are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_indices = findall(x -> length(x) % 2 == 1, lst)\n    deleteat!(lst,\
    \ odd_indices)\n    return sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5_ao6bxh.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp5_ao6bxh.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_ao6bxh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_ao6bxh.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    idx_even = findall(x -> length(x) % 2 == 0, lst)\n    even_vec = lst[idx_even]\n\
    \    sorted_vec = sort(even_vec)\n    return sorted_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwhu8o3qs.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpwhu8o3qs.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhu8o3qs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhu8o3qs.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"Function that takes a vector of strings as a parameter and returns\
    \ a\n    vector of strings sorted by length and alphabetically.\n    \"\"\"\n\
    \    @assert length(unique(lengths(lst))) <= 1\n    list_lengths = Int64[]\n \
    \   for string in lst\n        append!(list_lengths, length(string))\n    end\n\
    \    lst = [lst list_lengths]\n    lst = sort(lst, rev=true)\n    lst = lst[:,1]\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps2u611rj.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmps2u611rj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ lengths not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps2u611rj.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2u611rj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps2u611rj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmps2u611rj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: lengths not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps2u611rj.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2u611rj.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps2u611rj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmps2u611rj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ lengths not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmps2u611rj.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2u611rj.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps2u611rj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmps2u611rj.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ lengths not defined\n  Stacktrace:\n   [1] sorted_list_sum("
  timestamp: 1659979853
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_string_list = []\n    even_string_list = []\n    odd_list_size = 0\n\
    \    even_list_size = 0\n    # sorting strings by length in ascending order\n\
    \    # odd strings are stored in odd_string_list\n    # even strings are stored\
    \ in even_string_list\n    for i in 1:length(lst)\n        if length(lst[i]) %\
    \ 2 == 0\n            # length is even\n            even_list_size += 1\n    \
    \        push!(even_string_list, lst[i])\n        else\n            # length is\
    \ odd\n            odd_list_size += 1\n            push!(odd_string_list, lst[i])\n\
    \        end\n    end\n    # sorting odd_string_list and even_string_list using\
    \ sort function\n    odd_string_list = sort(odd_string_list)\n    even_string_list\
    \ = sort(even_string_list)\n    return even_string_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpstlok_py.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpstlok_py.jl:52\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstlok_py.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstlok_py.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    for i in 1:length(lst)\n        #println(lst[i])\n        if isodd(length(lst[i]))\n\
    \            deleteat!(lst, i)\n        end\n    end\n    sort(lst)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8lr0e6_4.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp8lr0e6_4.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp8lr0e6_4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8lr0e6_4.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8lr0e6_4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp8lr0e6_4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp8lr0e6_4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8lr0e6_4.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8lr0e6_4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp8lr0e6_4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [4]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp8lr0e6_4.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8lr0e6_4.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8lr"
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n   \n    d = Dict()\n    for i = 1:length(lst)\n        if haskey(d, length(lst[i]))\n\
    \            push!(d[length(lst[i])], lst[i])\n        else\n            d[length(lst[i])]\
    \ = [lst[i]]\n        end\n    end\n    d = sort(collect(d))\n    list = []\n\
    \    for i = 1:length(d)\n        if length(d[i][2]) > 1\n            for j =\
    \ 1:length(d[i][2])\n                push!(list, sort(d[i][2])[j])\n         \
    \   end\n        else\n            push!(list, d[i][2][1])\n        end\n    end\n\
    \    return list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0v5kzj74.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmp0v5kzj74.jl:45\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v5kzj74.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v5kzj74.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp0v5kzj74.jl:46\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v5kzj74.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v5kzj74.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp0v5kzj74.jl:47\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v5kzj74.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v5kzj74.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp0v5kzj74.jl:48\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v5kzj74.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v5kzj74.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp0v5kzj7"
  timestamp: 1659979855
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for elem in lst\n        if length(elem) % 2 == 0\n\
    \            push!(new_lst, elem)\n        end\n    end\n    new_lst = sort(new_lst)\n\
    \    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6p08yamf.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp6p08yamf.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6p08yamf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6p08yamf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #\"\"\"\"\n    #write a function that accepts a vector of strings as a\
    \ parameter, deletes the strings that have odd lengths from it, and returns the\
    \ resulted vector with a sorted order, \n    #It should have the form:\n    #\
    \        function sorted_list_sum(lst::Vector{String})::Vector{String}\n    #\"\
    \"\"\"\n    #implement your code here.\n    #y = Vector{Any}()\n    #z = Vector{String}()\n\
    \    #m = Vector{String}()\n    #for i in lst\n    #    if length(i) % 2 == 0\n\
    \    #        push!(y,i)\n    #    end\n    #end\n    #for i in y\n    #    push!(z,\
    \ string(i))\n    #end\n    #for i in y\n    #    for j in y\n    #        if\
    \ i < j\n    #            push!(m,i)\n    #        else\n    #            push!(m,j)\n\
    \    #        end\n    #    end\n    #end\n    #return y\n    return [i for i\
    \ in lst if length(i) % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp721cnsuh.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmp721cnsuh.jl:53\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated:\
    \ [\"school\", \"AI\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp721cnsuh.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp721cnsuh.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp721cnsuh.jl:55\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp721cnsuh.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp721cnsuh.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp721cnsuh.jl:58\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp721cnsuh.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp721cnsuh.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sort!(lst,by = (x,y) -> length(x) < length(y))\n    newlst = []\n    for\
    \ i in 1:length(lst)\n        if length(lst[i])%2 == 0\n            push!(newlst,lst[i])\n\
    \        end\n    end\n    return newlst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2bt_aaoo.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp2bt_aaoo.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching (::var\"#1#2\")(::String)\n  Closest candidates are:\n  \
    \  (::var\"#1#2\")(::Any, !Matched::Any) at /tmp/tmp2bt_aaoo.jl:18\n  Stacktrace:\n\
    \    [1] lt(o::Base.Order.By{var\"#1#2\", Base.Order.ForwardOrdering}, a::String,\
    \ b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @ ./sort.jl:507\
    \ [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg,\
    \ o::Base.Order.By{var\"#1#2\", Base.Order.ForwardOrdering}, t::Vector{String})\n\
    \      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n\
    \    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @ ./sort.jl:725\
    \ [inlined]\n    [7] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmp2bt_aaoo.jl:18\n\
    \    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp2bt_aaoo.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2bt_aaoo.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2bt_aaoo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching (::var\"#1#2\")(::String)\n  Closest candidates\
    \ are:\n    (::var\"#1#2\")(::Any, !Matched::Any) at /tmp/tmp2bt_aaoo.jl:18\n\
    \  Stacktrace:\n    [1] lt(o::Base.Order.By{var\"#1#2\", Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{var\"#1#2\", Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]"
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    odds=[]\n    for word in lst\n        if(length(word)%2==1)\n\
    \            push!(odds,word)\n        end\n    end\n    even=setdiff(lst,odds)\n\
    \    even=sort(even)\n    return even\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmn0zq5ce.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpmn0zq5ce.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmn0zq5ce.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmn0zq5ce.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst, by = length)\n    new_list = []\n    for i = 1:length(sorted_list)\n\
    \        if length(sorted_list[i]) % 2 == 0\n            push!(new_list, sorted_list[i])\n\
    \        end\n    end\n    return new_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzgvmahuk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpzgvmahuk.jl:35\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzgvmahuk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzgvmahuk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzgvmahuk.jl:38\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzgvmahuk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzgvmahuk.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_even = [x for x in lst if length(x) % 2 == 0]\n    lst_even_sorted\
    \ = sort(lst_even)\n    return lst_even_sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2bk0ink7.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp2bk0ink7.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bk0ink7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bk0ink7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = String[]\n    for i in 1:length(lst)\n        if length(lst[i])%2\
    \ == 0\n            push!(new_lst, lst[i])\n        end\n    end\n    sort(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmph5mxn__h.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmph5mxn__h.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5mxn__h.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5mxn__h.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979855
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length_strings = [x for x in lst if iseven(length(x))]\n    sorted_even_length_strings\
    \ = sort(even_length_strings)\n    return sorted_even_length_strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcw23ndz0.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpcw23ndz0.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcw23ndz0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcw23ndz0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    function odd_or_even(s::String)::Bool\n        return length(s) % 2 ==\
    \ 0\n    end\n    evens = filter(odd_or_even, lst)\n    s_evens = sort(evens)\n\
    \    s_evens\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpybg_i660.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpybg_i660.jl:36\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybg_i660.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybg_i660.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #lst_out = []\n    #for i in 1:length(lst)\n    #    if(length(lst[i])\
    \ % 2 == 0)\n    #        lst_out = vcat(lst_out, lst[i])\n    #    end\n    #end\n\
    \    lst_out = [lst[i] for i in 1:length(lst) if(length(lst[i]) % 2 == 0)]\n \
    \   #println(lst_out)\n    return sort(lst_out, by = (x,y) -> length(x) < length(y))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnquvzska.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpnquvzska.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n  MethodError: no method matching (::var\"#3#6\")(::String)\n\
    \  Closest candidates are:\n    (::var\"#3#6\")(::Any, !Matched::Any) at /tmp/tmpnquvzska.jl:26\n\
    \  Stacktrace:\n    [1] lt(o::Base.Order.By{var\"#3#6\", Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{var\"#3#6\", Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpnquvzska.jl:26\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpnquvzska.jl:34 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpnquvzska.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnquvzska.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError:\
    \ no method matching (::var\"#3#6\")(::String)\n  Closest candidates are:\n  \
    \  (::var\"#3#6\")(::Any, !Matched::Any) at /tmp/tmpnquvzska.jl:26\n  Stacktrace:\n\
    \    [1] lt(o::Base.Order.By{var\"#3#6\", Base.Order.ForwardOrdering}, a::String,\
    \ b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @ ./sort.jl:507\
    \ [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg,\
    \ o::Base.Order.By{var\"#3#6\", Base.Order.ForwardOrdering}, t::Vector{String})\n\
    \      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n\
    \    [5] sort!\n      @ ./sort"
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #sorted by length\n    len = sort(lst, by = length) \n    #filter out\
    \ odd lengths\n    len_odd = filter(x -> length(x) % 2 == 0, len)\n    return\
    \ sort(len_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp31nts9da.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp31nts9da.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp31nts9da.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp31nts9da.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979855
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    first_sort = sort(lst, by=length)\n    second_sort = sort(first_sort,\
    \ by=x->x[1])\n    third_sort = reverse(second_sort)\n    for i in third_sort\n\
    \        println(i)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpbcq6r5v5.jl:27

    '
  stdout: "aaa\naa\na\ntest set: Error During Test at /tmp/tmpbcq6r5v5.jl:30\n  Test\
    \ threw exception\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpbcq6r5v5.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbcq6r5v5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbcq6r5v5.jl:29\nschool\nb\n\
    asdf\nAI\ntest set: Error During Test at /tmp/tmpbcq6r5v5.jl:31\n  Test threw\
    \ exception\n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"]\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpbcq6r5v5.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/T"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    keep = [word for word in lst if iseven(length(word))]\n    sorted_list\
    \ = sort(keep, by = length)\n    return sorted_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvz6uwgwl.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpvz6uwgwl.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvz6uwgwl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvz6uwgwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvz6uwgwl.jl:33\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvz6uwgwl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvz6uwgwl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659979855
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n  \n    #sort the words based on length\n    #sort() can be used to sort a\
    \ vector of strings\n    #argsort() can be used to sort the vector according to\
    \ a rule\n    sortedlst = sort(lst, by=length)\n    \n    #find the length of\
    \ the first item\n    #that will be the length of all the items\n    len = length(sortedlst[1])\n\
    \    \n    # if the length is even, keep it\n    # else, delete it\n    if len\
    \ % 2 == 0\n        return sortedlst\n    else\n        return sortedlst[2:end]\n\
    \    end\n    \nend\n    \nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfb0resvz.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpfb0resvz.jl:43\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb0resvz.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb0resvz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfb0resvz.jl:45\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"b\", \"c\", \"a\"] == String[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb0resvz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb0resvz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfb0resvz.jl:46\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"dcba\", \"\
    abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb0resvz.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb0resvz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfb0resvz.jl:48\n  Expression: candidate([\"a\", \"b\", \"\
    b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"b\", \"b\"\
    , \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfb0resvz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfb0resvz.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfb0resvz.jl:49\n  Expression: candidate([\"aaaa\","
  timestamp: 1659979855
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    list_of_odd_length = String[]\n    for word in lst\n        push!(list_of_odd_length,\
    \ word) if length(word) % 2 == 1\n    end\n    return sort(list_of_odd_length)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfr2udsis.jl:19 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfr2udsis.jl:20\n\
    in expression starting at /tmp/tmpfr2udsis.jl:20\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create a dictionary of words and frequency\n    # dictionary = Dict{String,\
    \ Int}()\n    # for x in lst\n    #     for y in x\n    #         if haskey(dictionary,\
    \ x)\n    #             dictionary[x] += 1\n    #         else\n    #        \
    \     dictionary[x] = 1\n    #         end\n    #     end\n    # end\n    # return\
    \ dictionary\n    # When the task requires sorting the strings based on ascending\
    \ order\n    # of length and in alphabetical order as well.\n    #     sorted\
    \ = sort(lst, by = length)\n    #     final = sort(sorted, by = byword)\n    #\
    \     return final\n    # Just sorting by length.\n    sorted = sort(lst, by =\
    \ length)\n    return sorted\nend\nprintln(sorted_list_sum([\"aa\", \"a\", \"\
    aaa\"]))\nprintln(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpybgp16ml.jl:43

    '
  stdout: "[\"a\", \"aa\", \"aaa\"]\n[\"a\", \"ab\", \"cd\", \"aaa\"]\ntest set: Test\
    \ Failed at /tmp/tmpybgp16ml.jl:46\n  Expression: candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybgp16ml.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybgp16ml.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpybgp16ml.jl:47\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybgp16ml.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybgp16ml.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpybgp16ml.jl:48\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybgp16ml.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybgp16ml.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpybgp16ml.jl:49\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybgp16ml.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybgp16ml.jl"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    n = size(lst, 1)\n    sorted_lst = sort(lst)\n    to_delete = []\n   \
    \ for i = 1:n\n        if length(sorted_lst[i]) % 2 == 1\n            push!(to_delete,\
    \ i)\n        end\n    end\n    sorted_lst = deleteat!(sorted_lst, to_delete)\n\
    \    return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6pehjfws.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp6pehjfws.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pehjfws.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pehjfws.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    out_lst = sort(lst, lt=(x,y)->length(x)<length(y))\n    out_lst = unique(out_lst)\n\
    \    out_lst = [x for x in out_lst if length(x)%2 == 0]\n    return out_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk3vbphsi.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpk3vbphsi.jl:31\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3vbphsi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3vbphsi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk3vbphsi.jl:34\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3vbphsi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3vbphsi.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    \n    v = [length(i) for i in lst]\n    dic = Dict{Int,Vector{String}}()\n\
    \    for i in lst\n        key = length(i)\n        if haskey(dic,key)\n     \
    \       append!(dic[key],i)\n        else\n            dic[key] = [i]\n      \
    \  end\n    end\n    lst = []\n    for i in keys(dic)\n        lst = [sort(dic[i])...,lst...]\n\
    \    end\n    return lst\n    \nend\n@assert sorted_list_sum([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"]\n@assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])\
    \ == [\"ab\", \"cd\"]\n@assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"b\"]) == [\"ab\", \"b\", \"cd\"]\n@assert sorted_list_sum([\"ab\", \"a\",\
    \ \"aa\", \"cd\", \"b\"]) == [\"aa\", \"ab\", \"b\", \"cd\"]\n@assert sorted_list_sum([\"\
    ab\", \"a\", \"aa\", \"cd\", \"b\", \"bb\"]) == [\"aa\", \"ab\", \"b\", \"bb\"\
    , \"cd\"]\n@assert sorted_list_sum([\"ab\", \"a\", \"aa\", \"cd\", \"b\", \"bb\"\
    , \"ab\"]) == [\"aa\", \"ab\", \"ab\", \"b\", \"bb\", \"cd\"]\n@assert sorted_list_sum([\"\
    ab\", \"a\", \"aa\", \"cd\", \"b\", \"bb\", \"ab\", \"aa\"]) == [\"aa\", \"aa\"\
    , \"ab\", \"ab\", \"b\", \"bb\", \"cd\"]\n \nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: AssertionError: sorted_list_sum([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx63u_15t.jl:37\n\
    in expression starting at /tmp/tmpx63u_15t.jl:37\n"
  stdout: ''
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"This function accepts a vector of strings as a parameter,\n    deletes\
    \ the strings that have odd lengths from it,\n    and returns the resulted vector\
    \ with a sorted order\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"\n    even_words = [word for word in lst if iseven(length(word))]\n\
    \    sorted_even_words = sort(even_words)\n    return sorted_even_words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7ce57mjf.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7ce57mjf.jl:49\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ce57mjf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ce57mjf.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    out = []\n    for i in 1:length(lst)\n        if length(lst[i]) % 2 ==\
    \ 0\n            push!(out, lst[i])\n        end\n    end\n    sort(out)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqr2v1zik.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpqr2v1zik.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqr2v1zik.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqr2v1zik.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    dict = Dict()\n    for i in lst\n        if length(i) % 2 == 0\n     \
    \       try\n                dict[length(i)] += [i]\n            catch\n     \
    \           dict[length(i)] = [i]\n            end\n        end\n    end\n   \
    \ lst_key = sort(collect(keys(dict)))\n    sum_lst = []\n    for i in lst_key\n\
    \        lst_sort = sort(dict[i])\n        for j in lst_sort\n            push!(sum_lst,\
    \ j)\n        end\n    end\n    return sum_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7u7x3jbu.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7u7x3jbu.jl:46\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u7x3jbu.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u7x3jbu.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7u7x3jbu.jl:47\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: [\"au\"] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u7x3jbu.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u7x3jbu.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7u7x3jbu.jl:49\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    cc\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7u7x3jbu.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7u7x3jbu.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) %% 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps95f0rvw.jl:18\nin expression starting at\
    \ /tmp/tmps95f0rvw.jl:18\n"
  stdout: ''
  timestamp: 1659979856
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_even_lengths = [x for x in lst if length(x) % 2 == 0]\n    return\
    \ sort(lst_even_lengths)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm95bezc0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpm95bezc0.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm95bezc0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm95bezc0.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for x in lst\n        if length(x) % 2 == 0\n     \
    \       push!(new_list, x)\n        end\n    end\n    sort(new_list)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg8hdwco5.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpg8hdwco5.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg8hdwco5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg8hdwco5.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst, by=x->(length(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_bu9nsug.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_bu9nsug.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bu9nsug.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bu9nsug.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_bu9nsug.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bu9nsug.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bu9nsug.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_bu9nsug.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bu9nsug.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bu9nsug.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_bu9nsug.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bu9nsug.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bu9nsug.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_bu9nsu"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # remove all even length strings\n    odd_length_strings = [x for x in\
    \ lst if length(x) % 2 == 1]\n    # sort by length and then alphabetically\n \
    \   sorted_list = sort(odd_length_strings, by = length)\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu5byjqi2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpu5byjqi2.jl:29\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5byjqi2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5byjqi2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpu5byjqi2.jl:30\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5byjqi2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5byjqi2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpu5byjqi2.jl:31\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5byjqi2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5byjqi2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpu5byjqi2.jl:32\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu5byjqi2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu5byjqi2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpu5byjqi2.jl:33\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979858
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length = [i for i in lst if length(i) % 2 == 0] \n    return sort(even_length)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnttppk00.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpnttppk00.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnttppk00.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnttppk00.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Create empty lists for even and odd length strings\n    even_list =\
    \ String[]\n    odd_list = String[]\n    # Iterate through list to determine which\
    \ lengths are even or odd\n    for i in lst\n        if length(i) % 2 == 0\n \
    \           push!(even_list, i)\n        else\n            push!(odd_list, i)\n\
    \        end\n    end\n    # Sort and return even_list\n    return sort(even_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdfr3aljt.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpdfr3aljt.jl:43\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfr3aljt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfr3aljt.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_mod = []\n    lst_len = length(lst)\n    for i in 1:lst_len\n    \
    \    if length(lst[i]) % 2 == 0\n            push!(lst_mod, lst[i])\n        end\n\
    \    end\n    sort(lst_mod)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2p1k4lvx.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp2p1k4lvx.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p1k4lvx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p1k4lvx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979858
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #return\n    return [el for el in lst if length(el) % 2 == 0]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn0y7ixf4.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpn0y7ixf4.jl:27\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated:\
    \ [\"school\", \"AI\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0y7ixf4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0y7ixf4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpn0y7ixf4.jl:29\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0y7ixf4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0y7ixf4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpn0y7ixf4.jl:32\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn0y7ixf4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn0y7ixf4.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # We need to sort the vector by length, first by characters, then by alphabetically\n\
    \    # First we are going to filter the odd length strings\n    filtered_list\
    \ = []\n    for i in lst\n        if !(occursin(r\"[0-9]\", i))\n            if\
    \ length(i) % 2 == 0\n                push!(filtered_list, i)\n            end\n\
    \        end\n    end\n    # then we need to sort the filtered_list by the length\
    \ of the word, then alphabetically\n    sorted_list = sort(filtered_list, by =\
    \ x -> length(x))\n    sorted_list = sort(sorted_list, by = x -> x)\n    return\
    \ sorted_list\nend\nsorted_list_sum([\"aa\", \"a\", \"aaa\"])\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppjjj6zox.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmppjjj6zox.jl:45\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppjjj6zox.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppjjj6zox.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979857
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # your code here\n    ns = lst[length.(lst) .% 2 .== 0]\n    sort!(ns)\n\
    \    return ns\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaa5qhwmk.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpaa5qhwmk.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaa5qhwmk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaa5qhwmk.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979858
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = String[]\n    list_sorted = sort(lst)\n    for w in list_sorted\n\
    \        if length(w) % 2 == 0\n            push!(new_lst, w)\n        end\n \
    \   end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaxl9_dhr.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpaxl9_dhr.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxl9_dhr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxl9_dhr.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979858
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst, by=x->(length(x), x))[1:2:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfxhxi0cy.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpfxhxi0cy.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxhxi0cy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxhxi0cy.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfxhxi0cy.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfxhxi0cy.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfxhxi0cy.jl:24\ntest set: Test Failed at /tmp/tmpfxhxi0cy.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"c\"] == String[]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfxhxi0cy.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpfxhxi0cy.jl:24\ntest set: Test Failed at /tmp/tmpfxhxi0cy.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxhxi0cy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxhxi0cy.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfxhxi0cy.jl:29\n  Expression: candidate([\"AI\", \"ai\", "
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Your code here\n    return sorted(lst, by=x->length(x))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmptjkbprrk.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptjkbprrk.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptjkbprrk.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptjkbprrk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptjkbprrk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptjkbprrk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptjkbprrk.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptjkbprrk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptjkbprrk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptjkbprrk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmptjkbprrk.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptjkbprrk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptjkbprrk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptjkbprrk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst:"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = sort(lst, by=length)\n    new_list = sort(new_list, alg=MergeSort)\n\
    \    return new_list\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa3e6gxnn.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3e6gxnn.jl:1\n\
    in expression starting at /tmp/tmpa3e6gxnn.jl:1\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst, by = (length, x -> x))\n    new_list = Vector{String}()\n\
    \    for i in sorted_list\n        i == length(i) % 2 == 0 ? push!(new_list, i)\
    \ : continue\n    end\n    return new_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpsfbqwzkl.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpsfbqwzkl.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ objects of type Tuple{typeof(length), var\"#1#2\"} are not callable\n  Stacktrace:\n\
    \    [1] lt(o::Base.Order.By{Tuple{typeof(length), var\"#1#2\"}, Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{Tuple{typeof(length),\
    \ var\"#1#2\"}, Base.Order.ForwardOrdering}, t::Vector{String})\n      @ Base.Sort\
    \ ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n    [5] sort!\n\
    \      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n\
    \    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n\
    \      @ Main /tmp/tmpsfbqwzkl.jl:18\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsfbqwzkl.jl:30 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpsfbqwzkl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsfbqwzkl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: objects of type Tuple{typeof(length), var\"#1#2\"} are not callable\n\
    \  Stacktrace:\n    [1] lt(o::Base.Order.By{Tuple{typeof(length), var\"#1#2\"\
    }, Base.Order.ForwardOrdering}, a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n\
    \    [2] sort!\n      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String},\
    \ lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{Tuple{typeof(length),\
    \ var\"#1#2\"}, Base.Order.ForwardOrdering}, t::Vector{String})\n      @ Base.Sort\
    \ ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n    [5] sort!\n\
    \      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @ ./sort.jl:725 [inline"
  timestamp: 1659979861
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    result = filter(lst, x -> length(x) % 2 == 0)\n    return sort(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4vt1k59m.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4vt1k59m.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching filter(::Vector{String}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp4vt1k59m.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4vt1k59m.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4vt1k59m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4vt1k59m.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching filter(::Vector{String}, ::var\"#1#2\")\n\
    \  Closest candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp4vt1k59m.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4vt1k59m.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4vt1k59m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4vt1k59m.jl:28\n  Test threw exception\n  "
  timestamp: 1659979861
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = Vector{String}()\n    length_of_word = Vector{Int}()\n    for\
    \ i in lst\n        push!(length_of_word, length(i))\n    end\n    for i in length_of_word\n\
    \        if i % 2 == 0\n            for j in lst\n                if length(j)\
    \ == i\n                    push!(new_list, j)\n                end\n        \
    \    end\n        end\n    end\n    sort!(new_list)\n    return new_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw11_5_9w.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpw11_5_9w.jl:43\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"abcd\"\
    , \"abcd\", \"dcba\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw11_5_9w.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw11_5_9w.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw11_5_9w.jl:44\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: [\"AI\", \"AI\", \"AI\", \"\
    ai\", \"ai\", \"ai\", \"au\", \"au\", \"au\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw11_5_9w.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw11_5_9w.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpw11_5_9w.jl:46\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"aaaa\", \"bbbb\", \"bbbb\", \"cc\", \"cc\", \"dd\", \"dd\"] == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw11_5_9w.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw11_5_9w.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    string_length = []\n    for i in 1:length(lst)\n        push!(string_length,\
    \ length(lst[i]))\n    end\n    #string_length = map(length, lst)\n    string_length_sort\
    \ = sort(string_length)\n    sorted_list = []\n    #for j in 1:length(string_length_sort)\n\
    \    #    for i in 1:length(lst)\n    #        if string_length_sort[j] == length(lst[i])\n\
    \    #            push!(sorted_list, lst[i])\n    #        end\n    #    end\n\
    \    #end\n    for i in 1:length(lst)\n        if length(lst[i]) % 2 == 0\n  \
    \          push!(sorted_list, lst[i])\n        end\n    end\n    sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0kqhj6bj.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp0kqhj6bj.jl:45\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated:\
    \ [\"school\", \"AI\", \"asdf\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqhj6bj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqhj6bj.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0kqhj6bj.jl:47\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqhj6bj.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqhj6bj.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp0kqhj6bj.jl:50\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqhj6bj.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqhj6bj.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    res = Vector{String}()\n    for i in lst\n        if length(i) % 2 ==\
    \ 0\n            push!(res, i)\n        end\n    end\n    sort(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeqq3z2jp.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpeqq3z2jp.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeqq3z2jp.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeqq3z2jp.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = [x for x in lst if length(x) % 2 == 0]\n    sort!(new_lst)\n\
    \    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp66zvqfyq.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp66zvqfyq.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66zvqfyq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66zvqfyq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7zph9hzn.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp7zph9hzn.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zph9hzn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zph9hzn.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979859
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_lst = []\n    for string in lst\n        if length(string) % 2 ==\
    \ 0\n            push!(even_lst, string)\n        end\n    end\n    sort(even_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvsf_6cdw.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpvsf_6cdw.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvsf_6cdw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvsf_6cdw.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    string_list = lst;\n    for word in lst\n        if length(word) % 2 !=\
    \ 0\n            string_list = deleteat!(string_list, findall(x -> x == word,\
    \ string_list));\n        end\n    end\n    return sort(string_list, [by(x ->\
    \ length(x)), by(x -> x)])\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgbvvpig6.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpgbvvpig6.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ by not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgbvvpig6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgbvvpig6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgbvvpig6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgbvvpig6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: by not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgbvvpig6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgbvvpig6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgbvvpig6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgbvvpig6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ by not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpgbvvpig6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgbvvpig6.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgbvvpig6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgbvvpig6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ by not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})"
  timestamp: 1659979861
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #Sort list by length\n    lst_len = sort(lst, by=length)\n    #Sort list\
    \ by alphabet\n    lst_len_alpha = sort(lst_len)\n    #Remove words with odd length\n\
    \    lst_len_alpha_odd = [word for word in lst_len_alpha if length(word) % 2 ==\
    \ 0]\n    return lst_len_alpha_odd\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeomms_jg.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpeomms_jg.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeomms_jg.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeomms_jg.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    res =[]\n    for i in lst\n        if length(i)%2 == 0\n            push!(res,i)\n\
    \        end\n    end\n    sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxxjnex6a.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpxxjnex6a.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxjnex6a.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxjnex6a.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sort!(lst, by = x -> (length(x), x))\n    isodd(lst)\n    sort!(lst, by\
    \ = x -> (length(x), x))\n    lst = filter(x -> isodd(length(x)), lst)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpyg5b7qny.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpyg5b7qny.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching isodd(::Vector{String})\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpyg5b7qny.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg5b7qny.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg5b7qny.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyg5b7qny.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching isodd(::Vector{String})\n  Closest candidates\
    \ are:\n    isodd(!Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/float.jl:832\n\
    \    isodd(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \    isodd(!Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:345\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpyg5b7qny.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyg5b7qny.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyg5b7qny.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyg5b7qny.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching isodd(::Vector{String}"
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted = sort(lst, by = x -> (length(x), x))\n    i = 0\n    while i <=\
    \ length(sorted)\n        if length(sorted[i])%2 == 1\n            deleteat!(sorted,\
    \ i)\n        else\n            i += 1\n        end\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpylc5dn5d.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpylc5dn5d.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpylc5dn5d.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpylc5dn5d.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpylc5dn5d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpylc5dn5d.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpylc5dn5d.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpylc5dn5d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpylc5dn5d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpylc5dn5d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpylc5dn5d.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpylc5dn5d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ "
  timestamp: 1659979861
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    deleteat!(lst, findall(x -> length(x) % 2 == 1, lst))\n    sort(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkovuqb9m.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpkovuqb9m.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkovuqb9m.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkovuqb9m.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpik30zkui.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpik30zkui.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpik30zkui.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpik30zkui.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = Vector{String}()\n    for i in lst\n        if length(i) % 2\
    \ == 0\n            push!(new_lst, i)\n        end\n    end\n    sort(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplpyswltx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmplpyswltx.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplpyswltx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplpyswltx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Write your code here.\n    lst_len=length(lst)\n    lst_temp=String[]\n\
    \    if lst_len>0\n        len_shortest=length(lst[1])\n        for i=1:lst_len\n\
    \            if len_shortest>length(lst[i])\n                len_shortest=length(lst[i])\n\
    \            end\n        end\n        for i=1:lst_len\n            if length(lst[i])==len_shortest\n\
    \                push!(lst_temp,lst[i])\n            end\n        end\n      \
    \  lst_temp=sort(lst_temp)\n    end\n    return lst_temp\nend\nlist_sort=sorted_list_sum\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpts40mm8d.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpts40mm8d.jl:43\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts40mm8d.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts40mm8d.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpts40mm8d.jl:44\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts40mm8d.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts40mm8d.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpts40mm8d.jl:45\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts40mm8d.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts40mm8d.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpts40mm8d.jl:46\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpts40mm8d.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpts40mm8d.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpts40mm8d.jl:48\n  Expression: candidate([\"a\", \"b\", \"\
    b\", \"c\", "
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    new_lst = String[]\n    # filter the list:\n    for elem in lst\n\
    \        if( isodd(length(elem)) )\n            push!(new_lst, elem)\n       \
    \ end\n    end\n    \n    # sort the filtered list:\n    sorted_lst = sort(new_lst,\
    \ rev=true)\n    \n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp15if4c86.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp15if4c86.jl:37\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aaa\", \"a\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15if4c86.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15if4c86.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15if4c86.jl:38\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15if4c86.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15if4c86.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15if4c86.jl:39\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"c\", \"b\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15if4c86.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15if4c86.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15if4c86.jl:40\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15if4c86.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15if4c86.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15if4c86.jl:41\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in lst\n        if length(i) % 2 == 0\n      \
    \      push!(new_lst, i)\n        end\n    end\n    return sort(new_lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl00o2t8k.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpl00o2t8k.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl00o2t8k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl00o2t8k.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    Sorted = sort(lst)\n    list = []\n    for i = 1:length(Sorted)\n    \
    \    if length(Sorted[i]) % 2 == 0\n            push!(list, Sorted[i])\n     \
    \   end\n    end\n    return list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn9wnaz_y.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpn9wnaz_y.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9wnaz_y.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9wnaz_y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    ret = []\n    for i in lst\n        if length(i) % 2 == 0\n          \
    \  push!(ret, i)\n        end\n    end\n    sorted!(ret)\n    return ret\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmppgkx8lcu.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmppgkx8lcu.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ sorted! not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmppgkx8lcu.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgkx8lcu.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgkx8lcu.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppgkx8lcu.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: sorted! not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmppgkx8lcu.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgkx8lcu.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgkx8lcu.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppgkx8lcu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ sorted! not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmppgkx8lcu.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgkx8lcu.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgkx8lcu.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppgkx8lcu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ sorted! not defined\n  Stacktrace:\n   [1] sorted_list_sum("
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by = len)\n    a = length(lst_sorted)\n    lst_sorted\
    \ = deleteat!(lst_sorted, a)\n    return lst_sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpdbg30wo8.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpdbg30wo8.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdbg30wo8.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbg30wo8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbg30wo8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdbg30wo8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: len not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdbg30wo8.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbg30wo8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbg30wo8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdbg30wo8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpdbg30wo8.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbg30wo8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbg30wo8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdbg30wo8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{Stri"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted = sort(lst)\n    sorted_res = []\n    i = 1\n    while i <= length(sorted)\n\
    \        if length(sorted[i]) % 2 == 0\n            push!(sorted_res, sorted[i])\n\
    \        end\n        i += 1\n    end\n    return sorted_res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_a20s21a.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp_a20s21a.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_a20s21a.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_a20s21a.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #### base cases\n    if isempty(lst)\n        return []\n    end\n   \
    \ #### recursive case\n    if length(lst[1]) % 2 == 0\n        # push to end of\
    \ the vector\n        return push!(sorted_list_sum(lst[2:end]), lst[1])\n    else\n\
    \        # push to beginning of the vector\n        return [lst[1], sorted_list_sum(lst[2:end])...]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqwkcn2w2.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpqwkcn2w2.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\", \"aa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwkcn2w2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwkcn2w2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqwkcn2w2.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    asdf\", \"AI\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwkcn2w2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwkcn2w2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqwkcn2w2.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwkcn2w2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwkcn2w2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqwkcn2w2.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqwkcn2w2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqwkcn2w2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqwkcn2w"
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    lst_len = length(lst)\n    result = []\n    for i in 1:lst_len\n\
    \        if length(lst[i]) % 2 == 0\n            result = [result; lst[i]]\n \
    \       end\n    end\n    return sort(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplzqxcklz.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmplzqxcklz.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzqxcklz.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzqxcklz.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpik30zkui.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpik30zkui.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpik30zkui.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpik30zkui.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    ordered = sort(sort(lst, (x,y) -> sum(map(isalpha, x)) - sum(map(isalpha,\
    \ y))), by=length)\n    return ordered[1:2:end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpp3jflqlv.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpp3jflqlv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::Vector{String}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n\
    \    sort(::AbstractArray; dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpp3jflqlv.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3jflqlv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3jflqlv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpp3jflqlv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::Vector{String}, ::var\"#1#2\")\n \
    \ Closest candidates are:\n    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n\
    \    sort(::AbstractArray; dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpp3jflqlv.jl:18\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3jflqlv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3jflqlv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpp3jflqlv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::Vector{String}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share"
  timestamp: 1659979864
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    filtered_list = filter(lst) do s \n        length(s) % 2 == 0\n    end\n\
    \    sorted_list = sort(filtered_list, by = x -> (length(x), x))\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    n = length(lst)\n    i = 1\n    while i <= n\n        if length(lst[i])\
    \ % 2 == 1\n            deleteat!(lst, i)\n            n -= 1\n        else\n\
    \            i += 1\n        end\n    end\n    sort(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptozyfb87.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmptozyfb87.jl:41\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptozyfb87.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptozyfb87.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if lst == []\n        return []\n    elseif length(lst[1]) % 2 == 0\n\
    \        return [lst[1]] .+ sorted_list_sum(lst[2:end])\n    else\n        return\
    \ sorted_list_sum(lst[2:end])\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0no43c75.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0no43c75.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0no43c75.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0no43c75.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0no43c75.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0no43c75.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0no43c75.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0no43c75.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0no43c75.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0no43c75.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0no43c75.jl:35\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0no43c75.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0no43c75.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0no43c75.jl:37\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\""
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_lst = sort(lst, by = x -> length(x))\n    sum(map(x -> length(x)\
    \ % 2 == 0, sorted_lst)) == 0 ? sorted_lst : [i for i in sorted_lst if length(i)\
    \ % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnhzttdip.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpnhzttdip.jl:28\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\"\
    , \"c\", \"a\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhzttdip.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhzttdip.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnhzttdip.jl:29\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\", \"abcd\"\
    ] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhzttdip.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhzttdip.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnhzttdip.jl:31\n  Expression: candidate([\"a\", \"b\", \"\
    b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnhzttdip.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnhzttdip.jl:25\ntest set: Test Failed at /tmp/tmpnhzttdip.jl:32\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnhzttdip.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnhzttdip.jl:25\nTest S"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_list = []\n    odd_list_len = 1\n    index = 1\n    for i =\
    \ 1:length(lst)\n        if length(lst[i]) % 2 == 1\n            odd_list[odd_list_len]\
    \ = lst[i]\n            odd_list_len += 1\n        end\n    end\n    #remove odd\
    \ words from lst\n    for i = 1:length(odd_list)\n        for j = 1:length(lst)\n\
    \            if odd_list[i] == lst[j]\n                lst[j] = -1\n         \
    \   end\n        end\n    end\n    for i = 1:length(lst)\n        if lst[i] ==\
    \ -1\n            lst[i] = lst[end]\n            pop!(lst)\n        end\n    end\n\
    \    #sort the list based on length of words\n    while index <= length(lst)\n\
    \        if lst[index] == sort(lst)[index]\n            index += 1\n        else\n\
    \            lst[index], lst[index+1] = lst[index+1], lst[index]\n           \
    \ index = 1\n        end\n    end\n    return lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzyleqe__.jl:55

    '
  stdout: "test set: Error During Test at /tmp/tmpzyleqe__.jl:58\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./essentials.jl:479 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpzyleqe__.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzyleqe__.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzyleqe__.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpzyleqe__.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./essentials.jl:479 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpzyleqe__.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzyleqe__.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzyleqe__.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpzyleqe__.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./essentials.jl:479 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpzyleqe__.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzyleqe__.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scop"
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n  return sort(filter(lst, x -> length(x) % 2 == 0), lt=(x,y) -> length(x)\
    \ < length(y))\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmprw0uhhyv.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmprw0uhhyv.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching filter(::Vector{String}, ::var\"#1#3\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmprw0uhhyv.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprw0uhhyv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprw0uhhyv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprw0uhhyv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching filter(::Vector{String}, ::var\"#1#3\")\n\
    \  Closest candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmprw0uhhyv.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprw0uhhyv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprw0uhhyv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprw0uhhyv.jl:27\n  Test threw exception\n  "
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    min = Int32(Inf)\n    min_index = 0\n    new_lst = String[]\n    for i\
    \ in 1:length(lst)\n        for j in 1:length(lst)\n            if length(lst[j])\
    \ < min\n                min = length(lst[j])\n                min_index = j\n\
    \            end\n        end\n        push!(new_lst, lst[min_index])\n      \
    \  lst[min_index] = \"\"\n        min = Int32(Inf)\n    end\n    return new_lst\n\
    end\n\"\"\"\nWrite a function called remove_negatives that takes in a list and\
    \ removes all negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd553ccpv.jl:34\nin expression starting at\
    \ /tmp/tmpd553ccpv.jl:34\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(lst) do s\n        length(s) % 2 == 0\n    end)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpasx5lok8.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpasx5lok8.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpasx5lok8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpasx5lok8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    #Bubble Sort\n    for i = 1:length(lst) - 1\n        for j = 1:length(lst)\
    \ - i\n            if length(lst[j]) > length(lst[j+1])\n                temp\
    \ = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n\
    \            end\n        end\n    end\n    \n    for i = 1:length(lst) - 1\n\
    \        for j = 1:length(lst) - i\n            if length(lst[j]) == length(lst[j+1])\
    \ && lst[j] > lst[j+1]\n                temp = lst[j]\n                lst[j]\
    \ = lst[j+1]\n                lst[j+1] = temp\n            end\n        end\n\
    \    end\n    \n    return lst\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg0yioq6d.jl:45

    '
  stdout: "test set: Test Failed at /tmp/tmpg0yioq6d.jl:48\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0yioq6d.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0yioq6d.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg0yioq6d.jl:49\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0yioq6d.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0yioq6d.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg0yioq6d.jl:50\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0yioq6d.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0yioq6d.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg0yioq6d.jl:51\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\"\
    , \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg0yioq6d.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg0yioq6d.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg0yioq6"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst1 = lst[i] for i in lst if length(i)%2 == 0\n    sort(lst1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpcxu6wf2a.jl:17 expected\
    \ \"end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcxu6wf2a.jl:18\n\
    in expression starting at /tmp/tmpcxu6wf2a.jl:18\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # This is just a example of how to create an empty vector with type\n\
    \    # of Vector{String}\n    result = Vector{String}()\n    # For loops can also\
    \ be used to iterate over an index, i.e. each element's\n    # position in the\
    \ list. This can be done by using the eachindex function,\n    # which returns\
    \ an iterable object that represents all the indices in a\n    # list.\n    for\
    \ idx in eachindex(lst)\n        if length(lst[idx])%2 == 0\n            push!(result,\
    \ lst[idx])\n        end\n    end\n    return sort(result)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcp6hgwml.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpcp6hgwml.jl:43\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcp6hgwml.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcp6hgwml.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = deleteat!(lst, findall(x -> length(x) % 2 == 1, lst))\n    lst =\
    \ sort(lst, by = length)\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp14w6o9av.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp14w6o9av.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w6o9av.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w6o9av.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp14w6o9av.jl:33\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp14w6o9av.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp14w6o9av.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659979864
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length_strings = Vector()\n    for word in lst\n        if length(word)\
    \ % 2 == 0\n            push!(even_length_strings, word)\n        end\n    end\n\
    \    return sort(even_length_strings)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfgxg3kae.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpfgxg3kae.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfgxg3kae.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfgxg3kae.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    len_vec = length(lst)\n    odd_flag = false\n    odd_index = 0\n    odd_word\
    \ = \"\"\n    temp_index = 0\n    for i in 1:len_vec\n        for j in 1:length(lst[i])\n\
    \            if rem(length(lst[i]),2) != 0\n                odd_flag = true\n\
    \                odd_index = i\n                odd_word = lst[i]\n          \
    \  end\n        end\n    end\n    if odd_flag == true\n        deleteat!(lst,\
    \ odd_index)\n    end\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpowpe_owh.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpowpe_owh.jl:42\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowpe_owh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowpe_owh.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpowpe_owh.jl:44\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"b\", \"c\", \"d\"] == String[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowpe_owh.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowpe_owh.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpowpe_owh.jl:45\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"abcd\", \"d\", \"\
    dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowpe_owh.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowpe_owh.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpowpe_owh.jl:47\n  Expression: candidate([\"a\", \"b\", \"\
    b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\"\
    , \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowpe_owh.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowpe_owh.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpowpe_owh.jl:48\n  Expression: candidate([\"aaaa\", \""
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    len_of_word_dict = Dict()\n    # Loop over each string in the list\n \
    \   for word in lst\n        # Get the length of the string as an integer\n  \
    \      len_of_word = parse(Int, length(word))\n        # Check if length is a\
    \ key in the dictionary\n        if haskey(len_of_word_dict, len_of_word)\n  \
    \          # If so, append word to vector of strings in the dictionary\n     \
    \       push!(len_of_word_dict[len_of_word], word)\n        else\n           \
    \ # If not, add key, value pair to dictionary\n            len_of_word_dict[len_of_word]\
    \ = [word]\n        end\n    end\n    # Create empty vector to store final sorted\
    \ words\n    sorted_vector = Vector{String}()\n    # Loop over each key in the\
    \ dictionary\n    for key in sort(collect(keys(len_of_word_dict)))\n        #\
    \ Add all strings that have the same length and sort them alphabetically\n   \
    \     append!(sorted_vector, sort(len_of_word_dict[key]))\n    end\n    # Delete\
    \ all strings that have odd lengths\n    sorted_vector = sorted_vector[1:2:end]\n\
    \    return sorted_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgt0q6zv_.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpgt0q6zv_.jl:48\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpgt0q6zv_.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgt0q6zv_.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgt0q6zv_.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpgt0q6zv_.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching parse(::Type{Int64}, ::Int64)\n  Closest\
    \ candidates are:\n    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    parse(::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpgt0q6zv_.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgt0q6zv_.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n "
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(w -> length(w) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo0ijdycd.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpo0ijdycd.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0ijdycd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0ijdycd.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #remove odd length strings\n    for i in 1:length(lst)\n        if length(lst[i])\
    \ % 2 != 0\n            lst = deleteat!(lst, i)\n        end\n    end\n    #sort\
    \ ascending by length of each word\n    sort!(lst, by = x -> length(x))\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpck_sp2w3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpck_sp2w3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpck_sp2w3.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpck_sp2w3.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpck_sp2w3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpck_sp2w3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpck_sp2w3.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpck_sp2w3.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpck_sp2w3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpck_sp2w3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [4]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpck_sp2w3.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpck_sp2w3.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpck_"
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by = length) #returns a vector, sorts by length (low to\
    \ high)\n    lst = sort(lst, by = alph) #returns a vector, sorts by alphabetical\
    \ order\n    total = 0\n    for x in lst\n        if length(x) % 2 == 0\n    \
    \        total += x\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpjqbpsgyj.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqbpsgyj.jl:1\n\
    in expression starting at /tmp/tmpjqbpsgyj.jl:1\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # We need to first sort by lengths\n    # Then by alphabetical order\n\
    \    # We can do this with a custom sort function\n    # sorted(lst, by=length)\n\
    \    # To sort by a custom function, we pass a function handle\n    # The function\
    \ can take two arguments, sort::ByLength \n    sorted(lst, by=sort::ByLength)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpijk8qyzg.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpijk8qyzg.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ ByLength not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpijk8qyzg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpijk8qyzg.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpijk8qyzg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpijk8qyzg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: ByLength not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpijk8qyzg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpijk8qyzg.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpijk8qyzg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpijk8qyzg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ ByLength not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpijk8qyzg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpijk8qyzg.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpijk8qyzg.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpijk8qyzg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ ByLength not defined\n  Stacktrace:\n   [1] sorted_list_"
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    answer = []\n    for word in lst\n        if length(word) % 2 == 0\n \
    \           push!(answer, word)\n        end\n    end\n    sort(answer)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4ga24brx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp4ga24brx.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ga24brx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ga24brx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\" This is another way to solve the above problem\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5oaj_5f.jl:1\nin expression starting at /tmp/tmpz5oaj_5f.jl:1\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    res_list = []\n    if length(lst) == 0\n        return []\n    end\n \
    \   for i in 1:length(lst)\n        if length(lst[i]) % 2 == 0\n            push!(res_list,\
    \ lst[i])\n        end\n    end\n    sorted_res_list = sort(res_list)\n    return\
    \ sorted_res_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmii7rg6l.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpmii7rg6l.jl:41\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmii7rg6l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmii7rg6l.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        sum += length(lst[i])\n \
    \   end\n    if sum % 2 == 0\n        return sort(lst)\n    else\n        return\
    \ sort(lst)[2:end]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkrbkf_t0.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpkrbkf_t0.jl:33\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrbkf_t0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrbkf_t0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkrbkf_t0.jl:34\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"asdf\"\
    , \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrbkf_t0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrbkf_t0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkrbkf_t0.jl:35\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkrbkf_t0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkrbkf_t0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkrbkf_t0.jl:36\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkrbkf_t0.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkrbkf_t0.jl:32\ntest set: Test Failed at /tmp/tmpkrbkf_t0.jl:3"
  timestamp: 1659979865
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    filtered_lst = filter(x -> length(x) % 2 == 0, lst)\n    sorted_lst =\
    \ sort(filtered_lst)\n    println(sorted_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''["aa"]\ntest set: Error During Test at /tmp/tmpcvjhlfh3.jl:27\n  Test
    threw exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpcvjhlfh3.jl:20\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvjhlfh3.jl:27 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvjhlfh3.jl:26\n["AI", "asdf",
    "school"]\ntest set: Error During Test at /tmp/tmpcvjhlfh3.jl:28\n  Test threw
    exception\n  Expression: candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf",
    "school"]\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpcvjhlfh3.jl:20\n   [2]
    macro expansion\n     @ ~/.co'
  timestamp: 1659979867
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst_sorted = sort(lst, by = x -> (length(x), x))\n    for i in length(lst_sorted):-1:1\n\
    \        if mod(length(lst_sorted[i]), 2) == 1\n            lst_sorted = deleteat!(lst_sorted,\
    \ i)\n        end\n    end\n    return lst_sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_ele = filter(lst) do i\n        mod(length(i), 2) == 1\n    end\n\
    \    sorted_list = sort(odd_ele)\n    return sorted_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpurr71fn9.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpurr71fn9.jl:29\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurr71fn9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurr71fn9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpurr71fn9.jl:30\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurr71fn9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurr71fn9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpurr71fn9.jl:31\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurr71fn9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurr71fn9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpurr71fn9.jl:32\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurr71fn9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurr71fn9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpurr71fn9.jl:33\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(unique(sort(filter(lst, l->length(l) % 2 == 0))))\nend\n#\
    \ TESTS\n@test sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n@test sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n@test sorted_list_sum([\"\
    aa\", \"a\", \"aaa\", \"cd\"]) == [\"aa\", \"cd\"]\n \n \n\"\"\"\nWrite a function\
    \ that accepts a vector of strings as a parameter,\n    deletes the strings that\
    \ have odd lengths from it,\n    and returns the resulted vector with a sorted\
    \ order,\n    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @test not defined

    in expression starting at /tmp/tmpljhah23m.jl:21

    in expression starting at /tmp/tmpljhah23m.jl:21

    '
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    deleteat!(lst,filter(x-> length(x)%2==1,1:length(lst)))\n    return sort(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1x4l49ro.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1x4l49ro.jl:26\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x4l49ro.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x4l49ro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1x4l49ro.jl:27\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x4l49ro.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x4l49ro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1x4l49ro.jl:29\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x4l49ro.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x4l49ro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1x4l49ro.jl:30\n  Expression: candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]\n   Evaluated: String[] == [\"AI\", \"ai\"\
    , \"au\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1x4l49ro.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1x4l49ro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1x4l49ro.jl:32\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\""
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    list_length = [length(each) for each in lst]\n    len_index_list = collect(1:length(lst))\n\
    \    return sort(lst, by = tuple -> (list_length[tuple], tuple))\nend\nprintln(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]))\nprintln(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    ]))\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: invalid index: \"a\" of type String\n\
    Stacktrace:\n  [1] to_index(i::String)\n    @ Base ./indices.jl:300\n  [2] to_index(A::Vector{Int64},\
    \ i::String)\n    @ Base ./indices.jl:277\n  [3] to_indices\n    @ ./indices.jl:333\
    \ [inlined]\n  [4] to_indices\n    @ ./indices.jl:325 [inlined]\n  [5] getindex\n\
    \    @ ./abstractarray.jl:1218 [inlined]\n  [6] (::var\"#2#4\"{Vector{Int64}})(tuple::String)\n\
    \    @ Main /tmp/tmph3_1aifr.jl:20\n  [7] lt(o::Base.Order.By{var\"#2#4\"{Vector{Int64}},\
    \ Base.Order.ForwardOrdering}, a::String, b::String)\n    @ Base.Order ./ordering.jl:111\n\
    \  [8] sort!\n    @ ./sort.jl:507 [inlined]\n  [9] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{var\"#2#4\"{Vector{Int64}},\
    \ Base.Order.ForwardOrdering}, t::Vector{String})\n    @ Base.Sort ./sort.jl:592\n\
    \ [10] sort!\n    @ ./sort.jl:591 [inlined]\n [11] sort!\n    @ ./sort.jl:664\
    \ [inlined]\n [12] #sort!#8\n    @ ./sort.jl:725 [inlined]\n [13] #sort#9\n  \
    \  @ ./sort.jl:772 [inlined]\n [14] sorted_list_sum(lst::Vector{String})\n   \
    \ @ Main /tmp/tmph3_1aifr.jl:20\n [15] top-level scope\n    @ /tmp/tmph3_1aifr.jl:22\n\
    in expression starting at /tmp/tmph3_1aifr.jl:22\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sum(x) = length(x)\n    return sort(lst; by = sum)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbz93kuv5.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpbz93kuv5.jl:26\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbz93kuv5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbz93kuv5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbz93kuv5.jl:27\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbz93kuv5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbz93kuv5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbz93kuv5.jl:28\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"c\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbz93kuv5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbz93kuv5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbz93kuv5.jl:29\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbz93kuv5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbz93kuv5.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbz93kuv"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"create a new vector with the same type, length, and\n    capacity\
    \ as the original\"\"\"\n    vec = Vector{String}(undef, length(lst))\n    \"\"\
    \"counter to keep track of where in the new vector the strings should go\"\"\"\
    \n    count = 0\n    for i in 1:length(lst)\n        \"\"\"checks if the string\
    \ has an odd length\"\"\"\n        if isodd(length(lst[i]))\n            vec[count]\
    \ = lst[i]\n            count += 1\n        end\n    end\n    \"\"\"resizes the\
    \ new vector to it's exact size\"\"\"\n    resize!(vec, count)\n    \"\"\"sorts\
    \ the vector\"\"\"\n    sort!(vec)\n    return vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprz_fcsfi.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmprz_fcsfi.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmprz_fcsfi.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprz_fcsfi.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprz_fcsfi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprz_fcsfi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmprz_fcsfi.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprz_fcsfi.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprz_fcsfi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprz_fcsfi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmprz_fcsfi.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprz_fcsfi.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n    "
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # Count the list length, and create an empty vector\n    lst_len = length(lst)\n\
    \    new_lst = Vector{String}(lst_len)\n    # Create a counter and a new list\
    \ counter\n    counter = 0\n    new_counter = 0\n    for i in 1:lst_len \n   \
    \     if length(lst[i]) % 2 == 0\n            # If the length of the string is\
    \ even, add to new_lst, then sort,\n            # and return\n            counter\
    \ += 1\n            new_lst[counter] = lst[i]\n        end\n    end\n    # Sort\
    \ by length, then alphabetically\n    new_lst = sort(new_lst, by = length)\n \
    \   new_lst = sort(new_lst)\n    new_lst = new_lst[1:counter]\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmz3vv2yz.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpmz3vv2yz.jl:43\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpmz3vv2yz.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmz3vv2yz.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmz3vv2yz.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpmz3vv2yz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates\
    \ are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpmz3vv2yz.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmz3vv2yz.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmz3vv2yz.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpmz3vv2yz.jl:45\n  Test threw exce"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #Accepts a vector of strings, deletes the strings that have odd lengths\
    \ from it\n    #and returns the resulted vector with a sorted order.\n    #The\
    \ vector is always a vector of strings and never a vector of numbers,\n    #and\
    \ it may contain duplicates. The order of the vector should be ascending by length\
    \ of each word, and you\n    #should return the vector sorted by that rule.\n\
    \    #If two words have the same length, sort the vector alphabetically.\n   \
    \ #The function should return a vector of strings in sorted order.\n    #You may\
    \ assume that all words will have the same length.\n   \n    # get rid of odd\
    \ length words\n    # sort list by word lengths\n    # sort alphabetically\n \
    \   \n    # Create an empty list\n    new_list = []\n    \n    # Create a for\
    \ loop that will iterate through the original list and if the \n    # length of\
    \ the string is even, append it to the new list\n    for word in lst\n       \
    \ if iseven(length(word))\n            push!(new_list, word)\n        end\n  \
    \  end\n    \n    # sort the words in the new list in ascending order of length\n\
    \    sort!(new_list, by = length)\n    \n    # sort alphabetically\n    sort!(new_list)\n\
    \    \n    #return new_list\n    return new_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj4fy_j2l.jl:53

    '
  stdout: "test set: Test Failed at /tmp/tmpj4fy_j2l.jl:62\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4fy_j2l.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4fy_j2l.jl:55\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    s = sort(lst, by = length)\n    sorted_list = []\n    for i in s\n   \
    \     if length(i)%2 == 0\n            push!(sorted_list, i)\n        end\n  \
    \  end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxuijr81w.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpxuijr81w.jl:35\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuijr81w.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuijr81w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxuijr81w.jl:38\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    dd\", \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuijr81w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuijr81w.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # create a new empty list to store the values in\n    new_list = []\n\
    \    # iterate through the list and append the even length strings to the new\
    \ list\n    for x in lst\n        if length(x) % 2 == 0\n            push!(new_list,\
    \ x)\n        end\n    end\n    # return the new list in alphabetical order\n\
    \    sort(new_list)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa1cfc0en.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpa1cfc0en.jl:40\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1cfc0en.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1cfc0en.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst)\n    p = []\n    for i in lst\n        if length(i) %\
    \ 2 == 0\n            push!(p, i)\n        end\n    end\n    p = sort(p)\n   \
    \ return p\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn1cmj50r.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpn1cmj50r.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1cmj50r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1cmj50r.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    odd_list = [x for\
    \ x in lst if length(x) % 2 == 1]\n    new_list = remove_list_elements(lst, odd_list)\n\
    \    sorted(new_list, by=length)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpho44eb_w.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpho44eb_w.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ remove_list_elements not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpho44eb_w.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpho44eb_w.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpho44eb_w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpho44eb_w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: remove_list_elements not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpho44eb_w.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpho44eb_w.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpho44eb_w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpho44eb_w.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ remove_list_elements not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpho44eb_w.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpho44eb_w.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpho44eb_w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpho44eb_w.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ remove_list_elemen"
  timestamp: 1659979867
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    res=[]\n    for i in lst\n        if (length(i)%2)==0\n            push!(res,i)\n\
    \        end\n    end\n    sort(res)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppd1uulmd.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmppd1uulmd.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppd1uulmd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppd1uulmd.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979866
- exit_code: -11
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    @inbounds for i in 1:length(lst)\n        if length(lst[i]) % 2 == 1\n\
    \            deleteat!(lst, i)\n        end\n    end\n    return sort(lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: '

    signal (11): Segmentation fault

    in expression starting at /tmp/tmpggcfme7l.jl:27

    ncodeunits at ./strings/string.jl:98 [inlined]

    length at ./strings/string.jl:272

    jl_apply at /usr/local/src/conda/julia-1.7.3/src/julia.h:1788 [inlined]

    do_call at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:126

    eval_value at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:215

    eval_stmt_value at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:166 [inlined]

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:587

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    eval_body at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:516

    jl_interpret_toplevel_thunk at /usr/local/src/conda/julia-1.7.3/src/interpreter.c:731

    jl_toplevel_eval_flex at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:885

    jl_toplevel_eval_flex at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:830

    jl_toplevel_eval_in at /usr/local/src/conda/julia-1.7.3/src/toplevel.c:944

    eval at ./boot.jl:373 [inlined]

    include_string at ./loading.jl:1196

    _include at ./loading.jl:1253

    include at ./Base.jl:418

    exec_options at ./client.jl:292

    _start at ./client.jl:495

    jfptr__start_26222.clone_1 at /home/a.guha/.conda/envs/polyglot/lib/julia/sys.so
    (unknown line)

    jl_apply at /usr/local/src/conda/julia-1.7.3/src/julia.h:1788 [inlined]

    true_main at /usr/local/src/conda/julia-1.7.3/src/jlapi.c:559

    jl_repl_entrypoint at /usr/local/src/conda/julia-1.7.3/src/jlapi.c:701

    main at julia (unknown line)

    __libc_start_main at /lib64/libc.so.6 (unknown line)

    unknown function (ip: 0x5624416c7098)

    Allocations: 1624728 (Pool: 1623745; Big: 983); GC: 2

    '
  stdout: "test set: Error During Test at /tmp/tmpggcfme7l.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ _deleteat!\n     @ ./array.jl:959 [inlined]\n   [2] deleteat!\n     @ ./array.jl:1423\
    \ [inlined]\n   [3] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpggcfme7l.jl:20\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpggcfme7l.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpggcfme7l.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpggcfme7l.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1]\
    \ _deleteat!\n     @ ./array.jl:959 [inlined]\n   [2] deleteat!\n     @ ./array.jl:1423\
    \ [inlined]\n   [3] sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpggcfme7l.jl:20\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpggcfme7l.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpggcfme7l.jl:29\n"
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6952m2pe.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp6952m2pe.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:26\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"AI\",\
    \ \"asdf\", \"b\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:27\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6952m2pe.jl:28\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"\
    d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6952m2pe.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6952m2pe.jl:24\ntest set: Test Failed at /tmp/tmp6952m2p"
  timestamp: 1659979852
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # define array\n    sorted_list = Array{String}(length(lst))\n    count\
    \ = 0\n    # iterate over list\n    for i in lst\n        # check if the length\
    \ of each word is even\n        if iseven(length(i))\n            # if length\
    \ of i is even then add it to the sorted_list\n            count += 1\n      \
    \      sorted_list[count] = i\n        end\n    end\n    # returns the list in\
    \ sorted order\n    return sort(sorted_list)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6rinrmnp.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp6rinrmnp.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching (Array{String})(::Int64)\n  Closest candidates are:\n   \
    \ (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64, Int64})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp6rinrmnp.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6rinrmnp.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6rinrmnp.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6rinrmnp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching (Array{String})(::Int64)\n  Closest candidates\
    \ are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})"
  timestamp: 1659979869
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    deleteat!(lst, findall(lst) do l\n        length(l) % 2 == 1\n    end)\n\
    \    return sort(lst, by=x->(length(x), x))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length = [x for x in lst if length(x) % 2 == 0]\n    even_length_sort\
    \ = sort(even_length)\n    return even_length_sort\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdpa2s6ov.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpdpa2s6ov.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpa2s6ov.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpa2s6ov.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979867
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # initialize the lists that will be returned\n    # lst_alpha will contain\
    \ the words with odd lengths in alphabetical order\n    # lst_string will contain\
    \ all words in alphabetical order\n    lst_alpha = []\n    lst_string = []\n \
    \   # iterate through each element in the list, check if it is odd and then add\n\
    \    # to the appropriate list\n    for s in lst\n        if length(s) % 2 ==\
    \ 1\n            push!(lst_alpha, s)\n        else\n            push!(lst_string,\
    \ s)\n        end\n    end\n    # sort the lists and return the sorted list\n\
    \    sort!(lst_alpha)\n    sort!(lst_string)\n    return lst_string + lst_alpha\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpwi_runk_.jl:42\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  DimensionMismatch("dimensions
    must match: a has dims (Base.OneTo(1),), b has dims (Base.OneTo(2),), mismatch
    at 1")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]
    promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Any}, Bs::Vector{Any})\n     @
    Base ./arraymath.jl:45\n   [4] sorted_list_sum(lst::Vector{String})\n     @ Main
    /tmp/tmpwi_runk_.jl:35\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwi_runk_.jl:42 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwi_runk_.jl:41\ntest set: Error
    During Test at /tmp/tmpwi_runk_.jl:43\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  DimensionMismatch("dimensions
    must match: a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch
    at 1")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]
    promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Any}, Bs::Vector{Any})\n     @
    Base ./arraymath.jl:45\n   [4] sorted_list_sum(lst::Vector{String})\n     @ Main
    /tmp/tmpwi_runk_.jl:35\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwi_runk_.jl:43 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwi_runk_.jl:41\ntest set: Error
    During Test at /tmp/tmpwi_runk_.jl:44\n  Test threw exception\n  Expression: candidate(["d",
    "b", "c", "a"]) == Vector{String}([])\n  DimensionMismatch("dimensions must match:
    a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at'
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #returns a vector of strings from the input containing only the strings\
    \ of even length in alphabetical order.\n    even_len = [str for str in lst if\
    \ length(str) % 2 == 0]\n    sort!(even_len)\n    return even_len\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm_rqra9z.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpm_rqra9z.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_rqra9z.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_rqra9z.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n \n    # separate odd, even length strings\n    odd_length = []\n    even_length\
    \ = []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(even_length,\
    \ i)\n        else\n            push!(odd_length, i)\n        end\n    end\n \
    \   \n    # sort each vector\n    sort!(even_length)\n    sort!(odd_length)\n\
    \    \n    sorted_list = even_length\n    return sorted_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw8uvwzv7.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpw8uvwzv7.jl:48\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8uvwzv7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8uvwzv7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    n = length(lst)\n    to_return = Vector{String}()\n    for i in 1:n\n\
    \        if length(lst[i]) % 2 == 0\n            push!(to_return, lst[i])\n  \
    \      end\n    end\n    sort!(to_return)\n    return to_return\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwai0yagr.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpwai0yagr.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwai0yagr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwai0yagr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    res = []\n    for i in 1:length(lst)\n        if length(lst[i])%2 == 0\n\
    \            push!(res, lst[i])\n        end\n    end\n    sort(res)\nend\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: list_sort not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpn1wx4hti.jl:26\nin expression starting at /tmp/tmpn1wx4hti.jl:26\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_vec =  sort(lst)\n    new_vec = []\n    for i = 1:length(sorted_vec)\n\
    \        if (length(sorted_vec[i]) % 2 == 0)\n            push!(new_vec, sorted_vec[i])\n\
    \        end\n    end\n    return new_vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptkxjcshv.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmptkxjcshv.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptkxjcshv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptkxjcshv.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst1 = deepcopy(lst)\n    lst1 = sort(lst1,by=length)\n    lst2 = deepcopy(lst1)\n\
    \    for i in lst1\n        if length(i)%2 == 1\n            lst2 = filter(i->i!=i,lst2)\n\
    \        end\n    end\n    lst2 = sort(lst2)\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovauji8p.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpovauji8p.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovauji8p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovauji8p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpovauji8p.jl:35\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: String[]\
    \ == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovauji8p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovauji8p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpovauji8p.jl:37\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: String[] == [\"abcd\"\
    , \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovauji8p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovauji8p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpovauji8p.jl:40\n  Expression: candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"\
    aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovauji8p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovauji8p.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set "
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    # give each string in the list a length, and store them in a dictionary\n\
    \    len_dict = Dict()\n    for i = 1:length(lst)\n        len_dict[lst[i]] =\
    \ length(lst[i])\n    end\n    \n    # sort the elements by length\n    sorted_lst\
    \ = sort(lst,by=len_dict)\n    \n    return sorted_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3tdo7zxx.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp3tdo7zxx.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ objects of type Dict{Any, Any} are not callable\n  Stacktrace:\n    [1] lt(o::Base.Order.By{Dict{Any,\
    \ Any}, Base.Order.ForwardOrdering}, a::String, b::String)\n      @ Base.Order\
    \ ./ordering.jl:111\n    [2] sort!\n      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String},\
    \ lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{Dict{Any,\
    \ Any}, Base.Order.ForwardOrdering}, t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n\
    \    [4] sort!\n      @ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664\
    \ [inlined]\n    [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n\
    \      @ ./sort.jl:772 [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n\
    \      @ Main /tmp/tmp3tdo7zxx.jl:26\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp3tdo7zxx.jl:35 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp3tdo7zxx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3tdo7zxx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: objects of type Dict{Any, Any} are not callable\n  Stacktrace:\n\
    \    [1] lt(o::Base.Order.By{Dict{Any, Any}, Base.Order.ForwardOrdering}, a::String,\
    \ b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n      @ ./sort.jl:507\
    \ [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64, hi::Int64, a::Base.Sort.MergeSortAlg,\
    \ o::Base.Order.By{Dict{Any, Any}, Base.Order.ForwardOrdering}, t::Vector{String})\n\
    \      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n\
    \    [5] sort!\n      @ ./sort.jl:664 [inlined]\n    [6] #sort!#8\n      @ ./sort.jl:725\
    \ [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772 [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n\
    \      @ Main"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_strings = filter(lst) do str\n        length(str) % 2 == 1\n    end\n\
    \    sort(odd_strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt4j268w1.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpt4j268w1.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4j268w1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4j268w1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpt4j268w1.jl:29\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4j268w1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4j268w1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpt4j268w1.jl:30\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4j268w1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4j268w1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpt4j268w1.jl:31\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4j268w1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4j268w1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpt4j268w1.jl:32\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979869
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    string_lengths = Dict{String,Int}()\n    sorted_list = String[]\n    answer\
    \ = String[]\n    for i in lst\n        if haskey(string_lengths, i) == false\n\
    \            string_lengths[i] = length(i)\n        end\n    end\n    for key\
    \ in keys(string_lengths)\n        push!(sorted_list, key)\n    end\n    sort!(sorted_list,\
    \ by = x -> length(x))\n    for i in sorted_list\n        push!(answer, i)\n \
    \   end\n    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpops0cq6k.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpops0cq6k.jl:40\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpops0cq6k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpops0cq6k.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpops0cq6k.jl:41\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpops0cq6k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpops0cq6k.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpops0cq6k.jl:42\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"c\", \"b\", \"a\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpops0cq6k.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpops0cq6k.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpops0cq6k.jl:43\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpops0cq6k.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpops0cq6k.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpops0cq6"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst)==0\n        return lst\n    else\n        odd_even_list=filter(x->length(x)%2==0,lst)\n\
    \        sort(odd_even_list)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2y2sw_9u.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp2y2sw_9u.jl:36\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2y2sw_9u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2y2sw_9u.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979868
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_lst = Vector{String}()\n    n = length(lst)\n    for i in 1:n\n \
    \       if length(lst[i]) % 2 == 0\n            push!(even_lst, lst[i])\n    \
    \    end\n    end\n    even_lst = sort(even_lst)\n    return even_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj8rg58ow.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpj8rg58ow.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8rg58ow.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8rg58ow.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979869
- exit_code: -1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = sort(lst, by=length)\n    i = 1\n    while i <= length(lst)\n  \
    \      if length(lst[i]) % 2 == 1\n            pop!(lst, i)\n        else\n  \
    \          i += 1\n        end\n    end\n    return sort(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpk_8o73tk.jl:34\n  Test threw
    exception\n  Expression: candidate(["aa", "a", "aaa"]) == ["aa"]\n  MethodError:
    no method matching pop!(::Vector{String}, ::Int64)\n  Closest candidates are:\n    pop!(!Matched::WeakKeyDict{K},
    ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:154\n    pop!(!Matched::WeakKeyDict{K},
    ::Any, !Matched::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:160\n    pop!(!Matched::IdDict{K,
    V}, ::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:124\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpk_8o73tk.jl:22\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_8o73tk.jl:34 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_8o73tk.jl:33\ntest set: Error
    During Test at /tmp/tmpk_8o73tk.jl:35\n  Test threw exception\n  Expression: candidate(["school",
    "AI", "asdf", "b"]) == ["AI", "asdf", "school"]\n  MethodError: no method matching
    pop!(::Vector{String}, ::Int64)\n  Closest candidates are:\n    pop!(!Matched::WeakKeyDict{K},
    ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:154\n    pop!(!Matched::WeakKeyDict{K},
    ::Any, !Matched::Any) where K at ~/.conda/envs/polyglot/share/julia/base/weakkeydict.jl:160\n    pop!(!Matched::IdDict{K,
    V}, ::Any) where {K, V} at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:124\n    ...\n  Stacktrace:\n   [1]
    sorted_list_sum(lst::Vector{String})\n     @ Main /tmp/tmpk_8o73tk.jl:22\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_8o73tk.jl:35 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level sco'
  timestamp: 1659979871
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    deleteat!(lst, [i for i in eachindex(lst) if length(lst[i]) % 2 != 0])\n\
    \    lst = sort(lst, lt = (x,y) -> length(x) < length(y))\n    lst = sort(lst,\
    \ lt = (x,y) -> x < y)\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvc93r5pu.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpvc93r5pu.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvc93r5pu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvc93r5pu.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = Vector{String}()\n    for word in lst\n        if length(word)\
    \ % 2 == 0\n            push!(new_list, word)\n        end\n    end\n    sort(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq363nyzb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpq363nyzb.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq363nyzb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq363nyzb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979869
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #print(lst)\n    if length(lst)==0\n        return []\n    end\n    sum\
    \ = 0\n    odd_list = []\n    odd_list_sorted = []\n    for i in 1:length(lst)\n\
    \        if length(lst[i])%2==0\n            sum = sum + 1\n        else\n   \
    \         odd_list = push!(odd_list, lst[i])\n        end\n    end\n    lst_even\
    \ = []\n    for i in 1:length(lst)\n        if length(lst[i])%2==0\n         \
    \   lst_even = push!(lst_even, lst[i])\n        end\n    end\n    #println(lst_even)\n\
    \    #println(odd_list)\n    #println(lst_even)\n    odd_list_sorted = sort(odd_list)\n\
    \    #println(odd_list_sorted)\n    if sum == 0\n        return odd_list_sorted\n\
    \    else\n        return odd_list_sorted\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps7o4gi3l.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmps7o4gi3l.jl:54\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7o4gi3l.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7o4gi3l.jl:53\ntest set: Test\
    \ Failed at /tmp/tmps7o4gi3l.jl:55\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7o4gi3l.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7o4gi3l.jl:53\ntest set: Test\
    \ Failed at /tmp/tmps7o4gi3l.jl:56\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7o4gi3l.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7o4gi3l.jl:53\ntest set: Test\
    \ Failed at /tmp/tmps7o4gi3l.jl:57\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7o4gi3l.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7o4gi3l.jl:53\ntest set: Test\
    \ Failed at /tmp/tmps7o4gi3l.jl:58\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979869
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    even_length_strings = []\n    for element in lst\n        if length(element)\
    \ % 2 == 0\n            push!(even_length_strings, element)\n        end\n   \
    \ end\n    sorted(even_length_strings)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0qlocnv7.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp0qlocnv7.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0qlocnv7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0qlocnv7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0qlocnv7.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp0qlocnv7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0qlocnv7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0qlocnv7.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0qlocnv7.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp0qlocnv7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0qlocnv7.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0qlocnv7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0qlocnv7.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp0qlocnv7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst:"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\" takes list of strings, deletes strings that have odd lengths,\n\
    \        and returns the resulted vector with a sorted order\n        \"\"\"\n\
    \    lst = deleteat!(lst, findall(x -> length(x) % 2 != 0, lst)) # delete all\
    \ odd numbers\n    return sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy2jbsneg.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpy2jbsneg.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy2jbsneg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy2jbsneg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    vec = []\n    list = [length(lst[i]) for i in 1:length(lst)]\n    for\
    \ i in 1:length(lst)\n        if list[i] % 2 == 0\n            push!(vec, lst[i])\n\
    \        end\n    end\n    sort(vec)\nend\nprintln(sorted_list_sum([\"a\", \"\
    ab\", \"aaa\", \"cd\"]))\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyr6g7c_a.jl:30

    '
  stdout: "[\"ab\", \"cd\"]\ntest set: Test Failed at /tmp/tmpyr6g7c_a.jl:39\n  Expression:\
    \ candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyr6g7c_a.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyr6g7c_a.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    new_list = map(x\
    \ -> length(x), lst)\n    deleted_index = findall(x -> x % 2 == 1, new_list)\n\
    \    deleteat!(lst, deleted_index)\n    sort!(lst)\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpujnanxcc.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpujnanxcc.jl:38\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpujnanxcc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpujnanxcc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"Input a list of numbers, return the sum of the list in sorted order\n\
    \        >>> sorted_list_sum([5, 2, 1, 4])\n        12\n        >>> sorted_list_sum([1,\
    \ 2, 4, 5])\n        12\n        \"\"\"\n    sum = 0\n    for i in lst\n     \
    \   sum += i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp61o7gyax.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp61o7gyax.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching +(::Int64, ::String)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp61o7gyax.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61o7gyax.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61o7gyax.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp61o7gyax.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching +(::Int64, ::String)\n  Closest candidates\
    \ are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp61o7gyax.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61o7gyax.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [i"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \n    output = Vector{String}()\n    for item in lst\n        if length(item)\
    \ % 2 == 0\n            push!(output, item)\n        end\n    end\n    sorted_output\
    \ = sort(output)\n    return sorted_output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpflhckuov.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpflhckuov.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflhckuov.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflhckuov.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    arr = []\n    for i in lst\n        if length(i) % 2 == 0\n          \
    \  push!(arr, i)\n        end\n    end\n    return sort(arr)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd_7ut4tn.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpd_7ut4tn.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_7ut4tn.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_7ut4tn.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sort(lst) |> filter(isodd, length) |> x -> sort(x, by = length)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpa8sse7ez.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpa8sse7ez.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching filter(::typeof(isodd), ::typeof(length))\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpa8sse7ez.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8sse7ez.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8sse7ez.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa8sse7ez.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching filter(::typeof(isodd), ::typeof(length))\n\
    \  Closest candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpa8sse7ez.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8sse7ez.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8sse7ez.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa8sse7ez.jl:27\n  Test threw exce"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    A = []\n    for i in 1:length(lst)\n        if length(lst[i])%2 == 0\n\
    \            push!(A,lst[i])\n        end\n    end\n    sort(A)\nend\n\"\"\"Write\
    \ a function that accepts a vector of integers and returns a vector of\n    integers,\
    \ where each element in the returned vector is an additive inverse\n    of the\
    \ element at the same index in the original vector. The index of an\n    additive\
    \ inverse of a number `n` is given by `2*n - 1`.\n    For example:\n    >>> additive_inverse([1,\
    \ 2, 3])\n    [-1, -2, -3]\n    >>> additive_inverse([1, -2, 3])\n    [-1, 2,\
    \ -3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpn5szaqv_.jl:26\nin expression starting at /tmp/tmpn5szaqv_.jl:26\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    sorted_list = sort(lst)\n    result = []\n    string_length = 0\n    sorted_list\
    \ = sorted_list[string_length]\n    if string_length % 2 == 0\n        push!(result,\
    \ sorted_list)\n    end\n    println(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp00epo1h5.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp00epo1h5.jl:32\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp00epo1h5.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp00epo1h5.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp00epo1h5.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp00epo1h5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  BoundsError: attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp00epo1h5.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp00epo1h5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp00epo1h5.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp00epo1h5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 4-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp00epo1h5.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp00epo1h5.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ "
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(Set(string for string in lst if length(string) % 2 == 0))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpzv3nsocn.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpzv3nsocn.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::Set{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpzv3nsocn.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv3nsocn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv3nsocn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzv3nsocn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::Set{String})\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpzv3nsocn.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv3nsocn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv3nsocn.jl:24\ntest set:\
    \ Error During Test"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    s = lst[findall(x -> length(x) % 2 == 0, lst)]\n    sort!(s)\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk3pc1gez.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpk3pc1gez.jl:33\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk3pc1gez.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk3pc1gez.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979871
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst2 = []\n    for i in 1:length(lst)\n        if length(lst[i]) % 2 ==\
    \ 0\n            push!(lst2, lst[i])\n        end\n    end\n    sort(lst2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprjjodmm0.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmprjjodmm0.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjjodmm0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjjodmm0.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979871
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    \"\"\"This function deletes the strings that have odd lengths from it,\n\
    \    The vector is always a vector of strings and never a vector of numbers,\n\
    \    The order of the vector should be ascending by length of each word, and you\n\
    \    should return the vector sorted by that rule.\n    If two words have the\
    \ same length, sort the vector alphabetically.\n    The function should return\
    \ a vector of strings in sorted order.\n    You may assume that all words will\
    \ have the same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"\
    aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n \
    \   [\"ab\", \"cd\"]\n    \"\"\"\n    deleteat!(lst,findall(l->length(l)%2 !=\
    \ 0,lst))\n    return sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5dr0eilo.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp5dr0eilo.jl:45\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dr0eilo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5dr0eilo.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979871
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    # define a sorted_list_sum function with one input parameter as a vector\
    \ of strings,\n    # and return the result as a vector of strings.\n    len_lst\
    \ = length(lst)\n    # this is to get the length of the list which is the number\
    \ of elements in the vector.\n    odd_lst = []\n    # this is to create an empty\
    \ list.\n    even_lst = []\n    # this is to create an empty list.\n    for i\
    \ in 1:len_lst\n        # for loop with i from 1 to len_lst, that is from 1 to\
    \ number of elements in the vector.\n        if length(lst[i])%2==1\n        \
    \    # if statement with condition that the length of the string in ith element\
    \ is odd.\n            push!(odd_lst, lst[i])\n            # then push ith element\
    \ to odd_lst, which is a list that only has odd length string.\n        else\n\
    \            push!(even_lst, lst[i])\n            # else push ith element to even_lst,\
    \ which is a list that only has even length string.\n        end\n    end\n  \
    \  sorted_odd_lst = sort(odd_lst)\n    # sort the odd_lst alphabetically.\n  \
    \  sorted_even_lst = sort(even_lst)\n    # sort the even_lst alphabetically.\n\
    \    return sorted_odd_lst, sorted_even_lst\n    # return the two lists.\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpvtc_lfv1.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpvtc_lfv1.jl:49\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ Cannot `convert` an object of type Tuple{Vector{Any}, Vector{Any}} to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpvtc_lfv1.jl:41\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvtc_lfv1.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtc_lfv1.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpvtc_lfv1.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: Cannot `convert` an object of type Tuple{Vector{Any}, Vector{Any}}\
    \ to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpvtc_lfv1.jl:41\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sha"
  timestamp: 1659979873
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = deleteat!(lst, vec(collect(1:2:end))) # delete all odd length strings\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnewimlbr.jl:18\nin expression\
    \ starting at /tmp/tmpnewimlbr.jl:18\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for v in lst\n        if length(v) % 2 == 0\n      \
    \      push!(new_lst, v)\n        end\n    end\n    sorted = sort(new_lst, by\
    \ = (x -> (length(x), x)))\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    odd_length_words = []\n    for str in lst\n        if length(str) % 2\
    \ == 1\n            push!(odd_length_words, str)\n        end\n    end\n    sort(odd_length_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk6yg1t9z.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpk6yg1t9z.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6yg1t9z.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6yg1t9z.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk6yg1t9z.jl:32\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\"] ==\
    \ [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6yg1t9z.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6yg1t9z.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk6yg1t9z.jl:33\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"a\", \"b\", \"c\", \"d\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6yg1t9z.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6yg1t9z.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk6yg1t9z.jl:34\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"\
    abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6yg1t9z.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6yg1t9z.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpk6yg1t9z.jl:35\n  Expression: candidate([\"AI\", \"ai\", \""
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    len_lst = Int[]\n    for i in lst\n        len_lst = push!(len_lst, length(i))\n\
    \    end\n    len_lst_dst = []\n    len_lst_dst = deduplicate(len_lst)\n    list_of_list\
    \ = []\n    for j in len_lst_dst\n        list_of_list = [x for x in lst if length(x)\
    \ == j]\n        list_of_list = sort(list_of_list)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0h0qyzlo.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp0h0qyzlo.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ deduplicate not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0h0qyzlo.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h0qyzlo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h0qyzlo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h0qyzlo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: deduplicate not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0h0qyzlo.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h0qyzlo.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h0qyzlo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h0qyzlo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ deduplicate not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmp0h0qyzlo.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h0qyzlo.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h0qyzlo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h0qyzlo.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ deduplicate not defined\n  Stacktrace:\n   [1] "
  timestamp: 1659979873
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_lst = []\n    for i in 1:length(lst)\n        if length(lst[i])%2==0\n\
    \            push!(new_lst,lst[i])\n        end\n    end\n    sort(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpntnwgz4e.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpntnwgz4e.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntnwgz4e.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntnwgz4e.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    len_to_string = (len, str) -> strcat(string(len), str)\n    lst = sort(len_to_string.(length.(lst),\
    \ lst)) # sort based on lengths\n    output = []\n    for s in lst\n        if\
    \ (parse(Int, substr(s, 1, 1)) % 2 == 0)\n            push!(output, substr(s,\
    \ 2, end))\n        end\n    end\n    return output\nend\n \nsorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpomaeyyjo.jl:23\nin expression starting at /tmp/tmpomaeyyjo.jl:23\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    lst = map(x -> length(x), lst)\n    list = sort(lst)\n    return list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpizjwau2j.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpizjwau2j.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmpizjwau2j.jl:20\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpizjwau2j.jl:27 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpizjwau2j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpizjwau2j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    con"
  timestamp: 1659979874
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    i = 1\n    while i <= length(lst)\n        if length(lst[i]) % 2 == 1\n\
    \            deleteat!(lst, i)\n        else\n            i += 1\n        end\n\
    \    end\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprrz_mh4k.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmprrz_mh4k.jl:39\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprrz_mh4k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprrz_mh4k.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    aux = lst[findall(x -> length(x) % 2 == 0, lst)]\n    return sort(aux)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2b_ybmxy.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp2b_ybmxy.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2b_ybmxy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2b_ybmxy.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    #the function calculates the sum of the list of integers\n    sum = 0\n\
    \    for i in lst\n        sum += i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpxu3erh34.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpxu3erh34.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching +(::Int64, ::String)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpxu3erh34.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu3erh34.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu3erh34.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxu3erh34.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching +(::Int64, ::String)\n  Closest candidates\
    \ are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpxu3erh34.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu3erh34.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [i"
  timestamp: 1659979874
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    temp_dict = Dict{String, Vector{String}}()\n    for elem in lst\n    \
    \    if !(elem in keys(temp_dict))\n            temp_dict[elem] = [elem]\n   \
    \     else\n            temp_dict[elem] = vcat(temp_dict[elem], elem)\n      \
    \  end\n    end\n    temp_list = []\n    for key in keys(temp_dict)\n        push!(temp_list,\
    \ temp_dict[key])\n    end\n    sorted(temp_list, by=length)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt4g372on.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpt4g372on.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpt4g372on.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4g372on.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4g372on.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt4g372on.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  UndefVarError: sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpt4g372on.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4g372on.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4g372on.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt4g372on.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst::Vector{String})\n\
    \     @ Main /tmp/tmpt4g372on.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4g372on.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4g372on.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpt4g372on.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  UndefVarError:\
    \ sorted not defined\n  Stacktrace:\n   [1] sorted_list_sum(lst:"
  timestamp: 1659979874
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    return sort(filter(x -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpik30zkui.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpik30zkui.jl:31\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpik30zkui.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpik30zkui.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659979860
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    for i in lst\n        for j in i\n            println(j)\n        end\n\
    \    end\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkblra82e.jl:27

    '
  stdout: "a\na\na\na\na\na\ntest set: Test Failed at /tmp/tmpkblra82e.jl:30\n  Expression:\
    \ candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\"\
    , \"aaa\"] == [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkblra82e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkblra82e.jl:29\ns\nc\nh\no\no\n\
    l\nA\nI\na\ns\nd\nf\nb\ntest set: Test Failed at /tmp/tmpkblra82e.jl:31\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"AI\", \"asdf\", \"\
    school\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkblra82e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkblra82e.jl:29\nd\nb\nc\na\ntest\
    \ set: Test Failed at /tmp/tmpkblra82e.jl:32\n  Expression: candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"b\", \"\
    c\", \"a\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkblra82e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkblra82e.jl:29\nd\nd\nc\nb\na\n\
    a\nb\nc\nd\na\ntest set: Test Failed at /tmp/tmpkblra82e.jl:33\n  Expression:\
    \ candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkblra82e.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n  "
  timestamp: 1659979873
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    s = Base.sort(lst, by=length)\n    s = Base.sort(s, by=sort)\n    ind\
    \ = []\n    for i in 1:length(s)\n        if length(s[i]) % 2 == 0\n         \
    \   ind = push!(ind, i)\n        end\n    end\n    lst = s[ind]\n    return lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphso5408a.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmphso5408a.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ a::String, b::String)\n      @ Base.Order ./ordering.jl:111\n    [2] sort!\n\
    \      @ ./sort.jl:507 [inlined]\n    [3] sort!(v::Vector{String}, lo::Int64,\
    \ hi::Int64, a::Base.Sort.MergeSortAlg, o::Base.Order.By{typeof(sort), Base.Order.ForwardOrdering},\
    \ t::Vector{String})\n      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @\
    \ ./sort.jl:591 [inlined]\n    [5] sort!\n      @ ./sort.jl:664 [inlined]\n  \
    \  [6] #sort!#8\n      @ ./sort.jl:725 [inlined]\n    [7] #sort#9\n      @ ./sort.jl:772\
    \ [inlined]\n    [8] sorted_list_sum(lst::Vector{String})\n      @ Main /tmp/tmphso5408a.jl:19\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmphso5408a.jl:34 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmphso5408a.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphso5408a.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"\
    ]\n  MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where "
  timestamp: 1659979874
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    new_list = []\n    for word in lst\n        if length(word) % 2 == 0\n\
    \            push!(new_list, word)\n        end\n    end\n    new_list = sort(new_list)\n\
    \    return new_list\nend\n \n    \n    \n\"\"\"Write a function that accepts\
    \ a list of integers as a parameter,\n    and return the same list but with all\
    \ occurrences of the largest number removed.\n    For example:\n    >>> list_delete_max([3,4,3,3,3,4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5n5ez90.jl:30\nin expression starting at\
    \ /tmp/tmpl5n5ez90.jl:30\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}\
    \ \n    @assert length(lst) > 0\n    for word in lst\n        @assert word isa\
    \ String\n    end\n    sorted_list = sort(lst, rev=true)\n    # t1 = sort(sorted_list,\
    \ by=length)\n    # t2 = sort(t1, rev=true)\n    # t3 = sort(t2, by=length)\n\
    \    t1 = sort(sorted_list, by=length)\n    t2 = sort(t1, rev=true)\n    t3 =\
    \ sort(t2, by=length)\n    return t3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuusju8qw.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpuusju8qw.jl:36\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuusju8qw.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuusju8qw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuusju8qw.jl:37\n  Expression: candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n   Evaluated: [\"b\", \"\
    AI\", \"asdf\", \"school\"] == [\"AI\", \"asdf\", \"school\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuusju8qw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuusju8qw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuusju8qw.jl:38\n  Expression: candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == Vector{String}([])\n   Evaluated: [\"d\", \"c\", \"b\", \"a\"\
    ] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuusju8qw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuusju8qw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuusju8qw.jl:39\n  Expression: candidate([\"d\", \"dcba\",\
    \ \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\", \"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuusju8qw.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuusju8qw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuusju8q"
  timestamp: 1659979873
