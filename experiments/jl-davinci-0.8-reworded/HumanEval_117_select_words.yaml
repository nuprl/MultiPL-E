name: HumanEval_117_select_words
language: jl
prompt: "\"\"\"Given a string s and a natural number n, you have been tasked to implement\
  \ \n    a function that returns a vector of all words from string s that contain\
  \ exactly \n    n consonants, in order these words appear in the string s.\n   \
  \ If the string s is empty then the function should return an empty vector.\n  \
  \  Note: you may assume the input string contains only letters and spaces.\n   \
  \ Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
  ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
  ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
  Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n   \
  \ [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
  Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
  \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
  , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
  ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
  , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
  c\", \"d\", \"f\"])\nend\n"
completions: ["    # search for words that have n consonants\n    return split(s)\
    \ |> filter((w) -> count_consonants(w) == n)\nend", "    words = split(s)\n  \
    \  result = []\n    for word in words\n        if count_consonants(word) == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    words = split(s)\n    m = length(words)\n    ans = Vector{String}()\n    for\
    \ i = 1:m\n        if count_consonants(words[i]) == n\n            append!(ans,\
    \ words[i])\n        end\n    end\n    return ans\nend", "    words = split(s,\
    \ r\"\\s+\")\n    keep = []\n    for word in words\n        if n_consonants(word)\
    \ == n\n            push!(keep, word)\n        end\n    end\n    return keep\n\
    end", "    #@assert !isempty(s)\n    #@assert n > 0\n    #@assert isalpha(s)\n\
    \    #@assert isspace(s)\n    s = replace(s, \" \" => \"\")\n    for i = 0:length(s)\n\
    \        for j = length(s):-1:i\n            sub_str = s[i:j]\n            if\
    \ length(regexp(r\"[A-Za-z]\", sub_str)) == n\n                #println(sub_str)\n\
    \            end\n        end\n    end\nend", "    result = Vector{String}()\n\
    \    words = split(s, \" \")\n    for word in words\n        consonants = 0\n\
    \        for letter in word\n            if isConsonant(letter)\n            \
    \    consonants += 1\n            end\n        end\n        if consonants == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    A = split(s, \" \")\n    B = Vector{String}(undef, 0)\n    for i in A\n   \
    \     if count_consonants(i) == n\n            push!(B, i)\n        end\n    end\n\
    \    return B\nend", "    num_cons = 0\n    words = []\n    aux = 0\n    cons\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for (i,\
    \ ch) in enumerate(s)\n        if ch in cons\n            num_cons += 1\n    \
    \    end\n        if ch == \" \"\n            if num_cons == n\n             \
    \   push!(words, s[aux+1:i-1])\n            end\n            num_cons = 0\n  \
    \          aux = i\n        end\n    end\n    if num_cons == n\n        push!(words,\
    \ s[aux+1:end])\n    end\n    return words\nend", "    words = split(s)\n    selected_words\
    \ = String[]\n    for word in words\n        consonants = 0\n        for letter\
    \ in word\n            if letter in 'bcdfghjklmnpqrstvwxyz'\n                consonants\
    \ += 1\n            end\n        end\n        if consonants == n\n           \
    \ push!(selected_words, word)\n        end\n    end\n    return selected_words\n\
    end", "    idx, elements = 1, []\n    while idx <= length(s)\n        word = match(r\"\
    \\w+\", s[idx:end])\n        idx += length(word) + 1\n        if length(matchall(r\"\
    [aeiou]\", word)) == n\n            push!(elements, word)\n        end\n    end\n\
    \    return elements\nend\nselect_words(\"Mary had a little lamb\", 4)", "   \
    \ words = split(s)\n    result = []\n    for w in words\n        c = count_consonants(w)\n\
    \        if c == n\n            push!(result, w)\n        end\n    end\n    return\
    \ result\nend", "    words = split(s)\n    result = []\n    for i in 1:length(words)\n\
    \        if count_consonants(words[i]) == n\n            push!(result, words[i])\n\
    \        end\n    end\n    return result\nend", "    numcons = Vector{Int64}()\n\
    \    counter = 0\n    start = 1\n    numcons = push!(numcons, 0)\n    for k in\
    \ eachindex(s)\n        if s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n\
    \            push!(numcons, counter)\n            counter = 0\n        elseif\
    \ !(s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n            counter +=\
    \ 1\n        end\n    end\n    push!(numcons, counter)\n    my_vec = Vector{String}()\n\
    \    for i in 1:length(numcons)-1\n        if numcons[i] == n\n            push!(my_vec,\
    \ s[start:i-1])\n        end\n        start = i\n    end\n    my_vec\nend", " \
    \   \nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_strings\
    \ = split(s, r\"\\s+\")\n    curr_ans = []\n    for i in new_strings\n       \
    \ s_contains = 0\n        for j in i\n            if j in vowels\n           \
    \     s_contains += 1\n            end\n        end\n        if length(i) - s_contains\
    \ == n\n            push!(curr_ans, i)\n        end\n    end\n    return curr_ans\n\
    end", "    words = split(s)\n    result = []\n    for word in words\n        if\
    \ count_consonants(word) == n\n            push!(result, word)\n        end\n\
    \    end\n    return result\nend", "    words = split(s, ' ') \n    filtered_words\
    \ = []\n    for word in words\n        vowel_count = 0\n        for char in word\n\
    \            if is_vowel(char)\n                vowel_count += 1\n           \
    \ end\n        end\n        if vowel_count == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend", "    s = split(s)\n\
    \    filter(x -> count_consonants(x) == n, s)\nend", "    \n    v = split(s, r\"\
    \\s+\")\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for\
    \ i = 1:length(v)\n        count = 0\n        for j = 1:length(v[i])\n       \
    \     if occursin(lowercase(v[i][j]), consonants)\n                count += 1\n\
    \            end\n        end\n        if count == n\n            push!(result,\
    \ v[i])\n        end\n    end\n    return result\nend", "    vowel = \"aeiou\"\
    \n    result = []\n    words = split(s)\n    for i in words\n        if count_consonants(i)\
    \ == n\n            push!(result, i)\n        end\n    end\n    return result\n\
    end", "    v = String[]\n    for w in split(s)\n        consonants = 0\n     \
    \   for c in w\n            if isconsonant(c)\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            append!(v,\
    \ w)\n        end\n    end\n    return v\nend", "    array_of_words = split(s)\n\
    \    filter_array = filter(x -> count_consonants(x) == n, array_of_words)\n  \
    \  return filter_array\nend", "    consonants = [:b, :c, :d, :f, :g, :h, :j, :k,\
    \ :l, :m, :n, :p, :q, :r, :s, :t, :v, :w, :x, :z]\n    words = split(s)\n    filtered_words\
    \ = []\n    for word in words\n        num_consonants = 0\n        for i in 1:length(word)\n\
    \            if word[i] in consonants\n                num_consonants += 1\n \
    \           end\n        end\n        if num_consonants == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend", "    words = split(s,\
    \ \" \")\n    consonents = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"]\n    selected = []\n    for word in words\n        vowels = length(findall(r\"\
    [aeiou]\", word))\n        if (length(word) - vowels) == n\n            push!(selected,\
    \ word)\n        end\n    end\n    return selected\nend\n \nselect_words(\"Mary\
    \ had a little lamb\", 4)", "    words = split(s)\n    v = Vector{String}()\n\
    \    for i in 1:length(words)\n        if is_consonant(words[i], n)\n        \
    \    push!(v, words[i])\n        end\n    end\n    return v\nend", "    words\
    \ = split(s)\n    v = []\n    for word in words\n        l = length(word)\n  \
    \      vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n        c = 0\n  \
    \      for letter in word\n            if letter in vowels\n                c\
    \ += 1\n            end\n        end\n        if c == l - n\n            push!(v,\
    \ word)\n        end\n    end\n    return v\nend", "    s = split(s)\n    words\
    \ = []\n    for i in s\n        vowels = 0\n        consonants = 0\n        for\
    \ j in i\n            if j in \"aeiou\"\n                vowels += 1\n       \
    \     else\n                consonants += 1\n            end\n        end\n  \
    \      if consonants == n\n            push!(words, i)\n        end\n    end\n\
    \    return words\nend", "    words = split(s)\n    s = 0\n    result = []\n \
    \   for i in 1:length(words)\n        word = words[i]\n        word1 = uppercase(word)\n\
    \        consonants = 0\n        for j in 1:length(word1)\n            if word1[j]\
    \ != 'A' && word1[j] != 'E' && word1[j] != 'I' && word1[j] != 'O' && word1[j]\
    \ != 'U' && word1[j] != 'Y'\n                consonants += 1\n            end\n\
    \        end\n        if consonants == n\n            s += 1\n            result[s]\
    \ = word\n        end\n    end\n    return result\nend", "    words = split(s)\n\
    \    consonants = 0\n    result = String[]\n    for word in words\n        for\
    \ letter in word\n            letter = lowercase(letter)\n            consonants\
    \ += !(letter in \"aeiou\")\n        end\n        if consonants == n\n       \
    \     push!(result, word)\n        end\n        consonants = 0\n    end\n    return\
    \ result\nend", "    words = split(s, \" \")\n    matches = String[]\n    for\
    \ word in words\n        consonants = length(join([\"a\" for c in word if c in\
    \ \"bcdfghjklmnpqrstvwxyz\"], \"\"))\n        if consonants == n\n           \
    \ push!(matches, word)\n        end\n    end\n    return matches\nend", "    split\
    \ = split(s)\n    words = []\n    for i in split\n        if  length(filter(j\
    \ -> in(j, \"a\", \"e\", \"i\", \"o\", \"u\"),i)) == n\n            push!(words,\
    \ i)\n        end\n    end\n    return words\nend", "    if s == \"\"\n      \
    \  return []\n    end\n    s = lowercase(s)\n    words = split(s)\n    result\
    \ = []\n    for word in words\n        if num_consonants(word) == n\n        \
    \    append!(result, word)\n        end\n    end\n    return result\nend", " \
    \   # type assertions\n    # if !isascii(s)\n    #     @error(\"Please only use\
    \ ASCII characters.\")\n    # end\n    # if !isascii(n)\n    #     @error(\"Please\
    \ only use ASCII characters.\")\n    # end\n    # if !(isalpha(s) || isspace(s))\n\
    \    #     @error(\"Please only use alphabet characters or spaces.\")\n    # end\n\
    \    s = lowercase(s)\n    # split string into vector of words\n    words = split(s)\n\
    \    # get consonants\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    # check if word has only n consonants\n\
    \    words_with_n_consonants = []\n    for word in words\n        consonant_count\
    \ = 0\n        for char in word\n            if in(char, consonants)\n       \
    \         consonant_count += 1\n            end\n        end\n        if consonant_count\
    \ == n\n            push!(words_with_n_consonants, word)\n        end\n    end\n\
    \    return words_with_n_consonants\nend", "    x = []\n    for i in split(s,\
    \ \" \")\n        if (count_consonants(i) == n)\n            push!(x, i)\n   \
    \     end\n    end\n    return x\nend", "    l = split(s)\n    ln = length(l)\n\
    \    res = []\n    for i in 1:ln\n        count = 0\n        for j in 1:length(l[i])\n\
    \            if !(l[i][j] in \"aeiou\")\n                count += 1\n        \
    \    end\n        end\n        if count == n\n            push!(res, l[i])\n \
    \       end\n    end\n    return res\nend", "    result = String[]\n    list_s\
    \ = split(s)\n    for i in list_s\n        consonants = 0\n        for j in i\n\
    \            if j in (\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"z\")\n                consonants += 1\n            end\n        end\n    \
    \    if consonants == n\n            push!(result, i)\n        end\n    end\n\
    \    return result\nend", "    words = split(s)\n    length(words) == 0 && return\
    \ []\n    result = String[]\n    for i in 1:length(words)\n        if count_consonants(words[i])\
    \ == n\n            append!(result, words[i])\n        end\n    end\n    return\
    \ result\nend", "    l = []\n    if length(s) == 0\n        return l\n    end\n\
    \    if length(s) == 1\n        return l\n    end\n    s = split(s)\n    for i\
    \ in s\n        if length(filter(y -> !(y in 'aeiou'), i)) == n\n            push!(l,\
    \ i)\n        end\n    end\n    return l\nend", "    words = split(s)\n    results\
    \ = []\n    for i in 1:length(words)\n        if (length(findconsonants(words[i]))\
    \ == n)\n            push!(results, words[i])\n        end\n    end\n    return\
    \ results\nend", "    v = []\n    for word in split(s)\n        c = num_consonants(word)\n\
    \        if c == n\n            push!(v, word)\n        end\n    end\n    return\
    \ v\nend", "    curr_word = \"\"\n    words = Vector{String}()\n    for c in s\n\
    \        if c != ' '\n            curr_word *= c\n        else\n            if\
    \ consonants(curr_word) == n\n                push!(words, curr_word)\n      \
    \      end\n            curr_word = \"\"\n        end\n    end\n    if consonants(curr_word)\
    \ == n\n        push!(words, curr_word)\n    end\n    return words\nend", "  \
    \  words = split(s)\n    split_by_consonants = [length(filter(x -> !(x in \"aeiouAEIOU\"\
    ), word)) for word in words]\n    n_consonants = [n == num_consonants for num_consonants\
    \ in split_by_consonants]\n    return words[n_consonants]\nend", "    res = []\n\
    \    words = split(s)\n    for word in words\n        if sum(x in \"bcdfghjklmnpqrstvwxyz\"\
    \ for x in word) == n\n            push!(res, word)\n        end\n    end\n  \
    \  return res\nend", "    # convert s to lowercase\n    s = lowercase(s)\n   \
    \ # remove punctuation and numbers\n    s = strip(replace(s, r\"[^a-zA-Z ]\" =>\
    \ \"\"))\n    # split at spaces\n    words = split(s)\n    # convert to Vector{String}\n\
    \    words = collect(words)\n    num_consonants = length(collect(@match(r\"[^aeiou]\"\
    , \"test\")))\n    consonant_words = filter(w -> length(collect(@match(r\"[^aeiou]\"\
    , w))) == num_consonants, words)\n    return consonant_words\nend", "  # implement\
    \ this function\n  return string[]\nend", "    count = 0 \n    words = [] \n \
    \   str = \"\" \n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for c in s \n  \
    \      if c in vowels \n            count = 0 \n        else \n            count\
    \ += 1 \n        end \n        if c == ' ' \n            if count == n \n    \
    \            push!(words, str) \n            end \n            str = \"\" \n \
    \       else \n            str = string(str, c) \n        end \n    end \n   \
    \ if count == n \n        push!(words, str) \n    end \n    return words \nend ",
  "    result = Vector{String}()\n    for x in split(s)\n        if n == vowel_count(x)\n\
    \            push!(result, x)\n        end\n    end\n    return result\nend",
  "    \n    sp = split(s)\n    res = []\n    for s in sp\n        if count_consonants(s)\
    \ == n\n            push!(res, s)\n        end\n    end\n    return res\nend",
  "    if length(s) == 0\n        return []\n    end\n    if isconsonant(s[1])\n \
    \       return [s[1]]\n    end\n    if n == 0\n        return []\n    end\n  \
    \  return [s[1]]\nend", "    words = split(s)\n    list_consonants = []\n    for\
    \ w in words\n        consonants = count_consonants(w)\n        if consonants\
    \ == n\n            push!(list_consonants, w)\n        end\n    end\n    return\
    \ list_consonants\nend", "    vowels = Set(['a', 'e', 'i', 'o', 'u'])\n    splitted\
    \ = split(s)\n    result = []\n    for w in splitted\n        c = 0\n        for\
    \ l in w\n            if !(l in vowels)\n                c += 1\n            end\n\
    \        end\n        if c == n\n            push!(result, w)\n        end\n \
    \   end\n    return result\nend", "    str_words = split(s)\n    return [word\
    \ for word in str_words if num_consonants(word) == n]\nend", "    # your code\
    \ goes here\n    return [word for word in split(s) if count_consonants(word) ==\
    \ n]\nend\n ", "    words = split(s)\n    result = []\n    for w in words\n  \
    \      if n_consonants(w) == n\n            push!(result, w)\n        end\n  \
    \  end\n    return result\nend", "    words = split(s)\n    size(words)\n    mask\
    \ = map(word -> count_consonants(word) == n, words)\n    return(words[mask])\n\
    end", "    words = split(s)\n    words_with_n_consonants = []\n    for word in\
    \ words\n        if count_consonants(word) == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    return words_with_n_consonants\nend", "   \
    \ result = []\n    words = split(s, \" \")\n    for word in words\n        if\
    \ count_consonants(word) == n\n            append!(result, word)\n        end\n\
    \    end\n    return result\nend", "    w = split(s)\n    v = Vector{String}()\n\
    \    for e in w\n        if count_consonants(e) == n\n            push!(v, e)\n\
    \        end\n    end\n    return v\nend", "    counter = 0\n    i = 1\n    N\
    \ = length(s)\n    l=1\n    result = Vector{String}()\n    while i <= N\n    \
    \    if s[i] in \"aeiouAEIOU\"\n            counter += 1\n        end\n      \
    \  if s[i] in \"aeiouAEIOU \"\n            if i == N\n                if counter\
    \ == n\n                    push!(result, substring(s, l, i))\n              \
    \  end\n            end\n        elseif s[i] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n            if counter == n\n                push!(result, substring(s, l, i-1))\n\
    \            end\n            l = i\n            counter = 0\n        end\n  \
    \      i += 1\n    end\n    return result\nend", "    # Converts the sentence\
    \ to a vector of words\n    words = split(s)\n    # A vector of words with n consonants\n\
    \    word_vector = []\n    # Loop through each word in the sentence\n    for word\
    \ in words\n        # Count number of consonants in the word\n        consonant_count\
    \ = 0\n        for letter in word\n            if letter in \"bcdfghjklmnpqrstvwxyz\"\
    \n                consonant_count += 1\n            end\n        end\n       \
    \ # Add word to vector if it contains n consonants\n        if consonant_count\
    \ == n\n            push!(word_vector, word)\n        end\n    end\n    return\
    \ word_vector\nend", "    words = split(s)\n    res = []\n    for i = 1:length(words)\n\
    \        word = words[i]\n        if(has_n_consonants(word, n))\n            push!(res,\
    \ word)\n        end\n    end\n    return res\nend", "    # Your code goes here\n\
    \    # ...\nend", "    str = split(s)\n    result = []\n    for i in str\n   \
    \     push!(result,i) if length(i)==n end\n    end\n    return result\nend", " \
    \   v = split(s) # split string using space as delimiter\n    res = []\n    for\
    \ i in v\n        count = 0\n        for j in i\n            if j in \"aeiouAEIOU\"\
    \n                count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(res, i)\n        end\n    end\n    return res\nend", " \n\
    \    # Convert string to lower case characters\n    s_lo = lowercase(s)\n    \n\
    \    # Define consonants\n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\"\
    ,\"y\",\"z\"]\n    \n    # Split string into words\n    words = split(s_lo)\n\
    \    \n    # Declare empty vector of strings\n    final_words = String[]\n   \
    \ \n    # Loop over words\n    for w in words\n        # Initialize counter\n\
    \        counter = 0\n        # Loop over characters in word\n        for c in\
    \ w\n            # Check if character is consonant\n            if c in consonants\n\
    \                # Increase counter\n                counter += 1\n          \
    \  end\n        end\n        # Check if number of consonants in word is equal\
    \ to n\n        if counter == n\n            # Push word to final_words\n    \
    \        push!(final_words, w)\n        end\n    end\n    \n    # Return final_words\n\
    \    return final_words\nend", "    words = split(s)\n    selected_words = []\n\
    \    for word in words\n        if count_consonants(word) == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend", "    ret = Vector{String}(undef,\
    \ 0)\n    words = split(s)\n    @inbounds for i in 1:length(words)\n        temp\
    \ = words[i]\n        cons = 0\n        for j in 1:length(temp)\n            if\
    \ temp[j] in \"bcdfghjklmnpqrstvwxyz\"\n                cons += 1\n          \
    \  end\n        end\n        if cons == n\n            push!(ret, temp)\n    \
    \    end\n    end\n    return ret\nend", "  \n    idx = 0\n    words = String[]\n\
    \    for word in split(s)\n        c = 0\n        for letter in word\n       \
    \     if !(letter in \"aeiouAEIOU\")\n                c += 1\n            end\n\
    \        end\n        if c == n\n            idx += 1\n            words[idx]\
    \ = word\n        end\n    end\n    \n    return words\n    \nend", "    k=split(s)\n\
    \    res=[]\n    for i in k\n        if count_consonants(i)==n\n            push!(res,i)\n\
    \        end\n    end\n    return res\nend\nselect_words(\"Mary had a little lamb\"\
    , 4)", "    words = split(s)\n    results = []\n    for word in words\n      \
    \  if count_consonants(word) == n\n            push!(results, word)\n        end\n\
    \    end\n    return results\nend", "    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    words = split(s)\n    vec = []\n    for i in 1:length(words)\n        word\
    \ = words[i]\n        word_len = length(word)\n        consonant_count = 0\n \
    \       for j in 1:word_len\n            c = word[j]\n            if c in consonants\n\
    \                consonant_count += 1\n            end\n        end\n        if\
    \ consonant_count == n\n            push!(vec, word)\n        end\n    end\n \
    \   return vec\nend", "    consonants = Set([\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\"])\n    in_vowels = false\n    count = 0\n    words\
    \ = split(s)\n    words_n_consonants = []\n    for word in words\n        count\
    \ = 0\n        for c in word\n            if !in_vowels && consonants[c]\n   \
    \             count += 1\n            end\n            in_vowels = !in_vowels\n\
    \        end\n        if count == n\n            push!(words_n_consonants, word)\n\
    \        end\n    end\n    return words_n_consonants\nend\nselect_words(\"Mary\
    \ had a little lamb\", 4)", "    # convert s to a vector of words\n    words =\
    \ split(s)\n    # vector to store the words that contain exactly n consonants\n\
    \    selected_words = []\n    # for each word\n    for word in words\n       \
    \ # count the number of consonants\n        consonants = 0\n        for char in\
    \ word\n            if !(char in 'aeiou')\n                consonants += 1\n \
    \           end\n        end\n        # if it has exactly n consonants, append\
    \ it to selected_words\n        if consonants == n\n            push!(selected_words,\
    \ word)\n        end\n    end\n    # return the selected words\n    return selected_words\n\
    end", "    i = 0\n    str_arr = Vector{String}()\n    while i < length(s)\n  \
    \      str = \"\"\n        if s[i] >= 'A' && s[i] <= 'Z' || s[i] >= 'a' && s[i]\
    \ <= 'z'\n            while s[i] >= 'A' && s[i] <= 'Z' || s[i] >= 'a' && s[i]\
    \ <= 'z'\n                str = str * s[i]\n                i += 1\n         \
    \   end\n            if get_num_consonants(str) == n\n                push!(str_arr,\
    \ str)\n            end\n        else\n            i += 1\n        end\n    end\n\
    \    return str_arr\nend", "    # base case, empty string => return empty vector\n\
    \    if s == \"\"\n        return []\n    end\n    # initialize empty vector\n\
    \    result = []\n    # split string by spaces, store into vector\n    words =\
    \ split(s, ' ')\n    # iterate through vector of words\n    for i in 1:length(words)\n\
    \        # count num consonants in each word\n        num_consonants = consonants(words[i])\n\
    \        # if num_consonants == n, then append to result vector\n        if num_consonants\
    \ == n\n            append!(result, words[i])\n        end\n    end\n    # return\
    \ result vector\n    return result\nend", "    answer = []\n    words = split(s,\
    \ r\"\\s+\")\n    for i in words\n        if consonants(i) == n\n            push!(answer,\
    \ i)\n        end\n    end\n    return answer\nend", "    words = split(s, \"\
    \ \")\n    selected = Vector{String}()\n    for word in words\n        count =\
    \ 0\n        for i in 1:length(word)\n            if is_consonant(word[i])\n \
    \               count += 1\n            end\n        end\n        if count ==\
    \ n\n            push!(selected, word)\n        end\n    end\n    return selected\n\
    end", "    res = String[]\n    w = words(s)\n    for word in w\n        count\
    \ = 0\n        for i in eachindex(word)\n            if !in(lowercase(word[i]),\
    \ \"aeiou\") \n                count += 1\n            end\n        end\n    \
    \    if count == n\n            push!(res, word)\n        end\n    end\n    return\
    \ res\nend", "    \"\"\"\n    This function returns a vector of words that have\
    \ n number of consonants\n    \"\"\"\n    # string to lower case\n    s = lowercase(s)\n\
    \    # remove space\n    s = replace(s, r\"\\s+\", \"\")\n    # Regex for consonants\n\
    \    c = r\"[^aeiou]\"\n    # Regex for vowels\n    v = r\"[aeiou]\"\n    # split\
    \ into words\n    words = split(s, r\"\\s+\")\n    # List of words that have n\
    \ number of consonants\n    list_of_words = []\n    # loop through the words\n\
    \    for word in words\n        # if there are the same number of vowels and consonants\n\
    \        if size(occursin(c, word))[1] == n\n            # add to list of words\n\
    \            push!(list_of_words, word)\n        end\n    end\n    # return list\
    \ of words as a vector\n    return list_of_words\nend", "    # Initialize variables\n\
    \    i = 1\n    num_consonants = 0\n    # Empty storage for output\n    output\
    \ = String[]\n    # Split s into words\n    words = split(s)\n    # Iterate through\
    \ words\n    for word in words\n        # Iterate through each letter in word\n\
    \        for letter in word\n            # If letter is not a vowel, increment\
    \ num_consonants\n            if !(letter in \"aeiouAEIOU\")\n               \
    \ num_consonants += 1\n            end\n        end\n        # If number of consonants\
    \ in word is equal to n, add to output\n        if num_consonants == n\n     \
    \       push!(output, word)\n        end\n        # Reset num_consonants counter\n\
    \        num_consonants = 0\n    end\n    # Return output\n    return output\n\
    end", "    # Enter your code here\n    words = split(s, \" \")\n    selected =\
    \ Vector{String}()\n    for w in words\n        consonants = 0\n        for c\
    \ in w\n            if !(c in \"aeiou\")\n                consonants += 1\n  \
    \          end\n        end\n        if consonants == n\n            push!(selected,\
    \ w)\n        end\n    end\n    return selected\nend", "    result = []\n    for\
    \ (i, word) in enumerate(split(s))\n        if number_of_consonants(word) == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    if s==\"\"\n        return String[]\n    end\n    v = String[]\n    words =\
    \ split(s)\n    for i=1:length(words)\n        word = words[i]\n        consonants\
    \ = length(filter(x->!(x in ['a','e','i','o','u','A','E','I','O','U']), split(word)))\n\
    \        if n==consonants\n            push!(v, word)\n        end\n    end\n\
    \    return v\nend", "    words = split(s)\n    words_and_consonants = [(word,\
    \ count_consonants(word)) for word in words]\n    words_with_n_consonants = [word\
    \ for (word, n_consonants) in words_and_consonants if n_consonants == n]\n   \
    \ return words_with_n_consonants\nend", "    res = []\n    for i in s.split()\n\
    \        if count_vowels(i) == n\n            push!(res, i)\n        end\n   \
    \ end\n    return res\nend", "    words = split(s)\n    select_words_vector =\
    \ []\n    for word in words\n        consonants = length(filter(x -> !(x in \"\
    aeiouAEIOU\"), word))\n        if consonants == n\n            push!(select_words_vector,\
    \ word)\n        end\n    end\n    return select_words_vector\nend\n@assert select_words(\"\
    Mary had a little lamb\", 4) == [\"little\"]\n@assert select_words(\"Mary had\
    \ a little lamb\", 3) == [\"Mary\", \"lamb\"]\n@assert select_words(\"simple white\
    \ space\", 2) == []\n@assert select_words(\"Hello world\", 4) == [\"world\"]\n\
    @assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n ", "    \n    words =\
    \ split(s)\n    s = \"\"\n    count = 0\n    consonants = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    vector_words = []\n    \n    for i in 1:length(words)\n\
    \        s = words[i]\n        for j in 1:length(s)\n            for k in 1:length(consonants)\n\
    \                if lowercase(s[j]) == consonants[k]\n                    count\
    \ += 1\n                end\n            end\n        end\n        if count ==\
    \ n\n            push!(vector_words, words[i])\n        end\n        count = 0\n\
    \    end\n    \n    return vector_words\nend", "    const DOUBLE_QUOTE = 0x22\n\
    \    const SPACE = 0x20\n    const HYPHEN = 0x2D\n    const LETTERS = Dict(0x61\
    \ => \"a\", 0x62 => \"b\", 0x63 => \"c\", 0x64 => \"d\", 0x65 => \"e\", 0x66 =>\
    \ \"f\", 0x67 => \"g\", \n                        0x68 => \"h\", 0x69 => \"i\"\
    , 0x6A => \"j\", 0x6B => \"k\", 0x6C => \"l\", 0x6D => \"m\", 0x6E => \"n\", \n\
    \                        0x6F => \"o\", 0x70 => \"p\", 0x71 => \"q\", 0x72 =>\
    \ \"r\", 0x73 => \"s\", 0x74 => \"t\", 0x75 => \"u\", \n                     \
    \   0x76 => \"v\", 0x77 => \"w\", 0x78 => \"x\", 0x79 => \"y\", 0x7A => \"z\"\
    )\n    const CONSONANTS = Dict(\"b\" => true, \"c\" => true, \"d\" => true, \"\
    f\" => true, \"g\" => true, \"h\" => true, \"j\" => true, \n                 \
    \           \"k\" => true, \"l\" => true, \"m\" => true, \"n\" => true, \"p\"\
    \ => true, \"q\" => true, \"r\" => true, \n                            \"s\" =>\
    \ true, \"t\" => true, \"v\" => true, \"w\" => true, \"x\" => true, \"y\" => true,\
    \ \"z\" => true)\n    const VOWELS = Dict(\"a\" => true, \"e\" => true, \"i\"\
    \ => true, \"o\" => true, \"u\" => true)\n    words = Vector{String}()\n    word\
    \ = String()\n    for c in s\n        if c == DOUBLE_QUOTE\n            push!(words,\
    \ word)\n            word = String()\n        elseif c == SPACE\n            push!(words,\
    \ word)\n            word = String()\n        elseif c == HYPHEN\n           \
    \ word *= \"-\"\n        else\n", "    # TODO: implement select_words function\n\
    \    # HINT: call the is_word_n_consonants function\n    x = split(s)\n    y =\
    \ []\n    for w in x\n        if is_word_n_consonants(w, n) == true\n        \
    \    push!(y, w)\n        end\n    end\n    return y\nend", "    words = split(s,\
    \ \" \")\n    words_with_n_consonants = []\n    for word in words\n        if\
    \ is_word_valid(word, n)\n            push!(words_with_n_consonants, word)\n \
    \       end\n    end\n    return words_with_n_consonants\nend", "    words = split(s,\
    \ \" \")\n    result = []\n    for word in words\n        if n == count_consonants(word)\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    # We use the function \"count_consonants\" to count the number of consonants\
    \ in a word\n    if s == \"\"\n        return []\n    else\n        # Split the\
    \ string into words\n        s_array = split(s)\n        # Create an array of\
    \ the number of consonants in each word\n        consonants_array = [count_consonants(word)\
    \ for word in s_array]\n        # Select words that have exactly n consonants\n\
    \        answer = s_array[findall(consonants_array .== n)]\n        return answer\n\
    \    end\nend\n \n# Test \nprintln(select_words(\"Mary had a little lamb\", 4))\n\
    println(select_words(\"Mary had a little lamb\", 3))\nprintln(select_words(\"\
    simple white space\", 2))\nprintln(select_words(\"Hello world\", 4))\nprintln(select_words(\"\
    Uncle sam\", 3))", "    words = split(s)\n    result = []\n    for word in words\n\
    \        consonants = [char for char in word if char \u2209 ['a', 'e', 'i', 'o',\
    \ 'u']]\n        if length(consonants) == n\n            push!(result, word)\n\
    \        end\n    end\n    return result\nend", "    words = split(s)\n    if\
    \ length(words) == 0\n        return []\n    end\n    if n < 0\n        return\
    \ []\n    end\n    v = []\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(v, word)\n        end\n    end\n    return v\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = split(s)\n    ws\
    \ = []\n    for w in words\n        count = 0\n        for c in w\n          \
    \  if c in vowels\n                count += 1\n            end\n        end\n\
    \        if (count == n)\n            push!(ws, w)\n        end\n    end\n   \
    \ return ws\nend\nselect_words(\"Mary had a little lamb\", 4)", "    if s == \"\
    \"\n        return []\n    end\n    words = split(s)\n    selected_words = []\n\
    \    for word in words\n        num_consonants = count_consonants(word)\n    \
    \    if num_consonants == n\n            push!(selected_words, word)\n       \
    \ end\n    end\n    return selected_words\nend", "    words = split(s)\n    result\
    \ = []\n    for w in words\n        if count_consonants(w) == n\n            push!(result,\
    \ w)\n        end\n    end\n    return result\nend", "    words = split(s)\n \
    \   filter(x -> consonants(x) == n, words)\nend", "    words = split(s)\n    return\
    \ [word for word in words if count_consonants(word) == n]\nend", "    words =\
    \ split(s, \" \")\n    toRet = []\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for word in words\n        cons = 0\n        for letter in word\n  \
    \          if !(letter in vowels)\n                cons = cons + 1\n         \
    \   end\n        end\n        if cons == n\n            push!(toRet, word)\n \
    \       end\n    end\n    return toRet\nend", "    words = split(s)\n    result\
    \ = []\n    for word in words\n        num = count_consonants(word)\n        if\
    \ num == n\n            push!(result, word)\n        end\n    end\n    return\
    \ result\nend", "    vowels = Set(\"aeiou\")\n    res = []\n    for word in split(s)\n\
    \        # Count number of consonents in word\n        cons = sum(!(letter in\
    \ vowels) for letter in word)\n        if cons == n\n            push!(res, word)\n\
    \        end\n    end\n    return res\nend", "    # INSERT YOUR CODE HERE\nend",
  "    str_list = split(s)\n    #puts(str_list)\n    words = []\n    vowels = \"aeiouAEIOU\"\
    \n    for str in str_list\n        count = 0\n        #puts(str)\n        for\
    \ c in str\n            if !(c in vowels)\n                count += 1\n      \
    \      end\n        end\n        if count == n\n            push!(words, str)\n\
    \        end\n    end\n    return words\nend", "    \n    # First strip off the\
    \ vowels and punctuation\n    #s = replace(s, r\"[aeiou]\", \"\")\n    s = replace(s,\
    \ r\"[aeiouAEIOU]\", \"\")\n    s = replace(s, r\"[\\.,'#\\n]\", \"\")\n    \n\
    \    # Split the string into individual words\n    words = split(s)\n    \n  \
    \  # Extract the words that contain exactly n consonants\n    n_consonants = [w\
    \ for w in words if length(replace(w, r\"[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    , \"\")) == n]\n    \n    return n_consonants\nend", "    vec=split(s)\n    vec1=[]\n\
    \    count=0\n    for i in vec\n        count=0\n        for j in i\n        \
    \    if (j in \"aeiouAEIOU\")\n                count+=1\n            end\n   \
    \     end\n        if count==n\n            push!(vec1,i)\n        end\n    end\n\
    \    return vec1\nend", "    result = String[]\n    for word in split(s)\n   \
    \     if count_consonants(word) == n\n            push!(result, word)\n      \
    \  end\n    end\n    return result\nend", "    letters = split(s, \" \")\n   \
    \ v = Vector{String}()\n    for i in letters\n        k = consonants(i)\n    \
    \    if k == n\n            push!(v, i)\n        end\n    end\n    return v\n\
    end\n#test\nselect_words(\"Mary had a little lamb\", 4)", "    #TODO: Write your\
    \ code here\nend\n ", "    result = []\n    words = split(s, \" \")\n    for w\
    \ in words\n        consonants = \"bcdfghjklmnpqrstvwxz\"\n        cons_count\
    \ = 0\n        for c in w\n            if c in consonants\n                cons_count\
    \ += 1\n            end\n        end\n        if cons_count == n\n           \
    \ push!(result, w)\n        end\n    end\n    return result\nend", "    words\
    \ = split(s)\n    v = Vector{String}()\n    for w in words\n        if count_consonants(w)\
    \ == n\n            push!(v, w)\n        end\n    end\n    return v\nend", " \
    \   words = split(s)\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n    consonants_in_word\
    \ = []\n    for word in words\n        for letter in word\n            if letter\
    \ in consonants\n                push!(consonants_in_word, word)\n           \
    \ end\n        end\n    end\n    return consonants_in_word\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    s_vec = split(s)\n    res = []\n\
    \    for i in 1:length(s_vec)\n        s_vec[i] = lowercase(s_vec[i])\n      \
    \  num_consonants = 0\n        for j in 1:length(s_vec[i])\n            if !(s_vec[i][j]\
    \ in vowels)\n                num_consonants += 1\n            end\n        end\n\
    \        if num_consonants == n\n            push!(res, s_vec[i])\n        end\n\
    \    end\n    return res\nend", "    words = split(s)\n    selected = []\n   \
    \ for word in words\n        c = count_consonants(word)\n        if c == n\n \
    \           push!(selected, word)\n        end\n    end\n    return selected\n\
    end", "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    vector = split(s)\n   \
    \ final_vector = []\n    for j in 1:length(vector)\n        matches = 0\n    \
    \    word = vector[j]\n        for i in 1:length(word)\n            if word[i]\
    \ in consonants\n                matches += 1\n            end\n        end\n\
    \        if matches == n\n            final_vector = [final_vector; word]\n  \
    \      end\n    end\n    return final_vector\nend", "    words = split(s, \" \"\
    )\n    result = []\n    for word in words\n        if count_consonants(word) ==\
    \ n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    # your code goes here\n    words = split(s)\n    words_out = String[]\n\
    \    for word in words\n        if num_consonants(word) == n\n            push!(words_out,\
    \ word)\n        end\n    end\n    return words_out\nend", "    words = split(s)\n\
    \    res = []\n    for x in words\n        if count_consonants(x) == n\n     \
    \       push!(res, x)\n        end\n    end\n    return res\nend", "    v = split(s)\n\
    \    w = []\n    for i in v\n        if count_consonants(i) == n\n           \
    \ push!(w, i)\n        end\n    end\n    return w\nend", "    answer = []\n  \
    \  for word in split(s)\n        if count_consonants(word) == n\n            push!(answer,\
    \ word)\n        end\n    end\n    return answer\nend", "    result = []\n   \
    \ if n == 0\n        return result\n    end\n    # working on s without spaces\n\
    \    s = split(s, ' ')\n    for i = 1:length(s)\n        c = 0\n        for j\
    \ = 1:length(s[i])\n            if !(s[i][j] in 'aeiouAEIOU')\n              \
    \  c += 1\n            end\n        end\n        if c == n\n            push!(result,\
    \ s[i])\n        end\n    end\n    return result\nend\nselect_words(\"My name\
    \ is Kocburak\", 3)", "    # initialize an empty vector of strings to return later\n\
    \    v = Vector{String}() \n    # split the string s into words\n    words = split(s)\n\
    \    # for each word in the string s\n    for w in words\n        # if the number\
    \ of consonants in w is equal to n\n        if count_consonants(w) == n\n    \
    \        # then push w to the vector v\n            push!(v, w)\n        end\n\
    \    end\n    # return the vector v\n    return v\nend", "    words = split(s)\n\
    \    #print(words)\n    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    selected_words = []\n    for i in words\n \
    \       word_count = 0\n        #print(i)\n        for j in i\n            #print(j)\n\
    \            if(j in consonants)\n                word_count += 1\n          \
    \  end\n        end\n        if(word_count == n)\n            push!(selected_words,\
    \ i)\n        end\n    end\n    return selected_words\nend", "    v = split(s)\n\
    \    res = []\n    for i = 1:length(v)\n        if count_consonants(v[i]) == n\n\
    \            push!(res, v[i])\n        end\n    end\n    return res\nend", " \
    \   v=split(s)\n    res=[]\n    for word in v\n        if word_test(word,n)==1\n\
    \            push!(res,word)\n        end\n    end\n    return res\nend", "  \
    \  count = 0\n    vector_of_words = []\n    words = split(s, \" \")\n    for i\
    \ in words\n        i = filter(x -> x != 'a' && x != 'e' && x != 'i' && x != 'o'\
    \ && x != 'u', i)\n        if length(i) == n\n            count += 1\n       \
    \     push!(vector_of_words, words[count])\n        else\n            count +=\
    \ 1\n        end\n    end\n    return vector_of_words\nend", "    res = Vector{String}()\n\
    \    words = split(s)\n    #println(words)\n    for word in words\n        num_consonants\
    \ = 0\n        #println(word)\n        for c in word\n            #println(c)\n\
    \            if !(c in \"aeiou\")\n                num_consonants += 1\n     \
    \       end\n        end\n        if num_consonants == n\n            push!(res,\
    \ word)\n        end\n    end\n    return res\nend", "    words = split(s)\n \
    \   all_words = []\n    for word in words\n        for char in word\n        \
    \    if ~ ismatch(r\"[^aeiouAEIOU]\", char) \n                continue\n     \
    \       end\n            push!(all_words, word)\n        end\n    end\n    return\
    \ all_words\nend", "    num = 0\n    words = split(s)\n    selected_words = []\n\
    \    for i in 1:length(words)\n        num = 0\n        for j in 1:length(words[i])\n\
    \            if isconsonant(words[i][j])\n                num += 1\n         \
    \   end\n        end\n        if num == n\n            push!(selected_words, words[i])\n\
    \        end\n    end\n    return selected_words\nend", "    parts = split(s)\n\
    \    results = []\n    for part in parts\n        if n_consonants(part) == n\n\
    \            push!(results, part)\n        end\n    end\n    return results\n\
    end", "    \n    #your code here\n    \nend", "    words = split(s, r\"\\s+\"\
    )\n    n_words = length(words)\n    output = Vector{String}(undef, n_words)\n\
    \    c = 0\n    for word in words\n        if count_consonants(word) == n\n  \
    \          c += 1\n            output[c] = word\n        end\n    end\n    return\
    \ output[1:c]\nend", "    # ...\nend\n    ", "    # code here ...\n    return\
    \ []\nend", "    words = split(s) \n    result = [] \n    for word in words \n\
    \        word_ = replace(word,r\"a|e|i|o|u|A|E|I|O|U|y|Y\",\"\") \n        if\
    \ length(word_) == n \n            push!(result, word) \n        end \n    end\
    \ \n    return result \nend", "    words = split(s)\n    consonants = [c for c\
    \ in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'] ]\n    vector_words = []\n    for word in words\n \
    \       number_consonants = 0\n        for letter in word\n            if letter\
    \ in consonants\n                number_consonants += 1\n            end\n   \
    \     end\n        if number_consonants == n\n            push!(vector_words,\
    \ word)\n        end\n    end\n    return vector_words\nend", "    words = split(s)\n\
    \    res = []\n    for word in words\n        count = 0\n        for letter in\
    \ word\n            if !isvowel(letter)\n                count += 1\n        \
    \    end\n        end\n        if count == n\n            push!(res, word)\n \
    \       end\n    end\n    return res\nend", "    words = split(s)\n    out = Vector{String}()\n\
    \    for i = 1:length(words)\n        if count_consonants(words[i]) == n\n   \
    \         push!(out, words[i])\n        end\n    end\n    return out\nend", " \
    \   v = split(s)\n    words = []\n    for i in 1:length(v)\n        if count_consonants(v[i])\
    \ == n\n            push!(words, v[i])\n        end\n    end\n    return words\n\
    end", "    words = split(s)\n    selected_words = []\n    for word in words\n\
    \        num_consonants = 0\n        for ch in word\n            num_consonants\
    \ += (ch in \"bcdfghjklmnpqrstvwxyz\")\n        end\n        if num_consonants\
    \ == n\n            push!(selected_words, word)\n        end\n    end\n    return\
    \ selected_words\nend", "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\"]\n    words = split(s)\n    result = []\n    for\
    \ word in words\n        if length(word) == n\n            if all(i -> (i in consonants),\
    \ [word[j] for j in 1:n])\n                push!(result, word)\n            end\n\
    \        end\n    end\n    return result\nend", "    vec_str=split(s)\n    length_str=size(vec_str,1)\n\
    \    vec_str_empty=[]\n    vec_str_res=[]\n    if length_str==0\n        return\
    \ vec_str_empty\n    end\n    for i in 1:length_str\n        num_cons=length(consonants(vec_str[i]))\n\
    \        if num_cons==n\n            push!(vec_str_res,vec_str[i])\n        end\n\
    \    end\n    return vec_str_res\nend", "    if isempty(s)\n        return []\n\
    \    end\n   \n    words = split(s)\n    ret = []\n    for w in words\n      \
    \  if num_consonants(w) == n\n            push!(ret, w)\n        end\n    end\n\
    \    return ret\nend", "    end\n    \n \n\"\"\"Given a vector of natural numbers\
    \ and a natural number n, \nyou have been tasked to implement a function that\
    \ returns a \nvector of all numbers from the input vector that contain exactly\
    \ \nn digits, in the same order these numbers appear in the input vector.\nIf\
    \ the input vector is empty then the function should return an empty vector.\n\
    Examples:\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000], 2)\n[100,\
    \ 200, 1000, 3000]\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000],\
    \ 3)\n[1000, 3000]\n>>> select_longer_than_n([100, 1, 200, 20, 1000, 4, 3000],\
    \ 1)\n[100, 1, 200, 20, 1000, 4, 3000]\n>>> select_longer_than_n([100, 1, 200,\
    \ 20, 1000, 4, 3000], 0)\n[]\n>>> select_longer_than_n([100, 1, 200, 20, 1000,\
    \ 4, 3000], 4)\n[]\n\"\"\"", "    words = split(s)\n    result = []\n    for word\
    \ in words\n        if length(word) == n\n            push!(result, word)\n  \
    \      end\n    end\n    return result\nend", "    # Write the body of the function\n\
    end\n@testset \"Example Tests\" begin\n    @test select_words(\"Mary had a little\
    \ lamb\", 4) == [\"little\"]\n    @test select_words(\"Mary had a little lamb\"\
    , 3) == [\"Mary\", \"lamb\"]\n    @test select_words(\"simple white space\", 2)\
    \ == []\n    @test select_words(\"Hello world\", 4) == [\"world\"]\n    @test\
    \ select_words(\"Uncle sam\", 3) == [\"Uncle\"]\nend", "    index_start = 1\n\
    \    index_end = 1\n    result = []\n    while index_end < length(s)\n       \
    \ while index_end < length(s) && s[index_end] != ' '\n            index_end +=\
    \ 1\n        end\n        substr = s[index_start:index_end]\n        substr_length\
    \ = nconsonants(substr)\n        if substr_length == n\n            push!(result,\
    \ substr)\n        end\n        index_start = index_end + 1\n        index_end\
    \ = index_start\n    end\n    return result\nend", "    res = []\n    push!(res,\
    \ split(s))\n    res1 = []\n    for word in res\n        if count_consonants(word)\
    \ == n\n            push!(res1, word)\n        end\n    end\n    return res1\n\
    end", "    consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"z\"]\n    words = split(s)\n    count = 0\n    ncon = 0\n    answer = []\n\
    \    for i in 1:length(words)\n        for j in 1:length(words[i])\n         \
    \   if words[i][j] in consonants\n                count += 1\n            end\n\
    \        end\n        if count == n\n            push!(answer, words[i])\n   \
    \     end\n        count = 0\n    end\n    return answer\nend\nselect_words(\"\
    simple white space\", 2)", "    words = split(s)\n    selected = []\n    for word\
    \ in words\n        count = 0\n        consonants = [\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        for letter in word\n    \
    \        if letter in consonants\n                count += 1\n            end\n\
    \        end\n        if count == n\n            push!(selected, word)\n     \
    \   end\n    end\n    return selected\nend", "    words = split(s, \" \")\n  \
    \  result = []\n    for word in words\n        n_consonants = 0\n        for letter\
    \ in word\n            if !(letter in \"aeiouAEIOU\")\n                n_consonants\
    \ += 1\n            end\n        end\n        if n_consonants == n\n         \
    \   push!(result, word)\n        end\n    end\n    return result\nend\nselect_words(\"\
    Mary had a little lamb\", 4)", "    count_consonants(w::String) = length(replace(lowercase(w),\
    \ r\"[aeiou]\", \"\"))\n    words = split(s)\n    map(w -> w * \" \" * count_consonants(w),\
    \ words)\n    [w for w in words if count_consonants(w) == n]\nend", "    words\
    \ = split(s)\n    result = []\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    v::Vector{String} = split(s, \" \")\n    res::Vector{String} = []\n\
    \    for i in 1:length(v)\n        con_num = 0\n        for j in 1:length(v[i])\n\
    \            if ! isvowel(v[i][j])\n                con_num += 1\n           \
    \ end\n        end\n        if con_num == n\n            push!(res, v[i])\n  \
    \      end\n    end\n    return res\nend", "    cons = \"qwrtypsdfghjklzxcvbnm\"\
    \n    words = split(s)\n    res = String[]\n    for i in words\n        count\
    \ = 0\n        for j in i\n            if j in cons\n                count +=\
    \ 1\n            end\n        end\n        if count == n\n            push!(res,\
    \ i)\n        end\n    end\n    return res\nend", "    _s = split(s)\n    result\
    \ = []\n    for i in 1:length(_s)\n        count = 0\n        for j in 1:length(_s[i])\n\
    \            if(is_consonant(_s[i][j]))\n                count += 1\n        \
    \    end\n        end\n        if(count == n)\n            push!(result, _s[i])\n\
    \        end\n    end\n    return result\nend", "    words = split(s, \" \")\n\
    \    result = []\n    for word in words\n        if (num_consonants(word) == n)\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    words = split(s) \n    n_words = length(words) \n    result = []\n    for i\
    \ in 1:n_words\n        word = words[i]\n        if n_consonants(word) == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    cons_letters = \"bcdfghjklmnpqrstvwxyz\"\n    words = split(s)\n    result\
    \ = []\n    for word in words\n        count = 0\n        for letter in word\n\
    \            if lowercase(letter) in cons_letters\n                count += 1\n\
    \            end\n        end\n        if count == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend", "    # convert string\
    \ to char vector and filter out spaces\n    word_split = map(x -> x == ' ', s)\n\
    \    words = split(s, word_split)\n    words = filter(x -> x != \"\", words)\n\
    \    # use a function to get consonant count and filter for words with exactly\
    \ n\n    return filter(x -> get_consonant_count(x) == n, words)\nend", "    ls=split(s)\n\
    \    ls2=[]\n    for x in ls\n        if consonants(x)==n\n            push!(ls2,x)\n\
    \        end\n    end\n    return ls2\nend", "    if s == \"\"\n        return\
    \ []\n    end\n    words = split(s)\n    selected_words = []\n    num_consonants(word)\
    \ = length(setdiff(char.(word), ['a', 'e', 'i', 'o', 'u']))\n    for word in words\n\
    \        if num_consonants(word) == n\n            push!(selected_words, word)\n\
    \        end\n    end\n    return selected_words\nend", "    words = split(s)\n\
    \    length(words) == 0 && return []\n    selected_words = String[]\n    for word\
    \ in words\n        num_consonants = 0\n        for i = 1:length(word)\n     \
    \       is_consonant(word[i]) && num_consonants += 1\n        end\n        num_consonants\
    \ == n && push!(selected_words, word)\n    end\n    return selected_words\nend",
  "  strs = split(s)\n  num_cons = [\"bl\", \"cl\", \"fl\", \"gl\", \"pl\", \"sl\"\
    , \"br\", \"cr\", \"dr\", \"fr\", \"gr\", \"pr\", \"tr\", \"sc\", \"sk\", \"sm\"\
    , \"sn\", \"sp\", \"st\", \"sw\", \"ch\", \"sh\", \"th\", \"wh\"]\n  function\
    \ count_cons(word)\n    count = 0\n    for i in range(1,length(word)-1)\n    \
    \  if (word[i] in num_cons)\n        count += 1\n      end\n    end\n    count\n\
    \  end\n  words = []\n  for i in range(1,length(strs))\n    if (count_cons(strs[i])\
    \ == n)\n      push!(words, strs[i])\n    end\n  end\n  return words\nend", " \
    \   words = s.split(\" \")\n    vec = Vector{String}()\n    for i in 1:length(words)\n\
    \        word = words[i]\n        word = word.lowercase()\n        consonants\
    \ = 0\n        for j in 1:length(word)\n            if !(word[j] in 'aeiou')\n\
    \                consonants += 1\n            end\n        end\n        if consonants\
    \ == n\n            vec = push!(vec, words[i])\n        end\n    end\n    return\
    \ vec\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   total_consonants = zeros(Int64, length(s))\n    selected_words = []\n    for\
    \ i = 1:length(s)\n        if s[i] in consonants\n            total_consonants[i]\
    \ = 1\n        end\n    end\n    for j = 1:length(s)\n        if s[j] in vowels\n\
    \            total_consonants[j] = 0\n        end\n    end\n    a, b = 1, 0\n\
    \    for k = 1:length(s)\n        if s[k] == \" \"\n            b = k\n      \
    \      push!(selected_words, s[a:b])\n            a = k + 1\n        end\n   \
    \ end\n    push!(selected_words, s[a:end])\n    selected_words = filter(x -> sum(total_consonants[x.indices])\
    \ == n, selected_words)\n    return selected_words\nend", "    words = split(s,\
    \ ' ')\n    results = []\n    for word in words\n        consonants = vowels =\
    \ 0\n        for letter in word\n            if letter in \"aeiouAEIOU\"\n   \
    \             vowels += 1\n            else\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            push!(results,\
    \ word)\n        end\n    end\n    return results\nend", "    words = split(s,\
    \ ' ')\n    result = String[]\n    for i in 1:length(words)\n        counter =\
    \ 0\n        for j in 1:length(words[i])\n            if(!(words[i][j] in 'aeiouAEIOU'))\n\
    \                counter += 1\n            end\n        end\n        if(counter\
    \ == n)\n            push!(result, words[i])\n        end\n    end\n    return\
    \ result\nend", "    result = Vector{String}()\n    s = replace(s, r\"[^a-zA-Z\
    \ ]\", \"\")\n    words = split(s)\n    for word in words\n        consonants\
    \ = 0\n        vowels = 0\n        for letter in word\n            if letter in\
    \ \"aeiouAEIOU\"\n                vowels += 1\n            else\n            \
    \    consonants += 1\n            end\n        end\n        if consonants == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    # All consonants in the english alphabet\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    # Array of words in string s\n    words = split(s)\n    # The solution vector\n\
    \    solution = []\n    # For each word in words\n    for word in words\n    \
    \    # Check how many consonants are in the word\n        for j in 1:length(word)\n\
    \            if word[j] in consonants\n                # If there are exactly\
    \ n consonants, \n                # add the word to the solution vector\n    \
    \            if count(word, consonants) == n\n                    push!(solution,\
    \ word)\n                end\n            end\n        end\n    end\n    return\
    \ solution\nend", "    n_consonants = (x -> !isvowel(x)) # create a function to\
    \ test whether a character is a consonant\n    sel_words = [] # vector to contain\
    \ the selected words\n    word = [] # vector to contain a word\n    for letter\
    \ in collect(s)\n        if letter == ' ' # split words with a space\n       \
    \     if count_chars(n_consonants, word) == n\n                sel_words = [sel_words;\
    \ join(word, \"\")]\n            end\n            word = []\n        else\n  \
    \          push!(word, letter)\n        end\n    end\n    if count_chars(n_consonants,\
    \ word) == n\n        sel_words = [sel_words; join(word, \"\")]\n    end\n   \
    \ return sel_words\nend", "    words = split(s)\n    res = []\n    for i in 1:length(words)\n\
    \        if count_consonants(words[i]) == n\n            push!(res, words[i])\n\
    \        end\n    end\n    return res\nend\n    \nselect_words(\"Mary had a little\
    \ lamb\", 4)", "    words = split(s)\n    out = []\n    for word in words\n  \
    \      num_consonants = length(findall(r\"^[^aeiouAEIOU]+$\", word))\n       \
    \ if num_consonants == n\n            push!(out, word)\n        end\n    end\n\
    \    return out\nend\nprintln(select_words(\"Mary had a little lamb\", 4))\nprintln(select_words(\"\
    Mary had a little lamb\", 3))\nprintln(select_words(\"simple white space\", 2))\n\
    println(select_words(\"Hello world\", 4))\nprintln(select_words(\"Uncle sam\"\
    , 3))", "    # Step #1. \n    vec_words = split(s, r\"\\s+\") # r\"\\s+\" is a\
    \ regular expression where \"\\s\" means whitespace and \"+\" means \"1 or more\
    \ times\".\n    result = []\n    # Step #2. \n    for word in vec_words \n   \
    \     num_consonants = count_consonants(word)\n        if num_consonants == n\n\
    \            push!(result, word)\n        end\n    end\n    # Step #3. \n    return\
    \ result\nend", "    words = Vector{String}()\n    for i in eachmatch(r\"(\\w+)\"\
    , s)\n        word = match(r\"(\\w+)\", s)[i]\n        if count_consonants(word)\
    \ == n\n            push!(words, word)\n        end\n    end\n    return words\n\
    end", "    # Your code here\n    words = split(s)\n    cons = [\"B\", \"C\", \"\
    D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"\
    R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    res = []\n    for word\
    \ in words\n        ncons = 0\n        for letter in word\n            letter\
    \ = uppercase(letter)\n            if letter in cons\n                ncons +=\
    \ 1\n            end\n        end\n        if ncons == n\n            push!(res,\
    \ word)\n        end\n    end\n    return res\nend\n ", "    words = split(s,\
    \ \" \")\n    out = []\n    for w in words\n        if number_of_consonants(w)\
    \ == n\n            push!(out, w)\n        end\n    end\n    return out\nend",
  "    words = split(s)\n    result = []\n    for word in words\n        if count_consonants(word)\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    # we need to slice and convert to Vector each word, that's a \n   \
    \ # cleaner way than splitting and then searching, \n    # we also need to find\
    \ out how many consonants each word contains,\n    # that is what I tried to do\
    \ here:\n    # this function will return a vector of tuples of the form (word,\
    \ number of consonants)\n    function extract_nconsonants(s::String, n::Int64)::Vector{Tuple{String,\
    \ Int64}}\n        v = split(s, \" \")\n        consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n        for i in 1:length(v)\n\
    \            count = 0\n            for char in v[i]\n                if char\
    \ in consonants\n                    count += 1\n                end\n       \
    \     end\n            v[i] = (v[i], count)\n        end\n        return v\n \
    \   end\n    # now that we have this function, we need to return only the words\
    \ that contain exactly n consonants\n    v = extract_nconsonants(s, n)\n    answer\
    \ = []\n    for word in v\n        if word[2] == n\n            push!(answer,\
    \ word[1])\n        end\n    end\n    return answer\nend\nprintln(select_words(\"\
    Mary had a little lamb\", 4))\nprintln(select_words(\"Mary had a little lamb\"\
    , 3))\nprintln(select_words(\"simple white space\", 2))\nprintln(select_words(\"\
    Hello world\", 4))\nprintln(select_words(\"Uncle sam\", 3))", "    words = split(s,\
    \ \" \")\n    consonants(s::String) = length(s) - length(matchall(r\"[aeiouAEIOU]\"\
    , s))\n    return [w for w in words if consonants(w) == n]\nend", "    # check\
    \ input\n    if n < 0 \n        throw(DomainError(\"n must be positive!\"))\n\
    \    end\n    if s == \"\"\n        return String[]\n    end\n    # split string\
    \ and pick out words\n    words = split(s)\n    word_consonants = []\n    for\
    \ word in words\n        if length(word) - length(findall(r\"[aeiouAEIOU]\", word))\
    \ == n\n            push!(word_consonants, word)\n        end\n    end\n    return\
    \ word_consonants\nend", "    words_list = split(s)\n    result = []\n    for\
    \ word in words_list\n        if sum(is_letter.(collect(word))) - sum(is_vowel.(collect(word)))\
    \ == n\n            push!(result, word)\n        end\n    end\n    return result\n\
    end", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\n    # Return a Vector{String}\
    \ with all words in s that have n consanants\nend", "    words = split(s)\n  \
    \  result = []\n    for word in words\n        consonants = 0\n        for letter\
    \ in word\n            if ~ isvowel(letter)\n                consonants += 1\n\
    \            end\n        end\n        if consonants == n\n            push!(result,\
    \ word)\n        end\n    end\n    return result\nend", "    if s==\"\"\n    \
    \    return Vector{String}()\n    end\n    words=split(s)\n    d=Dict{String,Int64}()\n\
    \    for word in words\n        count=0\n        for ch in word\n            if\
    \ ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u' || ch=='y' || ch=='A' ||\
    \ ch=='E' || ch=='I' || ch=='O' || ch=='U' || ch=='Y'\n                continue\n\
    \            else\n                count+=1\n            end\n        end\n  \
    \      if count==n\n            d[word]=n\n        end\n    end\n    arr=Vector{String}()\n\
    \    for (key,value) in d\n        push!(arr,key)\n    end\n    return arr\nend",
  "    # your code goes here\n    return vcat()\nend", "    # YOUR CODE HERE\nend",
  "    words = split(s, r\"\\s+\")\n    result = []\n    for w in words\n        if\
    \ count_consonants(w) == n\n            push!(result, w)\n        end\n    end\n\
    \    return result\nend\n \nprintln(select_words(\"Mary had a little lamb\", 4))\n\
    println(select_words(\"Mary had a little lamb\", 3))\nprintln(select_words(\"\
    simple white space\", 2))\nprintln(select_words(\"Hello world\", 4))\nprintln(select_words(\"\
    Uncle sam\", 3))", "    # your code here\nend", "    # write your function here\n\
    end", "    words = split(s)\n    words_with_n_consonants = []\n    for word in\
    \ words\n        consonants = 0\n        for letter in word\n            if !(letter\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n                consonants +=\
    \ 1\n            end\n        end\n        if consonants == n\n            push!(words_with_n_consonants,\
    \ word)\n        end\n    end\n    return words_with_n_consonants\nend", "   \
    \ words = split(s, \" \")\n    v = Vector{String}()\n    for i in 1:length(words)\n\
    \        cnt = 0\n        for j in 1:length(words[i])\n            if (words[i][j]\
    \ in \"bcdfghjklmnpqrstvwxyz\")\n                cnt += 1\n            end\n \
    \       end\n        if (cnt == n)\n            push!(v, words[i])\n        end\n\
    \    end\n    return v\nend", "    v = split(s)\n    res = []\n    for i in 1:length(v)\n\
    \        if count_consonants(v[i]) == n\n            push!(res, v[i])\n      \
    \  end\n    end\n    return res\nend", "    words = split(s, r\"\\s+\")\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    function count_consonants(s::String)::Int64\n\
    \        counter = 0\n        for l in s\n            if l in consonants\n   \
    \             counter += 1\n            end\n        end\n        return counter\n\
    \    end\n    selected_words = Vector{String}()\n    for w in words\n        if\
    \ count_consonants(w) == n\n            push!(selected_words, w)\n        end\n\
    \    end\n    return selected_words\nend", "    out = []\n    for word in split(s)\n\
    \        nvowels = 0\n        for letter in word\n            if letter in [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n                nvowels += 1\n      \
    \      end\n        end\n        if nvowels == n\n            push!(out, word)\n\
    \        end\n    end\n    return out\nend", "    l = split(s, \" \")\n    for\
    \ i in l\n        temp = count_consonants(i)\n        if temp == n\n         \
    \   append!(final,i)\n        end\n    end\n    return final\nend", "    x = split(s)\n\
    \    m = []\n    for i = 1:length(x)\n        if length(consonants(x[i])) == n\n\
    \            m = [m, x[i]]\n        end\n    end\n    m\nend", "    words_consonants\
    \ = []\n    v = split(s)\n    for i in v\n        if i != \"\"\n            nc\
    \ = no_consonants(i)\n            if nc == n\n                push!(words_consonants,\
    \ i)\n            end\n        end\n    end\n    return words_consonants\nend",
  "    # If string s is empty\n    if s == \"\"\n        return []\n    end\n    #\
    \ If string s is not empty, create an empty vector and a flag\n    v = Vector{String}()\n\
    \    flag = 0\n    # Replace all spaces with ' ' character\n    replace(s, r\"\
    \\s+\" => \" \")\n    # Split string s to words, and iterate through them\n  \
    \  for word in split(s)\n        # iterate through each char in word\n       \
    \ for c in word\n            # if the char is a consonant, increase flag\n   \
    \         if c == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c ==\
    \ 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c\
    \ == 'X' || c == 'Y' || c == 'Z' || c == 'b' || c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z'\n                flag += 1\n\
    \            end\n        end\n        # if the number of consonants equals the\
    \ input number, push word to vector\n        if flag == n\n            push!(v,\
    \ word)\n        end\n        # if the number of consonants does not equal the\
    \ input number, do nothing\n        # reset flag to 0\n        flag = 0\n    end\n\
    \    # return vector\n    return v\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
