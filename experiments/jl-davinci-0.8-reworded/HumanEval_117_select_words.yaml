name: HumanEval_117_select_words
language: jl
prompt: "\"\"\"Given a string s and a natural number n, you have been tasked to implement\
  \ \n    a function that returns a vector of all words from string s that contain\
  \ exactly \n    n consonants, in order these words appear in the string s.\n   \
  \ If the string s is empty then the function should return an empty vector.\n  \
  \  Note: you may assume the input string contains only letters and spaces.\n   \
  \ Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
  ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
  ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
  Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n   \
  \ [\"Uncle\"]\n    \"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = select_words;\n\t@test(candidate(\"\
  Mary had a little lamb\", 4) == [\"little\"])\n\t@test(candidate(\"Mary had a little\
  \ lamb\", 3) == [\"Mary\", \"lamb\"])\n\t@test(candidate(\"simple white space\"\
  , 2) == Vector{String}([]))\n\t@test(candidate(\"Hello world\", 4) == [\"world\"\
  ])\n\t@test(candidate(\"Uncle sam\", 3) == [\"Uncle\"])\n\t@test(candidate(\"\"\
  , 4) == Vector{String}([]))\n\t@test(candidate(\"a b c d e f\", 1) == [\"b\", \"\
  c\", \"d\", \"f\"])\nend\n"
completions: ["    # search for words that have n consonants\n    return split(s)\
    \ |> filter((w) -> count_consonants(w) == n)\nend", "    words = split(s)\n  \
    \  result = []\n    for word in words\n        if count_consonants(word) == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    words = split(s)\n    m = length(words)\n    ans = Vector{String}()\n    for\
    \ i = 1:m\n        if count_consonants(words[i]) == n\n            append!(ans,\
    \ words[i])\n        end\n    end\n    return ans\nend", "    words = split(s,\
    \ r\"\\s+\")\n    keep = []\n    for word in words\n        if n_consonants(word)\
    \ == n\n            push!(keep, word)\n        end\n    end\n    return keep\n\
    end", "    #@assert !isempty(s)\n    #@assert n > 0\n    #@assert isalpha(s)\n\
    \    #@assert isspace(s)\n    s = replace(s, \" \" => \"\")\n    for i = 0:length(s)\n\
    \        for j = length(s):-1:i\n            sub_str = s[i:j]\n            if\
    \ length(regexp(r\"[A-Za-z]\", sub_str)) == n\n                #println(sub_str)\n\
    \            end\n        end\n    end\nend", "    result = Vector{String}()\n\
    \    words = split(s, \" \")\n    for word in words\n        consonants = 0\n\
    \        for letter in word\n            if isConsonant(letter)\n            \
    \    consonants += 1\n            end\n        end\n        if consonants == n\n\
    \            push!(result, word)\n        end\n    end\n    return result\nend",
  "    A = split(s, \" \")\n    B = Vector{String}(undef, 0)\n    for i in A\n   \
    \     if count_consonants(i) == n\n            push!(B, i)\n        end\n    end\n\
    \    return B\nend", "    num_cons = 0\n    words = []\n    aux = 0\n    cons\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n    for (i,\
    \ ch) in enumerate(s)\n        if ch in cons\n            num_cons += 1\n    \
    \    end\n        if ch == \" \"\n            if num_cons == n\n             \
    \   push!(words, s[aux+1:i-1])\n            end\n            num_cons = 0\n  \
    \          aux = i\n        end\n    end\n    if num_cons == n\n        push!(words,\
    \ s[aux+1:end])\n    end\n    return words\nend", "    words = split(s)\n    selected_words\
    \ = String[]\n    for word in words\n        consonants = 0\n        for letter\
    \ in word\n            if letter in 'bcdfghjklmnpqrstvwxyz'\n                consonants\
    \ += 1\n            end\n        end\n        if consonants == n\n           \
    \ push!(selected_words, word)\n        end\n    end\n    return selected_words\n\
    end", "    idx, elements = 1, []\n    while idx <= length(s)\n        word = match(r\"\
    \\w+\", s[idx:end])\n        idx += length(word) + 1\n        if length(matchall(r\"\
    [aeiou]\", word)) == n\n            push!(elements, word)\n        end\n    end\n\
    \    return elements\nend\nselect_words(\"Mary had a little lamb\", 4)", "   \
    \ words = split(s)\n    result = []\n    for w in words\n        c = count_consonants(w)\n\
    \        if c == n\n            push!(result, w)\n        end\n    end\n    return\
    \ result\nend", "    words = split(s)\n    result = []\n    for i in 1:length(words)\n\
    \        if count_consonants(words[i]) == n\n            push!(result, words[i])\n\
    \        end\n    end\n    return result\nend", "    numcons = Vector{Int64}()\n\
    \    counter = 0\n    start = 1\n    numcons = push!(numcons, 0)\n    for k in\
    \ eachindex(s)\n        if s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n\
    \            push!(numcons, counter)\n            counter = 0\n        elseif\
    \ !(s[k] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n            counter +=\
    \ 1\n        end\n    end\n    push!(numcons, counter)\n    my_vec = Vector{String}()\n\
    \    for i in 1:length(numcons)-1\n        if numcons[i] == n\n            push!(my_vec,\
    \ s[start:i-1])\n        end\n        start = i\n    end\n    my_vec\nend", " \
    \   \nend", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_strings\
    \ = split(s, r\"\\s+\")\n    curr_ans = []\n    for i in new_strings\n       \
    \ s_contains = 0\n        for j in i\n            if j in vowels\n           \
    \     s_contains += 1\n            end\n        end\n        if length(i) - s_contains\
    \ == n\n            push!(curr_ans, i)\n        end\n    end\n    return curr_ans\n\
    end", "    words = split(s)\n    result = []\n    for word in words\n        if\
    \ count_consonants(word) == n\n            push!(result, word)\n        end\n\
    \    end\n    return result\nend", "    words = split(s, ' ') \n    filtered_words\
    \ = []\n    for word in words\n        vowel_count = 0\n        for char in word\n\
    \            if is_vowel(char)\n                vowel_count += 1\n           \
    \ end\n        end\n        if vowel_count == n\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return filtered_words\nend", "    s = split(s)\n\
    \    filter(x -> count_consonants(x) == n, s)\nend", "    \n    v = split(s, r\"\
    \\s+\")\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for\
    \ i = 1:length(v)\n        count = 0\n        for j = 1:length(v[i])\n       \
    \     if occursin(lowercase(v[i][j]), consonants)\n                count += 1\n\
    \            end\n        end\n        if count == n\n            push!(result,\
    \ v[i])\n        end\n    end\n    return result\nend", "    vowel = \"aeiou\"\
    \n    result = []\n    words = split(s)\n    for i in words\n        if count_consonants(i)\
    \ == n\n            push!(result, i)\n        end\n    end\n    return result\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
