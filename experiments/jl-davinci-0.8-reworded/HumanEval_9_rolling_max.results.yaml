language: jl
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(length(numbers))\n    max = numbers[1]\n    result[1] =\
    \ max\n    for i in 2:length(numbers)\n        current = numbers[i]\n        if\
    \ current > max\n            max = current\n        end\n        result[i] = max\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpjlbijvgk.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpjlbijvgk.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjlbijvgk.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjlbijvgk.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjlbijvgk.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    window_max = zeros(Int64, length(numbers))\n    window_size = 0\n    for\
    \ i = 1:length(numbers)\n        while window_size > 0 && numbers[window_size]\
    \ <= numbers[i]\n            window_size -= 1\n        end\n        window_size\
    \ += 1\n        window_max[i] = numbers[window_size]\n    end\n    return window_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv143weyr.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpv143weyr.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [1, 1, 1, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv143weyr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv143weyr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv143weyr.jl:25\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 3, 2, 1] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv143weyr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv143weyr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv143weyr.jl:26\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 2, 3, 3, 3] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv143weyr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv143weyr.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    result = ones(Int64, N)\n    for i in 1:N\n \
    \       result[i] = max(numbers[1:i])\n    end\n    return result\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvx76pbsx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpvx76pbsx.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching max(::Vector{Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:137\n    max(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvx76pbsx.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvx76pbsx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx76pbsx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvx76pbsx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching max(::Vector{Int64})\n\
    \  Closest candidates are:\n    max(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvx76pbsx.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvx76pbsx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx76pbsx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvx76pbsx.jl:23\n  Test threw exception\n  Expression:\
    \ candida"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(length(numbers))\n    current_max = numbers[1]\n    result[1]\
    \ = current_max\n    for i = 2:length(numbers)\n        if numbers[i] > current_max\n\
    \            current_max = numbers[i]\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgnlue1nl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpgnlue1nl.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpgnlue1nl.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgnlue1nl.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgnlue1nl.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max = numbers[1]\n    result = [max]\n    for i in 2:length(numbers)\n\
    \        max = max(max, numbers[i])\n        push!(result, max)\n    end\n   \
    \ return result\nend\n \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0_syhqnf.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp0_syhqnf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0_syhqnf.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0_syhqnf.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0_syhqnf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0_syhqnf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0_syhqnf.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_syhqnf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_syhqnf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0_syhqnf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp0_syhqnf.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0_syhqnf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0_"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Initialise the result vector with first element from input\n    res\
    \ = [numbers[1]]\n    # The slice is initialised with two first elements: current\
    \ and previous maximum\n    slice = [numbers[1], numbers[1]]\n    # For each element\
    \ in the input vector\n    for num in numbers[2:end]\n        # If the new number\
    \ is greater than previous maximum,\n        # update the slice with previous\
    \ maximum and the new number\n        if num > slice[2]\n            slice = [slice[2],\
    \ num]\n        # Otherwise the previous maximum is enough\n        else\n   \
    \         slice = [slice[1], slice[2]]\n        end\n        # Push the previous\
    \ maximum to the result vector\n        push!(res, slice[1])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp296rlcdb.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp296rlcdb.jl:31\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp296rlcdb.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp296rlcdb.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp296rlcdb.jl:30\ntest set:\
    \ Test Failed at /tmp/tmp296rlcdb.jl:32\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [1, 1, 2, 3] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp296rlcdb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp296rlcdb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp296rlcdb.jl:34\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 3, 3, 3, 3] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp296rlcdb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp296rlcdb.jl:30\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     2      1      4\n"
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    max_so_far = -1\n\
    \    for (i, n) in enumerate(numbers)\n        max_so_far = max(max_so_far, n)\n\
    \        result[i] = max_so_far\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    roll_max = zeros(length(numbers))\n\
    \    roll_max[1] = numbers[1]\n    for i in 2:length(numbers)\n        roll_max[i]\
    \ = max(roll_max[i-1], numbers[i])\n    end\n    return roll_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpsgvthxg8.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpsgvthxg8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpsgvthxg8.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgvthxg8.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgvthxg8.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Init the array with the first element\n    out = [numbers[1]]\n    max\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        # We must keep the running\
    \ max\n        if max < numbers[i]\n            max = numbers[i]\n        end\n\
    \        # We append it at the end of the output\n        push!(out, max)\n  \
    \  end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4oxxd1uw.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp4oxxd1uw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp4oxxd1uw.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4oxxd1uw.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4oxxd1uw.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = ones(Int64, length(numbers))\n    max = 0\n    for i = 1:length(numbers)\n\
    \        result[i] = max(max, numbers[i])\n        max = result[i]\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi3yhexzk.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpi3yhexzk.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpi3yhexzk.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi3yhexzk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3yhexzk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi3yhexzk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpi3yhexzk.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi3yhexzk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3yhexzk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi3yhexzk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpi3yhexzk.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi3yhexzk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i = 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6xmm8hhf.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6xmm8hhf.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp6xmm8hhf.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xmm8hhf.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xmm8hhf.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(undef, length(numbers))\n    maximums[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\n\"\"\" From a given vector of integers, generate\
    \ a vector of rolling minimum element found until given moment\n    in the sequence.\n\
    \    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpl1_ukwgl.jl:14\nin expression starting at /tmp/tmpl1_ukwgl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # max_so_far\n    max_so_far = numbers[1]\n    # result = [max_so_far]\n\
    \    result = [max_so_far]\n    # iterate over the rest of the numbers\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] > max_so_far\n            max_so_far\
    \ = numbers[i]\n        end\n        push!(result, max_so_far)\n    end\n    #\
    \ return result\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptgm_v3yl.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptgm_v3yl.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptgm_v3yl.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptgm_v3yl.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptgm_v3yl.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    result[1] = numbers[1]\n\
    \    for idx in 2:length(numbers)\n        result[idx] = max(result[idx-1], numbers[idx])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpd_1v1ide.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpd_1v1ide.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpd_1v1ide.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd_1v1ide.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd_1v1ide.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Array{Int64}(undef, length(numbers))\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphjndblqs.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphjndblqs.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphjndblqs.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphjndblqs.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphjndblqs.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i = 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpof3ec2_6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpof3ec2_6.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpof3ec2_6.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpof3ec2_6.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpof3ec2_6.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    cur_max = numbers[1]\n    out = [cur_max]\n    for n in numbers[2:end]\n\
    \        if n > cur_max\n            cur_max = n\n        end\n        push!(out,\
    \ cur_max)\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo7lun82n.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpo7lun82n.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpo7lun82n.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo7lun82n.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo7lun82n.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    result[1] = numbers[1]\n\
    \    for i in 2:n\n        result[i] = max(result[i-1], numbers[i])\n    end\n\
    \    return result\nend\nrolling_max([1, 2, 3, 2, 3, 4, 2])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn04q1cfr.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpn04q1cfr.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpn04q1cfr.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn04q1cfr.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn04q1cfr.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    min_found = minimum(numbers)\n    output = zeros(Int64, length(numbers))\n\
    \    for i = 1:length(numbers)\n        if numbers[i] > min_found\n          \
    \  min_found = numbers[i]\n        end\n        output[i] = min_found\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdp95qse2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpdp95qse2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] rolling_max(numbers::Vector{Int64})\n      @ Main /tmp/tmpdp95qse2.jl:7\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpdp95qse2.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpdp95qse2.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    maximums = Vector{Int64}(undef, n)\n    maximums[1]\
    \ = numbers[1]\n    for i = 2:n\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxw4knfwe.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpxw4knfwe.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpxw4knfwe.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxw4knfwe.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxw4knfwe.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = zeros(length(numbers))\n    maximums[1] = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8ndlvepx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8ndlvepx.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8ndlvepx.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ndlvepx.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ndlvepx.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(length(numbers))\n    maximums[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd9o7ro87.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpd9o7ro87.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd9o7ro87.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9o7ro87.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9o7ro87.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpd9o7ro87.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd9o7ro87.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9o7ro87.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9o7ro87.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpd9o7ro87.jl:21\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Initialize answer to the same length as numbers.\n    ans = zeros(Int64,\
    \ length(numbers))\n    ans[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        ans[i] = max(ans[i-1], numbers[i])\n    end\n    return ans\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_eab9ywp.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_eab9ywp.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_eab9ywp.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_eab9ywp.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_eab9ywp.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(undef, length(numbers))\n    maximums[1] = numbers[1]\n\
    \    for (i, n) in enumerate(numbers[2:end])\n        if n > maximums[i]\n   \
    \         maximums[i+1] = n\n        else\n            maximums[i+1] = maximums[i]\n\
    \        end\n    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpoxu7fig3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpoxu7fig3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpoxu7fig3.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoxu7fig3.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoxu7fig3.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    retval = zeros(Int64, length(numbers))\n    retval[1] = numbers[1]\n \
    \   for i = 2:length(numbers)\n        retval[i] = max(retval[i-1], numbers[i])\n\
    \    end\n    return retval\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpvcjyx_2r.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvcjyx_2r.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpvcjyx_2r.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvcjyx_2r.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvcjyx_2r.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = Vector{Int64}(undef, length(numbers))\n    res[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        res[i] = max(res[i-1], numbers[i])\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwpqpmx77.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwpqpmx77.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwpqpmx77.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwpqpmx77.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwpqpmx77.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxima = zeros(length(numbers))\n    maxima[1] = numbers[1]\n    for index\
    \ in 2:length(numbers)\n        maxima[index] = max(maxima[index-1], numbers[index])\n\
    \    end\n    return maxima\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpc4_n9ykq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpc4_n9ykq.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpc4_n9ykq.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc4_n9ykq.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc4_n9ykq.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    ret = Vector{Int64}(length(numbers))\n    ret[1] = numbers[1]\n    for\
    \ i = 2:length(numbers)\n        ret[i] = max(ret[i-1], numbers[i])\n    end\n\
    \    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphvpc462a.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphvpc462a.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmphvpc462a.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvpc462a.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvpc462a.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphvpc462a.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmphvpc462a.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvpc462a.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvpc462a.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphvpc462a.jl:21\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979056
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = Array{Int64}(undef, length(numbers))\n    i = 1\n    max_element\
    \ = 0\n    for x in numbers\n        if x > max_element\n            max_element\
    \ = x\n        end\n        res[i] = max_element\n        i += 1\n    end\n  \
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    maxs = zeros(Int64, n)\n    maxs[1] = numbers[1]\n\
    \    for i in 2:n\n        maxs[i] = max(maxs[i-1], numbers[i])\n    end\n   \
    \ return maxs\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpkhqd3vhh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpkhqd3vhh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpkhqd3vhh.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkhqd3vhh.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkhqd3vhh.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_until_now = zeros(length(numbers))\n    max_until_now[1] = numbers[1]\n\
    \    for idx = 2:length(numbers)\n        if numbers[idx] > max_until_now[idx-1]\n\
    \            max_until_now[idx] = numbers[idx]\n        else\n            max_until_now[idx]\
    \ = max_until_now[idx-1]\n        end\n    end\n    return max_until_now\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp37xp5cw2.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp37xp5cw2.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp37xp5cw2.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp37xp5cw2.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp37xp5cw2.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    if length(numbers) < 1\n        return []\n    end\n    result = zeros(length(numbers))\n\
    \    max_so_far = numbers[1]\n    result[1] = max_so_far\n    for i in 2:length(numbers)\n\
    \        max_so_far = max(max_so_far, numbers[i])\n        result[i] = max_so_far\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxs = zeros(Int64, length(numbers))\n    maxs[1] = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        maxs[i] = max(maxs[i-1], numbers[i])\n    end\n\
    \    return maxs\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpaat5kw6x.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpaat5kw6x.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpaat5kw6x.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaat5kw6x.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaat5kw6x.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    m = numbers[1]\n\
    \    for i = 1:n\n        result[i] = m\n        m = max(m, numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuzsxjt80.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuzsxjt80.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpuzsxjt80.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuzsxjt80.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuzsxjt80.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpuzsxjt80.jl:22\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [1, 1, 2, 3] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzsxjt80.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzsxjt80.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuzsxjt80.jl:24\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 3, 3, 3, 100] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuzsxjt80.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuzsxjt80.jl:20\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     2      1      4\n"
  timestamp: 1659979056
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp00c1e4rh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp00c1e4rh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp00c1e4rh.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp00c1e4rh.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp00c1e4rh.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxima = zeros(length(numbers))\n    for i in 2:length(numbers)\n    \
    \    maxima[i] = max(maxima[i-1], numbers[i])\n    end\n    return maxima\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzvbontbq.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpzvbontbq.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [0, 2, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzvbontbq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzvbontbq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpzvbontbq.jl:20\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 3, 3, 3] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzvbontbq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzvbontbq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpzvbontbq.jl:21\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 2, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzvbontbq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzvbontbq.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = Vector{Int64}(undef, length(numbers))\n    maxes[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        maxes[i] = max(maxes[i-1], numbers[i])\n\
    \    end\n    return maxes\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpe5ykb9x8.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpe5ykb9x8.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpe5ykb9x8.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe5ykb9x8.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe5ykb9x8.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximum = numbers[1]\n    result = Vector{Int64}(undef,length(numbers))\n\
    \    result[1] = maximum\n    for (i, number) in enumerate(numbers[2:end])\n \
    \       if number > maximum\n            maximum = number\n        end\n     \
    \   result[i+1] = maximum\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpsvo4rwb_.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpsvo4rwb_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpsvo4rwb_.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsvo4rwb_.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsvo4rwb_.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    res = zeros(Int64, n)\n    max_elem = numbers[1]\n\
    \    res[1] = max_elem\n    for i = 2:n\n        if numbers[i] > max_elem\n  \
    \          max_elem = numbers[i]\n        end\n        res[i] = max_elem\n   \
    \ end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2zcgyyx8.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp2zcgyyx8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp2zcgyyx8.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2zcgyyx8.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2zcgyyx8.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    n = length(numbers)\n    output = zeros(Int64, n)\n    max_so_far\
    \ = -Inf\n    \n    for i in 1:n\n        max_so_far = max(max_so_far, numbers[i])\n\
    \        output[i] = max_so_far\n    end\n    \n    return output\nend\n# Test.\
    \ @testset \"rolling_max\" begin\n#     @test rolling_max([1, 2, 3, 2, 3, 4, 2])\
    \ == [1, 2, 3, 3, 3, 4, 4]\n#     @test rolling_max([2, 2, 2, 2, 2, 2, 2]) ==\
    \ [2, 2, 2, 2, 2, 2, 2]\n#     @test rolling_max([2, 1, 0, -1, 2, 3, 2]) == [2,\
    \ 2, 2, 2, 3, 3, 3]\n#     @test rolling_max([-1, -2, -3, -4, -5, -6, -7]) ==\
    \ [-1, -1, -1, -1, -1, -1, -1]\n#     @test rolling_max([2, 1, 0, -1, 2, -3, 2])\
    \ == [2, 2, 2, 2, 2, 2, 2]\n#     @test rolling_max([-1, -2, -3, -4, -5, -6, -7])\
    \ == [-1, -1, -1, -1, -1, -1, -1]\n#     @test rolling_max([-7, -6, -5, -4, -3,\
    \ -2, -1]) == [-7, -6, -5, -4, -3, -2, -1]\n#     @test rolling_max([0, 0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0]\n#     @test rolling_max([0, 0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0]\n#     @test rolling_max([0, 0, 0, 0, 0,\
    \ 0\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_element = numbers[1]\n    max_elements = [max_element]\n    for i\
    \ in 2:length(numbers)\n        element = numbers[i]\n        if element > max_element\n\
    \            max_element = element\n        end\n        push!(max_elements, max_element)\n\
    \    end\n    return max_elements\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn8n3kl4_.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpn8n3kl4_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpn8n3kl4_.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn8n3kl4_.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn8n3kl4_.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    res = fill(0, n)\n    res[1] = numbers[1]\n \
    \   max_found = numbers[1]\n    for i in 2:n\n        max_found = max(max_found,\
    \ numbers[i])\n        res[i] = max_found\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpgcnxbkfs.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpgcnxbkfs.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpgcnxbkfs.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgcnxbkfs.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgcnxbkfs.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    window = Deque{Int64}()\n    output = zeros(Int64, length(numbers))\n\
    \    for i in eachindex(numbers)\n        while !isempty(window) && numbers[window[end]]\
    \ < numbers[i]\n            pop!(window)\n        end\n        push!(window, i)\n\
    \        if i >= window[1]\n            output[i] = numbers[window[1]]\n     \
    \   end\n    end\n    return output\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7yje8cif.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp7yje8cif.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ Deque not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp7yje8cif.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7yje8cif.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7yje8cif.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp7yje8cif.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: Deque not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp7yje8cif.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7yje8cif.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7yje8cif.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp7yje8cif.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: Deque not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp7yje8cif.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7yje8cif.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7yje8cif.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp7yje8cif.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: Deque\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmp7yje8cif.jl:7"
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Array{Int64}(length(numbers))\n    for i in 1:length(numbers)\n\
    \        result[i] = maximum(numbers[1:i])\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsergv5at.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsergv5at.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpsergv5at.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsergv5at.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsergv5at.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsergv5at.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpser"
  timestamp: 1659979056
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    result[1] = numbers[1]\n\
    \    for i in 2:n\n        result[i] = max(result[i-1], numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0q97x0mn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0q97x0mn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0q97x0mn.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0q97x0mn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0q97x0mn.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Initialize output vector\n    rolling_max_vector = zeros(Int64, size(numbers)[1])\n\
    \    # Initialize maximum value found so far\n    current_max = 0\n    # Iterate\
    \ over the elements of the vector and update the rolling maximum\n    for i =\
    \ 1:size(numbers)[1]\n        if numbers[i] > current_max\n            current_max\
    \ = numbers[i]\n        end\n        rolling_max_vector[i] = current_max\n   \
    \ end\n    return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_maxes = Vector{Int64}(undef, length(numbers))\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngke2cv4.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngke2cv4.jl:1\n\
    in expression starting at /tmp/tmpngke2cv4.jl:1\n"
  stdout: ''
  timestamp: 1659979054
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = Array{Int64}(undef,\
    \ length(numbers))\n    result[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        result[i] = max(result[i-1], numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplkoayq63.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmplkoayq63.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmplkoayq63.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplkoayq63.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplkoayq63.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979057
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for (index, number) in enumerate(numbers[2:end])\n        result[index + 1]\
    \ = max(result[index], number)\n    end\n    return result\nend;\n \nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuyikhzab.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpuyikhzab.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpuyikhzab.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuyikhzab.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuyikhzab.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    result[1] = numbers[1]\n\
    \    for i in 2:n\n        result[i] = max(result[i-1], numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0q97x0mn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0q97x0mn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0q97x0mn.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0q97x0mn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0q97x0mn.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    mmax = similar(numbers)\n    global_max = numbers[1]\n\
    \    for i = 1:n\n        global_max = max(global_max, numbers[i])\n        mmax[i]\
    \ = global_max\n    end\n    return mmax\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpraf_porw.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpraf_porw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpraf_porw.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpraf_porw.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpraf_porw.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    current_max = numbers[1]\n\
    \    result[1] = current_max\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ > current_max\n            current_max = numbers[i]\n        end\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpqjhhitk6.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqjhhitk6.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqjhhitk6.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqjhhitk6.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqjhhitk6.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    vec = Vector{Int64}(undef, length(numbers))\n    vec[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] >= vec[i-1]\n         \
    \   vec[i] = numbers[i]\n        else\n            vec[i] = vec[i-1]\n       \
    \ end\n    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpacjd88ey.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpacjd88ey.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpacjd88ey.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpacjd88ey.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpacjd88ey.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    max_number = numbers[1]\n\
    \    result[1] = max_number\n    for i in 2:n\n        max_number = max(max_number,\
    \ numbers[i])\n        result[i] = max_number\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp7i9f2mes.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp7i9f2mes.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp7i9f2mes.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7i9f2mes.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7i9f2mes.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # A := Array(Int64, n)\n    n = length(numbers)\n    A = numbers\n   \
    \ # s := A[1]\n    s = A[1]\n    # for i in 2:n\n    for i in 2:n\n        # s\
    \ := max(s, A[i])\n        s = max(s, A[i])\n        # A[i] := s\n        A[i]\
    \ = s\n    end\n    return A\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw4sxf824.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpw4sxf824.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpw4sxf824.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw4sxf824.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw4sxf824.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(numbers)\n    result = Vector{Int64}(len)\n    result[1]\
    \ = numbers[1]\n    for i = 2:len\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmplr6ltgwz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmplr6ltgwz.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmplr6ltgwz.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplr6ltgwz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplr6ltgwz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplr6ltgwz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmplr6ltgwz.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplr6ltgwz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplr6ltgwz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmplr6ltgwz.jl:22\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979059
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return 0 == size(numbers, 1) ? numbers : [maximum(numbers[1:i]) for i\
    \ = 1:size(numbers, 1)]\nend\n \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979055
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximum = 0\n    for i in 1:length(numbers)\n        if numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        end\n        numbers[i] = maximum\n\
    \    end\n    return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    queue = [1] # queue of indices\n    maximum = zeros(Int64, length(numbers))\n\
    \    maximum[1] = numbers[1]\n    for i in 2:length(numbers)\n        while length(queue)\
    \ > 0 && numbers[queue[end]] < numbers[i]\n            pop!(queue)\n        end\n\
    \        push!(queue, i)\n        while queue[1] <= i - length(queue)\n      \
    \      shift!(queue)\n        end\n        maximum[i] = numbers[queue[1]]\n  \
    \  end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp3cp23vxm.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp3cp23vxm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp3cp23vxm.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3cp23vxm.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3cp23vxm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3cp23vxm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: shift!\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmp3cp23vxm.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3cp23vxm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3cp23vxm.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      2      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Array{Int64}(undef, length(numbers))\n    rolling_max[1]\
    \ = numbers[1]\n    rolling_max[2:end] = max.(rolling_max[1:end-1], numbers[2:end])\n\
    \    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpruuphr4b.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpruuphr4b.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpruuphr4b.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpruuphr4b.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpruuphr4b.jl:16\ntest set:\
    \ Test Failed at /tmp/tmpruuphr4b.jl:18\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [1, 2, 4294967301, 4] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruuphr4b.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruuphr4b.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpruuphr4b.jl:19\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 4, 8, 9] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruuphr4b.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpruuphr4b.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpruuphr4b.jl:20\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [3, 3, 47233866963584, 47233867233264,\
    \ 3] == [3, 3, 3, 100, 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpruuphr4b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/"
  timestamp: 1659979059
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = zeros(Int64, length(numbers))\n    j = 1\n    for i in 1:length(numbers)\n\
    \        if numbers[i] >= numbers[j]\n            j = i\n        end\n       \
    \ maxes[i] = numbers[j]\n    end\n    return maxes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp51bl1hvk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp51bl1hvk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp51bl1hvk.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp51bl1hvk.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp51bl1hvk.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = Vector{Int64}(undef, length(numbers))\n    current_max = numbers[1]\n\
    \    for (idx, val) in enumerate(numbers)\n        current_max = max(current_max,\
    \ val)\n        maxes[idx] = current_max\n    end\n    return maxes\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8_grqgri.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8_grqgri.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8_grqgri.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8_grqgri.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8_grqgri.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    running_max = 0\n    for (i,\
    \ x) in enumerate(numbers)\n        if x > running_max\n            running_max\
    \ = x\n        end\n        result[i] = running_max\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    (N,) = size(numbers)\n    maxima = zeros(Int64, N)\n    maxima[1] = numbers[1]\n\
    \    for i in 2:N\n        maxima[i] = max(maxima[i-1], numbers[i])\n    end\n\
    \    return maxima\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpp9xljfah.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpp9xljfah.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpp9xljfah.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp9xljfah.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp9xljfah.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    maxes = zeros(Int64, n)\n    for i in eachindex(numbers)\n\
    \        if i > 1\n            maxes[i] = max(maxes[i-1], numbers[i])\n      \
    \  else\n            maxes[i] = numbers[i]\n        end\n    end\n    return maxes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979056
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    pq = BoundedPriorityQueue{Int64}(undef, length(numbers))\n    result =\
    \ zeros(Int64, length(numbers))\n    for (i, n) in enumerate(numbers)\n      \
    \  push!(pq, n)\n        result[i] = first(pq)\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaqupn583.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpaqupn583.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ BoundedPriorityQueue not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpaqupn583.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqupn583.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqupn583.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpaqupn583.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: BoundedPriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpaqupn583.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqupn583.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqupn583.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpaqupn583.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: BoundedPriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpaqupn583.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaqupn583.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaqupn583.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpaqupn583.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: BoundedPriorityQueue\
    \ not defined\n  Stacktrace:\n   [1] rolling_m"
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_elements = [numbers[1]]\n    for i in 2:length(numbers)\n        max_elements\
    \ = push!(max_elements, max(max_elements[end], numbers[i]))\n    end\n    return\
    \ max_elements\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpggttgv5q.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpggttgv5q.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpggttgv5q.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpggttgv5q.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpggttgv5q.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979059
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    for i in 1:length(numbers)\n\
    \        result[i] = findmax(numbers[1:i])[1]\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979056
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    v = similar(numbers)\n    v[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        v[i] = max(v[i-1], numbers[i])\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplwcc1kjc.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmplwcc1kjc.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmplwcc1kjc.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplwcc1kjc.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplwcc1kjc.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    maximum = numbers[1]\n\
    \    rolling_max[1] = maximum\n    for (index, number) in enumerate(numbers[2:end])\n\
    \        maximum = max(maximum, number)\n        rolling_max[index + 1] = maximum\n\
    \    end\n    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo9c9ccrp.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo9c9ccrp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpo9c9ccrp.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo9c9ccrp.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo9c9ccrp.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    maxi = numbers[1]\n    result[1]\
    \ = maxi\n    for (i, e) in enumerate(numbers[2:end])\n        maxi = max(maxi,\
    \ e)\n        result[i+1] = maxi\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpqzs54yz6.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpqzs54yz6.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqzs54yz6.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqzs54yz6.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqzs54yz6.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    results = Vector{Int64}(undef, length(numbers))\n    results[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        results[i] = max(results[i-1], numbers[i])\n\
    \    end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpqowkx5sr.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpqowkx5sr.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpqowkx5sr.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqowkx5sr.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqowkx5sr.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    length = size(numbers, 1)\n    rolling_max = Vector{Int64}(length)\n \
    \   rolling_max[1] = numbers[1]\n    for i in 2:length\n        rolling_max[i]\
    \ = max(rolling_max[i-1], numbers[i])\n    end\n    return rolling_max\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpww5sowlx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpww5sowlx.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpww5sowlx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpww5sowlx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpww5sowlx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpww5sowlx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpww5sowlx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpww5sowlx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpww5sowlx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpww5sowlx.jl:22\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(length(numbers))\n    maximums[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd9o7ro87.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpd9o7ro87.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd9o7ro87.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9o7ro87.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9o7ro87.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpd9o7ro87.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd9o7ro87.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd9o7ro87.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd9o7ro87.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpd9o7ro87.jl:21\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979055
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    for i in 1:length(numbers)\n\
    \        result[i] = maximum(numbers[1:i])\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979056
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(size(numbers))\n    m = numbers[1]\n    result[1] = m\n\
    \    for i = 2:length(numbers)\n        m = max(m, numbers[i])\n        result[i]\
    \ = m\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmps7u1pl1b.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmps7u1pl1b.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmps7u1pl1b.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps7u1pl1b.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps7u1pl1b.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979060
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = []\n    current_max = -1\n    for i in 1:length(numbers)\n\
    \        current_max = max(current_max, numbers[i])\n        push!(maximums, current_max)\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979057
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Number of elements\n    n_element = length(numbers)\n    # Initialize\
    \ the output vector\n    numbers_max = zeros(Int64, n_element)\n    # Initialize\
    \ the maximum at position 0\n    current_max = numbers[1]\n    # Loop over numbers\n\
    \    for i in 1:n_element\n        # Get the current number\n        number =\
    \ numbers[i]\n        # If the current number is greater than the current maximum,\
    \ update the maximum\n        if number > current_max\n            current_max\
    \ = number\n        end\n        # Update the output vector\n        numbers_max[i]\
    \ = current_max\n    end\n    # Return the output vector\n    return numbers_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8ca2_k59.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp8ca2_k59.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8ca2_k59.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ca2_k59.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ca2_k59.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximum = numbers[1]\n    for i in 2:length(numbers)\n        if maximum\
    \ < numbers[i]\n            maximum = numbers[i]\n        end\n        numbers[i]\
    \ = maximum\n    end\n    return numbers\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprw7hx6qy.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmprw7hx6qy.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmprw7hx6qy.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprw7hx6qy.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprw7hx6qy.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_numbers = []\n    current_max = Int64(minimum(numbers))\n\
    \    for number in numbers\n        if number > current_max\n            push!(rolling_max_numbers,\
    \ number)\n            current_max = number\n        else\n            push!(rolling_max_numbers,\
    \ current_max)\n        end\n    end\n    return rolling_max_numbers\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuaeaq5jf.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpuaeaq5jf.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] rolling_max(numbers::Vector{Int64})\n      @ Main /tmp/tmpuaeaq5jf.jl:8\n\
    \   [18] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpuaeaq5jf.jl:24 [inlined]\n\
    \   [20] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpuaeaq5jf.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    m = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] >\
    \ m\n            m = numbers[i]\n        end\n        numbers[i] = m\n    end\n\
    \    return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpmrsbngdh.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpmrsbngdh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpmrsbngdh.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmrsbngdh.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmrsbngdh.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    result[1] = numbers[1]\n\
    \    for i in 2:n\n        result[i] = max(result[i-1], numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0q97x0mn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0q97x0mn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0q97x0mn.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0q97x0mn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0q97x0mn.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    maximums = zeros(Int64,\
    \ length(numbers))\n    maximums[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        maximums[i] = max(maximums[i-1], numbers[i])\n    end\n    return maximums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfygdwail.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpfygdwail.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpfygdwail.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfygdwail.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfygdwail.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = zeros(length(numbers))\n    max_i = 1\n    for i in 2:length(numbers)\n\
    \        if numbers[i] > numbers[max_i]\n            max_i = i\n        end\n\
    \        maxes[i] = numbers[max_i]\n    end\n    return maxes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcmhw8jjd.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpcmhw8jjd.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [0, 2, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhw8jjd.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhw8jjd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmhw8jjd.jl:24\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhw8jjd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhw8jjd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcmhw8jjd.jl:25\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 3, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmhw8jjd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmhw8jjd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979061
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = copy(numbers)\n    mx = 0\n    for i in 1:length(numbers)\n    \
    \    if numbers[i] >= mx\n            mx = numbers[i]\n        end\n        res[i]\
    \ = mx\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\" Rolling max is a cumulative function. This function is composed\
    \ with itself.\n    \"\"\"\n    return compose(rolling_max, rolling_max)(numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp99y5xrs6.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp99y5xrs6.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ compose not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp99y5xrs6.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99y5xrs6.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99y5xrs6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99y5xrs6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: compose not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp99y5xrs6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99y5xrs6.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99y5xrs6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99y5xrs6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: compose not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmp99y5xrs6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99y5xrs6.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99y5xrs6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99y5xrs6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: compose\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmp99y5x"
  timestamp: 1659979062
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    for i in eachindex(numbers)\n\
    \        result[i] = findmax(numbers[1:i])[1]\n    end\n    return result\nend;\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    size = length(numbers)\n    result = Vector{Int64}(undef, size)\n    result[1]\
    \ = numbers[1]\n    for i in 2:size\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp3obzb3ju.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp3obzb3ju.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp3obzb3ju.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3obzb3ju.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3obzb3ju.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Pre-allocate maximums vector\n    maximums = Int64[]\n    curr_max =\
    \ 1\n    push!(maximums, curr_max)\n    # Iterate over given vector\n    for i\
    \ in 2:length(numbers)\n        if numbers[i] > curr_max\n            curr_max\
    \ = numbers[i]\n        end\n        push!(maximums, curr_max)\n    end\n    #\
    \ Return result\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdde56wkn.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpdde56wkn.jl:26\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdde56wkn.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdde56wkn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdde56wkn.jl:28\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [1, 3, 3, 3] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdde56wkn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdde56wkn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdde56wkn.jl:29\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [1, 2, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdde56wkn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdde56wkn.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = Vector{Int64}(undef, length(numbers))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdrb3z5jq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdrb3z5jq.jl:1\n\
    in expression starting at /tmp/tmpdrb3z5jq.jl:1\n"
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = similar(numbers)\n    res[1] = numbers[1]\n    @inbounds for i =\
    \ 2:length(numbers)\n        res[i] = max(res[i-1], numbers[i])\n    end\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp9t6nbtav.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9t6nbtav.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp9t6nbtav.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t6nbtav.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t6nbtav.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = [numbers[1]]\n    for i = 2:length(numbers)\n        if numbers[i]\
    \ >= res[end]\n            push!(res, numbers[i])\n        else\n            push!(res,\
    \ res[end])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8e3n7nd0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp8e3n7nd0.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8e3n7nd0.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8e3n7nd0.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8e3n7nd0.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979062
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    output = zeros(Int64, length(numbers))\n    for i = 1:length(numbers)\n\
    \        if i == 1\n            output[i] = numbers[i]\n        else\n       \
    \     output[i] = max(output[i-1], numbers[i])\n        end\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979059
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    output = zeros(Int64, length(numbers))\n    counter = 0\n    for number\
    \ in numbers\n        if number > output[counter]\n            output[counter]\
    \ = number\n        end\n        counter += 1\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzkbzv5ph.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpzkbzv5ph.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzkbzv5ph.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzkbzv5ph.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzkbzv5ph.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzkbzv5ph.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpzkbzv5ph.jl:10\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzkbzv5ph.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzkbzv5ph.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzkbzv5ph.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpzkbzv5ph.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzkbzv5ph.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzkbzv5ph.jl:21\nTest Summary: "
  timestamp: 1659979062
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = similar(numbers)\n    result[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        result[i] = max(result[i-1], numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphyfgnt7r.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphyfgnt7r.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphyfgnt7r.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphyfgnt7r.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphyfgnt7r.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979062
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    output = zeros(Int64, length(numbers))\n    current_max = -Inf\n    for\
    \ i in 1:length(numbers)\n        if numbers[i] > current_max\n            current_max\
    \ = numbers[i]\n        end\n        output[i] = current_max\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = Int[]\n    push!(res, numbers[1])\n    for i in 2:length(numbers)\n\
    \        push!(res, max(res[end], numbers[i]))\n    end\n    return res\nend\n\
    # helper function\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphjfxurbx.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmphjfxurbx.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphjfxurbx.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphjfxurbx.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphjfxurbx.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979062
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    output = zeros(length(numbers))\n    maximum = -1\n    for i in 1:length(numbers)\n\
    \        if numbers[i] > maximum\n            maximum = numbers[i]\n        end\n\
    \        output[i] = maximum\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    max_n = 1\n    for i in 1:length(numbers)\n\
    \        if numbers[i] > max_n\n            max_n = numbers[i]\n        end\n\
    \        result[i] = max_n\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = []\n    maximum = 0\n    for number in numbers\n        maximum\
    \ = max(maximum, number)\n        push!(maximums, maximum)\n    end\n    return\
    \ maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = fill(numbers[1], length(numbers))\n    curr_max = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > curr_max\n          \
    \  curr_max = numbers[i]\n        end\n        maxes[i] = curr_max\n    end\n\
    \    return maxes\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2z_db88o.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp2z_db88o.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp2z_db88o.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2z_db88o.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2z_db88o.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Int64[]\n    max = 0\n    for i in 1:length(numbers)\n      \
    \  max = max(max, numbers[i])\n        push!(result, max)\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdcxoe3e2.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpdcxoe3e2.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdcxoe3e2.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcxoe3e2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcxoe3e2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdcxoe3e2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpdcxoe3e2.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcxoe3e2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcxoe3e2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdcxoe3e2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdcxoe3e2.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdcxoe3e2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdcxoe3e2.jl:19\nTest Summary: "
  timestamp: 1659979063
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(length(numbers))\n    result[1] = numbers[1]\n    for i\
    \ in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n   \
    \ end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4_ci2mp4.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp4_ci2mp4.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp4_ci2mp4.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4_ci2mp4.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4_ci2mp4.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximum = 0\n    vector_of_maximums = zeros(Int64, length(numbers))\n\
    \    for index in 1:length(numbers)\n        if numbers[index] > maximum\n   \
    \         maximum = numbers[index]\n        end\n        vector_of_maximums[index]\
    \ = maximum\n    end\n    return vector_of_maximums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979060
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = zeros(Int64, length(numbers))\n    maximums[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpn4g7uz2u.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpn4g7uz2u.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpn4g7uz2u.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn4g7uz2u.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn4g7uz2u.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_vec = zeros(length(numbers))\n    rolling_max_vec[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_vec[i] = max(rolling_max_vec[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0ns1d7ws.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp0ns1d7ws.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0ns1d7ws.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0ns1d7ws.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0ns1d7ws.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    M = Array{Int64}(undef, length(numbers))\n    M[1] = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        M[i] = max(M[i-1], numbers[i])\n    end\n  \
    \  return M\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwab0l7vl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwab0l7vl.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwab0l7vl.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwab0l7vl.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwab0l7vl.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp51bl1hvk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp51bl1hvk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp51bl1hvk.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp51bl1hvk.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp51bl1hvk.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Create empty vector to store results\n    result = Int64[]\n    # Create\
    \ an 'iterator' that starts at the first element\n    i = 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa0rzrn6q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0rzrn6q.jl:1\n\
    in expression starting at /tmp/tmpa0rzrn6q.jl:1\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    result = Vector{Int64}(undef, N)\n    m = numbers[1]\n\
    \    for (idx, number) in enumerate(numbers)\n        if number > m\n        \
    \    m = number\n        end\n        result[idx] = m\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpy1t2dvct.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpy1t2dvct.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpy1t2dvct.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy1t2dvct.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy1t2dvct.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979063
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    res = zeros(Int64, N)\n    for i in 1:N\n   \
    \     res[i] = maximum(numbers[1:i])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    mx = 0\n    for i = 1:length(numbers)\n\
    \        mx = max(mx, numbers[i])\n        result[i] = mx\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Vector of maximum element found so far\n    max_number_vec = Vector{Int64}(undef,\
    \ length(numbers))\n    max_number_vec[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        max_number_vec[i] = max(max_number_vec[i-1], numbers[i])\n    end\n \
    \   return max_number_vec\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpp4y8t6e2.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpp4y8t6e2.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpp4y8t6e2.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp4y8t6e2.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp4y8t6e2.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979064
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = [numbers[1]]\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ > result[end]\n            push!(result, numbers[i])\n        else\n       \
    \     push!(result, result[end])\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpa_vksh9q.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpa_vksh9q.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpa_vksh9q.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa_vksh9q.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa_vksh9q.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979064
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(length(numbers))\n    max_elem = 0\n    for i in 1:length(numbers)\n\
    \        max_elem = max(max_elem, numbers[i])\n        result[i] = max_elem\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(length(numbers))\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp80682_15.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp80682_15.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp80682_15.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80682_15.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80682_15.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp80682_15.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp80682_15.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80682_15.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80682_15.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp80682_15.jl:21\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_so_far = numbers[1]\n    current_max = max_so_far\n    for i in 2:length(numbers)\n\
    \        current_max = maximum(current_max, numbers[i])\n        max_so_far =\
    \ [max_so_far; current_max]\n    end\n    return max_so_far\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpdoi2p8sj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpdoi2p8sj.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdoi2p8sj.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdoi2p8sj.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdoi2p8sj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdoi2p8sj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:678\n   [5] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdoi2p8sj.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpdoi2p8sj.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpdoi2p8sj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdoi2p8sj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./"
  timestamp: 1659979065
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"\n    From a given vector of integers, generate a vector of rolling\
    \ maximum element found until given moment\n    in the sequence.\n    :param numbers:\
    \ vector of integers\n    :return: vector of rolling maximum found in sequence\n\
    \    \"\"\"\n    maximum = copy(numbers)\n    for i in 2:length(numbers)\n   \
    \     maximum[i] = max(maximum[i], maximum[i-1])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    res = Vector{Int64}(undef, N)\n    res[1] = numbers[1]\n\
    \    for i = 2:N\n        res[i] = max(res[i-1], numbers[i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2qst1ax1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp2qst1ax1.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp2qst1ax1.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2qst1ax1.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2qst1ax1.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    max_history = zeros(Int64, n)\n    for i in eachindex(numbers)\n\
    \        max_history[i] = max(max_history[i - 1], numbers[i])\n    end\n    return\
    \ max_history\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpk_07lwxj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_07lwxj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_07lwxj.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_07lwxj.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk_07lwxj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_07lwxj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpk_07lwxj.jl:10\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_07lwxj.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk_07lwxj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_07lwxj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt\
    \ to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_07lwxj.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk_07lwxj.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk_07lwxj.jl:18\nTest Summary: "
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    output = zeros(Int64, n)\n    output[1] = numbers[1]\n\
    \    for i in 2:n\n        output[i] = max(output[i-1], numbers[i])\n    end\n\
    \    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpfwek5bn7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpfwek5bn7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpfwek5bn7.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfwek5bn7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfwek5bn7.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_left = Int64[]\n    max_left_so_far = Int64[]\n    for i in 1:length(numbers)\n\
    \        if i == 1\n            push!(max_left, numbers[i])\n            push!(max_left_so_far,\
    \ numbers[i])\n        else\n            if numbers[i] > max_left_so_far[i-1]\n\
    \                push!(max_left, numbers[i])\n                push!(max_left_so_far,\
    \ numbers[i])\n            else\n                push!(max_left, max_left_so_far[i-1])\n\
    \                push!(max_left_so_far, max_left_so_far[i-1])\n            end\n\
    \        end\n    end\n    return max_left\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    maximums = Vector{Int64}(undef, n)\n    maximums[1]\
    \ = numbers[1]\n    for i = 2:n\n        maximums[i] = max(maximums[i-1], numbers[i])\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprohlg7k6.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmprohlg7k6.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmprohlg7k6.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprohlg7k6.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprohlg7k6.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = [numbers[1]]\n    for i = 2:length(numbers)\n        if numbers[i]\
    \ > result[end]\n            push!(result, numbers[i])\n        else\n       \
    \     push!(result, result[end])\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwvzl6owj.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpwvzl6owj.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwvzl6owj.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwvzl6owj.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwvzl6owj.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max = fill(numbers[1], length(numbers))\n    max[1] = numbers[1]\n   \
    \ for i in 2:length(numbers)\n        max[i] = max(max[i-1], numbers[i])\n   \
    \ end\n    return max\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwhnoksb0.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwhnoksb0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwhnoksb0.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwhnoksb0.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwhnoksb0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwhnoksb0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwhnoksb0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwhnoksb0.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwhnoksb0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwhnoksb0.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpwhnoksb0.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwhnoksb0.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwhnoksb0.jl:18\ntest set:\
    \ Error During Test at /t"
  timestamp: 1659979066
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(numbers)\n    result = zeros(Int64, len)\n    result[1] =\
    \ numbers[1]\n    for i in 2:len\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpskdi2zat.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpskdi2zat.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpskdi2zat.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpskdi2zat.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpskdi2zat.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    current_max = numbers[1]\n\
    \    result[1] = current_max\n    for i = 2:length(numbers)\n        current_max\
    \ = max(current_max, numbers[i])\n        result[i] = current_max\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5vpuo3pj.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp5vpuo3pj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp5vpuo3pj.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5vpuo3pj.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5vpuo3pj.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = zeros(Int64, size(numbers, 1))\n    max_found = numbers[1]\n\
    \    for (index, num) in enumerate(numbers)\n        if num > max_found\n    \
    \        max_found = num\n        end\n        maximums[index] = max_found\n \
    \   end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptorfqgog.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmptorfqgog.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptorfqgog.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptorfqgog.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptorfqgog.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = ones(Int64, length(numbers))\n    result[1] = numbers[1]\n  \
    \  for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp6lro7x7v.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6lro7x7v.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp6lro7x7v.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6lro7x7v.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6lro7x7v.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979066
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    result = Vector{Int64}(undef, N)\n    maximum\
    \ = -1\n    for i = 1:N\n        if numbers[i] > maximum\n            maximum\
    \ = numbers[i]\n        end\n        result[i] = maximum\n    end\n    return\
    \ result\nend\n \nconst input = readline(\"input.txt\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: SystemError: opening file \"input.txt\": No such file\
    \ or directory\nStacktrace:\n  [1] systemerror(p::String, errno::Int32; extrainfo::Nothing)\n\
    \    @ Base ./error.jl:174\n  [2] #systemerror#68\n    @ ./error.jl:173 [inlined]\n\
    \  [3] systemerror\n    @ ./error.jl:173 [inlined]\n  [4] open(fname::String;\
    \ lock::Bool, read::Nothing, write::Nothing, create::Nothing, truncate::Nothing,\
    \ append::Nothing)\n    @ Base ./iostream.jl:293\n  [5] open\n    @ ./iostream.jl:282\
    \ [inlined]\n  [6] open(f::Base.var\"#372#373\"{Bool}, args::String; kwargs::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ Base ./io.jl:328\n  [7] open\n\
    \    @ ./io.jl:328 [inlined]\n  [8] #readline#371\n    @ ./io.jl:503 [inlined]\n\
    \  [9] readline(filename::String)\n    @ Base ./io.jl:503\n [10] top-level scope\n\
    \    @ /tmp/tmpcynghoxo.jl:19\nin expression starting at /tmp/tmpcynghoxo.jl:19\n"
  stdout: ''
  timestamp: 1659979064
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = Array{Int64}(length(numbers))\n    res[1] = numbers[1]\n    for\
    \ i = 2:length(numbers)\n        res[i] = max(res[i-1], numbers[i])\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpenm8gt6o.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpenm8gt6o.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpenm8gt6o.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpenm8gt6o.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpenm8gt6o.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpenm8gt6o.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching (Array{Int64})(::Int64)\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling,\
    \ !Matched::Tuple{Int64, Int64}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    (Array{T})(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:AbstractMatrix{T})\
    \ where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:168\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpenm"
  timestamp: 1659979067
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    #The result vector\n    result = zeros(length(numbers))\n    #The current\
    \ maximum value\n    current_max = numbers[1]\n    #The current max index\n  \
    \  current_max_idx = 1\n    for i in 2:length(numbers)\n        number = numbers[i]\n\
    \        #If the current number is greater than the previous maximum, we have\
    \ a new max\n        if number > current_max\n            current_max = number\n\
    \            current_max_idx = i\n        end\n        #The result vector is populated\
    \ with the current max value\n        result[i] = current_max\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpsnh8v_ff.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpsnh8v_ff.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpsnh8v_ff.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsnh8v_ff.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsnh8v_ff.jl:29\ntest set:\
    \ Test Failed at /tmp/tmpsnh8v_ff.jl:31\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [0, 2, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnh8v_ff.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnh8v_ff.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpsnh8v_ff.jl:32\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnh8v_ff.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsnh8v_ff.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpsnh8v_ff.jl:33\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 3, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsnh8v_ff.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659979067
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    length(numbers) == 0 && return []\n    length(numbers) == 1 && return\
    \ numbers\n    max_so_far = numbers[1]\n    n = size(numbers, 1)\n    max_until_moment\
    \ = ones(Int64, n)\n    for i = 2:n\n        max_so_far = max(max_so_far, numbers[i])\n\
    \        max_until_moment[i] = max_so_far\n    end\n    return max_until_moment\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn9d5uwdg.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpn9d5uwdg.jl:25\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n   Evaluated: [1, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9d5uwdg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9d5uwdg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpn9d5uwdg.jl:26\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [1, 3, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9d5uwdg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9d5uwdg.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1659979066
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(numbers)\n        return Vector{Int64}()\n    end\n    result\
    \ = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        result[i] = max(result[i-1], numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979064
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, size(numbers, 1))\n    result[1] = numbers[1]\n\
    \    for index in 2:size(numbers, 1)\n        result[index] = max(result[index\
    \ - 1], numbers[index])\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp4u4xorcc.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp4u4xorcc.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp4u4xorcc.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4u4xorcc.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4u4xorcc.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979066
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    maximum = 0\n    for\
    \ i = 1:length(numbers)\n        if numbers[i] > maximum\n            maximum\
    \ = numbers[i]\n        end\n        result[i] = maximum\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979064
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    max_numbers = zeros(Int64, N)\n    max_numbers[1]\
    \ = numbers[1]\n    for i = 2:N\n        max_numbers[i] = max(max_numbers[i-1],\
    \ numbers[i])\n    end\n    return max_numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp2w_1lrmf.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp2w_1lrmf.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp2w_1lrmf.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2w_1lrmf.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2w_1lrmf.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979067
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(numbers)\n    res = zeros(Int64, len)\n    res[1] = numbers[1]\n\
    \    for i = 2:len\n        res[i] = max(res[i-1], numbers[i])\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_hwrxphw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_hwrxphw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_hwrxphw.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_hwrxphw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_hwrxphw.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979067
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    max_num = 0\n \
    \   for i in 1:n\n        if numbers[i] > max_num\n            max_num = numbers[i]\n\
    \        end\n        result[i] = max_num\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979064
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    results = Vector{Int64}(undef, length(numbers))\n    results[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        results[i] = max(results[i-1], numbers[i])\n\
    \    end\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpktkgfuo_.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpktkgfuo_.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpktkgfuo_.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpktkgfuo_.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpktkgfuo_.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979067
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    maximum = 0\n    for\
    \ i in 1:length(numbers)\n        if numbers[i] > maximum\n            maximum\
    \ = numbers[i]\n        end\n        result[i] = maximum\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    m = Vector{Int64}(undef, N)\n    m[1] = numbers[1]\n\
    \    for i in 2:N\n        m[i] = max(m[i-1], numbers[i])\n    end\n    return\
    \ m\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpw8xdp4i3.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpw8xdp4i3.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpw8xdp4i3.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw8xdp4i3.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw8xdp4i3.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979067
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = zeros(Int64, size(numbers))\n    m = 0\n    for i in 1:length(numbers)\n\
    \        m = max(m, numbers[i])\n        res[i] = m\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979065
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    vector_size = length(numbers)\n    result = Vector{Int64}(undef, vector_size)\n\
    \    current_max = numbers[1]\n    result[1] = current_max\n    for i in 2:vector_size\n\
    \        current_max = max(current_max, numbers[i])\n        result[i] = current_max\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0mfrna_n.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp0mfrna_n.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0mfrna_n.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0mfrna_n.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0mfrna_n.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(undef, length(numbers))\n    current_max = numbers[1]\n\
    \    for i in 1:length(numbers)\n        if current_max < numbers[i]\n       \
    \     current_max = numbers[i]\n        end\n        maximums[i] = current_max\n\
    \    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpo67327z9.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpo67327z9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpo67327z9.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo67327z9.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo67327z9.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    length(numbers) == 0 && return numbers\n    (1) == (1) && return [1]\n\
    \    result = [numbers[1]]\n    for number in numbers[2:end]\n        length(result)\
    \ == 0 && push!(result, number)\n        current_max = result[end]\n        current_max\
    \ < number && push!(result, number)\n        current_max >= number && push!(result,\
    \ current_max)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5dnu072.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpw5dnu072.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5dnu072.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5dnu072.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpw5dnu072.jl:25\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [1] == [4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw5dnu072.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw5dnu072.jl:22\ntest set: Test Failed at /tmp/tmpw5dnu072.jl:26\n\
    \  Expression: candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n   Evaluated:\
    \ [1] == [3, 3, 3, 100, 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5dnu072.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5dnu072.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = zeros(Int64, length(numbers))\n    max_until_now = 0\n    maxes[1]\
    \ = numbers[1]\n    for i in 2:length(numbers)\n        max_until_now = max(max_until_now,\
    \ numbers[i-1])\n        maxes[i] = max(max_until_now, numbers[i])\n    end\n\
    \    return maxes\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpb93fp5yy.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpb93fp5yy.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpb93fp5yy.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb93fp5yy.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb93fp5yy.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    max_value = zeros(Int64, n)\n    max_value[1]\
    \ = numbers[1]\n    for i in 2:n\n        max_value[i] = max(max_value[i-1], numbers[i])\n\
    \    end\n    return max_value\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_wt7hjae.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_wt7hjae.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_wt7hjae.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wt7hjae.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wt7hjae.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxes = Array{Int64}(undef, length(numbers))\n    maxes[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        maxes[i] = max(maxes[i-1], numbers[i])\n\
    \    end\n    return maxes\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp90swj_w7.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp90swj_w7.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp90swj_w7.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90swj_w7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90swj_w7.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    m = numbers[1]\n    ret = [m]\n    for i in 2:length(numbers)\n      \
    \  m = max(m, numbers[i])\n        append!(ret, m)\n    end\n    return ret\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpjsi6j13b.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjsi6j13b.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpjsi6j13b.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjsi6j13b.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjsi6j13b.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    res = zeros(Int64, N)\n    for i in 1:N\n   \
    \     res[i] = maximum(numbers[1:i])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979061
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = zeros(Int64, length(numbers))\n    res[1] = numbers[1]\n    for\
    \ i = 2:length(numbers)\n        res[i] = max(res[i-1], numbers[i])\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmphs1lgtrj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmphs1lgtrj.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmphs1lgtrj.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphs1lgtrj.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphs1lgtrj.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979068
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(numbers)\n    m = zeros(Int64, N)\n    for i = 1:N\n      \
    \  m[i] = maximum(numbers[1:i])\n    end\n    return m\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = ones(numbers)\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = max(rolling_max_list[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprbjgxnbd.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmprbjgxnbd.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching ones(::Vector{Int64})\n  Closest candidates are:\n    ones(!Matched::Type{T},\
    \ !Matched::Union{Integer, AbstractUnitRange}...) where T at ~/.conda/envs/polyglot/share/julia/base/array.jl:521\n\
    \    ones(!Matched::Tuple{Vararg{Union{Integer, AbstractUnitRange}}}) at ~/.conda/envs/polyglot/share/julia/base/array.jl:522\n\
    \    ones(!Matched::Type{T}, !Matched::Tuple{}) where T at ~/.conda/envs/polyglot/share/julia/base/array.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmprbjgxnbd.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbjgxnbd.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbjgxnbd.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprbjgxnbd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching ones(::Vector{Int64})\n\
    \  Closest candidates are:\n    ones(!Matched::Type{T}, !Matched::Union{Integer,\
    \ AbstractUnitRange}...) where T at ~/.conda/envs/polyglot/share/julia/base/array.jl:521\n\
    \    ones(!Matched::Tuple{Vararg{Union{Integer, AbstractUnitRange}}}) at ~/.conda/envs/polyglot/share/julia/base/array.jl:522\n\
    \    ones(!Matched::Type{T}, !Matched::Tuple{}) where T at ~/.conda/envs/polyglot/share/julia/base/array.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmprbjgxnbd.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbjgxnbd.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbjgxnbd.jl"
  timestamp: 1659979069
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    results = Vector{Int64}(undef, length(numbers))\n    current_max = Int64(0)\n\
    \    for index in eachindex(numbers)\n        current_max = max(current_max, numbers[index])\n\
    \        results[index] = current_max\n    end\n    return results\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979066
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    if length(numbers) == 0\n        return Int64[]\n    end\n    maxes =\
    \ [numbers[1]]\n    for i in 2:length(numbers)\n        push!(maxes, max(maxes[end],\
    \ numbers[i]))\n    end\n    return maxes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979066
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    if n == 0\n        return []\n    end\n    max_vect\
    \ = ones(Int64, n)\n    max_vect[1] = numbers[1]\n    for i in 2:n\n        max_vect[i]\
    \ = max(max_vect[i-1], numbers[i])\n    end\n    return max_vect\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp51bl1hvk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp51bl1hvk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp51bl1hvk.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp51bl1hvk.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp51bl1hvk.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp51bl1hvk.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp51bl1hvk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp51bl1hvk.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp51bl1hvk.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp51bl1hvk.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979058
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    output = zeros(Int64, size(numbers))\n    cur_max = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        output[i] = cur_max\n        cur_max = max(cur_max,\
    \ numbers[i])\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwvtrx0a8.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpwvtrx0a8.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpwvtrx0a8.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwvtrx0a8.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwvtrx0a8.jl:19\ntest set:\
    \ Test Failed at /tmp/tmpwvtrx0a8.jl:21\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [0, 1, 2, 3] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvtrx0a8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvtrx0a8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwvtrx0a8.jl:22\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 4, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvtrx0a8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvtrx0a8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwvtrx0a8.jl:23\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 3, 3, 3, 100] == [3, 3, 3, 100, 100]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvtrx0a8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/"
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = ones(length(numbers))\n    res[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        res[i] = max(res[i-1], numbers[i])\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpd9gndyno.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpd9gndyno.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9gndyno.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9gndyno.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9gndyno.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    ret = zeros(Int64, n)\n    maximum = 0\n    for\
    \ (i, x) in enumerate(numbers)\n        if x > maximum\n            maximum =\
    \ x\n        end\n        ret[i] = maximum\n    end\n    return ret\nend\n\"\"\
    \" From a given vector of integers, generate a vector of rolling minimum element\
    \ found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3,\
    \ 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpeay7i61m.jl:18\nin expression starting at /tmp/tmpeay7i61m.jl:18\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = fill(numbers[1], length(numbers))\n    for i in 2:length(numbers)\n\
    \        maximums[i] = max(maximums[i-1], numbers[i])\n    end\n    return maximums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnwbv46t7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpnwbv46t7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpnwbv46t7.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnwbv46t7.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnwbv46t7.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maxs = zeros(Int64, length(numbers))\n    maxs[1] = numbers[1]\n    for\
    \ i = 2:length(numbers)\n        maxs[i] = max(maxs[i-1], numbers[i])\n    end\n\
    \    return maxs\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmph27nchfu.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmph27nchfu.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmph27nchfu.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph27nchfu.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph27nchfu.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max = numbers[1]\n    output = Vector{Int64}(undef,length(numbers))\n\
    \    output[1] = max\n    for i = 2:length(numbers)\n        if numbers[i] >=\
    \ max\n            max = numbers[i]\n        end\n        output[i] = max\n  \
    \  end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpq1teeiww.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpq1teeiww.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpq1teeiww.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq1teeiww.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq1teeiww.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    result[1] = numbers[1]\n \
    \   for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend;\n \n \n\"\"\"\nGiven a vector of length N, generate\
    \ a matrix of size N x (N-1)\nfor which each row represents a sum of a given number\
    \ of elements\nfrom the input vector. For example, given vector [1, 2, 3, 4],\
    \ generate\n[[3, 4], [5, 6], [7, 8]] (i.e. [1+2, 2+3, 3+4] for N=2).\nFor N=3,\
    \ the result should be [[6, 7, 8], [9, 10, 11]] (i.e. [1+2+3, 2+3+4]).\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpn9cdfy_7.jl:16\nin expression starting at /tmp/tmpn9cdfy_7.jl:16\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    current_max = numbers[1]\n    output = [current_max]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] > current_max\n            current_max = numbers[i]\n \
    \       end\n        push!(output, current_max)\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8tnci0qd.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp8tnci0qd.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp8tnci0qd.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8tnci0qd.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8tnci0qd.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(length(numbers))\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp80682_15.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp80682_15.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp80682_15.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80682_15.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80682_15.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp80682_15.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp80682_15.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80682_15.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80682_15.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp80682_15.jl:21\n  Test threw exception\n  Expression:\
    \ candi"
  timestamp: 1659979065
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    maximum = 0\n    for i in\
    \ 1:length(numbers)\n        maximum = max(maximum, numbers[i])\n        result[i]\
    \ = maximum\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    top = 0\n   \
    \ rolling_max[1] = top\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ > top\n            top = numbers[i]\n        end\n        rolling_max[i] = top\n\
    \    end\n    return rolling_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp24yknu2m.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp24yknu2m.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp24yknu2m.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp24yknu2m.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp24yknu2m.jl:22\ntest set:\
    \ Test Failed at /tmp/tmp24yknu2m.jl:24\n  Expression: candidate([1, 2, 3, 4])\
    \ == [1, 2, 3, 4]\n   Evaluated: [0, 2, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24yknu2m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24yknu2m.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp24yknu2m.jl:25\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 3, 3, 3] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24yknu2m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24yknu2m.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp24yknu2m.jl:26\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 2, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24yknu2m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1659979071
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\n    #numbers = [1, 2, 3, 2, 3, 4, 2]\n    max_vector\
    \ = Array{Int64}(undef, length(numbers))\n    current_max = numbers[1]\n    for\
    \ (i, num) in enumerate(numbers)\n        if num > current_max\n            current_max\
    \ = num\n        end\n        max_vector[i] = current_max\n    end\n    return\
    \ max_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp3st2n7g4.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp3st2n7g4.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp3st2n7g4.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3st2n7g4.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3st2n7g4.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979070
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_till_now = 0\n    result = Int64[]\n    for i in 1:length(numbers)\n\
    \        n = numbers[i]\n        max_till_now = max(max_till_now, n)\n       \
    \ push!(result, max_till_now)\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_elements = Vector{Int64}(undef, length(numbers))\n    max_element\
    \ = numbers[1]\n    for i = 1:length(numbers)\n        max_element = max(max_element,\
    \ numbers[i])\n        max_elements[i] = max_element\n    end\n    return max_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp069umot6.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp069umot6.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp069umot6.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp069umot6.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp069umot6.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_maximums = Vector{Int64}(undef, length(numbers))\n    current_max\
    \ = numbers[1]\n    rolling_maximums[1] = current_max\n    for i in 2:length(numbers)\n\
    \        current_max = max(current_max, numbers[i])\n        rolling_maximums[i]\
    \ = current_max\n    end\n    return rolling_maximums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp_hfxgde1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_hfxgde1.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp_hfxgde1.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_hfxgde1.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_hfxgde1.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    maximums = Vector{Int64}(undef,length(numbers))\n    for i in 1:length(numbers)\n\
    \        maximums[i] = maximum(numbers[1:i])\n    end\n    return maximums\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    result = zeros(Int64, n)\n    result[1] = numbers[1]\n\
    \    for i in 2:n\n        result[i] = max(result[i-1], numbers[i])\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp0q97x0mn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0q97x0mn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmp0q97x0mn.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0q97x0mn.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0q97x0mn.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979055
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # initialize the rolling max vector to be the same as the input\n    rolling_max_vector\
    \ = numbers\n    vector_length = length(numbers)\n    for i in 2:vector_length\n\
    \        previous_rolling_max = rolling_max_vector[i-1]\n        current_number\
    \ = numbers[i]\n        rolling_max_vector[i] = max(previous_rolling_max, current_number)\n\
    \    end\n    return rolling_max_vector\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = zeros(size(numbers))\n    res[1] = numbers[1]\n    for i in 2:length(numbers)\n\
    \        res[i] = max(res[i-1], numbers[i])\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmptts4mzu2.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmptts4mzu2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptts4mzu2.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptts4mzu2.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptts4mzu2.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max_so_far = 0\n    result = zeros(Int64, length(numbers))\n    for (i,\
    \ v) in enumerate(numbers)\n        max_so_far = max(max_so_far, v)\n        result[i]\
    \ = max_so_far\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(numbers)\n    max_until_now = zeros(Int64, n)\n    current_max\
    \ = numbers[1]\n    for i in 1:n\n        current_max = max(current_max, numbers[i])\n\
    \        max_until_now[i] = current_max\n    end\n    return max_until_now\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpp6sbrh7v.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpp6sbrh7v.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpp6sbrh7v.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp6sbrh7v.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp6sbrh7v.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = zeros(Int64, length(numbers))\n    res[1] = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        res[i] = max(res[i-1], numbers[i])\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpeoiah3lq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpeoiah3lq.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpeoiah3lq.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeoiah3lq.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeoiah3lq.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    current_max = Int64(0)\n\
    \    for (i, number) in enumerate(numbers)\n        if number > current_max\n\
    \            current_max = number\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_maximums = [numbers[1]]\n    for (i, n) in enumerate(numbers[2:end])\n\
    \        if n >= rolling_maximums[end]\n            push!(rolling_maximums, n)\n\
    \        else\n            push!(rolling_maximums, rolling_maximums[end])\n  \
    \      end\n    end\n    return rolling_maximums\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpnqf6xhq3.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpnqf6xhq3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpnqf6xhq3.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnqf6xhq3.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnqf6xhq3.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979072
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdnhrwfqt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdnhrwfqt.jl:1\n\
    in expression starting at /tmp/tmpdnhrwfqt.jl:1\n"
  stdout: ''
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    length = length(numbers)\n    rolling_max = zeros(Int64, length)\n   \
    \ maximum = numbers[1]\n    for index in 2:length\n        if numbers[index] >\
    \ maximum\n            maximum = numbers[index]\n        end\n        rolling_max[index]\
    \ = maximum\n    end\n    return rolling_max\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpx0e6kbau.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpx0e6kbau.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpx0e6kbau.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx0e6kbau.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx0e6kbau.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx0e6kbau.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpx0e6kbau.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx0e6kbau.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx0e6kbau.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx0e6kbau.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main /tmp/tmpx0e6kbau.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx0e6kbau.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx0e6kbau.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpx0e6kbau.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpx0e6kbau."
  timestamp: 1659979072
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # First element is always the same\n    v = zeros(Int64, length(numbers))\n\
    \    v[1] = numbers[1]\n    for i in 2:length(numbers)\n        v[i] = max(v[i-1],\
    \ numbers[i])\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpdc0_2ddw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpdc0_2ddw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpdc0_2ddw.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdc0_2ddw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdc0_2ddw.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979071
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    max = 0\n    output = [max]\n    for i in 2:length(numbers)\n        number\
    \ = numbers[i]\n        max = number > max ? number : max\n        push!(output,\
    \ max)\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu1m8dnyi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpu1m8dnyi.jl:21\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1m8dnyi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1m8dnyi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu1m8dnyi.jl:22\n  Expression: candidate([1, 2, 3, 4]) == [1,\
    \ 2, 3, 4]\n   Evaluated: [0, 2, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1m8dnyi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1m8dnyi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu1m8dnyi.jl:23\n  Expression: candidate([4, 3, 2, 1]) == [4,\
    \ 4, 4, 4]\n   Evaluated: [0, 3, 3, 3] == [4, 4, 4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1m8dnyi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1m8dnyi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu1m8dnyi.jl:24\n  Expression: candidate([3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100]\n   Evaluated: [0, 2, 3, 100, 100] == [3, 3, 3, 100,\
    \ 100]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1m8dnyi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1m8dnyi.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    max_so_far = 0\n    for i\
    \ in 1:length(numbers)\n        if numbers[i] > max_so_far\n            max_so_far\
    \ = numbers[i]\n        end\n        result[i] = max_so_far\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979069
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    first_max = numbers[1]\n    current_max = first_max\n    result = Vector{Int64}(length(numbers))\n\
    \    result[1] = first_max\n    for i in 2:length(numbers)\n        if numbers[i]\
    \ > current_max\n            current_max = numbers[i]\n        end\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm3b1jmts.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm3b1jmts.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpm3b1jmts.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3b1jmts.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3b1jmts.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm3b1jmts.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpm3b1jmts.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm3b1jmts.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm3b1jmts.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm3b1jmts.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/jul"
  timestamp: 1659979073
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    rolling_max[1]\
    \ = numbers[1]\n    for (i, number) in enumerate(numbers[2:end])\n        rolling_max[i+1]\
    \ = max(rolling_max[i], number)\n    end\n    return rolling_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmprloe12a9.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmprloe12a9.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmprloe12a9.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprloe12a9.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprloe12a9.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979072
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    my_numbers = Vector{Int64}(undef,length(numbers))\n    my_numbers[1] =\
    \ numbers[1]\n    for i in 2:length(numbers)\n        my_numbers[i] = max(my_numbers[i-1],numbers[i])\n\
    \    end\n    return my_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpm3mv9ho5.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpm3mv9ho5.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpm3mv9ho5.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3mv9ho5.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3mv9ho5.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979072
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    current_max = numbers[1]\n\
    \    result[1] = current_max\n    for i in 2:length(numbers)\n        current_max\
    \ = max(current_max, numbers[i])\n        result[i] = current_max\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpar4eo3ou.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpar4eo3ou.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpar4eo3ou.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpar4eo3ou.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpar4eo3ou.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979072
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    res = zeros(Int64, length(numbers))\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxja1wulz.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxja1wulz.jl:1\n\
    in expression starting at /tmp/tmpxja1wulz.jl:1\n"
  stdout: ''
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = zeros(Int64, length(numbers))\n    for i in 1:length(numbers)\n\
    \        rolling_max_result[i] = maximum(numbers[1:i])\n    end\n    return rolling_max_result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Insert your code here\n    n = length(numbers)\n    ret = zeros(Int64,\
    \ n)\n    ret[1] = numbers[1]\n    for i in 2:n\n        ret[i] = max(ret[i-1],\
    \ numbers[i])\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpl_beuz6i.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpl_beuz6i.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpl_beuz6i.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl_beuz6i.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl_beuz6i.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979072
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    local_max = copy(numbers)\n    for i = 2:length(numbers)\n        local_max[i]\
    \ = max(local_max[i], local_max[i-1])\n    end\n    return local_max\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979070
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, length(numbers))\n    result[1] = numbers[1]\n\
    \    for i in 2:length(numbers)\n        result[i] = max(result[i-1], numbers[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpleb5lyax.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpleb5lyax.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] rolling_max(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpleb5lyax.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpleb5lyax.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpleb5lyax.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  timestamp: 1659979073
- exit_code: 1
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    result = zeros(Int64, length(numbers))\n    current_max = -1\n    for\
    \ (index, number) in enumerate(numbers)\n        current_max = max(current_max,\
    \ number)\n        result[index] = current_max\n    end\n    return result\nend;\n\
    from_vector_of_numbers_return_rolling_max = @benchmark rolling_max($test_numbers)\n\
    from_vector_of_numbers_return_rolling_max_median = median(from_vector_of_numbers_return_rolling_max.times)\
    \ / 1e6\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @benchmark not defined

    in expression starting at /tmp/tmpdj14k710.jl:15

    in expression starting at /tmp/tmpdj14k710.jl:15

    '
  stdout: ''
  timestamp: 1659979071
- exit_code: 0
  program: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    ans = zeros(Int64, length(numbers))\n    maximum = -1\n    for i in 1:length(numbers)\n\
    \        maximum = max(maximum, numbers[i])\n        ans[i] = maximum\n    end\n\
    \    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979071
