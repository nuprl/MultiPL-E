name: HumanEval_57_monotonic
language: jl
prompt: "\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
  \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
  \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\nfunction monotonic(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
  \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
  \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
  \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
completions: ["    v = l[1]\n    for i in 2:length(l)\n        if v > l[i]\n     \
    \       v = l[i]\n        elseif v < l[i]\n            v = l[i]\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "    is_monotonic\
    \ = true\n    for i in 2:length(l)\n        if l[i] < l[i-1]\n            is_monotonic\
    \ = false\n            break\n        end\n    end\n    return is_monotonic\n\
    end", "    if length(l) <= 1\n        return true\n    end\n    diff = l[2:end]\
    \ - l[1:end-1]\n    if (all(diff .> 0) || all(diff .< 0))\n        return true\n\
    \    else\n        return false\n    end\nend", "    diffs = l[2:end] - l[1:end-1]\n\
    \    return (all(diffs .>= 0) || all(diffs .<= 0))\nend", "    return l[1] < l[end]\
    \ ? isincreasing(l) : isdecreasing(l)\nend", "  n = length(l)\n  for i in 1:n-1\n\
    \    if l[i] != l[i+1]\n      break\n    end\n  end\n  if i == n-1\n    return\
    \ true\n  end\n  diff = sign(l[i+1] - l[i])\n  for i in i+1:n-1\n    if sign(l[i+1]\
    \ - l[i]) != diff\n      return false\n    end\n  end\n  return true\nend", " \
    \   if length(l) < 2\n        error(\"Less than 2 elements\")\n    end\n    dir\
    \ = sign(l[2] - l[1])\n    for i in 2:length(l)-1\n        if sign(l[i+1] - l[i])\
    \ != dir\n            return false\n        end\n    end\n    return true\nend",
  "    inc = l[1] < l[2]\n    for i in 2:length(l)-1\n        if inc\n           \
    \ if l[i] > l[i+1]\n                return false\n            end\n        else\n\
    \            if l[i] < l[i+1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    return isequal(sort(l), l)\
    \ || isequal(sort(l, rev=true), l)\nend", "    if length(l) == 1\n        return\
    \ true\n    end\n    if isincreasing(l) || isdecreasing(l)\n        return true\n\
    \    else\n        return false\n    end\nend", "    # NOTE: this is not the most\
    \ efficient way to do this, but it is short.\n    return all(l[i] <= l[i+1] for\
    \ i in 1:length(l)-1) ||\n           all(l[i] >= l[i+1] for i in 1:length(l)-1)\n\
    end\nmonotonic([1, 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0,\
    \ -10])", "    return isincreasing(l) || isdecreasing(l)\nend", "    t = Vector{Int64}()\n\
    \    for i in 1:length(l)-1\n        if l[i]<l[i+1]\n            append!(t,1)\n\
    \        elseif l[i]>l[i+1]\n            append!(t,-1)\n        else\n       \
    \     append!(t,0)\n        end\n    end\n    if all(t.==1) || all(t.==-1) ||\
    \ all(t.==0)\n        return true\n    else\n        return false\n    end\nend\n\
    \    \n    \n\"\"\"Return false if there are duplicate values in list.\n    >>>\
    \ unique([1, 2, 4, 20])\n    true\n    >>> unique([1, 20, 4, 10, 20])\n    false\n\
    \    >>> unique([4, 1, 0, -10])\n    true\n    \"\"\"", "  if length(l) < 2 \n\
    \    return true\n  end\n  if l[2] > l[1] \n    return monotonic_inc(l)\n  else\n\
    \    return monotonic_dec(l)\n  end\nend", "  diff = Float64[]\n  for i = 1:length(l)-1\n\
    \    push!(diff,l[i+1]-l[i])\n  end\n  #if max(diff) < 0\n  #  return false\n\
    \  #else\n  #  return true\n  #end\n  return all(x -> x >= 0, diff) || all(x ->\
    \ x <= 0, diff)\nend", "    if length(l) <= 1 \n        return true\n    end\n\
    \    if l[1] < l[2]\n        for i = 2:length(l)-1\n            if l[i] >= l[i+1]\n\
    \                return false\n            end\n        end\n    elseif l[1] >\
    \ l[2]\n        for i = 2:length(l)-1\n            if l[i] <= l[i+1]\n       \
    \         return false\n            end\n        end\n    end\n    return true\n\
    end", "    if length(l) <= 1\n        return true\n    end\n    if l[2] > l[1]\n\
    \        for i in 2:length(l)\n            if l[i] <= l[i-1]\n               \
    \ return false\n            end\n        end\n    elseif l[2] < l[1]\n       \
    \ for i in 2:length(l)\n            if l[i] >= l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    if\
    \ length(l) < 2\n        return true\n    end\n    return (all(x -> x > last(l),\
    \ l[1:end-1]) || all(x -> x < last(l), l[1:end-1]))\nend", "    dif = diff(l)\n\
    \    return all(dif.<0) || all(dif.>0)\nend\n\"\"\"Return true is vector elements\
    \ are strictly monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    false\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    false\n    >>> monotonic([1, 2, 4, 5])\n    true\n\
    \    >>> monotonic([5, 4, 3, 1])\n    true\n    \"\"\"", "    return (l[1] < l[2])\
    \ && all(l[1:end-1] .< l[2:end])\nend", "    for i in 2:length(l)\n        if\
    \ l[i] > l[i-1] || l[i] < l[i-1]\n            return false\n        end\n    end\n\
    \    return true\nend", "    direction = 0\n    for i in 2:length(l)\n       \
    \ if l[i] > l[i-1]\n            if direction == 0\n                direction =\
    \ 1\n            elseif direction == -1\n                return false\n      \
    \      end\n        elseif l[i] < l[i-1]\n            if direction == 0\n    \
    \            direction = -1\n            elseif direction == 1\n             \
    \   return false\n            end\n        end\n    end\n    return true\nend",
  "    if length(l) > 1\n        if l[1] > l[2]\n            return all(l[i] > l[i+1]\
    \ for i in 1:length(l)-1)\n        elseif l[1] < l[2]\n            return all(l[i]\
    \ < l[i+1] for i in 1:length(l)-1)\n        else\n            return false\n \
    \       end\n    else \n        return true\n    end\nend", "    if length(l)\
    \ == 1\n        return true\n    end\n    if l[1] &lt; l[2]\n        return all(x-&gt;x&gt;=l[1],\
    \ l)\n    else\n        return all(x-&gt;x&lt;=l[1], l)\n    end\nend", "    return\
    \ (l[1] > l[end]) ? \n        all(l[i] > l[i+1] for i in 1:length(l)-1) : \n \
    \       all(l[i] < l[i+1] for i in 1:length(l)-1)\nend", "    if length(l) ==\
    \ 1\n        return true\n    end\n    if all(sign.(diff(l)) .== l[2] - l[1])\n\
    \        return true\n    else\n        return false\n    end\nend", "    \"\"\
    \"For integer vectors\"\"\"\n    if length(l) &lt;= 1\n        return true\n \
    \   end\n    inc = (l[2] &gt; l[1])\n    for i in 2:length(l)-1\n        if (l[i+1]\
    \ &gt; l[i]) != inc\n            return false\n        end\n    end\n    return\
    \ true\nend", "    for i = 1:length(l)-1\n        if l[i] == l[i+1]\n        \
    \    return false\n        end\n    end\n    return true\nend", "    diffs = map(x\
    \ -> x[2] - x[1], zip(l[1:end-1], l[2:end]))\n    return all(x -> x > 0, diffs)\
    \ || all(x -> x < 0, diffs)\nend", "    for (x, y) in zip(l[1:end-1], l[2:end])\n\
    \        if x > y\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if length(l) < 2\n        return true\n    end\n    change\
    \ = (l[1] - l[2])\n    for i in 2:length(l)-1\n        if change*(l[i] - l[i+1])\
    \ < 0\n            return false\n        end\n    end\n    return true\nend",
  "    is_increasing = l[1] < l[2]\n    if is_increasing\n        last_number = l[1]\n\
    \        for i in 2:length(l)\n            if last_number > l[i]\n           \
    \     return false\n            end\n            last_number = l[i]\n        end\n\
    \    else\n        last_number = l[1]\n        for i in 2:length(l)\n        \
    \    if last_number < l[i]\n                return false\n            end\n  \
    \          last_number = l[i]\n        end\n    end\n    return true\nend", " \
    \   return (l[1] < l[2]) == (l[2] < l[3])\nend", "    l = sort(l)\n    return\
    \ isequal(l, reverse(l))\nend", "    return all(i -> l[i] &lt;= l[i+1], 1:length(l)-1)\
    \ || all(i -> l[i] &gt;= l[i+1], 1:length(l)-1)\nend", "    if length(l) <= 1\n\
    \        return true\n    end\n    if l[1] < l[2]\n        for i = 1:length(l)-1\n\
    \            if l[i] > l[i+1]\n                return false\n            end\n\
    \        end\n    elseif l[1] > l[2]\n        for i = 1:length(l)-1\n        \
    \    if l[i] < l[i+1]\n                return false\n            end\n       \
    \ end\n    end\n    return true\nend", "    differences = l[2:end] - l[1:end-1]\n\
    \    return all(differences .>= 0) || all(differences .<= 0)\nend", "    diffs\
    \ = diff(l)\n    if isequal(diffs, sort(diffs))\n        return true\n    else\n\
    \        return false\n    end\nend", "    if length(l) <= 1 \n        return\
    \ true\n    end \n    if l[1] <= l[2]\n        return all( l[i] <= l[i+1] for\
    \ i in 1:length(l)-1 )\n    else\n        return all( l[i] >= l[i+1] for i in\
    \ 1:length(l)-1 )\n    end\nend", "    n = length(l)\n    if n == 1\n        return\
    \ true\n    end\n    increasing = l[2] > l[1]\n    for i in 2:n\n        if l[i]\
    \ == l[i-1]\n            continue\n        end\n        if l[i] > l[i-1] != increasing\n\
    \            return false\n        end\n    end\n    return true\nend\nmonotonic([1,\
    \ 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0, -10])\n ", "    #\
    \ checks to see if elements are monotonically increasing or decreasing\n    n\
    \ = length(l)\n    if n == 1 \n        return true\n    elseif l[1] < l[2]\n \
    \       for i in 2:n-1\n            if l[i] > l[i+1]\n                return false\n\
    \            end\n        end\n        return true\n    else\n        for i in\
    \ 2:n-1\n            if l[i] < l[i+1]\n                return false\n        \
    \    end\n        end\n        return true\n    end\nend", "    for i in 2:length(l)\n\
    \        if (l[i-1] &gt; l[i]) != (l[1] &gt; l[2])\n            return false\n\
    \        end\n    end\n    return true\nend\n</code>\nThis will return true if\
    \ the vector is both increasing and decreasing. The definition of monotonic also\
    \ allows this, but it might be better to check <code>l[1] &lt; l[2]</code> instead\
    \ of <code>l[1] &gt; l[2]</code>.\n", "    if any(i->l[i]<l[i-1],2:length(l))\n\
    \        return false\n    else\n        return true\n    end\nend\n \n\"\"\"\
    Return the number of strictly monotonic vectors of length n with elements between\
    \ 0 and c.\n    >>> card_monotonic_vectors(3,3)\n    9\n    >>> card_monotonic_vectors(4,4)\n\
    \    15\n    >>> card_monotonic_vectors(4,6)\n    35\n    \"\"\"", "    if(length(l)\
    \ <= 1)\n        return true\n    end\n    i = 2\n    if(l[i] > l[i-1])\n    \
    \    for i = 2:length(l)\n            if(l[i] < l[i-1])\n                return\
    \ false\n            end\n        end\n    elseif(l[i] < l[i-1])\n        for\
    \ i = 2:length(l)\n            if(l[i] > l[i-1])\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    sorted(l)\
    \ == l || sorted(l, rev=true) == l\nend", "    all(x -> x[1] <= x[2], pairs(l))\
    \ || all(x -> x[1] >= x[2], pairs(l))\nend", "    t = l[1] == l[2] ? 0 : l[1]\
    \ < l[2] ? 1 : -1\n    for i in 2:length(l)-1\n        if l[i] == l[i+1] continue\
    \ end\n        if t*(l[i]-l[i+1]) < 0\n            return false\n        end\n\
    \    end\n    return true\nend\n    \n# NOT WORKING\n\"\"\"Return true is vector\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    s = sort(l)\n    s ==\
    \ l || s == reverse(l)\nend", "    is_dec = true\n    is_inc = true\n    for i\
    \ in 1:length(l)-1\n        is_dec = is_dec && l[i] >= l[i+1]\n        is_inc\
    \ = is_inc && l[i] <= l[i+1]\n    end\n    return is_dec || is_inc\nend", "  \
    \  if l[1] > l[end]\n        isMonotonic = l[2:end] .<= l[1:end-1]\n    else\n\
    \        isMonotonic = l[2:end] .>= l[1:end-1]\n    end\n    return all(isMonotonic)\n\
    end", "    first_element = l[1]\n    monotonic_increasing = true\n    monotonic_decreasing\
    \ = true\n    for e in l\n        if e < first_element\n            monotonic_increasing\
    \ = false\n        elseif e > first_element\n            monotonic_decreasing\
    \ = false\n        end\n    end\n    return monotonic_increasing || monotonic_decreasing\n\
    end", "    return all(diff(l) .>= 0) || all(diff(l) .<= 0)\nend", "    i, ln =\
    \ 1, length(l)\n    if ln <= 1\n        return true\n    end\n    # First direction\n\
    \    if l[1] < l[2]\n        direction = true\n    elseif l[1] > l[2]\n      \
    \  direction = false\n    else\n        return false\n    end\n    for i in 3:ln\n\
    \        if direction && l[i-1] > l[i]\n            return false\n        elseif\
    \ !direction && l[i-1] < l[i]\n            return false\n        end\n    end\n\
    \    return true\nend", "    if length(l) == 1 \n        return true\n    end\n\
    \    if l[1] <= l[2] \n        for i in 1:length(l)-1\n            if l[i] > l[i+1]\n\
    \                return false\n            end\n        end\n    else \n     \
    \   for i in 1:length(l)-1\n            if l[i] < l[i+1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    is_increasing\
    \ = l[2] > l[1]\n    if is_increasing\n        prev = l[1]\n        is_increasing\
    \ = all([prev < elem for elem in l[2:end]])\n    else\n        prev = l[1]\n \
    \       is_increasing = all([prev > elem for elem in l[2:end]])\n    end\n   \
    \ return is_increasing\nend", "    if length(l) < 2 return true end\n    increase\
    \ = l[2] > l[1]\n    for i in 2:length(l)-1\n        if increase\n           \
    \ if l[i+1] < l[i] return false end\n        else\n            if l[i+1] > l[i]\
    \ return false end\n        end\n    end\n    return true\nend", "    return ((l[1]\
    \ < l[2]) & (monotonic(l[2:end]))) | \n        ((l[1] > l[2]) & (monotonic(l[2:end])))\
    \ | (length(l) == 1)\nend", "    n = length(l)\n    i = 1\n    s = sign(l[2] -\
    \ l[1])\n    for i = 2:n-1\n        if(s != sign(l[i+1] - l[i]))\n           \
    \ return false\n        end\n    end\n    return true\nend", "    if length(l)\
    \ == 1 \n        return true\n    end\n    if l[2] > l[1]\n        for i = 2:length(l)\n\
    \            if l[i] < l[i-1]\n                return false\n            end\n\
    \        end\n    else\n        for i = 2:length(l)\n            if l[i] > l[i-1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    return (length(l) == 0) || all(l[i] <= l[i+1] for i = 1:length(l)-1)\
    \ || all(l[i] >= l[i+1] for i = 1:length(l)-1)\nend", "    return all(i -> i-1\
    \ == 0 ? true : i == 0 ? true : i - 1 == l[i-1], 2:length(l))\nend", "    return\
    \ l == sort(l) || l == sort(l, rev=true)\nend", "    # use first two elements\
    \ to define monotonicity\n    if l[1] &lt; l[2]\n        for i in l[2:end]\n \
    \           if i &lt; l[i - 1]\n                return false\n            end\n\
    \        end\n    else\n        for i in l[2:end]\n            if i &gt; l[i -\
    \ 1]\n                return false\n            end\n        end\n    end\n  \
    \  return true\nend", "    if length(l) < 2 return true end\n    if l[2] - l[1]\
    \ > 0\n        @assert ((l[i+1] - l[i]) >= 0 for i in 2:length(l)-1)\n    else\n\
    \        @assert ((l[i+1] - l[i]) <= 0 for i in 2:length(l)-1)\n    end\n    return\
    \ true\nend", "    b = diff(l) .>= 0\n    all(b) || all(.!b)\nend", "    return\
    \ (all(l[i] < l[i+1] for i=1:length(l)-1) || all(l[i] > l[i+1] for i=1:length(l)-1))\n\
    end", "    if (l[1] < l[2])\n        for i = 1:length(l)-1\n            if (l[i]\
    \ > l[i+1])\n                return false\n            end\n        end\n    elseif\
    \ (l[1] > l[2])\n        for i = 1:length(l)-1\n            if (l[i] < l[i+1])\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    (min(l) == l[1] && sorted(l) == l) || (max(l) == l[1] && sort(l,\
    \ rev=true) == l)\nend", "    idx = 1\n    rev = true\n    if (l[1] > l[2])\n\
    \        rev = false\n    end\n    for i in 2:length(l)-1\n        if ((rev &&\
    \ l[i] <= l[i+1]) || (!rev && l[i] >= l[i+1]))\n            idx += 1\n       \
    \ else\n            break\n        end\n    end\n    if (idx == length(l))\n \
    \       return true\n    else\n        return false\n    end\nend", "    @assert\
    \ length(l) >= 2 \"sequence must have at least two elements\"\n    if l[1] < l[2]\n\
    \        for i = 2:length(l)-1\n            if l[i] >= l[i+1]\n              \
    \  return false\n            end\n        end\n    else\n        for i = 2:length(l)-1\n\
    \            if l[i] <= l[i+1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    cmp = l[1] <=> l[2]\n    for\
    \ i in 3:length(l)\n        if l[i-1] <=> l[i] != cmp\n            return false\n\
    \        end\n    end\n    return true\nend", "    return length(l) == 1 || all(x\
    \ -> x[1] < x[2], zip(l[1:end-1], l[2:end])) || all(x -> x[1] > x[2], zip(l[1:end-1],\
    \ l[2:end]))\nend", "  inc = l[1] < l[2]\n  for i = 2:length(l)-1\n    if inc\
    \ && l[i] > l[i+1] || !inc && l[i] < l[i+1]\n      return false\n    end\n  end\n\
    \  return true\nend", "    if length(l) == 1 return true end\n    el_s = sort(l)\n\
    \    for i in 1:length(l)-1\n        if el_s[i] != l[i] return false end\n   \
    \ end\n    return true\nend", "    if length(l) <= 1\n        return true\n  \
    \  end\n    if all(diff(l) .>= 0)\n        return true\n    elseif all(diff(l)\
    \ .<= 0)\n        return true\n    else\n        return false\n    end\nend",
  "    return ismonotonic(l)\nend", "    x = l[1]\n    for i in l[2:end]\n       \
    \ x = min(x, i)\n    end\n    return true\nend", "    if length(l) > 2\n     \
    \   if l[2] - l[1] > 0\n            return l[3] - l[2] > 0 ? monotonic(l[2:end])\
    \ : false\n        else\n            return l[3] - l[2] < 0 ? monotonic(l[2:end])\
    \ : false\n        end\n    elseif length(l) == 2\n        return true\n    else\n\
    \        return false\n    end\nend", "    n = size(l, 1)\n    if n > 1\n    \
    \    return all(l[2:n] .> l[1:n-1]) || all(l[2:n] .< l[1:n-1])\n    else\n   \
    \     return true\n    end\nend", "    if length(l) <= 1\n        return true\n\
    \    end\n    if l[2] > l[1]\n        return all(l[2:end] .> l[1:end-1])\n   \
    \ else\n        return all(l[2:end] .< l[1:end-1])\n    end\nend", "    rise =\
    \ l[2]>l[1]\n    for i in 2:length(l)-1\n        rise2 = l[i+1]>l[i]\n       \
    \ if rise != rise2\n            return false\n        end\n    end\n    return\
    \ true\nend", "    return sort(l) == l || sort(l, rev=true) == l\nend", "    b=l[1]>=l[2]\n\
    \    for i in 2:length(l)-1\n        if (b && (l[i]>l[i+1])) || (!b && (l[i]<l[i+1]))\n\
    \            return false\n        end\n    end\n    return true\nend\n\"\"\"\n\
    Return true if the string is a permutation of a palindrome.\n>>> is_permutation_of_palindrome(\"\
    tacocat\")\ntrue\n>>> is_permutation_of_palindrome(\"tacoccatt\")\nfalse\n>>>\
    \ is_permutation_of_palindrome(\"tacocatt\")\ntrue\n\"\"\"", "    t = l[1]\n \
    \   d = l[2] - l[1]\n    n = length(l)\n    for i in 2:n\n        if d * (l[i]\
    \ - t) < 0\n            return false\n        end\n        t = l[i]\n    end\n\
    \    return true\nend", "    l_sort = sort(l)\n    l_reverse = sort(l, rev=true)\n\
    \    return (l == l_sort) || (l == l_reverse)\nend", "    if length(l) < 2\n \
    \       return true\n    end\n    increase = (l[1] < l[2])\n    for i in 2:length(l)-1\n\
    \        if increase\n            if l[i] > l[i+1]\n                return false\n\
    \            end\n        else\n            if l[i] < l[i+1]\n               \
    \ return false\n            end\n        end\n    end\n    return true\nend",
  "    return l[1] <= l[2] && all(l[1:end-1] .<= l[2:end]) ||\n           l[1] >=\
    \ l[2] && all(l[1:end-1] .>= l[2:end])\nend", "    dl = diff(l)\n    return (all(dl\
    \ .>= 0) || all(dl .<= 0))\nend", "    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] == l[1]\n        return monotonic(l[2:end])\n    end\n \
    \   forward = l[2] > l[1]\n    for i in 3:length(l)\n        if forward && l[i]\
    \ < l[i-1]\n            return false\n        elseif !forward && l[i] > l[i-1]\n\
    \            return false\n        end\n    end\n    return true\nend", "    \"\
    \"\"Return true is vector elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\n    if length(l)\
    \ <= 1\n        return true\n    end\n    if l[2] > l[1] \n        for i in 2:length(l)\n\
    \            if l[i] < l[i-1]\n                return false\n            end\n\
    \        end\n    elseif l[2] < l[1]\n        for i in 2:length(l)\n         \
    \   if l[i] > l[i-1]\n                return false\n            end\n        end\n\
    \    end\n    return true\nend", "    delta = l[2:end] - l[1:end-1]\n    return\
    \ isequal(unique(delta), Set([0])) ||\n           isequal(unique(delta), Set([0,1]))\
    \ ||\n           isequal(unique(delta), Set([0,-1]))\nend", "    \n    if length(l)\
    \ < 2\n        return true\n    end\n    \n    inc = 0\n    dec = 0\n    \n  \
    \  for i = 1:length(l)-1\n        if l[i] < l[i+1]\n            inc += 1\n   \
    \     elseif l[i] > l[i+1]\n            dec += 1\n        end\n    end\n    \n\
    \    return inc == length(l)-1 || dec == length(l)-1\nend", "    return isequal(isequal(l[i+1]\
    \ - l[i] > 0 for i in 1:end-1), false) || \n        isequal(isequal(l[i+1] - l[i]\
    \ < 0 for i in 1:end-1), false)\nend", "    \"\"\"Return true is vector elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"\n    diffs = map(x -> (x[2] - x[1]), zip(l[1:end-1],\
    \ l[2:end]))\n    return all(diffs .<= 0) || all(diffs .>= 0)\nend", "    if length(l)\
    \ == 1\n        return true\n    end\n    (l[2] >= l[1]) && monotonic(l[2:end])\n\
    end", "    if length(l) < 2\n        return true\n    end\n    if l[2] - l[1]\
    \ > 0\n        return all(l[i+1] - l[i] >= 0 for i in 1:length(l)-1)\n    else\n\
    \        return all(l[i+1] - l[i] <= 0 for i in 1:length(l)-1)\n    end\nend\n\
    monotonic([1, 2, 4, 20])", "    return all(abs.(diff(l)) .== 1)\nend", "    #\
    \ first check that all the elements are the same\n    # or that they are all increasing\
    \ or decreasing\n    #return all(x == l[1] for x in l) || all(x < y for x, y in\
    \ zip(l, drop(l, 1))) || all(x > y for x, y in zip(l, drop(l, 1)))\n    return\
    \ sort(l) == l || sort(l, rev=true) == l\nend", "    if length(l) < 2\n      \
    \  return true\n    end\n    if l[2] - l[1] > 0\n        for i in 2:length(l)-1\n\
    \            if l[i+1] - l[i] < 0\n                return false\n            end\n\
    \        end\n    else\n        for i in 2:length(l)-1\n            if l[i+1]\
    \ - l[i] > 0\n                return false\n            end\n        end\n   \
    \ end\n    return true\nend", "    if length(l) <= 1\n        return true\n  \
    \  end\n    if l[2] > l[1]\n        return all(x->x > l[1], l[2:end])\n    elseif\
    \ l[2] < l[1]\n        return all(x->x < l[1], l[2:end])\n    else\n        return\
    \ monotonic(l[2:end])\n    end\nend", "    for i in 2:length(l)\n        if l[i]\
    \ < l[i-1]\n            return false\n        end\n    end\n    return true\n\
    end", "    if length(l) < 2 return true end\n    return any(l[i] <= l[i+1] for\
    \ i in 1:length(l)-1) && any(l[i] >= l[i+1] for i in 1:length(l)-1)\nend", " \
    \   \n    # Check if all elements are increasing \n    if all(l[i] <= l[i+1] for\
    \ i in 1:length(l)-1)\n        return true\n    end\n    \n    # Check if all\
    \ elements are decreasing\n    if all(l[i] >= l[i+1] for i in 1:length(l)-1)\n\
    \        return true\n    end\n    \n    # If neither of the above is true, then\
    \ return false\n    return false\nend", "    if length(l) == 1\n        return\
    \ true\n    end\n    if l[2] > l[1]\n        for i in 2:length(l)\n          \
    \  if l[i] < l[i-1]\n                return false\n            end\n        end\n\
    \    else\n        for i in 2:length(l)\n            if l[i] > l[i-1]\n      \
    \          return false\n            end\n        end\n    end\n    return true\n\
    end", "    dx = diff(l)\n    if all(dx.<0) || all(dx.>0)\n        return true\n\
    \    else\n        return false\n    end\nend", "    n = length(l)\n    strictly_increasing\
    \ = true\n    strictly_decreasing = true\n    increasing = true\n    decreasing\
    \ = true\n    for i in 2:n\n        strictly_increasing = strictly_increasing\
    \ & (l[i] > l[i-1])\n        strictly_decreasing = strictly_decreasing & (l[i]\
    \ < l[i-1])\n        increasing = increasing & (l[i] >= l[i-1])\n        decreasing\
    \ = decreasing & (l[i] <= l[i-1])\n    end\n    strictly_increasing | strictly_decreasing\
    \ | increasing | decreasing\nend", "    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] - l[1] > 0\n        for i in 2:length(l)-1\n           \
    \ if l[i+1] - l[i] < 0\n                return false\n            end\n      \
    \  end\n    else\n        for i in 2:length(l)-1\n            if l[i+1] - l[i]\
    \ > 0\n                return false\n            end\n        end\n    end\n \
    \   return true\nend", "    b = map(x-> sign(x), diff(l))\n    return all(b .==\
    \ b[1])\nend", "    if all(l[i] <= l[i+1] for i in 1:length(l)-1) || all(l[i]\
    \ >= l[i+1] for i in 1:length(l)-1)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    return all(diff(l) .>= 0) || all(diff(l) .<= 0)\n\
    end", "    if length(l) < 2\n        return true\n    end\n    isincreasing =\
    \ l[2] > l[1]\n    return all(map(i -> isincreasing ? l[i] >= l[i-1] : l[i] <=\
    \ l[i-1], 2:length(l)))\nend", "    l[end] .> l[1] ? \n        all(l[i] .<= l[i+1]\
    \ for i=1:length(l)-1) : \n        all(l[i] .>= l[i+1] for i=1:length(l)-1)\n\
    end", "    # Base case\n    if length(l) <= 1\n        return true\n    else\n\
    \        return (l[1] - l[2] < 0) ? monotonic(l[2:end]) : false\n    end\nend",
  "    return isincreasing(l) || isdecreasing(l)\nend\n# Test it using doctest\n@doctestset\
    \ \"monotonic\"", "    return all(diff(l) .>= 0) || all(diff(l) .<= 0)\nend\n\
    # monotonic((1, 2, 4, 20))\n# monotonic((1, 20, 4, 10))\n# monotonic((4, 1, 0,\
    \ -10))\nmonotonic([4, 1, 0, -10])", "    n = length(l)\n    inc = false\n   \
    \ dec = false\n    for i in 1:n-1\n        if l[i] < l[i+1]\n            inc =\
    \ true\n        elseif l[i] > l[i+1]\n            dec = true\n        end\n  \
    \  end\n    return inc && dec == false\nend", "    n = length(l)\n    inc = true\n\
    \    dec = true\n    if n == 1 return true end\n    for i = 2:n\n        if l[i]\
    \ < l[i-1]\n            inc = false\n        end\n        if l[i] > l[i-1]\n \
    \           dec = false\n        end\n    end\n    if inc || dec\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if all(diff(l) .>=\
    \ 0) || all(diff(l) .<= 0)\n        return true\n    else\n        return false\n\
    \    end\nend", "    for i in 2:length(l)\n        if l[i] - l[i-1] < 0\n    \
    \        return false\n        end\n    end\n    return true\nend", "    if length(l)==1\n\
    \        return true\n    end\n    return (l[2]-l[1])>0 ? all(l[2:end].-l[1:end-1]\
    \ .>= 0) : all(l[2:end].-l[1:end-1] .<= 0)\nend", "    l[2:end]-l[1:end-1] \u2265\
    \ 0 || l[2:end]-l[1:end-1] \u2264 0\nend", "    if l[1] > l[end] #decreasing monotonic\n\
    \        for i in 2:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    elseif l[1] < l[end] #increasing monotonic\n\
    \        for i in 2:length(l)\n            if l[i] < l[i-1]\n                return\
    \ false\n            end\n        end\n    else\n        println(\"not monotonic\"\
    )\n    end\n    return true\nend", "    if l[2] == l[1]\n        return true\n\
    \    end\n    return l[2] > l[1] ? all(l[i] >= l[i-1] for i in 3:length(l)) :\
    \ all(l[i] <= l[i-1] for i in 3:length(l))\nend", "    return length(unique(diff(l)))\
    \ <= 1\nend", "    if length(l) > 1\n        s = sign(l[2]-l[1])\n        if s\
    \ != 0\n            for i = 3:length(l)\n                if s != sign(l[i]-l[i-1])\n\
    \                    return false\n                end\n            end\n    \
    \    end\n    end\n    return true\nend", "    if length(l) <= 1\n        return\
    \ true\n    end\n    return l[2] > l[1] ? all(i -> i > l[1], l[3:end]) : all(i\
    \ -> i < l[1], l[3:end])\nend", "    l1 = l[1]\n    c = 0\n    for i in 2:length(l)\n\
    \        if l[i] < l1\n            c += 1\n        end\n        l1 = l[i]\n  \
    \  end\n    return c == length(l)-1 || c == 0\nend", "    return all(l[i]<=l[i+1]\
    \ for i=1:length(l)-1) || all(l[i]>=l[i+1] for i=1:length(l)-1)\nend", "    return\
    \ all(l[i] &lt;= l[i+1] for i in 1:length(l)-1) || all(l[i] &gt;= l[i+1] for i\
    \ in 1:length(l)-1)\nend\n</code>\nMy second attempt:\n<code>\"\"\"Return true\
    \ is vector elements are monotonically increasing or decreasing.\n    &gt;&gt;&gt;\
    \ monotonic([1, 2, 4, 20])\n    true\n    &gt;&gt;&gt; monotonic([1, 20, 4, 10])\n\
    \    false\n    &gt;&gt;&gt; monotonic([4, 1, 0, -10])\n    true\n    \"\"\"",
  "    if length(l) < 2\n        return true\n    end\n    if length(l) == 2\n   \
    \     return l[1] <= l[2]\n    end\n    if l[1] < l[2]\n        for i in 1:length(l)-1\n\
    \            if l[i] > l[i+1]\n                return false\n            end\n\
    \        end\n    else\n        for i in 1:length(l)-1\n            if l[i] <\
    \ l[i+1]\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    up_first = true\n    up_last = true\n    down_first\
    \ = true\n    down_last = true\n    for i in 2:length(l)\n        if l[i] < l[i-1]\n\
    \            up_first = false\n            up_last = false\n        elseif l[i]\
    \ > l[i-1]\n            down_first = false\n            down_last = false\n  \
    \      end\n    end\n    return up_first || up_last || down_first || down_last\n\
    end", "    if all(l[i] <= l[i+1] for i = 1:length(l)-1) || all(l[i] >= l[i+1]\
    \ for i = 1:length(l)-1)\n        return true\n    else\n        return false\n\
    \    end\nend", "    if length(l) < 2\n        return true\n    end\n    if l[2]\
    \ > l[1]\n        return all(l[i] <= l[i+1] for i=1:length(l)-1)\n    else\n \
    \       return all(l[i] >= l[i+1] for i=1:length(l)-1)\n    end\nend", "    d\
    \ = diff(l)\n    return all(x -> x >= 0, d) || all(x -> x <= 0, d)\nend", "  \
    \  if length(l) <= 1\n        return true\n    end\n    diff = l[2] - l[1]\n \
    \   return all(map(x -> x * diff >= 0, diffs(l)))\nend", "    return all(diff(l)\
    \ .<= 0) || all(diff(l) .>= 0)\nend", "    s = sign(l[1] - l[2])\n    for i in\
    \ 3:length(l)\n        if (sign(l[i-1] - l[i]) != s)\n            return false\n\
    \        end\n    end\n    return true\nend", '    @assert length(l) > 1', " \
    \   return monotonic(Vector{T}(l))\nend", "    #init variables\n    m = l[1]\n\
    \    incr = true\n    dcr = true\n    #iterate through list\n    for i in l\n\
    \        if i < m\n            dcr = false\n        elseif i > m\n           \
    \ incr = false\n        end\n        #update values\n        m = i\n    end\n\
    \    #return value\n    return incr || dcr\nend", "    if length(l) < 2 \n   \
    \     return true\n    end\n    inc = sign(l[2] - l[1])\n    for i = 3:length(l)\n\
    \        if sign(l[i] - l[i-1]) != inc\n            return false\n        end\n\
    \    end\n    return true\nend\n    \n\"\"\"Return the first element of a tuple.\n\
    \    >>> first((1,2))\n    1\n    \"\"\"", "  l[1] < l[2] ? all(l[i] < l[i+1]\
    \ for i=1:length(l)-1) : all(l[i] > l[i+1] for i=1:length(l)-1)\nend", "    if\
    \ length(l) == 1\n        return true\n    end\n    if l[1] > l[2]\n        for\
    \ i in 2:length(l)\n            if l[i] >= l[i-1]\n                return false\n\
    \            end\n        end\n    else\n        for i in 2:length(l)\n      \
    \      if l[i] <= l[i-1]\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend", "    k1 = findfirst(l)\n    k2 = findlast(l)\n\
    \    if length(l) == 0 \n        return false\n    elseif length(l) == 1\n   \
    \     return true\n    elseif (l[k1] < l[k2])\n        for i = 1:length(l)-1\n\
    \            if (l[i] > l[i+1])\n                return false\n            end\n\
    \        end\n        return true\n    elseif (l[k1] > l[k2])\n        for i =\
    \ 1:length(l)-1\n            if (l[i] < l[i+1])\n                return false\n\
    \            end\n        end\n        return true\n    end\nend", "    if length(l)\
    \ <= 1\n        return true\n    end\n    if l[2] < l[1]\n        return all(diff(l)\
    \ .<= 0)\n    else\n        return all(diff(l) .>= 0)\n    end\nend", "    delta\
    \ = l[2] - l[1]\n    return all( delta*(l[i] - l[i-1])>=0 for i=2:length(l) )\n\
    end", "    if length(l) <= 1 \n        return true\n    end\n    if l[1] <= l[2]\n\
    \        for i in 1:length(l)-1\n            if l[i] > l[i+1]\n              \
    \  return false\n            end\n        end\n    elseif l[1] >= l[2]\n     \
    \   for i in 1:length(l)-1\n            if l[i] < l[i+1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    return\
    \ all(l[i] \u2264 l[i+1] for i in 1:length(l)-1) || all(l[i] \u2265 l[i+1] for\
    \ i in 1:length(l)-1)\nend", "    n = length(l)\n    x = l[1] - l[2]\n    if x\
    \ == 0\n        for i in 2:n-1\n            if l[i] != l[i+1]\n              \
    \  return false\n            end\n        end\n    else\n        for i in 2:n-1\n\
    \            if (l[i] - l[i+1]) * x < 0\n                return false\n      \
    \      end\n        end\n    end\n    return true\nend", "    for i in 2:length(l)\n\
    \        if l[i] == l[i-1]\n            continue\n        elseif l[i] > l[i-1]\n\
    \            trend = \"inc\"\n            break\n        elseif l[i] < l[i-1]\n\
    \            trend = \"dec\"\n            break\n        end\n    end\n    if\
    \ trend == \"inc\"\n        for i in 2:length(l)\n            if l[i] < l[i-1]\n\
    \                return false\n            end\n        end\n    elseif trend\
    \ == \"dec\"\n        for i in 2:length(l)\n            if l[i] > l[i-1]\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    d = diff(l)\n    return all(x -> x >= 0, d) || all(x -> x <=\
    \ 0, d)\nend\nmonotonic([1, 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4,\
    \ 1, 0, -10])", "    return all(l[1] &lt; l[2:end]) || all(l[1] &gt; l[2:end])\n\
    end\n</code>\nNote that <code>all(l[1] &lt; l[2:end])</code> can be replaced by\
    \ <code>is_sorted(l)</code> if you need to check the sort order explicitly.\n",
  "    if length(l) <= 1 \n        return true\n    end\n    if length(l) == 2\n \
    \       if l[1] == l[2]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if l[1] < l[2]\n        for i = 2:length(l)-1\n\
    \            if l[i] < l[i+1]\n                continue\n            else\n  \
    \              return false\n            end\n        end\n    else\n        for\
    \ i = 2:length(l)-1\n            if l[i] > l[i+1]\n                continue\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    return true\nend\n ", "    m = l[1] &lt;= l[2] ? 1 : -1\n    for\
    \ i in 2:length(l)-1\n        if sign(l[i+1] - l[i]) != m\n            return\
    \ false\n        end\n    end\n    return true\nend\n</code>\nIf you want to check\
    \ the type, it is better to check the type of the object, not the object itself.\
    \ This can be done with <code>isa</code> (which should be used for all type related\
    \ tasks, since <code>typeof</code> returns a type, which is not easily comparable\
    \ with another type, since it is a singleton):\n<code>function monotonic(l::Vector{Int64})::Bool\
    \ \n    isa(l, Vector{Int64}) || throw(ArgumentError(\"l must be a Vector{Int64}\"\
    ))\n    m = l[1] &lt;= l[2] ? 1 : -1\n    for i in 2:length(l)-1\n        if sign(l[i+1]\
    \ - l[i]) != m\n            return false\n        end\n    end\n    return true\n\
    end\n</code>\n(I'm not sure what you want to do with <code>Real</code>).\n", " \
    \   return l[1] &lt;= l[2] &lt;= l[3] &lt;= l[4] || l[1] &gt;= l[2] &gt;= l[3]\
    \ &gt;= l[4]\nend", "    if length(l) < 2\n        return true\n    end\n    if\
    \ l[2] > l[1]\n        for i in 2:length(l)-1\n            if l[i+1] < l[i]\n\
    \                return false\n            end\n        end\n    elseif l[2] <\
    \ l[1]\n        for i in 2:length(l)-1\n            if l[i+1] > l[i]\n       \
    \         return false\n            end\n        end\n    end\n    return true\n\
    end", "    j = sign(l[1] - l[2])\n    for i in 1:length(l)-1\n        if j * (l[i]\
    \ - l[i+1]) < 0\n            return false\n        end\n    end\n    return true\n\
    end\n    ", "    if length(l)<2 \n        return true\n    end\n    if l[2]>l[1]\n\
    \        for i in 2:length(l)-1\n            if l[i+1]<l[i]\n                return\
    \ false\n            end\n        end\n    elseif l[2]<l[1]\n        for i in\
    \ 2:length(l)-1\n            if l[i+1]>l[i]\n                return false\n  \
    \          end\n        end\n    end\n    return true\nend", "    l_d = l[2:end]\
    \ - l[1:end-1]\n    all_equal(l_d)\nend", "    if length(l) <= 1 \n        return\
    \ true\n    end\n    if l[1] <= l[2] \n        for i in 2:length(l)-1 \n     \
    \       if l[i] > l[i+1] \n                return false\n            end\n   \
    \     end\n    else \n        for i in 2:length(l)-1 \n            if l[i] < l[i+1]\
    \ \n                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    if length(l) == 1\n        return true\n    end\n    if sort(l)\
    \ == l\n        return true\n    elseif sort(l, rev=true) == l\n        return\
    \ true\n    else\n        return false\n    end\nend", "    d = [l[i+1] - l[i]\
    \ for i in 1:length(l)-1]\n    return all(x -> x >= 0, d) || all(x -> x <= 0,\
    \ d)\nend", "    return maximum(diff(l)) <= 0 || minimum(diff(l)) >= 0\nend",
  "    if length(l) == 1 return true end\n    slope = l[2] - l[1]\n    for i = 3:length(l)\n\
    \        if slope * (l[i] - l[i-1]) < 0 return false end\n    end\n    return\
    \ true\nend", "    for i = 1:length(l)-1\n        if l[i] != l[i+1] + (-1)^(l[i]\
    \ < l[i+1])\n            return false\n        end\n    end\n    return true\n\
    end", "    x = 1\n    y = 1\n    for i in eachindex(l)\n        if l[i] > x\n\
    \            y = 1\n            x = l[i]\n        elseif l[i] < x\n          \
    \  y = 2\n            x = l[i]\n        end\n    end\n    if y == 1 || y == 2\n\
    \        return true\n    else\n        return false\n    end\nend", "    if length(l)\
    \ < 2\n        return true\n    end\n    s = sign(l[2] - l[1])\n    if s == 0\n\
    \        return monotonic(l[2:end])\n    end\n    for i = 3:length(l)\n      \
    \  if sign(l[i] - l[i-1]) != s\n            return false\n        end\n    end\n\
    \    return true\nend", "    cmp = (l[1] > l[2]) ? -1 : 1\n    return all(l[i]\
    \ > l[i+1]*cmp for i in 1:length(l)-1)\nend", "    sign = sign(l[2] - l[1])\n\
    \    for i = 2:length(l)-1\n        if sign(l[i+1] - l[i]) != sign\n         \
    \   return false\n        end\n    end\n    return true\nend", "    return all(l[i]\
    \ <= l[i+1] for i in 1:length(l)-1) || all(l[i] >= l[i+1] for i in 1:length(l)-1)\n\
    end", "    flag = true\n    n = length(l)\n    if n > 1\n        diff = l[2] -\
    \ l[1]\n        for i = 2:n-1\n            if diff*(l[i+1] - l[i]) < 0\n     \
    \           flag = false\n                break\n            end\n        end\n\
    \    end\n    return flag\nend", "    n = length(l)\n    diff = [l[i+1] - l[i]\
    \ for i in 1:n-1]\n    if any(diff .== 0)\n        return false\n    else\n  \
    \      return all(diff .> 0) || all(diff .< 0)\n    end\nend", "    sign = l[2]\
    \ - l[1]\n    for i in 1:length(l)-1\n        if l[i+1] - l[i] * sign < 0\n  \
    \          return false\n        end\n    end\n    return true\nend", "    s =\
    \ sign(l[1]-l[2])\n    for i in 1:length(l)-1\n        if s != sign(l[i]-l[i+1])\
    \ \n            return false\n        end\n    end\n    return true\nend", " \
    \   len = length(l)\n    if len <= 1\n        return true\n    end\n    if l[1]\
    \ < l[2]\n        sign = 1\n    elseif l[1] > l[2]\n        sign = -1\n    else\n\
    \        sign = 0\n    end\n    for i in 1:len-1\n        if sign == 0 && l[i]\
    \ != l[i+1]\n            sign = (l[i] < l[i+1]) ? 1 : -1\n        elseif sign\
    \ == 1 && l[i] > l[i+1]\n            return false\n        elseif sign == -1 &&\
    \ l[i] < l[i+1]\n            return false\n        end\n    end\n    return true\n\
    end", "    return all(l[i] < l[i+1] for i in 1:length(l)-1) || all(l[i] > l[i+1]\
    \ for i in 1:length(l)-1)\nend", "    return v = diff(l)\n    all(v .== v[1])\n\
    end", "    # Returns true if all elements are either strictly increasing or decreasing\n\
    \    # - Vectors of size 1 and 2 are always monotonic\n    # - Iterate through\
    \ vector and check if elements are in increasing or decreasing order.\n    # -\
    \ As soon as a non-monotonic element is found, return false and stop\n    # -\
    \ If no such element is found, return true\n    d = l[2] - l[1]\n    for i in\
    \ 2:length(l)-1\n        c = l[i+1] - l[i]\n        if c == 0\n            next\
    \ # Skip zeros\n        elseif d == 0\n            d = c\n        elseif d * c\
    \ < 0\n            return false\n        end\n    end\n    return true\nend",
  "    n = length(l)\n    d1 = sign(l[2:n] - l[1:n-1])\n    return all(d1 .== d1[1])\n\
    end", "    if l[2] == l[1]\n        # Base case\n        return true\n    elseif\
    \ l[2] > l[1]\n        # Recursion\n        if length(l) > 2\n            return\
    \ (monotonic(l[2:end]))\n        else\n            return true\n        end\n\
    \    else\n        return false\n    end\nend", "    if all(diff(l) .>= 0) ||\
    \ all(diff(l) .<= 0)\n        return true\n    else\n        return false\n  \
    \  end\nend", "    signs = sign.(diff(l))\n    return any(signs.==0) || all(signs.==signs[1])\n\
    end\nmonotonic([1, 2, 4, 20]) # prints `true`\nmonotonic([1, 20, 4, 10]) # prints\
    \ `false`\nmonotonic([4, 1, 0, -10]) # prints `true`", "    dx = l[2:end] - l[1:end-1]\n\
    \    return all(dx .<= 0) || all(dx .>= 0)\nend", "    l1 = l[1]\n    for x in\
    \ l[2:end]\n        if x == l1\n            continue\n        elseif x > l1\n\
    \            increasing = true\n            l1 = x\n        else\n           \
    \ increasing = false\n            l1 = x\n        end\n    end\n    return increasing\n\
    end", "    return all(l[i] < l[i+1] for i in 1:length(l)-1) || all(l[i] > l[i+1]\
    \ for i in 1:length(l)-1)\nend\n ", "    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] - l[1] > 0\n        return all(l[i] - l[i-1] >= 0 for i\
    \ in 2:length(l))\n    else\n        return all(l[i] - l[i-1] <= 0 for i in 2:length(l))\n\
    \    end\nend", "    l_len = length(l)\n    if l_len == 1\n        return true\n\
    \    end\n    a = all(l[i] &lt;= l[i+1] for i in 1:l_len-1)\n    b = all(l[i]\
    \ &gt;= l[i+1] for i in 1:l_len-1)\n    return a || b\nend", "    if length(l)\
    \ > 1\n        for i = 2:length(l)\n            if l[i] == l[i-1]\n          \
    \      continue\n            elseif l[i] > l[i-1]\n                sign = 1\n\
    \                break\n            else\n                sign = -1\n        \
    \        break\n            end\n        end\n        for i = 2:length(l)\n  \
    \          if l[i] == l[i-1]\n                continue\n            elseif l[i]\
    \ * sign < l[i-1] * sign\n                return false\n            end\n    \
    \    end\n        return true\n    else\n        return true\n    end\nend", " \
    \   if size(l,1) == 1 \n        return true\n    end\n    d = map(i -> l[i+1]\
    \ - l[i], 1:size(l,1)-1)\n    if all(i -> i > 0, d) || all(i -> i < 0, d)\n  \
    \      return true\n    else\n        return false\n    end\nend", "    if all(l\
    \ .>= l[1]) || all(l .<= l[1])\n        return true\n    else\n        return\
    \ false\n    end\nend\n \nmonotonic([1, 2, 4, 20])", "    \n    if l[1] <= l[end]\n\
    \        for i = 1:length(l)-1\n            if l[i] > l[i+1]\n               \
    \ return false\n            end\n        end\n    elseif l[1] >= l[end]\n    \
    \    for i = 1:length(l)-1\n            if l[i] < l[i+1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    return\
    \ all(i-j for i in l[2:end], j in l[1:end-1]) || all(i-j for i in l[2:end], j\
    \ in l[1:end-1])\nend", "    if length(l) == 0\n        return true\n    end\n\
    \    if length(l) == 1\n        return true\n    end\n    if (l[1] - l[2]) ==\
    \ 0\n        return true\n    end\n    increasing = (l[1] - l[2]) / abs(l[1] -\
    \ l[2])\n    for i in 2:length(l) - 1\n        if (l[i] - l[i + 1]) == 0\n   \
    \         continue\n        end\n        if (l[i] - l[i + 1]) / abs(l[i] - l[i\
    \ + 1]) != increasing\n            return false\n        end\n    end\n    return\
    \ true\nend", "    ldiff = diff(l)\n    if all(ldiff .== ldiff[1]) \n        return\
    \ true\n    elseif all(ldiff .== ldiff[1]) \n        return true\n    else\n \
    \       return false\n    end\nend", "    return all(l[i] <= l[i+1] for i in 1:length(l)-1)\
    \ || all(l[i] >= l[i+1] for i in 1:length(l)-1)\nend", "    first = l[1]\n   \
    \ dir = (first-l[2])>0\n    for i=2:length(l)-1\n        if dir \n           \
    \ if l[i]>l[i+1]\n                return false\n            end\n        else\n\
    \            if l[i]<l[i+1]\n                return false\n            end\n \
    \       end\n    end\n    return true\nend", "    assert(length(l) > 1)\n    if\
    \ (l[2] - l[1]) > 0\n        return monotonic_inc(l)\n    elseif (l[2] - l[1])\
    \ < 0\n        return monotonic_dec(l)\n    else\n        throw(ArgumentError(\"\
    First two elements are equal\"))\n    end\nend", "    return (l[1] <= l[end])\
    \ ? all(l[i] <= l[i+1] for i in 1:length(l)-1) : all(l[i] >= l[i+1] for i in 1:length(l)-1)\n\
    end", "    if length(l) < 2\n        return true\n    end\n    c = sign(l[2] -\
    \ l[1])\n    for i in 2:length(l)-1\n        if c != sign(l[i+1] - l[i])\n   \
    \         return false\n        end\n    end\n    return true\nend", "    if length(l)\
    \ == 1\n        return true\n    end\n    x = 1\n    y = x + 1\n    is_increasing\
    \ = l[x] <= l[y]\n    while (y <= length(l))\n        if is_increasing && l[x]\
    \ > l[y]\n            return false\n        elseif !is_increasing && l[x] < l[y]\n\
    \            return false\n        end\n        x += 1\n        y += 1\n    end\n\
    \    return true\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
