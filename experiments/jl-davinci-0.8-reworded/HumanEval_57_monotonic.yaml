name: HumanEval_57_monotonic
language: jl
prompt: "\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n\
  \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
  \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\nfunction monotonic(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
  \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
  \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
  \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
completions: ["    v = l[1]\n    for i in 2:length(l)\n        if v > l[i]\n     \
    \       v = l[i]\n        elseif v < l[i]\n            v = l[i]\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "    is_monotonic\
    \ = true\n    for i in 2:length(l)\n        if l[i] < l[i-1]\n            is_monotonic\
    \ = false\n            break\n        end\n    end\n    return is_monotonic\n\
    end", "    if length(l) <= 1\n        return true\n    end\n    diff = l[2:end]\
    \ - l[1:end-1]\n    if (all(diff .> 0) || all(diff .< 0))\n        return true\n\
    \    else\n        return false\n    end\nend", "    diffs = l[2:end] - l[1:end-1]\n\
    \    return (all(diffs .>= 0) || all(diffs .<= 0))\nend", "    return l[1] < l[end]\
    \ ? isincreasing(l) : isdecreasing(l)\nend", "  n = length(l)\n  for i in 1:n-1\n\
    \    if l[i] != l[i+1]\n      break\n    end\n  end\n  if i == n-1\n    return\
    \ true\n  end\n  diff = sign(l[i+1] - l[i])\n  for i in i+1:n-1\n    if sign(l[i+1]\
    \ - l[i]) != diff\n      return false\n    end\n  end\n  return true\nend", " \
    \   if length(l) < 2\n        error(\"Less than 2 elements\")\n    end\n    dir\
    \ = sign(l[2] - l[1])\n    for i in 2:length(l)-1\n        if sign(l[i+1] - l[i])\
    \ != dir\n            return false\n        end\n    end\n    return true\nend",
  "    inc = l[1] < l[2]\n    for i in 2:length(l)-1\n        if inc\n           \
    \ if l[i] > l[i+1]\n                return false\n            end\n        else\n\
    \            if l[i] < l[i+1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    return isequal(sort(l), l)\
    \ || isequal(sort(l, rev=true), l)\nend", "    if length(l) == 1\n        return\
    \ true\n    end\n    if isincreasing(l) || isdecreasing(l)\n        return true\n\
    \    else\n        return false\n    end\nend", "    # NOTE: this is not the most\
    \ efficient way to do this, but it is short.\n    return all(l[i] <= l[i+1] for\
    \ i in 1:length(l)-1) ||\n           all(l[i] >= l[i+1] for i in 1:length(l)-1)\n\
    end\nmonotonic([1, 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0,\
    \ -10])", "    return isincreasing(l) || isdecreasing(l)\nend", "    t = Vector{Int64}()\n\
    \    for i in 1:length(l)-1\n        if l[i]<l[i+1]\n            append!(t,1)\n\
    \        elseif l[i]>l[i+1]\n            append!(t,-1)\n        else\n       \
    \     append!(t,0)\n        end\n    end\n    if all(t.==1) || all(t.==-1) ||\
    \ all(t.==0)\n        return true\n    else\n        return false\n    end\nend\n\
    \    \n    \n\"\"\"Return false if there are duplicate values in list.\n    >>>\
    \ unique([1, 2, 4, 20])\n    true\n    >>> unique([1, 20, 4, 10, 20])\n    false\n\
    \    >>> unique([4, 1, 0, -10])\n    true\n    \"\"\"", "  if length(l) < 2 \n\
    \    return true\n  end\n  if l[2] > l[1] \n    return monotonic_inc(l)\n  else\n\
    \    return monotonic_dec(l)\n  end\nend", "  diff = Float64[]\n  for i = 1:length(l)-1\n\
    \    push!(diff,l[i+1]-l[i])\n  end\n  #if max(diff) < 0\n  #  return false\n\
    \  #else\n  #  return true\n  #end\n  return all(x -> x >= 0, diff) || all(x ->\
    \ x <= 0, diff)\nend", "    if length(l) <= 1 \n        return true\n    end\n\
    \    if l[1] < l[2]\n        for i = 2:length(l)-1\n            if l[i] >= l[i+1]\n\
    \                return false\n            end\n        end\n    elseif l[1] >\
    \ l[2]\n        for i = 2:length(l)-1\n            if l[i] <= l[i+1]\n       \
    \         return false\n            end\n        end\n    end\n    return true\n\
    end", "    if length(l) <= 1\n        return true\n    end\n    if l[2] > l[1]\n\
    \        for i in 2:length(l)\n            if l[i] <= l[i-1]\n               \
    \ return false\n            end\n        end\n    elseif l[2] < l[1]\n       \
    \ for i in 2:length(l)\n            if l[i] >= l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    if\
    \ length(l) < 2\n        return true\n    end\n    return (all(x -> x > last(l),\
    \ l[1:end-1]) || all(x -> x < last(l), l[1:end-1]))\nend", "    dif = diff(l)\n\
    \    return all(dif.<0) || all(dif.>0)\nend\n\"\"\"Return true is vector elements\
    \ are strictly monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    false\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    false\n    >>> monotonic([1, 2, 4, 5])\n    true\n\
    \    >>> monotonic([5, 4, 3, 1])\n    true\n    \"\"\"", "    return (l[1] < l[2])\
    \ && all(l[1:end-1] .< l[2:end])\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
