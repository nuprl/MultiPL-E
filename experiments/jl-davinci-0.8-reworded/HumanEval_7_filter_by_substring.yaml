name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that contain given\
  \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    for (i, s) in enumerate(strings)\n        if !occursin(substring,\
    \ s)\n            strings[i] = 0\n        end\n    end\n    return strings[strings\
    \ .!= 0]\nend", "    filter(s -> contains(s, substring), strings)\nend", "  return\
    \ [ s for s in strings if contains(s, substring) ]\nend", "    i = 0\n    while\
    \ i < length(strings)\n        if !contains(strings[i], substring)\n         \
    \   deleteat!(strings, i)\n        else\n            i += 1\n        end\n   \
    \ end\n    return strings\nend", "    return filter(x -> x \u2208 strings && contains(x,\
    \ substring), strings)\nend", "    filtered = filter(x -> contains(x, substring),\
    \ strings)\n    return filtered\nend", "    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    filtered = filter(x -> contains(x, substring), strings)\n\
    \    return filtered\nend", "  return [string for string in strings if substring\
    \ in string]\nend", "    return [s for s in strings if substring in s]\nend",
  "    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    return filter(x -> substring in x, strings)\nend", "  \
    \  strings_filtered = [string for string in strings if occursin(substring, string)]\n\
    \    return strings_filtered\nend", "    return filter(s -> occursin(substring,\
    \ s), strings)\nend\n \nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")", "    return filter(s -> occursin(substring, s), strings)\nend\n  \
    \  ", "    return [s for s in strings if substring in s]\nend", "    filtered\
    \ = String[]\n    for s in strings\n        if contains(s, substring)\n      \
    \      push!(filtered, s)\n        end\n    end\n    return filtered\nend", " \
    \   return [str for str in strings if substring in str]\nend", "    return filter(x\
    \ -> substring in x, strings)\nend", "    new_arr = String[]\n    for i in strings\n\
    \        if(findfirst(i, substring) != nothing)\n            push!(new_arr, i)\n\
    \        end\n    end\n    return new_arr\nend", "    is_substring(x) = occursin(substring,\
    \ x)\n    return filter(is_substring, strings)\nend", "    (str for str in strings\
    \ if substring in str)\nend", "    filtered = [isstring(s) && contains(s, substring)\
    \ ? s : nothing for s in strings]\n    return filter(x -> x != nothing, filtered)\n\
    end", "    out = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(out, s)\n        end\n    end\n    return out\nend", "    return\
    \ filter(x -> contains(x, substring), strings)\nend", "    filtered = []\n   \
    \ for string in strings\n        if substring in string\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    return filter(x\
    \ -> occursin(substring, x), strings)\nend", "    filter(x -> contains(x, substring),\
    \ strings)\nend", "    return [string for string in strings if substring in string]\n\
    end", "    return [x for x in strings if substring in x]\nend", "    nonempty_strings\
    \ = []\n    for string in strings\n        if has_substring(string, substring)\n\
    \            push!(nonempty_strings, string)\n        end\n    end\n    return\
    \ nonempty_strings\nend", "    return [string for string in strings if substring\
    \ in string]\nend", "    return filter(x -> contains(x, substring), strings)\n\
    end", "    return strings[in.(strings, substring)]\nend", "    filter(x -> contains(x,\
    \ substring), strings)\nend", "    filtered = []\n    for (i,s) in enumerate(strings)\n\
    \        if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    return [s for s in strings if substring\
    \ in s]\nend", "    strings_filtered = []\n    for s in strings\n        if substring\
    \ in s\n            push!(strings_filtered, s)\n        end\n    end\n    return\
    \ strings_filtered\nend", "    return [s for s in strings if substring in s]\n\
    end", "    filtered = []\n    for string in strings\n        if search(substring,\
    \ string) != nothing\n            push!(filtered, string)\n        end\n    end\n\
    \    return filtered\nend", "    filtered = []\n    for s in strings\n       \
    \ if occursin(substring, s)\n            push!(filtered, s)\n        end\n   \
    \ end\n    return filtered\nend", "    filtered = []\n    for s in strings\n \
    \       if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    is_substring = (s -> occursin(s, substring))\n\
    \    filter(is_substring, strings)\nend", "    matches = String[]\n    for i in\
    \ 1:length(strings)\n        if contains(strings[i], substring)\n            push!(matches,\
    \ strings[i])\n        end\n    end\n    return matches\nend\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")", "    filtered = String[]\n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    contains(s::String,\
    \ sub::String) = s in sub\n    filter(contains, strings, substring)\nend\n\"\"\
    \"\nSelect and return array of length \"len\" of elements that occur with frequency\
    \ >= \"freq\"\nin array \"data\" of length > \"len\" with elements of type \"\
    T\"", "    matching_strings = []\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(matching_strings, s)\n        end\n    end\n \
    \   return matching_strings\nend", "    return filter(x -> contains(x, substring),\
    \ strings)\nend", "    start_idx = findfirst(substring, strings)\n    end_idx\
    \ = findlast(substring, strings)\n    if start_idx != 0 && end_idx != 0\n    \
    \    return strings[start_idx:end_idx]\n    else\n        return Vector{String}()\n\
    \    end\nend", "    return [s for s in strings if contains(s, substring)]\nend",
  "    res = []\n    for str in strings\n        if occursin(substring, str)\n   \
    \         push!(res, str)\n        end\n    end\n    return res\nend", "    return\
    \ filter(x -> occursin(substring, x), strings)\nend", "    return [str for str\
    \ in strings if substring in str]\nend", "    if length(strings) == 0\n      \
    \  return strings\n    end\n    return strings[find(x -> contains(x, substring),\
    \ strings)]\nend", "    return [string for string in strings if substring in string]\n\
    end", "    return filter(strings) do string\n        findnext(string, substring)\
    \ != nothing\n    end\nend", "    return [s for s in strings if substring in s]\n\
    end", "    # TODO: Add documentation\n    return filter(x -> contains(x, substring),\
    \ strings)\nend", "    contains_substring = [string_contains(s, substring) for\
    \ s in strings]\n    return strings[contains_substring]\nend", "    filtered =\
    \ []\n    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    return filter(x ->\
    \ contains(x, substring), strings)\nend", "    filtered = []\n    for s in strings\n\
    \        if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    res = []\n    for s in strings\n   \
    \     if contains(s, substring)\n            push!(res, s)\n        end\n    end\n\
    \    return res\nend", "    filtered = []\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend", "    has_substring = (s -> occursin(substring, s))\n    return\
    \ filter(has_substring, strings)\nend", "    output = []\n    for s in strings\n\
    \        if contains(s, substring)\n            push!(output, s)\n        end\n\
    \    end\n    return output\nend", "    filtered = []\n    for string in strings\n\
    \        if occursin(substring, string)\n            push!(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    filtered = []\n    for\
    \ string in strings\n        if occursin(substring, string)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    filtered = []\n\
    \    for string in strings\n        if substring in string\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    is_matching =\
    \ [contains(x, substring) for x in strings]\n    return strings[is_matching]\n\
    end", "    return [ string for string in strings if substring in string ]\nend",
  "    return strings[search(r\"(?i)$substring\", strings)]\nend", "    output = []\n\
    \    for string in strings\n        if substring in string\n            push!(output,\
    \ string)\n        end\n    end\n    return output\nend", "    filtered = String[]\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered, string)\n        end\n    end\n    return filtered\nend",
  "    strings = strings[occursin.(substring, strings)]\n    return strings\nend",
  "    filtered = String[]\n    for s in strings\n        if s != \"\" && contains(s,\
    \ substring)\n            push!(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend", "    return [string for string in strings if substring in string]\n\
    end\n```", "    strings[findin(strings, substring)]\nend", "    list = []\n  \
    \  for x in strings\n        if contains(x, substring)\n            push!(list,\
    \ x)\n        end\n    end\n    return list\nend", "    return filter(s -> contains(s,\
    \ substring), strings)\nend\nfilter_by_substring([\"abc\", \"bacd\", \"cde\",\
    \ \"array\"], \"a\")", "    return filter(x -> contains(x, substring), strings)\n\
    end", "    res = Vector{String}()\n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(res, str)\n        end\n    end\n    return res\n\
    end", "    filtered = []\n    for string in strings\n        if substring in string\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    filtered = filter(x -> occursin(substring, x), strings)\n\
    \    return filtered\nend", "  for string in strings\n    if !occursin(substring,\
    \ string)\n      deleteat!(strings, findfirst(strings, string))\n    end\n  end\n\
    \  \n  return strings\nend", "    return filter(x -> occursin(substring, x), strings)\n\
    end", "    return filter(s -> contains(s, substring), strings)\nend", "    return\
    \ filter(x -> occursin(substring, x), strings)\nend", "    return [string for\
    \ string in strings if substring in string]\nend\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n \n \n \n ", "    filtered = filter(x\
    \ -> contains(x, substring), strings)\n    return filtered\nend", "    return\
    \ [x for x in strings if substring in x]\nend", "    filter(x -> contains(x, substring),\
    \ strings)\nend", "    return filter(x -> contains(x, substring), strings)\nend\n\
    \ ", "    if length(strings) == 0\n        return []\n    end\n    if length(strings)\
    \ == 1\n        return [strings[1]]\n    end\n    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    return [string for string in strings if contains(string,\
    \ substring)]\nend", "    filtered = []\n    for i in 1:length(strings)\n    \
    \    if strings[i] contains substring\n            push!(filtered, strings[i])\n\
    \        end\n    end\n    return filtered\nend", "    return filter(x -> substring\
    \ in x, strings)\nend", "    return [ s for s in strings if substring in s ]\n\
    end", "    return filter(string -> contains(string, substring), strings)\nend",
  "    return strings[findin(strings, substring)]\nend", "  filtered = []\n  for s\
    \ in strings\n    if contains(s, substring)\n      push!(filtered, s)\n    end\n\
    \  end\n  return filtered\nend", "    output = []\n    for s in strings\n    \
    \    if findfirst(substring, s) != nothing\n            push!(output, s)\n   \
    \     end\n    end\n    return output\nend", "    substring_filter = contains.(strings,\
    \ substring)\n    filtered_strings = strings[substring_filter]\n    return filtered_strings\n\
    end", "    return[x for x in strings if substring in x]\nend", "  vector_with_substring\
    \ = []\n  for string in strings\n    if occursin(substring, string)\n      push!(vector_with_substring,\
    \ string)\n    end\n  end\n  return vector_with_substring\nend", "    return [string\
    \ for string in strings if occursin(substring, string)]\nend", "    return [x\
    \ for x in strings if substring in x]\nend", "    #if !(substring in strings)\n\
    \    #    return strings\n    #end\n    return [string for string in strings if\
    \ substring in string]\nend", "    return filter(s -> contains(s, substring),\
    \ strings)\nend", "    r = [s for s in strings if substring in s]\n    return\
    \ r\nend", "    filtered = filter(x -> contains(x, substring), strings)\n    return\
    \ filtered\nend", "    matches = []\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(matches, string)\n        end\n    end\n    return\
    \ matches\nend", "    return filter(x -> contains(x, substring), strings)\nend",
  "    str = []\n    for s in strings\n        if substring in s\n            push!(str,\
    \ s)\n        end\n    end\n    return str\nend", "    return [s for s in strings\
    \ if substring in s]\nend", "    fstrings = Vector{String}()\n    for s in strings\n\
    \        if occursin(substring, s)\n            push!(fstrings, s)\n        end\n\
    \    end\n    return fstrings\nend", "    filtered = []\n    for s in strings\n\
    \        if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    return [s for s in strings if substring\
    \ in s]\nend", "    filtered = []\n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    return filter(x -> contains(x, substring), strings)\nend",
  "    return [string for string in strings if substring in string]\nend", "    return\
    \ [string for string in strings if substring in string]\nend", "    filtered =\
    \ []\n    for string in strings\n        if findfirst(string, substring) != nothing\n\
    \            push!(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "    filtered = []\n    for string in strings\n        contains(string,\
    \ substring) && push!(filtered, string)\n    end\n    return filtered\nend", " \
    \ new_strs = []\n  for s in strings\n    if contains(s, substring)\n      push!(new_strs,\
    \ s)\n    end\n  end\n  return new_strs\nend", "    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    return filter(x -> occursin(substring, x), strings)\n\
    end", "    return filter(string -> contains(string, substring), strings)\nend",
  "  res = String[]\n  for s in strings\n    if contains(s, substring)\n      push!(res,\
    \ s)\n    end\n  end\n  return res\nend", "    indices = findin(substring, strings)\n\
    \    return strings[indices]\nend", "    filtered = []\n    for string in strings\n\
    \        if occursin(substring, string)\n            push!(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    return [s for s in strings\
    \ if substring in s]\nend", "    filtered = []\n    for string in strings\n  \
    \      if substring in string\n            push!(filtered, string)\n        end\n\
    \    end\n    return filtered\nend", "    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    return strings[findin.(strings, substring)]\nend",
  "    filter(x -> occursin(substring, x), strings)\nend", "    return filter(x ->\
    \ occursin(substring, x), strings)\nend", "    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    ret = String[]\n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(ret, s)\n        end\n    end\n    return ret\n\
    end", "    return [x for x in strings if substring in x]\nend", "    return [s\
    \ for s in strings if contains(s, substring)]\nend", "    filtered = []\n    for\
    \ str_ in strings\n        if contains(str_, substring)\n            push!(filtered,\
    \ str_)\n        end\n    end\n    return filtered\nend", "    filtered = []\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    return filter(x ->\
    \ occurin(substring, x), strings)\nend", "    out = []\n    for s in strings\n\
    \        if occursin(substring, s)\n            push!(out, s)\n        end\n \
    \   end\n    return out\nend", "    string_indices = findin(strings, substring)\n\
    \    return [strings[i] for i in string_indices]\nend", "    return strings[contains.(strings,\
    \ substring)]\nend", "    return [s for s in strings if substring in s]\nend",
  "    strings_filtered = []\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(strings_filtered, string)\n        end\n    end\n\
    \    return strings_filtered\nend", "    filtered = []\n    for s in strings\n\
    \        if ismatch(r\"$substring\", s)\n            push!(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\n ", "    filter(x -> occursin(substring,\
    \ x), strings)\nend", "    return filter(x -> occursin(substring, x), strings)\n\
    end", "    filtered = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend",
  "    return [s for s in strings if substring in s]\nend", "    filtered = String[]\n\
    \    for i in strings\n        if has_substring(i, substring)\n            push!(filtered,\
    \ i)\n        end\n    end\n    return filtered\nend", "    return filter(x ->\
    \ contains(x, substring), strings)\nend", "    return [s for s in strings if contains(s,\
    \ substring)]\nend", "    return [s for s in strings if substring in s]\nend",
  "    return filter(s -> contains(s, substring), strings)\nend", "    return [s for\
    \ s in strings if substring in s]\nend", "    filtered = []\n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    return [x for\
    \ x in strings if substring in x]\nend", "    filtered = String[]\n    for string\
    \ in strings\n        if occursin(substring, string)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    valid_strings\
    \ = String[]\n    for string in strings\n        if substring in string\n    \
    \        push!(valid_strings, string)\n        end\n    end\n    return valid_strings\n\
    end", "    # This function is already implemented for you.\n    # Follow along\
    \ to understand its behavior.\n    results = String[]\n    for s in strings\n\
    \        if occursin(substring, s)\n            push!(results, s)\n        end\n\
    \    end\n    return results\nend", "    filter(x -> occursin(substring, x), strings)\n\
    end", "    filtered = String[]\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend",
  "    return [string for string in strings if substring in string]\nend", "    return\
    \ filter(x -> contains(x, substring), strings)\nend", "    @assert length(substring)\
    \ > 0 \"filter_by_substring: substring must be non-empty\"\n    return strings[findin(strings,\
    \ substring)]\nend", "    filtered = Vector{String}()\n    for s in strings\n\
    \        if contains(s, substring)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    filtered = String[]\n    for string\
    \ in strings\n        if occursin(substring, string)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    filtered = [\
    \ string for string in strings if substring in string ]\n    return filtered\n\
    end", "    return [s for s in strings if contains(s, substring)]\nend\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")", "    return filter(x -> contains(x,\
    \ substring), strings)\nend", "    filtered = []\n    for s in strings\n     \
    \   if contains(s, substring)\n            push!(filtered, s)\n        end\n \
    \   end\n    return filtered\nend", "    return [s for s in strings if substr(s,\
    \ substring)]\nend", "    return [x for x in strings if substring in x]\nend",
  "    return filter(str -> contains(str, substring), strings)\nend", "    return\
    \ [s for s in strings if substring in s]\nend", "    return filter(string -> contains(string,\
    \ substring), strings)\nend", "    return filter(x -> contains(x, substring),\
    \ strings)\nend", "    return filter(x -> occursin(substring, x), strings)\nend",
  "    filtered = [string for string in strings if substring in string]\n    return\
    \ filtered\nend", "    return filter(e -> occursin(substring, e), strings)\nend",
  "    return [ s for s in strings if substring in s ]\nend", "    return [s for s\
    \ in strings if find(s, substring) != nothing]\nend", "    filtered = []\n   \
    \ for str_ in strings\n        if occursin(substring, str_)\n            push!(filtered,\
    \ str_)\n        end\n    end\n    return filtered\nend", "    return filter(x\
    \ -> contains(x, substring), strings)\nend", "    filter_indexes = findin(strings,\
    \ substring)\n    return strings[filter_indexes]\nend", "    filter(x -> occursin(substring,\
    \ x), strings)\nend", "    return filter(x -> x in substring, strings)\nend",
  "    array = Vector{String}()\n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(array, str)\n        end\n    end\n    return\
    \ array\nend\n ", "    strings[findin(strings, substring)]\nend", "    res = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(res,\
    \ s)\n        end\n    end\n    return res\nend", "    filtered = []\n    for\
    \ string in strings\n        if occursin(substring, string)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    return filter(x\
    \ -> contains(x, substring), strings)\nend", "    selected = Vector{String}()\n\
    \    for s in strings\n        if contains(s, substring)\n            push!(selected,\
    \ s)\n        end\n    end\n    return selected\nend", "    out::Vector{String}\
    \ = []\n    for st in strings\n        if contains(st, substring)\n          \
    \  push!(out, st)\n        end\n    end\n    return out\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
