name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that contain given\
  \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    for (i, s) in enumerate(strings)\n        if !occursin(substring,\
    \ s)\n            strings[i] = 0\n        end\n    end\n    return strings[strings\
    \ .!= 0]\nend", "    filter(s -> contains(s, substring), strings)\nend", "  return\
    \ [ s for s in strings if contains(s, substring) ]\nend", "    i = 0\n    while\
    \ i < length(strings)\n        if !contains(strings[i], substring)\n         \
    \   deleteat!(strings, i)\n        else\n            i += 1\n        end\n   \
    \ end\n    return strings\nend", "    return filter(x -> x \u2208 strings && contains(x,\
    \ substring), strings)\nend", "    filtered = filter(x -> contains(x, substring),\
    \ strings)\n    return filtered\nend", "    return filter(x -> occursin(substring,\
    \ x), strings)\nend", "    filtered = filter(x -> contains(x, substring), strings)\n\
    \    return filtered\nend", "  return [string for string in strings if substring\
    \ in string]\nend", "    return [s for s in strings if substring in s]\nend",
  "    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    return filter(x -> substring in x, strings)\nend", "  \
    \  strings_filtered = [string for string in strings if occursin(substring, string)]\n\
    \    return strings_filtered\nend", "    return filter(s -> occursin(substring,\
    \ s), strings)\nend\n \nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")", "    return filter(s -> occursin(substring, s), strings)\nend\n  \
    \  ", "    return [s for s in strings if substring in s]\nend", "    filtered\
    \ = String[]\n    for s in strings\n        if contains(s, substring)\n      \
    \      push!(filtered, s)\n        end\n    end\n    return filtered\nend", " \
    \   return [str for str in strings if substring in str]\nend", "    return filter(x\
    \ -> substring in x, strings)\nend", "    new_arr = String[]\n    for i in strings\n\
    \        if(findfirst(i, substring) != nothing)\n            push!(new_arr, i)\n\
    \        end\n    end\n    return new_arr\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
