name: HumanEval_153_Strongest_Extension
language: jl
results:
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n  strengths = [(ext, count(isupper, ext)\
    \ - count(islower, ext)) for ext in extensions]\n  println(strengths)\n  return\
    \ class_name * \".\" * maximum(strengths)[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpelutvazd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1]\
    \ (::var\"#1#2\")(ext::String)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect(itr::Base.Generator{Vector{String}, var\"#1#2\"})\n\
    \     @ Base ./array.jl:724\n   [4] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpelutvazd.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpelutvazd.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpelutvazd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpelutvazd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(ext::String)\n     @ Main ./none:0\n   [2] iterate\n \
    \    @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{String},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpelutvazd.jl:19\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpelutvazd.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpelutvazd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpelutvazd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: isupper not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(ext::String)\n     @ Main ./"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpelutvazd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    strength_vec = []\n    for ext in\
    \ extensions\n        strength_vec = push!(strength_vec, Count_Strength(ext))\n\
    \    end\n    if length(strength_vec) == 1\n        return class_name * \".\"\
    \ * extensions[1]\n    else\n        index = findmax(strength_vec)[2]\n      \
    \  return class_name * \".\" * extensions[index]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkij7o8qf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: Count_Strength not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpkij7o8qf.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkij7o8qf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkij7o8qf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkij7o8qf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: Count_Strength not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpkij7o8qf.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkij7o8qf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkij7o8qf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkij7o8qf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: Count_Strength\
    \ not defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpkij7o8qf.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkij7o8qf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkij7o8qf.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    max_strength = 0\n    strongest_extension\
    \ = \"\"\n    for ext in extensions\n        strength = sum(isupper.(ext)) - sum(islower.(ext))\n\
    \        if strength > max_strength\n            max_strength = strength\n   \
    \         strongest_extension = ext\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_9hu0xq.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1]\
    \ Strongest_Extension(class_name::String, extensions::Vector{String})\n     @\
    \ Main /tmp/tmpq_9hu0xq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_9hu0xq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_9hu0xq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq_9hu0xq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpq_9hu0xq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_9hu0xq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_9hu0xq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpq_9hu0xq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: isupper not\
    \ defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpq_9hu0xq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_9hu0xq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_9hu0xq.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    S = zeros(extensions)\n    for i in\
    \ 1:length(extensions)\n        for j in 1:length(extensions[i])\n           \
    \ if isupper(extensions[i][j])\n                S[i] += 1\n            else\n\
    \                S[i] -= 1\n            end\n        end\n    end\n    return\
    \ class_name * \".\" * extensions[findmax(S)[2]]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeexv9ckq.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  MethodError: no method matching zeros(::Vector{String})\n\
    \  Closest candidates are:\n    zeros(!Matched::Type{T}, !Matched::Union{Integer,\
    \ AbstractUnitRange}...) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\n\
    \    zeros(!Matched::Tuple{Vararg{Union{Integer, AbstractUnitRange}}}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:522\n\
    \    zeros(!Matched::Type{T}, !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpeexv9ckq.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeexv9ckq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeexv9ckq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeexv9ckq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  MethodError: no method matching zeros(::Vector{String})\n\
    \  Closest candidates are:\n    zeros(!Matched::Type{T}, !Matched::Union{Integer,\
    \ AbstractUnitRange}...) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\n\
    \    zeros(!Matched::Tuple{Vararg{Union{Integer, AbstractUnitRange}}}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:522\n\
    \    zeros(!Matched::Type{T}, !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpeexv9ckq.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeexv9ckq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    strengths = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        capitals = sum(isupper.(extension))\n\
    \        small_letters = sum(islower.(extension))\n        strength = capitals\
    \ - small_letters\n        if strength > strengths\n            strengths = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return(class_name\
    \ * \".\" * strongest_extension)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiegbwqnu.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1]\
    \ Strongest_Extension(class_name::String, extensions::Vector{String})\n     @\
    \ Main /tmp/tmpiegbwqnu.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiegbwqnu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiegbwqnu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpiegbwqnu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpiegbwqnu.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiegbwqnu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiegbwqnu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpiegbwqnu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: isupper not\
    \ defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpiegbwqnu.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiegbwqnu.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiegbwqnu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    best_extension = \"\"\n    best_strength\
    \ = 0.0\n    for extension in extensions\n        strength = count_upper(extension)\
    \ - count_lower(extension)\n        if strength > best_strength\n            best_strength\
    \ = strength\n            best_extension = extension\n        end\n    end\n \
    \   return class_name * \".\" * best_extension\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4w76htwn.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: count_upper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmp4w76htwn.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w76htwn.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4w76htwn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4w76htwn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: count_upper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmp4w76htwn.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w76htwn.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4w76htwn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4w76htwn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: count_upper\
    \ not defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmp4w76htwn.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w76htwn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4w76htwn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    # strongness of each extension\n \
    \   strengths = map(extension -> count_upper(extension) - count_lower(extension),\
    \ extensions)\n    # index of strongest\n    strongest_idx = indmax(strengths)\n\
    \    return \"$class_name.$(extensions[strongest_idx])\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl6fum7r2.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: count_upper not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(extension::String)\n      @ Main /tmp/tmpl6fum7r2.jl:20\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \      @ Main /tmp/tmpl6fum7r2.jl:20\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl6fum7r2.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpl6fum7r2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl6fum7r2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: count_upper not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(extension::String)\n      @ Main /tmp/tmpl6fum7r2.jl:20\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \      @ Main /tmp/tmpl6fum7r2.jl:20\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpl6fum7r2.jl:31 [inlined]\n\
    \    [9] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6fum7r2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    # YOUR CODE HERE\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmlylfg8t.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpmlylfg8t.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmlylfg8t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlylfg8t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmlylfg8t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpmlylfg8t.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlylfg8t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    class_name = \".\"*class_name\n  \
    \  strongest_ext = \"\"\n    max_strength = 0\n    for ext in extensions\n   \
    \     strength = sum(string.isupper(ext)) - sum(string.islower(ext))\n       \
    \ if strength > max_strength\n            max_strength = strength\n          \
    \  strongest_ext = ext\n        end\n    end\n    return class_name*\".\"*strongest_ext\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo_qq9sl7.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  type #string has no field isupper\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpo_qq9sl7.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo_qq9sl7.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo_qq9sl7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpo_qq9sl7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  type #string has no field isupper\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpo_qq9sl7.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo_qq9sl7.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo_qq9sl7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpo_qq9sl7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  type #string has no field isupper\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpo_qq9sl7.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo_qq9sl7.jl:38 [inlined]\n\
    \   [5] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_qq9sl7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    num_upper = x -> count(isupper, x)\n\
    \    num_lower = x -> count(islower, x)\n    s_ext = x -> num_upper(x) - num_lower(x)\n\
    \    curr_max = x -> (x[1], s_ext(x[1]))\n    strongest = foldl(curr_max, (\"\"\
    , 0.0), extensions)\n    return class_name * \".\" * strongest[1]\nend\n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\"\"\"You will be\
    \ given a dictionary (hash) and a set of keys. The first value\n    in the dictionary\
    \ is the definition of the word. You should return the\n    definition of the\
    \ most words that appear in the set. If several definitions\n    appear the same\
    \ number of times then you should return the definition\n    that has the most\
    \ words.\n    For example, if you are given the dictionary\n    {\"function\"\
    : [\"A function is a relation or expression involving one or more variables\"\
    ,\n    \"A function is a named section of a program that performs a specific task\"\
    ],\n    \"name\": [\"A name is a noun, pronoun, or other language unit that signifies\
    \ a person or thing\",\n    \"A name is a word or term used for identification.\"\
    ]}\n    and the set [\"function\", \"name\", \"name\"] then you should return\n\
    \    \"A name is a noun, pronoun, or other language unit that signifies a person\
    \ or thing\"\n    since it appears in the set two times and it has the most words.\n\
    \    Example:\n    >>> Most_Common_Definition({\"A\": [\"a\", \"b\"], \"B\": [\"\
    a\"]}, [\"A\", \"B\"])\n    \"a\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp4ev335pp.jl:48\nin expression starting at /tmp/tmp4ev335pp.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy0vmfews.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpy0vmfews.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0vmfews.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0vmfews.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpy0vmfews.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpy0vmfews.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0vmfews.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    if length(extensions) == 0\n     \
    \   return class_name\n    end\n    strength_vector = zeros(Int64, length(extensions))\n\
    \    for i in 1:length(extensions)\n        counter_upper = 0\n        counter_lower\
    \ = 0\n        for j in 1:length(extensions[i])\n            if string(extensions[i][j])\
    \ == uppercase(string(extensions[i][j]))\n                counter_upper += 1\n\
    \            else\n                counter_lower += 1\n            end\n     \
    \   end\n        strength_vector[i] = round(Int64, counter_upper - counter_lower)\n\
    \    end\n    return class_name * \".\" * extensions[findmax(strength_vector)[2]]\n\
    end\n# This cell will test your code.\n# You should not change anything below\
    \ this line.\n# Test Strongest_Extension\ntests = Test(\"Strongest_Extension\"\
    ,function=(Strongest_Extension, [\"class_name\",\"extensions\"]))\ntests.run()\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqdx38rog.jl:40\nin expression starting at /tmp/tmpqdx38rog.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    idx_strongest_extension = index_of_the_strongest_extension(extensions)\n\
    \    return \"$class_name.$(extensions[idx_strongest_extension])\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps338f22d.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: index_of_the_strongest_extension not defined\n\
    \  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmps338f22d.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps338f22d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps338f22d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmps338f22d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: index_of_the_strongest_extension\
    \ not defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmps338f22d.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps338f22d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps338f22d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmps338f22d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: index_of_the_strongest_extension\
    \ not defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmps338f22d.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps338f22d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps338f22d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    # your code here\nend\n@testset \"\
    Strongest extension\" begin\n    @test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    @test Strongest_Extension(\"\
    Sandwich\", [\"Paste\", \"Rice\", \"Cow\"]) == \"Sandwich.Rice\"\n    @test Strongest_Extension(\"\
    Car\", [\"Lamborghini\", \"Tesla\", \"McLaren\"]) == \"Car.Lamborghini\"\n   \
    \ @test Strongest_Extension(\"Burger\", [\"Fries\", \"Drink\", \"Shake\"]) ==\
    \ \"Burger.Drink\"\n    @test Strongest_Extension(\"Coffee\", [\"TEA\", \"LATTE\"\
    , \"cappuccino\"]) == \"Coffee.cappuccino\"\n    @test Strongest_Extension(\"\
    Milk\", [\"WATER\", \"DRINK\", \"SOY\"]) == \"Milk.WATER\"\n    @test Strongest_Extension(\"\
    Hamburger\", [\"Soda\", \"Salad\", \"Chips\"]) == \"Hamburger.Soda\"\n    @test\
    \ Strongest_Extension(\"HotDog\", [\"BEER\", \"Chips\", \"Soda\"]) == \"HotDog.BEER\"\
    \n    @test Strongest_Extension(\"drink\", [\"WATER\", \"JUICE\", \"coke\"]) ==\
    \ \"drink.WATER\"\n    @test Strongest_Extension(\"Drink\", [\"BEER\", \"Coffee\"\
    , \"Soda\"]) == \"Drink.Coffee\"\n    @test Strongest_Extension(\"Fruit\", [\"\
    ORANGE\", \"Apple\", \"Avocado\"]) == \"Fruit.ORANGE\"\n    @test Strongest_Extension(\"\
    Cake\", [\"Cheese\", \"Cookie\", \"Soda\"]) == \"Cake.Cookie\"\n    @test Strongest_Extension(\"\
    Candy\", [\"Gummies\", \"Bar\", \"Cake\"]) == \"Candy.Gummies\"\n    @test Strongest_Extension(\"\
    Bread\", [\"WHEAT\", \"Rye\", \"FREN\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj976y_tx.jl:41\nin expression starting at\
    \ /tmp/tmpj976y_tx.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    strength_extensions = [strength_extension(extension)\
    \ for extension in extensions]\n    strongest_extension = extensions[argmax(strength_extensions)]\n\
    \    return class_name * \".\" * strongest_extension\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk52r3v4i.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: strength_extension not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(extension::String)\n     @ Main ./none:0\n   [2] iterate\n\
    \     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{String},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpk52r3v4i.jl:19\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpk52r3v4i.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpk52r3v4i.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpk52r3v4i.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: strength_extension not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(extension::String)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{String},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpk52r3v4i.jl:19\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpk52r3v4i.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpk52r3v4i.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpk52r3v4i.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: strength_extension\
    \ not defined\n  Stacktrace:\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk52r3v4i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    sm = 0\n    cap = 0\n    strength\
    \ = 0\n    strongest_extension = \"\"\n    for e in extensions\n        cap =\
    \ sum(isupper.(e))\n        sm = sum(islower.(e))\n        s = cap - sm\n    \
    \    if s >= strength\n            strength = s\n            strongest_extension\
    \ = e\n        end\n    end\n    return string(class_name, \".\", strongest_extension)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa99zlvmh.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1]\
    \ Strongest_Extension(class_name::String, extensions::Vector{String})\n     @\
    \ Main /tmp/tmpa99zlvmh.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa99zlvmh.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa99zlvmh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpa99zlvmh.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpa99zlvmh.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa99zlvmh.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa99zlvmh.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpa99zlvmh.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: isupper not\
    \ defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpa99zlvmh.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa99zlvmh.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa99zlvmh.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    strength_data = []\n    for ext in\
    \ extensions\n        uppercase_count = sum(isuppercase.(ext))\n        lowercase_count\
    \ = sum(islowercase.(ext))\n        push!(strength_data, (ext, uppercase_count\
    \ - lowercase_count))\n    end\n    strength_data = sort(strength_data, by = x\
    \ -> x[2])\n    return \"$class_name.$(strength_data[end][1])\"\nend\n       \
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp45zdxzbe.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  MethodError: no method matching isuppercase(::String)\n\
    \  Closest candidates are:\n    isuppercase(!Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:324\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:875 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \      @ Main /tmp/tmp45zdxzbe.jl:21\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp45zdxzbe.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp45zdxzbe.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp45zdxzbe.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  MethodError: no method matching isuppercase(::String)\n\
    \  Closest candidates are:\n    isuppercase(!Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:324\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:875 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \      @ Main /tmp/tmp45zdxzbe.jl:21\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45zdxzbe.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    # Write your code here\n    strength\
    \ = 0\n    strength_key = 0\n    for i in 1:length(extensions)\n        if count(extensions[i],\
    \ \"A\"):!=0 || count(extensions[i], \"B\"):!=0 || \n            count(extensions[i],\
    \ \"C\"):!=0 || count(extensions[i], \"D\"):!=0 || \n            count(extensions[i],\
    \ \"E\"):!=0 || count(extensions[i], \"F\"):!=0 || \n            count(extensions[i],\
    \ \"G\"):!=0 || count(extensions[i], \"H\"):!=0 || \n            count(extensions[i],\
    \ \"I\"):!=0 || count(extensions[i], \"J\"):!=0 || \n            count(extensions[i],\
    \ \"K\"):!=0 || count(extensions[i], \"L\"):!=0 || \n            count(extensions[i],\
    \ \"M\"):!=0 || count(extensions[i], \"N\"):!=0 || \n            count(extensions[i],\
    \ \"O\"):!=0 || count(extensions[i], \"P\"):!=0 || \n            count(extensions[i],\
    \ \"Q\"):!=0 || count(extensions[i], \"R\"):!=0 || \n            count(extensions[i],\
    \ \"S\"):!=0 || count(extensions[i], \"T\"):!=0 || \n            count(extensions[i],\
    \ \"U\"):!=0 || count(extensions[i], \"V\"):!=0 || \n            count(extensions[i],\
    \ \"W\"):!=0 || count(extensions[i], \"X\"):!=0 || \n            count(extensions[i],\
    \ \"Y\"):!=0 || count(extensions[i], \"Z\"):!=0\n            strength_key += 1\n\
    \        end\n        if count(extensions[i], \"a\"):!=0 || count(extensions[i],\
    \ \"b\"):!=0 || \n            count(extensions[i],\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"!=\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jqdn7j3.jl:23\nin expression starting at\
    \ /tmp/tmp0jqdn7j3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    cap, sm = 0, 0\n    strength = 0.0\n\
    \    class_strength = 0.0\n    s = \"\"\n    for extension in extensions\n   \
    \     for letter in extension\n            if letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n                cap += 1\n            elseif letter in \"abcdefghijklmnopqrstuvwxyz\"\
    \n                sm += 1\n            end\n        end\n        class_strength\
    \ = cap - sm\n        if class_strength > strength\n            strength = class_strength\n\
    \            s = extension\n        end\n        cap, sm = 0, 0\n    end\n   \
    \ return class_name * \".\" * s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptp93gap5.jl:47\n  Expression: candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\"\n   Evaluated: \"__YESIMHERE.\" == \"__YESIMHERE.NuLl__\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp93gap5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp93gap5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmptp93gap5.jl:49\n  Expression: candidate(\"__HAHA\", [\"Tab\"\
    , \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\n   Evaluated: \"__HAHA.\"\
    \ == \"__HAHA.123\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp93gap5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp93gap5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmptp93gap5.jl:52\n  Expression: candidate(\"_\", [\"Bb\", \"\
    91245\"]) == \"_.Bb\"\n   Evaluated: \"_.\" == \"_.Bb\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp93gap5.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp93gap5.jl:44\ntest set: Test\
    \ Failed at /tmp/tmptp93gap5.jl:53\n  Expression: candidate(\"Sp\", [\"671235\"\
    , \"Bb\"]) == \"Sp.671235\"\n   Evaluated: \"Sp.\" == \"Sp.671235\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp93gap5.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp93gap5.jl:44\nTest Summary:\
    \ |"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptp93gap5.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You will be given the name of a class (a string) and a vector of\
    \ extensions.\n    The extensions are to be used to load additional classes to\
    \ the class. The\n    strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n    letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n    in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
    \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
    \    If there are two or more extensions with the same strength, you should\n\
    \    choose the one that comes first in the vector.\n    For example, if you are\
    \ given \"Slices\" as the class and a vector of the\n    extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n   \
    \ Example:\n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    ])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    streng = 0\n    str_ext = \"\
    \"\n    for i in 1:length(extensions)\n        ext = extensions[i]\n        num_of_caps\
    \ = sum(isupper.(ext))\n        num_of_smalls = sum(islower.(ext))\n        if\
    \ streng < num_of_caps - num_of_smalls\n            streng = num_of_caps - num_of_smalls\n\
    \            str_ext = ext\n        end\n    end\n    return class_name * \".\"\
    \ * str_ext\nend\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpidqlys5q.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n   [1]\
    \ Strongest_Extension(class_name::String, extensions::Vector{String})\n     @\
    \ Main /tmp/tmpidqlys5q.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidqlys5q.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidqlys5q.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpidqlys5q.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpidqlys5q.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidqlys5q.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidqlys5q.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpidqlys5q.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: isupper not\
    \ defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpidqlys5q.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidqlys5q.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidqlys5q.jl:35\n"
  exit_code: 1
  status: SyntaxError
