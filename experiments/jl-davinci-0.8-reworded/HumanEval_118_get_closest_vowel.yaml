name: HumanEval_118_get_closest_vowel
language: jl
prompt: "\"\"\"You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    two consonants from the right side of the word (case sensitive).\n\
  \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
  \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
  \ that the given string contains English letter only.\n\n    Example:\n    >>> get_closest_vowel(\"\
  yogurt\")\n    \"u\"\n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"\
  quick\")\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \"\"\"\nfunction\
  \ get_closest_vowel(word::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
  yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
  easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
  ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
  \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
  )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
  )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\n\
  end\n"
completions: ["    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n\
    \        if word[i] in vowels && word[i-1] not in vowels\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend\n ", "    if match(r\"^[aeiou]\",\
    \ lowercase(word)) != nothing\n        return \"\"\n    end\n    if match(r\"\
    [aeiou]$\", lowercase(word)) != nothing\n        return \"\"\n    end\n    lowercase_word\
    \ = lowercase(word)\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for\
    \ (i, letter) in enumerate(lowercase_word)\n        if letter in vowels\n    \
    \        index = i\n            break\n        end\n    end\n    return word[index]\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, character)\
    \ in enumerate(reverse(word))\n        if character in vowels\n            if\
    \ index == 1\n                if word[end] in vowels return character end\n  \
    \          elseif word[end-index] in vowels return character end\n        end\n\
    \    end\n    return \"\"\nend", "    if length(word) < 3\n        return \"\"\
    \n    end\n    if !((word[end-1] in \"AEIOUaeiou\") || (word[end] in \"AEIOUaeiou\"\
    ))\n        return \"\"\n    end\n    if (word[end-1] in \"AEIOUaeiou\")\n   \
    \     return \"\"\n    end\n    for i in range(end-1, 0, -1)\n        if word[i]\
    \ in \"AEIOUaeiou\"\n            return word[i]\n        end\n    end\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in eachindex(word)\n\
    \        if word[i] in vowels\n            if i != 1 && word[i-1] in vowels\n\
    \                continue\n            elseif i != length(word) && word[i+1] in\
    \ vowels\n                continue\n            else\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    if length(word)\
    \ <= 1 || !isascii(word)\n        return \"\"\n    end", "    \n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    indexes = []\n    for i in 1:length(word)\n\
    \        if word[i] in vowels \n            push!(indexes, i)\n        end\n \
    \   end\n    \n    if length(indexes) == 0\n        return \"\"\n    end\n   \
    \ \n    for i in 1:length(indexes)\n        if indexes[i] == length(word)\n  \
    \          continue\n        end\n        if i > 1 && (word[indexes[i]] in [\"\
    a\", \"e\"] && (word[indexes[i] - 1] in vowels))\n            continue\n     \
    \   end\n        if (word[indexes[i] + 1] in vowels) || (word[indexes[i]] in [\"\
    u\", \"o\"] && word[indexes[i] + 1] in [\"r\", \"l\"])\n            continue\n\
    \        end\n        return word[indexes[i]]\n    end\n    return \"\"\nend",
  "    if length(word) < 2\n        return \"\"\n    end\n    iter = reverse(word)\n\
    \    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    cur_vowel = \"!\"\n    cur_consonant = \"!\"\n    for char in iter\n   \
    \     if indexin(char,vowels) > 0\n            cur_vowel = char\n        elseif\
    \ indexin(char,consonants) > 0\n            cur_consonant = char\n        end\n\
    \        if cur_vowel != \"!\" && cur_consonant != \"!\"\n            return cur_vowel\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    # Get the reversed word so we could loop the word right\
    \ to left\n    word_rev = reverse(word)\n    # loop through the word right to\
    \ left and break if the first vowel is found\n    # between two consonants\n \
    \   for i in 1:length(word_rev)\n        if word_rev[i] in vowels && \n      \
    \      (i == length(word_rev) || word_rev[i+1] \u2209 vowels) && \n          \
    \  (i == 1 || word_rev[i-1] \u2209 vowels)\n            return word_rev[i]\n \
    \       end\n    end\n    # return empty string if no vowel is found\n    return\
    \ \"\"\nend", "    if length(word) == 1\n        return \"\"\n    end\n    if\
    \ isvowel(word[end])\n        word = word[1:end-1]\n    end\n    for i = length(word):-1:1\n\
    \        if isvowel(word[i]) && !isvowel(word[i-1])\n            return word[i]\n\
    \        end\n    end\n    return \"\"\nend", "    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    for i = length(word):-1:1\n        if word[i] in vowels\n\
    \            if (word[i-1] in vowels) && (word[i+1] in vowels)\n             \
    \   return \"\"\n            else\n                return word[i]\n          \
    \  end\n        end\n    end\n    return \"\"\nend", "    # this is the index\
    \ of the first consonent \n    firstCons = searchfirst(x->x in \"aeiou\", word)\n\
    \    if firstCons == nothing\n        return \"\"\n    end\n    right = word[firstCons:]\n\
    \    lastCons = searchlast(x->x in \"aeiou\", right)\n    # check if the last\
    \ char is a vowel\n    if lastCons == nothing\n        return \"\"\n    end\n\
    \    closest = abs(lastCons-length(right))\n    vowel = \"\"\n    for (idx,v)\
    \ in enumerate(right)\n        if v in \"aeiou\"\n            if abs(length(right)-idx)\
    \ <= closest\n                closest = abs(length(right)-idx)\n             \
    \   vowel = v\n            end\n        end\n    end\n    return vowel\nend",
  "    n=length(word)\n    index=0\n    for i in 1:n-1\n        if word[i] in 'aeiouAEIOU'\n\
    \            if word[i-1] in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' \n \
    \           && word[i+1] in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n   \
    \             index=i\n            end\n        end\n    end\n    if index==0\n\
    \        return \"\"\n    else\n        return word[index]\n    end\nend", " \
    \   if length(word) < 3\n        return \"\"\n    end\n    vowels = Set(['a',\
    \ 'e', 'i', 'o', 'u'])\n    consonants = Set(['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'])\n   \
    \ map = Dict()\n    vowels_count = 0\n    for i in 1:length(word)\n        if\
    \ word[i] in vowels \n            map[i] = vowels_count\n            vowels_count\
    \ += 1\n        elseif word[i] in consonants\n            map[i] = -1\n      \
    \  end\n    end\n    for i in length(word):-1:1\n        if map[i] != -1\n   \
    \         if (map[i+1] == -1) && (map[i-1] == -1)\n                return word[i]\n\
    \            end\n        end\n    end\n    return \"\"\nend", "    # get the\
    \ vowel index (not 0-based!)\n    vowel_index = findlast(x -> x in Set('aeiouAEIOU'),\
    \ collect(reverse(word)))\n    if vowel_index == nothing \n        return \"\"\
    \n    end\n    # -1 for indexing\n    vowel_index = vowel_index - 1\n    # if\
    \ the vowel is the last char or the first char, return \"\"\n    if vowel_index\
    \ == length(word) || vowel_index == 0\n        return \"\"\n    end\n    if word[vowel_index-1]\
    \ in Set('aeiouAEIOU') || word[vowel_index+1] in Set('aeiouAEIOU')\n        return\
    \ \"\"\n    end\n    return word[vowel_index]\nend\nprintln(get_closest_vowel(\"\
    yogurt\"))\nprintln(get_closest_vowel(\"FULL\"))\nprintln(get_closest_vowel(\"\
    quick\"))\nprintln(get_closest_vowel(\"ab\"))", "    vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n    word = reverse(word)\n\
    \    last_vowel = 0\n    for i = 1:length(word)\n        if word[i] in vowels\n\
    \            last_vowel = i\n        elseif last_vowel != 0\n            break\n\
    \        end\n    end\n    if last_vowel == 0\n        return \"\"\n    else\n\
    \        return word[last_vowel]\n    end\nend", "    res = \"\"\n    word = reverse(word)\n\
    \    for i in eachindex(word)\n        if word[i] in (\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n            if i != length(word) && !(word[i+1] in (\"a\", \"e\"\
    , \"i\", \"o\", \"u\"))\n                res = word[i]\n                break\n\
    \            end\n        end\n    end\n    return res\nend", "    if(length(word)\
    \ > 1)\n        vowels = [vowel for vowel in \"aeiouAEIOU\"]\n        found =\
    \ false\n        i = length(word)\n        while i > 1\n            if(word[i]\
    \ in vowels)\n                if(!(word[i-1] in vowels))\n                   \
    \ found = true\n                    return word[i]\n                end\n    \
    \        end\n            i -= 1\n        end\n        if(!found)\n          \
    \  return \"\"\n        end\n    else\n        return \"\"\n    end\nend", " \
    \   vowels = findall(r\"[aeiou]\", word)\n    if length(vowels) == 0\n       \
    \ return \"\"\n    end\n    for i in rev(eachindex(word))\n        if word[i]\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            return word[i]\n       \
    \ end\n    end\nend", "    VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word\
    \ = reverse(word)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
